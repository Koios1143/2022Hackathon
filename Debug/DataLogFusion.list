
DataLogFusion.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001594c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000d88  08015a0c  08015a0c  00025a0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08016794  08016794  000302dc  2**0
                  CONTENTS
  4 .ARM          00000008  08016794  08016794  00026794  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801679c  0801679c  000302dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801679c  0801679c  0002679c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080167a0  080167a0  000267a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002dc  20000000  080167a4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001388  200002dc  08016a80  000302dc  2**2
                  ALLOC
 10 ._user_heap_stack 00002804  20001664  08016a80  00031664  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000302dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003eda0  00000000  00000000  00030304  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000059f7  00000000  00000000  0006f0a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000033f8  00000000  00000000  00074aa0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00003188  00000000  00000000  00077e98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001befa  00000000  00000000  0007b020  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002e7b8  00000000  00000000  00096f1a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a1529  00000000  00000000  000c56d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000a3  00000000  00000000  00166bfb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000cc70  00000000  00000000  00166ca0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200002dc 	.word	0x200002dc
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080159f4 	.word	0x080159f4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200002e0 	.word	0x200002e0
 8000104:	080159f4 	.word	0x080159f4

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f8f0 	bl	8000404 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__divsi3>:
 8000230:	4603      	mov	r3, r0
 8000232:	430b      	orrs	r3, r1
 8000234:	d47f      	bmi.n	8000336 <__divsi3+0x106>
 8000236:	2200      	movs	r2, #0
 8000238:	0843      	lsrs	r3, r0, #1
 800023a:	428b      	cmp	r3, r1
 800023c:	d374      	bcc.n	8000328 <__divsi3+0xf8>
 800023e:	0903      	lsrs	r3, r0, #4
 8000240:	428b      	cmp	r3, r1
 8000242:	d35f      	bcc.n	8000304 <__divsi3+0xd4>
 8000244:	0a03      	lsrs	r3, r0, #8
 8000246:	428b      	cmp	r3, r1
 8000248:	d344      	bcc.n	80002d4 <__divsi3+0xa4>
 800024a:	0b03      	lsrs	r3, r0, #12
 800024c:	428b      	cmp	r3, r1
 800024e:	d328      	bcc.n	80002a2 <__divsi3+0x72>
 8000250:	0c03      	lsrs	r3, r0, #16
 8000252:	428b      	cmp	r3, r1
 8000254:	d30d      	bcc.n	8000272 <__divsi3+0x42>
 8000256:	22ff      	movs	r2, #255	; 0xff
 8000258:	0209      	lsls	r1, r1, #8
 800025a:	ba12      	rev	r2, r2
 800025c:	0c03      	lsrs	r3, r0, #16
 800025e:	428b      	cmp	r3, r1
 8000260:	d302      	bcc.n	8000268 <__divsi3+0x38>
 8000262:	1212      	asrs	r2, r2, #8
 8000264:	0209      	lsls	r1, r1, #8
 8000266:	d065      	beq.n	8000334 <__divsi3+0x104>
 8000268:	0b03      	lsrs	r3, r0, #12
 800026a:	428b      	cmp	r3, r1
 800026c:	d319      	bcc.n	80002a2 <__divsi3+0x72>
 800026e:	e000      	b.n	8000272 <__divsi3+0x42>
 8000270:	0a09      	lsrs	r1, r1, #8
 8000272:	0bc3      	lsrs	r3, r0, #15
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x4c>
 8000278:	03cb      	lsls	r3, r1, #15
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b83      	lsrs	r3, r0, #14
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x58>
 8000284:	038b      	lsls	r3, r1, #14
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0b43      	lsrs	r3, r0, #13
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x64>
 8000290:	034b      	lsls	r3, r1, #13
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0b03      	lsrs	r3, r0, #12
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x70>
 800029c:	030b      	lsls	r3, r1, #12
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0ac3      	lsrs	r3, r0, #11
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x7c>
 80002a8:	02cb      	lsls	r3, r1, #11
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a83      	lsrs	r3, r0, #10
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x88>
 80002b4:	028b      	lsls	r3, r1, #10
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0a43      	lsrs	r3, r0, #9
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x94>
 80002c0:	024b      	lsls	r3, r1, #9
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0a03      	lsrs	r3, r0, #8
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0xa0>
 80002cc:	020b      	lsls	r3, r1, #8
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	d2cd      	bcs.n	8000270 <__divsi3+0x40>
 80002d4:	09c3      	lsrs	r3, r0, #7
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xae>
 80002da:	01cb      	lsls	r3, r1, #7
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0983      	lsrs	r3, r0, #6
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xba>
 80002e6:	018b      	lsls	r3, r1, #6
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	0943      	lsrs	r3, r0, #5
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xc6>
 80002f2:	014b      	lsls	r3, r1, #5
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0903      	lsrs	r3, r0, #4
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xd2>
 80002fe:	010b      	lsls	r3, r1, #4
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	08c3      	lsrs	r3, r0, #3
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xde>
 800030a:	00cb      	lsls	r3, r1, #3
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0883      	lsrs	r3, r0, #2
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xea>
 8000316:	008b      	lsls	r3, r1, #2
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0843      	lsrs	r3, r0, #1
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xf6>
 8000322:	004b      	lsls	r3, r1, #1
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	1a41      	subs	r1, r0, r1
 800032a:	d200      	bcs.n	800032e <__divsi3+0xfe>
 800032c:	4601      	mov	r1, r0
 800032e:	4152      	adcs	r2, r2
 8000330:	4610      	mov	r0, r2
 8000332:	4770      	bx	lr
 8000334:	e05d      	b.n	80003f2 <__divsi3+0x1c2>
 8000336:	0fca      	lsrs	r2, r1, #31
 8000338:	d000      	beq.n	800033c <__divsi3+0x10c>
 800033a:	4249      	negs	r1, r1
 800033c:	1003      	asrs	r3, r0, #32
 800033e:	d300      	bcc.n	8000342 <__divsi3+0x112>
 8000340:	4240      	negs	r0, r0
 8000342:	4053      	eors	r3, r2
 8000344:	2200      	movs	r2, #0
 8000346:	469c      	mov	ip, r3
 8000348:	0903      	lsrs	r3, r0, #4
 800034a:	428b      	cmp	r3, r1
 800034c:	d32d      	bcc.n	80003aa <__divsi3+0x17a>
 800034e:	0a03      	lsrs	r3, r0, #8
 8000350:	428b      	cmp	r3, r1
 8000352:	d312      	bcc.n	800037a <__divsi3+0x14a>
 8000354:	22fc      	movs	r2, #252	; 0xfc
 8000356:	0189      	lsls	r1, r1, #6
 8000358:	ba12      	rev	r2, r2
 800035a:	0a03      	lsrs	r3, r0, #8
 800035c:	428b      	cmp	r3, r1
 800035e:	d30c      	bcc.n	800037a <__divsi3+0x14a>
 8000360:	0189      	lsls	r1, r1, #6
 8000362:	1192      	asrs	r2, r2, #6
 8000364:	428b      	cmp	r3, r1
 8000366:	d308      	bcc.n	800037a <__divsi3+0x14a>
 8000368:	0189      	lsls	r1, r1, #6
 800036a:	1192      	asrs	r2, r2, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d304      	bcc.n	800037a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	d03a      	beq.n	80003ea <__divsi3+0x1ba>
 8000374:	1192      	asrs	r2, r2, #6
 8000376:	e000      	b.n	800037a <__divsi3+0x14a>
 8000378:	0989      	lsrs	r1, r1, #6
 800037a:	09c3      	lsrs	r3, r0, #7
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x154>
 8000380:	01cb      	lsls	r3, r1, #7
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0983      	lsrs	r3, r0, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x160>
 800038c:	018b      	lsls	r3, r1, #6
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	0943      	lsrs	r3, r0, #5
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x16c>
 8000398:	014b      	lsls	r3, r1, #5
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0903      	lsrs	r3, r0, #4
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x178>
 80003a4:	010b      	lsls	r3, r1, #4
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	08c3      	lsrs	r3, r0, #3
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x184>
 80003b0:	00cb      	lsls	r3, r1, #3
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0883      	lsrs	r3, r0, #2
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x190>
 80003bc:	008b      	lsls	r3, r1, #2
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	d2d9      	bcs.n	8000378 <__divsi3+0x148>
 80003c4:	0843      	lsrs	r3, r0, #1
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d301      	bcc.n	80003ce <__divsi3+0x19e>
 80003ca:	004b      	lsls	r3, r1, #1
 80003cc:	1ac0      	subs	r0, r0, r3
 80003ce:	4152      	adcs	r2, r2
 80003d0:	1a41      	subs	r1, r0, r1
 80003d2:	d200      	bcs.n	80003d6 <__divsi3+0x1a6>
 80003d4:	4601      	mov	r1, r0
 80003d6:	4663      	mov	r3, ip
 80003d8:	4152      	adcs	r2, r2
 80003da:	105b      	asrs	r3, r3, #1
 80003dc:	4610      	mov	r0, r2
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x1b4>
 80003e0:	4240      	negs	r0, r0
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d500      	bpl.n	80003e8 <__divsi3+0x1b8>
 80003e6:	4249      	negs	r1, r1
 80003e8:	4770      	bx	lr
 80003ea:	4663      	mov	r3, ip
 80003ec:	105b      	asrs	r3, r3, #1
 80003ee:	d300      	bcc.n	80003f2 <__divsi3+0x1c2>
 80003f0:	4240      	negs	r0, r0
 80003f2:	b501      	push	{r0, lr}
 80003f4:	2000      	movs	r0, #0
 80003f6:	f000 f805 	bl	8000404 <__aeabi_idiv0>
 80003fa:	bd02      	pop	{r1, pc}

080003fc <__aeabi_idivmod>:
 80003fc:	2900      	cmp	r1, #0
 80003fe:	d0f8      	beq.n	80003f2 <__divsi3+0x1c2>
 8000400:	e716      	b.n	8000230 <__divsi3>
 8000402:	4770      	bx	lr

08000404 <__aeabi_idiv0>:
 8000404:	4770      	bx	lr
 8000406:	46c0      	nop			; (mov r8, r8)

08000408 <__aeabi_cfrcmple>:
 8000408:	4684      	mov	ip, r0
 800040a:	0008      	movs	r0, r1
 800040c:	4661      	mov	r1, ip
 800040e:	e7ff      	b.n	8000410 <__aeabi_cfcmpeq>

08000410 <__aeabi_cfcmpeq>:
 8000410:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000412:	f000 fc87 	bl	8000d24 <__lesf2>
 8000416:	2800      	cmp	r0, #0
 8000418:	d401      	bmi.n	800041e <__aeabi_cfcmpeq+0xe>
 800041a:	2100      	movs	r1, #0
 800041c:	42c8      	cmn	r0, r1
 800041e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000420 <__aeabi_fcmpeq>:
 8000420:	b510      	push	{r4, lr}
 8000422:	f000 fc13 	bl	8000c4c <__eqsf2>
 8000426:	4240      	negs	r0, r0
 8000428:	3001      	adds	r0, #1
 800042a:	bd10      	pop	{r4, pc}

0800042c <__aeabi_fcmplt>:
 800042c:	b510      	push	{r4, lr}
 800042e:	f000 fc79 	bl	8000d24 <__lesf2>
 8000432:	2800      	cmp	r0, #0
 8000434:	db01      	blt.n	800043a <__aeabi_fcmplt+0xe>
 8000436:	2000      	movs	r0, #0
 8000438:	bd10      	pop	{r4, pc}
 800043a:	2001      	movs	r0, #1
 800043c:	bd10      	pop	{r4, pc}
 800043e:	46c0      	nop			; (mov r8, r8)

08000440 <__aeabi_fcmple>:
 8000440:	b510      	push	{r4, lr}
 8000442:	f000 fc6f 	bl	8000d24 <__lesf2>
 8000446:	2800      	cmp	r0, #0
 8000448:	dd01      	ble.n	800044e <__aeabi_fcmple+0xe>
 800044a:	2000      	movs	r0, #0
 800044c:	bd10      	pop	{r4, pc}
 800044e:	2001      	movs	r0, #1
 8000450:	bd10      	pop	{r4, pc}
 8000452:	46c0      	nop			; (mov r8, r8)

08000454 <__aeabi_fcmpgt>:
 8000454:	b510      	push	{r4, lr}
 8000456:	f000 fc1f 	bl	8000c98 <__gesf2>
 800045a:	2800      	cmp	r0, #0
 800045c:	dc01      	bgt.n	8000462 <__aeabi_fcmpgt+0xe>
 800045e:	2000      	movs	r0, #0
 8000460:	bd10      	pop	{r4, pc}
 8000462:	2001      	movs	r0, #1
 8000464:	bd10      	pop	{r4, pc}
 8000466:	46c0      	nop			; (mov r8, r8)

08000468 <__aeabi_fcmpge>:
 8000468:	b510      	push	{r4, lr}
 800046a:	f000 fc15 	bl	8000c98 <__gesf2>
 800046e:	2800      	cmp	r0, #0
 8000470:	da01      	bge.n	8000476 <__aeabi_fcmpge+0xe>
 8000472:	2000      	movs	r0, #0
 8000474:	bd10      	pop	{r4, pc}
 8000476:	2001      	movs	r0, #1
 8000478:	bd10      	pop	{r4, pc}
 800047a:	46c0      	nop			; (mov r8, r8)

0800047c <__aeabi_uldivmod>:
 800047c:	2b00      	cmp	r3, #0
 800047e:	d111      	bne.n	80004a4 <__aeabi_uldivmod+0x28>
 8000480:	2a00      	cmp	r2, #0
 8000482:	d10f      	bne.n	80004a4 <__aeabi_uldivmod+0x28>
 8000484:	2900      	cmp	r1, #0
 8000486:	d100      	bne.n	800048a <__aeabi_uldivmod+0xe>
 8000488:	2800      	cmp	r0, #0
 800048a:	d002      	beq.n	8000492 <__aeabi_uldivmod+0x16>
 800048c:	2100      	movs	r1, #0
 800048e:	43c9      	mvns	r1, r1
 8000490:	0008      	movs	r0, r1
 8000492:	b407      	push	{r0, r1, r2}
 8000494:	4802      	ldr	r0, [pc, #8]	; (80004a0 <__aeabi_uldivmod+0x24>)
 8000496:	a102      	add	r1, pc, #8	; (adr r1, 80004a0 <__aeabi_uldivmod+0x24>)
 8000498:	1840      	adds	r0, r0, r1
 800049a:	9002      	str	r0, [sp, #8]
 800049c:	bd03      	pop	{r0, r1, pc}
 800049e:	46c0      	nop			; (mov r8, r8)
 80004a0:	ffffff65 	.word	0xffffff65
 80004a4:	b403      	push	{r0, r1}
 80004a6:	4668      	mov	r0, sp
 80004a8:	b501      	push	{r0, lr}
 80004aa:	9802      	ldr	r0, [sp, #8]
 80004ac:	f000 f84c 	bl	8000548 <__udivmoddi4>
 80004b0:	9b01      	ldr	r3, [sp, #4]
 80004b2:	469e      	mov	lr, r3
 80004b4:	b002      	add	sp, #8
 80004b6:	bc0c      	pop	{r2, r3}
 80004b8:	4770      	bx	lr
 80004ba:	46c0      	nop			; (mov r8, r8)

080004bc <__aeabi_lmul>:
 80004bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004be:	46ce      	mov	lr, r9
 80004c0:	4647      	mov	r7, r8
 80004c2:	b580      	push	{r7, lr}
 80004c4:	0007      	movs	r7, r0
 80004c6:	4699      	mov	r9, r3
 80004c8:	0c3b      	lsrs	r3, r7, #16
 80004ca:	469c      	mov	ip, r3
 80004cc:	0413      	lsls	r3, r2, #16
 80004ce:	0c1b      	lsrs	r3, r3, #16
 80004d0:	001d      	movs	r5, r3
 80004d2:	000e      	movs	r6, r1
 80004d4:	4661      	mov	r1, ip
 80004d6:	0400      	lsls	r0, r0, #16
 80004d8:	0c14      	lsrs	r4, r2, #16
 80004da:	0c00      	lsrs	r0, r0, #16
 80004dc:	4345      	muls	r5, r0
 80004de:	434b      	muls	r3, r1
 80004e0:	4360      	muls	r0, r4
 80004e2:	4361      	muls	r1, r4
 80004e4:	18c0      	adds	r0, r0, r3
 80004e6:	0c2c      	lsrs	r4, r5, #16
 80004e8:	1820      	adds	r0, r4, r0
 80004ea:	468c      	mov	ip, r1
 80004ec:	4283      	cmp	r3, r0
 80004ee:	d903      	bls.n	80004f8 <__aeabi_lmul+0x3c>
 80004f0:	2380      	movs	r3, #128	; 0x80
 80004f2:	025b      	lsls	r3, r3, #9
 80004f4:	4698      	mov	r8, r3
 80004f6:	44c4      	add	ip, r8
 80004f8:	4649      	mov	r1, r9
 80004fa:	4379      	muls	r1, r7
 80004fc:	4372      	muls	r2, r6
 80004fe:	0c03      	lsrs	r3, r0, #16
 8000500:	4463      	add	r3, ip
 8000502:	042d      	lsls	r5, r5, #16
 8000504:	0c2d      	lsrs	r5, r5, #16
 8000506:	18c9      	adds	r1, r1, r3
 8000508:	0400      	lsls	r0, r0, #16
 800050a:	1940      	adds	r0, r0, r5
 800050c:	1889      	adds	r1, r1, r2
 800050e:	bcc0      	pop	{r6, r7}
 8000510:	46b9      	mov	r9, r7
 8000512:	46b0      	mov	r8, r6
 8000514:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000516:	46c0      	nop			; (mov r8, r8)

08000518 <__aeabi_f2uiz>:
 8000518:	219e      	movs	r1, #158	; 0x9e
 800051a:	b510      	push	{r4, lr}
 800051c:	05c9      	lsls	r1, r1, #23
 800051e:	1c04      	adds	r4, r0, #0
 8000520:	f7ff ffa2 	bl	8000468 <__aeabi_fcmpge>
 8000524:	2800      	cmp	r0, #0
 8000526:	d103      	bne.n	8000530 <__aeabi_f2uiz+0x18>
 8000528:	1c20      	adds	r0, r4, #0
 800052a:	f000 ff29 	bl	8001380 <__aeabi_f2iz>
 800052e:	bd10      	pop	{r4, pc}
 8000530:	219e      	movs	r1, #158	; 0x9e
 8000532:	1c20      	adds	r0, r4, #0
 8000534:	05c9      	lsls	r1, r1, #23
 8000536:	f000 fd5f 	bl	8000ff8 <__aeabi_fsub>
 800053a:	f000 ff21 	bl	8001380 <__aeabi_f2iz>
 800053e:	2380      	movs	r3, #128	; 0x80
 8000540:	061b      	lsls	r3, r3, #24
 8000542:	469c      	mov	ip, r3
 8000544:	4460      	add	r0, ip
 8000546:	e7f2      	b.n	800052e <__aeabi_f2uiz+0x16>

08000548 <__udivmoddi4>:
 8000548:	b5f0      	push	{r4, r5, r6, r7, lr}
 800054a:	4657      	mov	r7, sl
 800054c:	464e      	mov	r6, r9
 800054e:	4645      	mov	r5, r8
 8000550:	46de      	mov	lr, fp
 8000552:	b5e0      	push	{r5, r6, r7, lr}
 8000554:	0004      	movs	r4, r0
 8000556:	000d      	movs	r5, r1
 8000558:	4692      	mov	sl, r2
 800055a:	4699      	mov	r9, r3
 800055c:	b083      	sub	sp, #12
 800055e:	428b      	cmp	r3, r1
 8000560:	d830      	bhi.n	80005c4 <__udivmoddi4+0x7c>
 8000562:	d02d      	beq.n	80005c0 <__udivmoddi4+0x78>
 8000564:	4649      	mov	r1, r9
 8000566:	4650      	mov	r0, sl
 8000568:	f000 ffd8 	bl	800151c <__clzdi2>
 800056c:	0029      	movs	r1, r5
 800056e:	0006      	movs	r6, r0
 8000570:	0020      	movs	r0, r4
 8000572:	f000 ffd3 	bl	800151c <__clzdi2>
 8000576:	1a33      	subs	r3, r6, r0
 8000578:	4698      	mov	r8, r3
 800057a:	3b20      	subs	r3, #32
 800057c:	469b      	mov	fp, r3
 800057e:	d433      	bmi.n	80005e8 <__udivmoddi4+0xa0>
 8000580:	465a      	mov	r2, fp
 8000582:	4653      	mov	r3, sl
 8000584:	4093      	lsls	r3, r2
 8000586:	4642      	mov	r2, r8
 8000588:	001f      	movs	r7, r3
 800058a:	4653      	mov	r3, sl
 800058c:	4093      	lsls	r3, r2
 800058e:	001e      	movs	r6, r3
 8000590:	42af      	cmp	r7, r5
 8000592:	d83a      	bhi.n	800060a <__udivmoddi4+0xc2>
 8000594:	42af      	cmp	r7, r5
 8000596:	d100      	bne.n	800059a <__udivmoddi4+0x52>
 8000598:	e078      	b.n	800068c <__udivmoddi4+0x144>
 800059a:	465b      	mov	r3, fp
 800059c:	1ba4      	subs	r4, r4, r6
 800059e:	41bd      	sbcs	r5, r7
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	da00      	bge.n	80005a6 <__udivmoddi4+0x5e>
 80005a4:	e075      	b.n	8000692 <__udivmoddi4+0x14a>
 80005a6:	2200      	movs	r2, #0
 80005a8:	2300      	movs	r3, #0
 80005aa:	9200      	str	r2, [sp, #0]
 80005ac:	9301      	str	r3, [sp, #4]
 80005ae:	2301      	movs	r3, #1
 80005b0:	465a      	mov	r2, fp
 80005b2:	4093      	lsls	r3, r2
 80005b4:	9301      	str	r3, [sp, #4]
 80005b6:	2301      	movs	r3, #1
 80005b8:	4642      	mov	r2, r8
 80005ba:	4093      	lsls	r3, r2
 80005bc:	9300      	str	r3, [sp, #0]
 80005be:	e028      	b.n	8000612 <__udivmoddi4+0xca>
 80005c0:	4282      	cmp	r2, r0
 80005c2:	d9cf      	bls.n	8000564 <__udivmoddi4+0x1c>
 80005c4:	2200      	movs	r2, #0
 80005c6:	2300      	movs	r3, #0
 80005c8:	9200      	str	r2, [sp, #0]
 80005ca:	9301      	str	r3, [sp, #4]
 80005cc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d001      	beq.n	80005d6 <__udivmoddi4+0x8e>
 80005d2:	601c      	str	r4, [r3, #0]
 80005d4:	605d      	str	r5, [r3, #4]
 80005d6:	9800      	ldr	r0, [sp, #0]
 80005d8:	9901      	ldr	r1, [sp, #4]
 80005da:	b003      	add	sp, #12
 80005dc:	bcf0      	pop	{r4, r5, r6, r7}
 80005de:	46bb      	mov	fp, r7
 80005e0:	46b2      	mov	sl, r6
 80005e2:	46a9      	mov	r9, r5
 80005e4:	46a0      	mov	r8, r4
 80005e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005e8:	4642      	mov	r2, r8
 80005ea:	2320      	movs	r3, #32
 80005ec:	1a9b      	subs	r3, r3, r2
 80005ee:	4652      	mov	r2, sl
 80005f0:	40da      	lsrs	r2, r3
 80005f2:	4641      	mov	r1, r8
 80005f4:	0013      	movs	r3, r2
 80005f6:	464a      	mov	r2, r9
 80005f8:	408a      	lsls	r2, r1
 80005fa:	0017      	movs	r7, r2
 80005fc:	4642      	mov	r2, r8
 80005fe:	431f      	orrs	r7, r3
 8000600:	4653      	mov	r3, sl
 8000602:	4093      	lsls	r3, r2
 8000604:	001e      	movs	r6, r3
 8000606:	42af      	cmp	r7, r5
 8000608:	d9c4      	bls.n	8000594 <__udivmoddi4+0x4c>
 800060a:	2200      	movs	r2, #0
 800060c:	2300      	movs	r3, #0
 800060e:	9200      	str	r2, [sp, #0]
 8000610:	9301      	str	r3, [sp, #4]
 8000612:	4643      	mov	r3, r8
 8000614:	2b00      	cmp	r3, #0
 8000616:	d0d9      	beq.n	80005cc <__udivmoddi4+0x84>
 8000618:	07fb      	lsls	r3, r7, #31
 800061a:	0872      	lsrs	r2, r6, #1
 800061c:	431a      	orrs	r2, r3
 800061e:	4646      	mov	r6, r8
 8000620:	087b      	lsrs	r3, r7, #1
 8000622:	e00e      	b.n	8000642 <__udivmoddi4+0xfa>
 8000624:	42ab      	cmp	r3, r5
 8000626:	d101      	bne.n	800062c <__udivmoddi4+0xe4>
 8000628:	42a2      	cmp	r2, r4
 800062a:	d80c      	bhi.n	8000646 <__udivmoddi4+0xfe>
 800062c:	1aa4      	subs	r4, r4, r2
 800062e:	419d      	sbcs	r5, r3
 8000630:	2001      	movs	r0, #1
 8000632:	1924      	adds	r4, r4, r4
 8000634:	416d      	adcs	r5, r5
 8000636:	2100      	movs	r1, #0
 8000638:	3e01      	subs	r6, #1
 800063a:	1824      	adds	r4, r4, r0
 800063c:	414d      	adcs	r5, r1
 800063e:	2e00      	cmp	r6, #0
 8000640:	d006      	beq.n	8000650 <__udivmoddi4+0x108>
 8000642:	42ab      	cmp	r3, r5
 8000644:	d9ee      	bls.n	8000624 <__udivmoddi4+0xdc>
 8000646:	3e01      	subs	r6, #1
 8000648:	1924      	adds	r4, r4, r4
 800064a:	416d      	adcs	r5, r5
 800064c:	2e00      	cmp	r6, #0
 800064e:	d1f8      	bne.n	8000642 <__udivmoddi4+0xfa>
 8000650:	9800      	ldr	r0, [sp, #0]
 8000652:	9901      	ldr	r1, [sp, #4]
 8000654:	465b      	mov	r3, fp
 8000656:	1900      	adds	r0, r0, r4
 8000658:	4169      	adcs	r1, r5
 800065a:	2b00      	cmp	r3, #0
 800065c:	db24      	blt.n	80006a8 <__udivmoddi4+0x160>
 800065e:	002b      	movs	r3, r5
 8000660:	465a      	mov	r2, fp
 8000662:	4644      	mov	r4, r8
 8000664:	40d3      	lsrs	r3, r2
 8000666:	002a      	movs	r2, r5
 8000668:	40e2      	lsrs	r2, r4
 800066a:	001c      	movs	r4, r3
 800066c:	465b      	mov	r3, fp
 800066e:	0015      	movs	r5, r2
 8000670:	2b00      	cmp	r3, #0
 8000672:	db2a      	blt.n	80006ca <__udivmoddi4+0x182>
 8000674:	0026      	movs	r6, r4
 8000676:	409e      	lsls	r6, r3
 8000678:	0033      	movs	r3, r6
 800067a:	0026      	movs	r6, r4
 800067c:	4647      	mov	r7, r8
 800067e:	40be      	lsls	r6, r7
 8000680:	0032      	movs	r2, r6
 8000682:	1a80      	subs	r0, r0, r2
 8000684:	4199      	sbcs	r1, r3
 8000686:	9000      	str	r0, [sp, #0]
 8000688:	9101      	str	r1, [sp, #4]
 800068a:	e79f      	b.n	80005cc <__udivmoddi4+0x84>
 800068c:	42a3      	cmp	r3, r4
 800068e:	d8bc      	bhi.n	800060a <__udivmoddi4+0xc2>
 8000690:	e783      	b.n	800059a <__udivmoddi4+0x52>
 8000692:	4642      	mov	r2, r8
 8000694:	2320      	movs	r3, #32
 8000696:	2100      	movs	r1, #0
 8000698:	1a9b      	subs	r3, r3, r2
 800069a:	2200      	movs	r2, #0
 800069c:	9100      	str	r1, [sp, #0]
 800069e:	9201      	str	r2, [sp, #4]
 80006a0:	2201      	movs	r2, #1
 80006a2:	40da      	lsrs	r2, r3
 80006a4:	9201      	str	r2, [sp, #4]
 80006a6:	e786      	b.n	80005b6 <__udivmoddi4+0x6e>
 80006a8:	4642      	mov	r2, r8
 80006aa:	2320      	movs	r3, #32
 80006ac:	1a9b      	subs	r3, r3, r2
 80006ae:	002a      	movs	r2, r5
 80006b0:	4646      	mov	r6, r8
 80006b2:	409a      	lsls	r2, r3
 80006b4:	0023      	movs	r3, r4
 80006b6:	40f3      	lsrs	r3, r6
 80006b8:	4644      	mov	r4, r8
 80006ba:	4313      	orrs	r3, r2
 80006bc:	002a      	movs	r2, r5
 80006be:	40e2      	lsrs	r2, r4
 80006c0:	001c      	movs	r4, r3
 80006c2:	465b      	mov	r3, fp
 80006c4:	0015      	movs	r5, r2
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	dad4      	bge.n	8000674 <__udivmoddi4+0x12c>
 80006ca:	4642      	mov	r2, r8
 80006cc:	002f      	movs	r7, r5
 80006ce:	2320      	movs	r3, #32
 80006d0:	0026      	movs	r6, r4
 80006d2:	4097      	lsls	r7, r2
 80006d4:	1a9b      	subs	r3, r3, r2
 80006d6:	40de      	lsrs	r6, r3
 80006d8:	003b      	movs	r3, r7
 80006da:	4333      	orrs	r3, r6
 80006dc:	e7cd      	b.n	800067a <__udivmoddi4+0x132>
 80006de:	46c0      	nop			; (mov r8, r8)

080006e0 <__aeabi_fadd>:
 80006e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80006e2:	46c6      	mov	lr, r8
 80006e4:	0243      	lsls	r3, r0, #9
 80006e6:	0a5b      	lsrs	r3, r3, #9
 80006e8:	024e      	lsls	r6, r1, #9
 80006ea:	0045      	lsls	r5, r0, #1
 80006ec:	004f      	lsls	r7, r1, #1
 80006ee:	00da      	lsls	r2, r3, #3
 80006f0:	0fc4      	lsrs	r4, r0, #31
 80006f2:	469c      	mov	ip, r3
 80006f4:	0a70      	lsrs	r0, r6, #9
 80006f6:	4690      	mov	r8, r2
 80006f8:	b500      	push	{lr}
 80006fa:	0e2d      	lsrs	r5, r5, #24
 80006fc:	0e3f      	lsrs	r7, r7, #24
 80006fe:	0fc9      	lsrs	r1, r1, #31
 8000700:	09b6      	lsrs	r6, r6, #6
 8000702:	428c      	cmp	r4, r1
 8000704:	d04b      	beq.n	800079e <__aeabi_fadd+0xbe>
 8000706:	1bea      	subs	r2, r5, r7
 8000708:	2a00      	cmp	r2, #0
 800070a:	dd36      	ble.n	800077a <__aeabi_fadd+0x9a>
 800070c:	2f00      	cmp	r7, #0
 800070e:	d061      	beq.n	80007d4 <__aeabi_fadd+0xf4>
 8000710:	2dff      	cmp	r5, #255	; 0xff
 8000712:	d100      	bne.n	8000716 <__aeabi_fadd+0x36>
 8000714:	e0ad      	b.n	8000872 <__aeabi_fadd+0x192>
 8000716:	2380      	movs	r3, #128	; 0x80
 8000718:	04db      	lsls	r3, r3, #19
 800071a:	431e      	orrs	r6, r3
 800071c:	2a1b      	cmp	r2, #27
 800071e:	dc00      	bgt.n	8000722 <__aeabi_fadd+0x42>
 8000720:	e0d3      	b.n	80008ca <__aeabi_fadd+0x1ea>
 8000722:	2001      	movs	r0, #1
 8000724:	4643      	mov	r3, r8
 8000726:	1a18      	subs	r0, r3, r0
 8000728:	0143      	lsls	r3, r0, #5
 800072a:	d400      	bmi.n	800072e <__aeabi_fadd+0x4e>
 800072c:	e08c      	b.n	8000848 <__aeabi_fadd+0x168>
 800072e:	0180      	lsls	r0, r0, #6
 8000730:	0987      	lsrs	r7, r0, #6
 8000732:	0038      	movs	r0, r7
 8000734:	f000 fed4 	bl	80014e0 <__clzsi2>
 8000738:	3805      	subs	r0, #5
 800073a:	4087      	lsls	r7, r0
 800073c:	4285      	cmp	r5, r0
 800073e:	dc00      	bgt.n	8000742 <__aeabi_fadd+0x62>
 8000740:	e0b6      	b.n	80008b0 <__aeabi_fadd+0x1d0>
 8000742:	1a2d      	subs	r5, r5, r0
 8000744:	48b3      	ldr	r0, [pc, #716]	; (8000a14 <__aeabi_fadd+0x334>)
 8000746:	4038      	ands	r0, r7
 8000748:	0743      	lsls	r3, r0, #29
 800074a:	d004      	beq.n	8000756 <__aeabi_fadd+0x76>
 800074c:	230f      	movs	r3, #15
 800074e:	4003      	ands	r3, r0
 8000750:	2b04      	cmp	r3, #4
 8000752:	d000      	beq.n	8000756 <__aeabi_fadd+0x76>
 8000754:	3004      	adds	r0, #4
 8000756:	0143      	lsls	r3, r0, #5
 8000758:	d400      	bmi.n	800075c <__aeabi_fadd+0x7c>
 800075a:	e078      	b.n	800084e <__aeabi_fadd+0x16e>
 800075c:	1c6a      	adds	r2, r5, #1
 800075e:	2dfe      	cmp	r5, #254	; 0xfe
 8000760:	d065      	beq.n	800082e <__aeabi_fadd+0x14e>
 8000762:	0180      	lsls	r0, r0, #6
 8000764:	0a43      	lsrs	r3, r0, #9
 8000766:	469c      	mov	ip, r3
 8000768:	b2d2      	uxtb	r2, r2
 800076a:	4663      	mov	r3, ip
 800076c:	05d0      	lsls	r0, r2, #23
 800076e:	4318      	orrs	r0, r3
 8000770:	07e4      	lsls	r4, r4, #31
 8000772:	4320      	orrs	r0, r4
 8000774:	bc80      	pop	{r7}
 8000776:	46b8      	mov	r8, r7
 8000778:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800077a:	2a00      	cmp	r2, #0
 800077c:	d035      	beq.n	80007ea <__aeabi_fadd+0x10a>
 800077e:	1b7a      	subs	r2, r7, r5
 8000780:	2d00      	cmp	r5, #0
 8000782:	d000      	beq.n	8000786 <__aeabi_fadd+0xa6>
 8000784:	e0af      	b.n	80008e6 <__aeabi_fadd+0x206>
 8000786:	4643      	mov	r3, r8
 8000788:	2b00      	cmp	r3, #0
 800078a:	d100      	bne.n	800078e <__aeabi_fadd+0xae>
 800078c:	e0a7      	b.n	80008de <__aeabi_fadd+0x1fe>
 800078e:	1e53      	subs	r3, r2, #1
 8000790:	2a01      	cmp	r2, #1
 8000792:	d100      	bne.n	8000796 <__aeabi_fadd+0xb6>
 8000794:	e12f      	b.n	80009f6 <__aeabi_fadd+0x316>
 8000796:	2aff      	cmp	r2, #255	; 0xff
 8000798:	d069      	beq.n	800086e <__aeabi_fadd+0x18e>
 800079a:	001a      	movs	r2, r3
 800079c:	e0aa      	b.n	80008f4 <__aeabi_fadd+0x214>
 800079e:	1be9      	subs	r1, r5, r7
 80007a0:	2900      	cmp	r1, #0
 80007a2:	dd70      	ble.n	8000886 <__aeabi_fadd+0x1a6>
 80007a4:	2f00      	cmp	r7, #0
 80007a6:	d037      	beq.n	8000818 <__aeabi_fadd+0x138>
 80007a8:	2dff      	cmp	r5, #255	; 0xff
 80007aa:	d062      	beq.n	8000872 <__aeabi_fadd+0x192>
 80007ac:	2380      	movs	r3, #128	; 0x80
 80007ae:	04db      	lsls	r3, r3, #19
 80007b0:	431e      	orrs	r6, r3
 80007b2:	291b      	cmp	r1, #27
 80007b4:	dc00      	bgt.n	80007b8 <__aeabi_fadd+0xd8>
 80007b6:	e0b0      	b.n	800091a <__aeabi_fadd+0x23a>
 80007b8:	2001      	movs	r0, #1
 80007ba:	4440      	add	r0, r8
 80007bc:	0143      	lsls	r3, r0, #5
 80007be:	d543      	bpl.n	8000848 <__aeabi_fadd+0x168>
 80007c0:	3501      	adds	r5, #1
 80007c2:	2dff      	cmp	r5, #255	; 0xff
 80007c4:	d033      	beq.n	800082e <__aeabi_fadd+0x14e>
 80007c6:	2301      	movs	r3, #1
 80007c8:	4a93      	ldr	r2, [pc, #588]	; (8000a18 <__aeabi_fadd+0x338>)
 80007ca:	4003      	ands	r3, r0
 80007cc:	0840      	lsrs	r0, r0, #1
 80007ce:	4010      	ands	r0, r2
 80007d0:	4318      	orrs	r0, r3
 80007d2:	e7b9      	b.n	8000748 <__aeabi_fadd+0x68>
 80007d4:	2e00      	cmp	r6, #0
 80007d6:	d100      	bne.n	80007da <__aeabi_fadd+0xfa>
 80007d8:	e083      	b.n	80008e2 <__aeabi_fadd+0x202>
 80007da:	1e51      	subs	r1, r2, #1
 80007dc:	2a01      	cmp	r2, #1
 80007de:	d100      	bne.n	80007e2 <__aeabi_fadd+0x102>
 80007e0:	e0d8      	b.n	8000994 <__aeabi_fadd+0x2b4>
 80007e2:	2aff      	cmp	r2, #255	; 0xff
 80007e4:	d045      	beq.n	8000872 <__aeabi_fadd+0x192>
 80007e6:	000a      	movs	r2, r1
 80007e8:	e798      	b.n	800071c <__aeabi_fadd+0x3c>
 80007ea:	27fe      	movs	r7, #254	; 0xfe
 80007ec:	1c6a      	adds	r2, r5, #1
 80007ee:	4217      	tst	r7, r2
 80007f0:	d000      	beq.n	80007f4 <__aeabi_fadd+0x114>
 80007f2:	e086      	b.n	8000902 <__aeabi_fadd+0x222>
 80007f4:	2d00      	cmp	r5, #0
 80007f6:	d000      	beq.n	80007fa <__aeabi_fadd+0x11a>
 80007f8:	e0b7      	b.n	800096a <__aeabi_fadd+0x28a>
 80007fa:	4643      	mov	r3, r8
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d100      	bne.n	8000802 <__aeabi_fadd+0x122>
 8000800:	e0f3      	b.n	80009ea <__aeabi_fadd+0x30a>
 8000802:	2200      	movs	r2, #0
 8000804:	2e00      	cmp	r6, #0
 8000806:	d0b0      	beq.n	800076a <__aeabi_fadd+0x8a>
 8000808:	1b98      	subs	r0, r3, r6
 800080a:	0143      	lsls	r3, r0, #5
 800080c:	d400      	bmi.n	8000810 <__aeabi_fadd+0x130>
 800080e:	e0fa      	b.n	8000a06 <__aeabi_fadd+0x326>
 8000810:	4643      	mov	r3, r8
 8000812:	000c      	movs	r4, r1
 8000814:	1af0      	subs	r0, r6, r3
 8000816:	e797      	b.n	8000748 <__aeabi_fadd+0x68>
 8000818:	2e00      	cmp	r6, #0
 800081a:	d100      	bne.n	800081e <__aeabi_fadd+0x13e>
 800081c:	e0c8      	b.n	80009b0 <__aeabi_fadd+0x2d0>
 800081e:	1e4a      	subs	r2, r1, #1
 8000820:	2901      	cmp	r1, #1
 8000822:	d100      	bne.n	8000826 <__aeabi_fadd+0x146>
 8000824:	e0ae      	b.n	8000984 <__aeabi_fadd+0x2a4>
 8000826:	29ff      	cmp	r1, #255	; 0xff
 8000828:	d023      	beq.n	8000872 <__aeabi_fadd+0x192>
 800082a:	0011      	movs	r1, r2
 800082c:	e7c1      	b.n	80007b2 <__aeabi_fadd+0xd2>
 800082e:	2300      	movs	r3, #0
 8000830:	22ff      	movs	r2, #255	; 0xff
 8000832:	469c      	mov	ip, r3
 8000834:	e799      	b.n	800076a <__aeabi_fadd+0x8a>
 8000836:	21fe      	movs	r1, #254	; 0xfe
 8000838:	1c6a      	adds	r2, r5, #1
 800083a:	4211      	tst	r1, r2
 800083c:	d077      	beq.n	800092e <__aeabi_fadd+0x24e>
 800083e:	2aff      	cmp	r2, #255	; 0xff
 8000840:	d0f5      	beq.n	800082e <__aeabi_fadd+0x14e>
 8000842:	0015      	movs	r5, r2
 8000844:	4446      	add	r6, r8
 8000846:	0870      	lsrs	r0, r6, #1
 8000848:	0743      	lsls	r3, r0, #29
 800084a:	d000      	beq.n	800084e <__aeabi_fadd+0x16e>
 800084c:	e77e      	b.n	800074c <__aeabi_fadd+0x6c>
 800084e:	08c3      	lsrs	r3, r0, #3
 8000850:	2dff      	cmp	r5, #255	; 0xff
 8000852:	d00e      	beq.n	8000872 <__aeabi_fadd+0x192>
 8000854:	025b      	lsls	r3, r3, #9
 8000856:	0a5b      	lsrs	r3, r3, #9
 8000858:	469c      	mov	ip, r3
 800085a:	b2ea      	uxtb	r2, r5
 800085c:	e785      	b.n	800076a <__aeabi_fadd+0x8a>
 800085e:	2e00      	cmp	r6, #0
 8000860:	d007      	beq.n	8000872 <__aeabi_fadd+0x192>
 8000862:	2280      	movs	r2, #128	; 0x80
 8000864:	03d2      	lsls	r2, r2, #15
 8000866:	4213      	tst	r3, r2
 8000868:	d003      	beq.n	8000872 <__aeabi_fadd+0x192>
 800086a:	4210      	tst	r0, r2
 800086c:	d101      	bne.n	8000872 <__aeabi_fadd+0x192>
 800086e:	000c      	movs	r4, r1
 8000870:	0003      	movs	r3, r0
 8000872:	2b00      	cmp	r3, #0
 8000874:	d0db      	beq.n	800082e <__aeabi_fadd+0x14e>
 8000876:	2080      	movs	r0, #128	; 0x80
 8000878:	03c0      	lsls	r0, r0, #15
 800087a:	4318      	orrs	r0, r3
 800087c:	0240      	lsls	r0, r0, #9
 800087e:	0a43      	lsrs	r3, r0, #9
 8000880:	469c      	mov	ip, r3
 8000882:	22ff      	movs	r2, #255	; 0xff
 8000884:	e771      	b.n	800076a <__aeabi_fadd+0x8a>
 8000886:	2900      	cmp	r1, #0
 8000888:	d0d5      	beq.n	8000836 <__aeabi_fadd+0x156>
 800088a:	1b7a      	subs	r2, r7, r5
 800088c:	2d00      	cmp	r5, #0
 800088e:	d160      	bne.n	8000952 <__aeabi_fadd+0x272>
 8000890:	4643      	mov	r3, r8
 8000892:	2b00      	cmp	r3, #0
 8000894:	d024      	beq.n	80008e0 <__aeabi_fadd+0x200>
 8000896:	1e53      	subs	r3, r2, #1
 8000898:	2a01      	cmp	r2, #1
 800089a:	d073      	beq.n	8000984 <__aeabi_fadd+0x2a4>
 800089c:	2aff      	cmp	r2, #255	; 0xff
 800089e:	d0e7      	beq.n	8000870 <__aeabi_fadd+0x190>
 80008a0:	001a      	movs	r2, r3
 80008a2:	2a1b      	cmp	r2, #27
 80008a4:	dc00      	bgt.n	80008a8 <__aeabi_fadd+0x1c8>
 80008a6:	e085      	b.n	80009b4 <__aeabi_fadd+0x2d4>
 80008a8:	2001      	movs	r0, #1
 80008aa:	003d      	movs	r5, r7
 80008ac:	1980      	adds	r0, r0, r6
 80008ae:	e785      	b.n	80007bc <__aeabi_fadd+0xdc>
 80008b0:	2320      	movs	r3, #32
 80008b2:	003a      	movs	r2, r7
 80008b4:	1b45      	subs	r5, r0, r5
 80008b6:	0038      	movs	r0, r7
 80008b8:	3501      	adds	r5, #1
 80008ba:	40ea      	lsrs	r2, r5
 80008bc:	1b5d      	subs	r5, r3, r5
 80008be:	40a8      	lsls	r0, r5
 80008c0:	1e43      	subs	r3, r0, #1
 80008c2:	4198      	sbcs	r0, r3
 80008c4:	2500      	movs	r5, #0
 80008c6:	4310      	orrs	r0, r2
 80008c8:	e73e      	b.n	8000748 <__aeabi_fadd+0x68>
 80008ca:	2320      	movs	r3, #32
 80008cc:	0030      	movs	r0, r6
 80008ce:	1a9b      	subs	r3, r3, r2
 80008d0:	0031      	movs	r1, r6
 80008d2:	4098      	lsls	r0, r3
 80008d4:	40d1      	lsrs	r1, r2
 80008d6:	1e43      	subs	r3, r0, #1
 80008d8:	4198      	sbcs	r0, r3
 80008da:	4308      	orrs	r0, r1
 80008dc:	e722      	b.n	8000724 <__aeabi_fadd+0x44>
 80008de:	000c      	movs	r4, r1
 80008e0:	0003      	movs	r3, r0
 80008e2:	0015      	movs	r5, r2
 80008e4:	e7b4      	b.n	8000850 <__aeabi_fadd+0x170>
 80008e6:	2fff      	cmp	r7, #255	; 0xff
 80008e8:	d0c1      	beq.n	800086e <__aeabi_fadd+0x18e>
 80008ea:	2380      	movs	r3, #128	; 0x80
 80008ec:	4640      	mov	r0, r8
 80008ee:	04db      	lsls	r3, r3, #19
 80008f0:	4318      	orrs	r0, r3
 80008f2:	4680      	mov	r8, r0
 80008f4:	2a1b      	cmp	r2, #27
 80008f6:	dd51      	ble.n	800099c <__aeabi_fadd+0x2bc>
 80008f8:	2001      	movs	r0, #1
 80008fa:	000c      	movs	r4, r1
 80008fc:	003d      	movs	r5, r7
 80008fe:	1a30      	subs	r0, r6, r0
 8000900:	e712      	b.n	8000728 <__aeabi_fadd+0x48>
 8000902:	4643      	mov	r3, r8
 8000904:	1b9f      	subs	r7, r3, r6
 8000906:	017b      	lsls	r3, r7, #5
 8000908:	d42b      	bmi.n	8000962 <__aeabi_fadd+0x282>
 800090a:	2f00      	cmp	r7, #0
 800090c:	d000      	beq.n	8000910 <__aeabi_fadd+0x230>
 800090e:	e710      	b.n	8000732 <__aeabi_fadd+0x52>
 8000910:	2300      	movs	r3, #0
 8000912:	2400      	movs	r4, #0
 8000914:	2200      	movs	r2, #0
 8000916:	469c      	mov	ip, r3
 8000918:	e727      	b.n	800076a <__aeabi_fadd+0x8a>
 800091a:	2320      	movs	r3, #32
 800091c:	0032      	movs	r2, r6
 800091e:	0030      	movs	r0, r6
 8000920:	40ca      	lsrs	r2, r1
 8000922:	1a59      	subs	r1, r3, r1
 8000924:	4088      	lsls	r0, r1
 8000926:	1e43      	subs	r3, r0, #1
 8000928:	4198      	sbcs	r0, r3
 800092a:	4310      	orrs	r0, r2
 800092c:	e745      	b.n	80007ba <__aeabi_fadd+0xda>
 800092e:	2d00      	cmp	r5, #0
 8000930:	d14a      	bne.n	80009c8 <__aeabi_fadd+0x2e8>
 8000932:	4643      	mov	r3, r8
 8000934:	2b00      	cmp	r3, #0
 8000936:	d063      	beq.n	8000a00 <__aeabi_fadd+0x320>
 8000938:	2200      	movs	r2, #0
 800093a:	2e00      	cmp	r6, #0
 800093c:	d100      	bne.n	8000940 <__aeabi_fadd+0x260>
 800093e:	e714      	b.n	800076a <__aeabi_fadd+0x8a>
 8000940:	0030      	movs	r0, r6
 8000942:	4440      	add	r0, r8
 8000944:	0143      	lsls	r3, r0, #5
 8000946:	d400      	bmi.n	800094a <__aeabi_fadd+0x26a>
 8000948:	e77e      	b.n	8000848 <__aeabi_fadd+0x168>
 800094a:	4b32      	ldr	r3, [pc, #200]	; (8000a14 <__aeabi_fadd+0x334>)
 800094c:	3501      	adds	r5, #1
 800094e:	4018      	ands	r0, r3
 8000950:	e77a      	b.n	8000848 <__aeabi_fadd+0x168>
 8000952:	2fff      	cmp	r7, #255	; 0xff
 8000954:	d08c      	beq.n	8000870 <__aeabi_fadd+0x190>
 8000956:	2380      	movs	r3, #128	; 0x80
 8000958:	4641      	mov	r1, r8
 800095a:	04db      	lsls	r3, r3, #19
 800095c:	4319      	orrs	r1, r3
 800095e:	4688      	mov	r8, r1
 8000960:	e79f      	b.n	80008a2 <__aeabi_fadd+0x1c2>
 8000962:	4643      	mov	r3, r8
 8000964:	000c      	movs	r4, r1
 8000966:	1af7      	subs	r7, r6, r3
 8000968:	e6e3      	b.n	8000732 <__aeabi_fadd+0x52>
 800096a:	4642      	mov	r2, r8
 800096c:	2a00      	cmp	r2, #0
 800096e:	d000      	beq.n	8000972 <__aeabi_fadd+0x292>
 8000970:	e775      	b.n	800085e <__aeabi_fadd+0x17e>
 8000972:	2e00      	cmp	r6, #0
 8000974:	d000      	beq.n	8000978 <__aeabi_fadd+0x298>
 8000976:	e77a      	b.n	800086e <__aeabi_fadd+0x18e>
 8000978:	2380      	movs	r3, #128	; 0x80
 800097a:	03db      	lsls	r3, r3, #15
 800097c:	2400      	movs	r4, #0
 800097e:	469c      	mov	ip, r3
 8000980:	22ff      	movs	r2, #255	; 0xff
 8000982:	e6f2      	b.n	800076a <__aeabi_fadd+0x8a>
 8000984:	0030      	movs	r0, r6
 8000986:	4440      	add	r0, r8
 8000988:	2501      	movs	r5, #1
 800098a:	0143      	lsls	r3, r0, #5
 800098c:	d400      	bmi.n	8000990 <__aeabi_fadd+0x2b0>
 800098e:	e75b      	b.n	8000848 <__aeabi_fadd+0x168>
 8000990:	2502      	movs	r5, #2
 8000992:	e718      	b.n	80007c6 <__aeabi_fadd+0xe6>
 8000994:	4643      	mov	r3, r8
 8000996:	2501      	movs	r5, #1
 8000998:	1b98      	subs	r0, r3, r6
 800099a:	e6c5      	b.n	8000728 <__aeabi_fadd+0x48>
 800099c:	2320      	movs	r3, #32
 800099e:	4644      	mov	r4, r8
 80009a0:	4640      	mov	r0, r8
 80009a2:	40d4      	lsrs	r4, r2
 80009a4:	1a9a      	subs	r2, r3, r2
 80009a6:	4090      	lsls	r0, r2
 80009a8:	1e43      	subs	r3, r0, #1
 80009aa:	4198      	sbcs	r0, r3
 80009ac:	4320      	orrs	r0, r4
 80009ae:	e7a4      	b.n	80008fa <__aeabi_fadd+0x21a>
 80009b0:	000d      	movs	r5, r1
 80009b2:	e74d      	b.n	8000850 <__aeabi_fadd+0x170>
 80009b4:	2320      	movs	r3, #32
 80009b6:	4641      	mov	r1, r8
 80009b8:	4640      	mov	r0, r8
 80009ba:	40d1      	lsrs	r1, r2
 80009bc:	1a9a      	subs	r2, r3, r2
 80009be:	4090      	lsls	r0, r2
 80009c0:	1e43      	subs	r3, r0, #1
 80009c2:	4198      	sbcs	r0, r3
 80009c4:	4308      	orrs	r0, r1
 80009c6:	e770      	b.n	80008aa <__aeabi_fadd+0x1ca>
 80009c8:	4642      	mov	r2, r8
 80009ca:	2a00      	cmp	r2, #0
 80009cc:	d100      	bne.n	80009d0 <__aeabi_fadd+0x2f0>
 80009ce:	e74f      	b.n	8000870 <__aeabi_fadd+0x190>
 80009d0:	2e00      	cmp	r6, #0
 80009d2:	d100      	bne.n	80009d6 <__aeabi_fadd+0x2f6>
 80009d4:	e74d      	b.n	8000872 <__aeabi_fadd+0x192>
 80009d6:	2280      	movs	r2, #128	; 0x80
 80009d8:	03d2      	lsls	r2, r2, #15
 80009da:	4213      	tst	r3, r2
 80009dc:	d100      	bne.n	80009e0 <__aeabi_fadd+0x300>
 80009de:	e748      	b.n	8000872 <__aeabi_fadd+0x192>
 80009e0:	4210      	tst	r0, r2
 80009e2:	d000      	beq.n	80009e6 <__aeabi_fadd+0x306>
 80009e4:	e745      	b.n	8000872 <__aeabi_fadd+0x192>
 80009e6:	0003      	movs	r3, r0
 80009e8:	e743      	b.n	8000872 <__aeabi_fadd+0x192>
 80009ea:	2e00      	cmp	r6, #0
 80009ec:	d090      	beq.n	8000910 <__aeabi_fadd+0x230>
 80009ee:	000c      	movs	r4, r1
 80009f0:	4684      	mov	ip, r0
 80009f2:	2200      	movs	r2, #0
 80009f4:	e6b9      	b.n	800076a <__aeabi_fadd+0x8a>
 80009f6:	4643      	mov	r3, r8
 80009f8:	000c      	movs	r4, r1
 80009fa:	1af0      	subs	r0, r6, r3
 80009fc:	3501      	adds	r5, #1
 80009fe:	e693      	b.n	8000728 <__aeabi_fadd+0x48>
 8000a00:	4684      	mov	ip, r0
 8000a02:	2200      	movs	r2, #0
 8000a04:	e6b1      	b.n	800076a <__aeabi_fadd+0x8a>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	d000      	beq.n	8000a0c <__aeabi_fadd+0x32c>
 8000a0a:	e71d      	b.n	8000848 <__aeabi_fadd+0x168>
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	2400      	movs	r4, #0
 8000a10:	469c      	mov	ip, r3
 8000a12:	e6aa      	b.n	800076a <__aeabi_fadd+0x8a>
 8000a14:	fbffffff 	.word	0xfbffffff
 8000a18:	7dffffff 	.word	0x7dffffff

08000a1c <__aeabi_fdiv>:
 8000a1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a1e:	464f      	mov	r7, r9
 8000a20:	4646      	mov	r6, r8
 8000a22:	46d6      	mov	lr, sl
 8000a24:	0245      	lsls	r5, r0, #9
 8000a26:	b5c0      	push	{r6, r7, lr}
 8000a28:	0047      	lsls	r7, r0, #1
 8000a2a:	1c0c      	adds	r4, r1, #0
 8000a2c:	0a6d      	lsrs	r5, r5, #9
 8000a2e:	0e3f      	lsrs	r7, r7, #24
 8000a30:	0fc6      	lsrs	r6, r0, #31
 8000a32:	2f00      	cmp	r7, #0
 8000a34:	d100      	bne.n	8000a38 <__aeabi_fdiv+0x1c>
 8000a36:	e070      	b.n	8000b1a <__aeabi_fdiv+0xfe>
 8000a38:	2fff      	cmp	r7, #255	; 0xff
 8000a3a:	d100      	bne.n	8000a3e <__aeabi_fdiv+0x22>
 8000a3c:	e075      	b.n	8000b2a <__aeabi_fdiv+0x10e>
 8000a3e:	00eb      	lsls	r3, r5, #3
 8000a40:	2580      	movs	r5, #128	; 0x80
 8000a42:	04ed      	lsls	r5, r5, #19
 8000a44:	431d      	orrs	r5, r3
 8000a46:	2300      	movs	r3, #0
 8000a48:	4699      	mov	r9, r3
 8000a4a:	469a      	mov	sl, r3
 8000a4c:	3f7f      	subs	r7, #127	; 0x7f
 8000a4e:	0260      	lsls	r0, r4, #9
 8000a50:	0a43      	lsrs	r3, r0, #9
 8000a52:	4698      	mov	r8, r3
 8000a54:	0063      	lsls	r3, r4, #1
 8000a56:	0e1b      	lsrs	r3, r3, #24
 8000a58:	0fe4      	lsrs	r4, r4, #31
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d04e      	beq.n	8000afc <__aeabi_fdiv+0xe0>
 8000a5e:	2bff      	cmp	r3, #255	; 0xff
 8000a60:	d046      	beq.n	8000af0 <__aeabi_fdiv+0xd4>
 8000a62:	4642      	mov	r2, r8
 8000a64:	00d0      	lsls	r0, r2, #3
 8000a66:	2280      	movs	r2, #128	; 0x80
 8000a68:	04d2      	lsls	r2, r2, #19
 8000a6a:	4302      	orrs	r2, r0
 8000a6c:	4690      	mov	r8, r2
 8000a6e:	2200      	movs	r2, #0
 8000a70:	3b7f      	subs	r3, #127	; 0x7f
 8000a72:	0031      	movs	r1, r6
 8000a74:	1aff      	subs	r7, r7, r3
 8000a76:	464b      	mov	r3, r9
 8000a78:	4061      	eors	r1, r4
 8000a7a:	b2c9      	uxtb	r1, r1
 8000a7c:	4313      	orrs	r3, r2
 8000a7e:	2b0f      	cmp	r3, #15
 8000a80:	d900      	bls.n	8000a84 <__aeabi_fdiv+0x68>
 8000a82:	e0b5      	b.n	8000bf0 <__aeabi_fdiv+0x1d4>
 8000a84:	486e      	ldr	r0, [pc, #440]	; (8000c40 <__aeabi_fdiv+0x224>)
 8000a86:	009b      	lsls	r3, r3, #2
 8000a88:	58c3      	ldr	r3, [r0, r3]
 8000a8a:	469f      	mov	pc, r3
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	4698      	mov	r8, r3
 8000a90:	0026      	movs	r6, r4
 8000a92:	4645      	mov	r5, r8
 8000a94:	4692      	mov	sl, r2
 8000a96:	4653      	mov	r3, sl
 8000a98:	2b02      	cmp	r3, #2
 8000a9a:	d100      	bne.n	8000a9e <__aeabi_fdiv+0x82>
 8000a9c:	e089      	b.n	8000bb2 <__aeabi_fdiv+0x196>
 8000a9e:	2b03      	cmp	r3, #3
 8000aa0:	d100      	bne.n	8000aa4 <__aeabi_fdiv+0x88>
 8000aa2:	e09e      	b.n	8000be2 <__aeabi_fdiv+0x1c6>
 8000aa4:	2b01      	cmp	r3, #1
 8000aa6:	d018      	beq.n	8000ada <__aeabi_fdiv+0xbe>
 8000aa8:	003b      	movs	r3, r7
 8000aaa:	337f      	adds	r3, #127	; 0x7f
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	dd69      	ble.n	8000b84 <__aeabi_fdiv+0x168>
 8000ab0:	076a      	lsls	r2, r5, #29
 8000ab2:	d004      	beq.n	8000abe <__aeabi_fdiv+0xa2>
 8000ab4:	220f      	movs	r2, #15
 8000ab6:	402a      	ands	r2, r5
 8000ab8:	2a04      	cmp	r2, #4
 8000aba:	d000      	beq.n	8000abe <__aeabi_fdiv+0xa2>
 8000abc:	3504      	adds	r5, #4
 8000abe:	012a      	lsls	r2, r5, #4
 8000ac0:	d503      	bpl.n	8000aca <__aeabi_fdiv+0xae>
 8000ac2:	4b60      	ldr	r3, [pc, #384]	; (8000c44 <__aeabi_fdiv+0x228>)
 8000ac4:	401d      	ands	r5, r3
 8000ac6:	003b      	movs	r3, r7
 8000ac8:	3380      	adds	r3, #128	; 0x80
 8000aca:	2bfe      	cmp	r3, #254	; 0xfe
 8000acc:	dd00      	ble.n	8000ad0 <__aeabi_fdiv+0xb4>
 8000ace:	e070      	b.n	8000bb2 <__aeabi_fdiv+0x196>
 8000ad0:	01ad      	lsls	r5, r5, #6
 8000ad2:	0a6d      	lsrs	r5, r5, #9
 8000ad4:	b2d8      	uxtb	r0, r3
 8000ad6:	e002      	b.n	8000ade <__aeabi_fdiv+0xc2>
 8000ad8:	000e      	movs	r6, r1
 8000ada:	2000      	movs	r0, #0
 8000adc:	2500      	movs	r5, #0
 8000ade:	05c0      	lsls	r0, r0, #23
 8000ae0:	4328      	orrs	r0, r5
 8000ae2:	07f6      	lsls	r6, r6, #31
 8000ae4:	4330      	orrs	r0, r6
 8000ae6:	bce0      	pop	{r5, r6, r7}
 8000ae8:	46ba      	mov	sl, r7
 8000aea:	46b1      	mov	r9, r6
 8000aec:	46a8      	mov	r8, r5
 8000aee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000af0:	4643      	mov	r3, r8
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d13f      	bne.n	8000b76 <__aeabi_fdiv+0x15a>
 8000af6:	2202      	movs	r2, #2
 8000af8:	3fff      	subs	r7, #255	; 0xff
 8000afa:	e003      	b.n	8000b04 <__aeabi_fdiv+0xe8>
 8000afc:	4643      	mov	r3, r8
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d12d      	bne.n	8000b5e <__aeabi_fdiv+0x142>
 8000b02:	2201      	movs	r2, #1
 8000b04:	0031      	movs	r1, r6
 8000b06:	464b      	mov	r3, r9
 8000b08:	4061      	eors	r1, r4
 8000b0a:	b2c9      	uxtb	r1, r1
 8000b0c:	4313      	orrs	r3, r2
 8000b0e:	2b0f      	cmp	r3, #15
 8000b10:	d834      	bhi.n	8000b7c <__aeabi_fdiv+0x160>
 8000b12:	484d      	ldr	r0, [pc, #308]	; (8000c48 <__aeabi_fdiv+0x22c>)
 8000b14:	009b      	lsls	r3, r3, #2
 8000b16:	58c3      	ldr	r3, [r0, r3]
 8000b18:	469f      	mov	pc, r3
 8000b1a:	2d00      	cmp	r5, #0
 8000b1c:	d113      	bne.n	8000b46 <__aeabi_fdiv+0x12a>
 8000b1e:	2304      	movs	r3, #4
 8000b20:	4699      	mov	r9, r3
 8000b22:	3b03      	subs	r3, #3
 8000b24:	2700      	movs	r7, #0
 8000b26:	469a      	mov	sl, r3
 8000b28:	e791      	b.n	8000a4e <__aeabi_fdiv+0x32>
 8000b2a:	2d00      	cmp	r5, #0
 8000b2c:	d105      	bne.n	8000b3a <__aeabi_fdiv+0x11e>
 8000b2e:	2308      	movs	r3, #8
 8000b30:	4699      	mov	r9, r3
 8000b32:	3b06      	subs	r3, #6
 8000b34:	27ff      	movs	r7, #255	; 0xff
 8000b36:	469a      	mov	sl, r3
 8000b38:	e789      	b.n	8000a4e <__aeabi_fdiv+0x32>
 8000b3a:	230c      	movs	r3, #12
 8000b3c:	4699      	mov	r9, r3
 8000b3e:	3b09      	subs	r3, #9
 8000b40:	27ff      	movs	r7, #255	; 0xff
 8000b42:	469a      	mov	sl, r3
 8000b44:	e783      	b.n	8000a4e <__aeabi_fdiv+0x32>
 8000b46:	0028      	movs	r0, r5
 8000b48:	f000 fcca 	bl	80014e0 <__clzsi2>
 8000b4c:	2776      	movs	r7, #118	; 0x76
 8000b4e:	1f43      	subs	r3, r0, #5
 8000b50:	409d      	lsls	r5, r3
 8000b52:	2300      	movs	r3, #0
 8000b54:	427f      	negs	r7, r7
 8000b56:	4699      	mov	r9, r3
 8000b58:	469a      	mov	sl, r3
 8000b5a:	1a3f      	subs	r7, r7, r0
 8000b5c:	e777      	b.n	8000a4e <__aeabi_fdiv+0x32>
 8000b5e:	4640      	mov	r0, r8
 8000b60:	f000 fcbe 	bl	80014e0 <__clzsi2>
 8000b64:	4642      	mov	r2, r8
 8000b66:	1f43      	subs	r3, r0, #5
 8000b68:	409a      	lsls	r2, r3
 8000b6a:	2376      	movs	r3, #118	; 0x76
 8000b6c:	425b      	negs	r3, r3
 8000b6e:	4690      	mov	r8, r2
 8000b70:	1a1b      	subs	r3, r3, r0
 8000b72:	2200      	movs	r2, #0
 8000b74:	e77d      	b.n	8000a72 <__aeabi_fdiv+0x56>
 8000b76:	23ff      	movs	r3, #255	; 0xff
 8000b78:	2203      	movs	r2, #3
 8000b7a:	e77a      	b.n	8000a72 <__aeabi_fdiv+0x56>
 8000b7c:	000e      	movs	r6, r1
 8000b7e:	20ff      	movs	r0, #255	; 0xff
 8000b80:	2500      	movs	r5, #0
 8000b82:	e7ac      	b.n	8000ade <__aeabi_fdiv+0xc2>
 8000b84:	2001      	movs	r0, #1
 8000b86:	1ac0      	subs	r0, r0, r3
 8000b88:	281b      	cmp	r0, #27
 8000b8a:	dca6      	bgt.n	8000ada <__aeabi_fdiv+0xbe>
 8000b8c:	379e      	adds	r7, #158	; 0x9e
 8000b8e:	002a      	movs	r2, r5
 8000b90:	40bd      	lsls	r5, r7
 8000b92:	40c2      	lsrs	r2, r0
 8000b94:	1e6b      	subs	r3, r5, #1
 8000b96:	419d      	sbcs	r5, r3
 8000b98:	4315      	orrs	r5, r2
 8000b9a:	076b      	lsls	r3, r5, #29
 8000b9c:	d004      	beq.n	8000ba8 <__aeabi_fdiv+0x18c>
 8000b9e:	230f      	movs	r3, #15
 8000ba0:	402b      	ands	r3, r5
 8000ba2:	2b04      	cmp	r3, #4
 8000ba4:	d000      	beq.n	8000ba8 <__aeabi_fdiv+0x18c>
 8000ba6:	3504      	adds	r5, #4
 8000ba8:	016b      	lsls	r3, r5, #5
 8000baa:	d544      	bpl.n	8000c36 <__aeabi_fdiv+0x21a>
 8000bac:	2001      	movs	r0, #1
 8000bae:	2500      	movs	r5, #0
 8000bb0:	e795      	b.n	8000ade <__aeabi_fdiv+0xc2>
 8000bb2:	20ff      	movs	r0, #255	; 0xff
 8000bb4:	2500      	movs	r5, #0
 8000bb6:	e792      	b.n	8000ade <__aeabi_fdiv+0xc2>
 8000bb8:	2580      	movs	r5, #128	; 0x80
 8000bba:	2600      	movs	r6, #0
 8000bbc:	20ff      	movs	r0, #255	; 0xff
 8000bbe:	03ed      	lsls	r5, r5, #15
 8000bc0:	e78d      	b.n	8000ade <__aeabi_fdiv+0xc2>
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	4698      	mov	r8, r3
 8000bc6:	2080      	movs	r0, #128	; 0x80
 8000bc8:	03c0      	lsls	r0, r0, #15
 8000bca:	4205      	tst	r5, r0
 8000bcc:	d009      	beq.n	8000be2 <__aeabi_fdiv+0x1c6>
 8000bce:	4643      	mov	r3, r8
 8000bd0:	4203      	tst	r3, r0
 8000bd2:	d106      	bne.n	8000be2 <__aeabi_fdiv+0x1c6>
 8000bd4:	4645      	mov	r5, r8
 8000bd6:	4305      	orrs	r5, r0
 8000bd8:	026d      	lsls	r5, r5, #9
 8000bda:	0026      	movs	r6, r4
 8000bdc:	20ff      	movs	r0, #255	; 0xff
 8000bde:	0a6d      	lsrs	r5, r5, #9
 8000be0:	e77d      	b.n	8000ade <__aeabi_fdiv+0xc2>
 8000be2:	2080      	movs	r0, #128	; 0x80
 8000be4:	03c0      	lsls	r0, r0, #15
 8000be6:	4305      	orrs	r5, r0
 8000be8:	026d      	lsls	r5, r5, #9
 8000bea:	20ff      	movs	r0, #255	; 0xff
 8000bec:	0a6d      	lsrs	r5, r5, #9
 8000bee:	e776      	b.n	8000ade <__aeabi_fdiv+0xc2>
 8000bf0:	4642      	mov	r2, r8
 8000bf2:	016b      	lsls	r3, r5, #5
 8000bf4:	0150      	lsls	r0, r2, #5
 8000bf6:	4283      	cmp	r3, r0
 8000bf8:	d219      	bcs.n	8000c2e <__aeabi_fdiv+0x212>
 8000bfa:	221b      	movs	r2, #27
 8000bfc:	2500      	movs	r5, #0
 8000bfe:	3f01      	subs	r7, #1
 8000c00:	2601      	movs	r6, #1
 8000c02:	001c      	movs	r4, r3
 8000c04:	006d      	lsls	r5, r5, #1
 8000c06:	005b      	lsls	r3, r3, #1
 8000c08:	2c00      	cmp	r4, #0
 8000c0a:	db01      	blt.n	8000c10 <__aeabi_fdiv+0x1f4>
 8000c0c:	4298      	cmp	r0, r3
 8000c0e:	d801      	bhi.n	8000c14 <__aeabi_fdiv+0x1f8>
 8000c10:	1a1b      	subs	r3, r3, r0
 8000c12:	4335      	orrs	r5, r6
 8000c14:	3a01      	subs	r2, #1
 8000c16:	2a00      	cmp	r2, #0
 8000c18:	d1f3      	bne.n	8000c02 <__aeabi_fdiv+0x1e6>
 8000c1a:	1e5a      	subs	r2, r3, #1
 8000c1c:	4193      	sbcs	r3, r2
 8000c1e:	431d      	orrs	r5, r3
 8000c20:	003b      	movs	r3, r7
 8000c22:	337f      	adds	r3, #127	; 0x7f
 8000c24:	000e      	movs	r6, r1
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	dd00      	ble.n	8000c2c <__aeabi_fdiv+0x210>
 8000c2a:	e741      	b.n	8000ab0 <__aeabi_fdiv+0x94>
 8000c2c:	e7aa      	b.n	8000b84 <__aeabi_fdiv+0x168>
 8000c2e:	221a      	movs	r2, #26
 8000c30:	2501      	movs	r5, #1
 8000c32:	1a1b      	subs	r3, r3, r0
 8000c34:	e7e4      	b.n	8000c00 <__aeabi_fdiv+0x1e4>
 8000c36:	01ad      	lsls	r5, r5, #6
 8000c38:	2000      	movs	r0, #0
 8000c3a:	0a6d      	lsrs	r5, r5, #9
 8000c3c:	e74f      	b.n	8000ade <__aeabi_fdiv+0xc2>
 8000c3e:	46c0      	nop			; (mov r8, r8)
 8000c40:	08015b4c 	.word	0x08015b4c
 8000c44:	f7ffffff 	.word	0xf7ffffff
 8000c48:	08015b8c 	.word	0x08015b8c

08000c4c <__eqsf2>:
 8000c4c:	b570      	push	{r4, r5, r6, lr}
 8000c4e:	0042      	lsls	r2, r0, #1
 8000c50:	0245      	lsls	r5, r0, #9
 8000c52:	024e      	lsls	r6, r1, #9
 8000c54:	004c      	lsls	r4, r1, #1
 8000c56:	0fc3      	lsrs	r3, r0, #31
 8000c58:	0a6d      	lsrs	r5, r5, #9
 8000c5a:	2001      	movs	r0, #1
 8000c5c:	0e12      	lsrs	r2, r2, #24
 8000c5e:	0a76      	lsrs	r6, r6, #9
 8000c60:	0e24      	lsrs	r4, r4, #24
 8000c62:	0fc9      	lsrs	r1, r1, #31
 8000c64:	2aff      	cmp	r2, #255	; 0xff
 8000c66:	d006      	beq.n	8000c76 <__eqsf2+0x2a>
 8000c68:	2cff      	cmp	r4, #255	; 0xff
 8000c6a:	d003      	beq.n	8000c74 <__eqsf2+0x28>
 8000c6c:	42a2      	cmp	r2, r4
 8000c6e:	d101      	bne.n	8000c74 <__eqsf2+0x28>
 8000c70:	42b5      	cmp	r5, r6
 8000c72:	d006      	beq.n	8000c82 <__eqsf2+0x36>
 8000c74:	bd70      	pop	{r4, r5, r6, pc}
 8000c76:	2d00      	cmp	r5, #0
 8000c78:	d1fc      	bne.n	8000c74 <__eqsf2+0x28>
 8000c7a:	2cff      	cmp	r4, #255	; 0xff
 8000c7c:	d1fa      	bne.n	8000c74 <__eqsf2+0x28>
 8000c7e:	2e00      	cmp	r6, #0
 8000c80:	d1f8      	bne.n	8000c74 <__eqsf2+0x28>
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d006      	beq.n	8000c94 <__eqsf2+0x48>
 8000c86:	2001      	movs	r0, #1
 8000c88:	2a00      	cmp	r2, #0
 8000c8a:	d1f3      	bne.n	8000c74 <__eqsf2+0x28>
 8000c8c:	0028      	movs	r0, r5
 8000c8e:	1e43      	subs	r3, r0, #1
 8000c90:	4198      	sbcs	r0, r3
 8000c92:	e7ef      	b.n	8000c74 <__eqsf2+0x28>
 8000c94:	2000      	movs	r0, #0
 8000c96:	e7ed      	b.n	8000c74 <__eqsf2+0x28>

08000c98 <__gesf2>:
 8000c98:	b570      	push	{r4, r5, r6, lr}
 8000c9a:	0042      	lsls	r2, r0, #1
 8000c9c:	0245      	lsls	r5, r0, #9
 8000c9e:	024e      	lsls	r6, r1, #9
 8000ca0:	004c      	lsls	r4, r1, #1
 8000ca2:	0fc3      	lsrs	r3, r0, #31
 8000ca4:	0a6d      	lsrs	r5, r5, #9
 8000ca6:	0e12      	lsrs	r2, r2, #24
 8000ca8:	0a76      	lsrs	r6, r6, #9
 8000caa:	0e24      	lsrs	r4, r4, #24
 8000cac:	0fc8      	lsrs	r0, r1, #31
 8000cae:	2aff      	cmp	r2, #255	; 0xff
 8000cb0:	d01b      	beq.n	8000cea <__gesf2+0x52>
 8000cb2:	2cff      	cmp	r4, #255	; 0xff
 8000cb4:	d00e      	beq.n	8000cd4 <__gesf2+0x3c>
 8000cb6:	2a00      	cmp	r2, #0
 8000cb8:	d11b      	bne.n	8000cf2 <__gesf2+0x5a>
 8000cba:	2c00      	cmp	r4, #0
 8000cbc:	d101      	bne.n	8000cc2 <__gesf2+0x2a>
 8000cbe:	2e00      	cmp	r6, #0
 8000cc0:	d01c      	beq.n	8000cfc <__gesf2+0x64>
 8000cc2:	2d00      	cmp	r5, #0
 8000cc4:	d00c      	beq.n	8000ce0 <__gesf2+0x48>
 8000cc6:	4283      	cmp	r3, r0
 8000cc8:	d01c      	beq.n	8000d04 <__gesf2+0x6c>
 8000cca:	2102      	movs	r1, #2
 8000ccc:	1e58      	subs	r0, r3, #1
 8000cce:	4008      	ands	r0, r1
 8000cd0:	3801      	subs	r0, #1
 8000cd2:	bd70      	pop	{r4, r5, r6, pc}
 8000cd4:	2e00      	cmp	r6, #0
 8000cd6:	d122      	bne.n	8000d1e <__gesf2+0x86>
 8000cd8:	2a00      	cmp	r2, #0
 8000cda:	d1f4      	bne.n	8000cc6 <__gesf2+0x2e>
 8000cdc:	2d00      	cmp	r5, #0
 8000cde:	d1f2      	bne.n	8000cc6 <__gesf2+0x2e>
 8000ce0:	2800      	cmp	r0, #0
 8000ce2:	d1f6      	bne.n	8000cd2 <__gesf2+0x3a>
 8000ce4:	2001      	movs	r0, #1
 8000ce6:	4240      	negs	r0, r0
 8000ce8:	e7f3      	b.n	8000cd2 <__gesf2+0x3a>
 8000cea:	2d00      	cmp	r5, #0
 8000cec:	d117      	bne.n	8000d1e <__gesf2+0x86>
 8000cee:	2cff      	cmp	r4, #255	; 0xff
 8000cf0:	d0f0      	beq.n	8000cd4 <__gesf2+0x3c>
 8000cf2:	2c00      	cmp	r4, #0
 8000cf4:	d1e7      	bne.n	8000cc6 <__gesf2+0x2e>
 8000cf6:	2e00      	cmp	r6, #0
 8000cf8:	d1e5      	bne.n	8000cc6 <__gesf2+0x2e>
 8000cfa:	e7e6      	b.n	8000cca <__gesf2+0x32>
 8000cfc:	2000      	movs	r0, #0
 8000cfe:	2d00      	cmp	r5, #0
 8000d00:	d0e7      	beq.n	8000cd2 <__gesf2+0x3a>
 8000d02:	e7e2      	b.n	8000cca <__gesf2+0x32>
 8000d04:	42a2      	cmp	r2, r4
 8000d06:	dc05      	bgt.n	8000d14 <__gesf2+0x7c>
 8000d08:	dbea      	blt.n	8000ce0 <__gesf2+0x48>
 8000d0a:	42b5      	cmp	r5, r6
 8000d0c:	d802      	bhi.n	8000d14 <__gesf2+0x7c>
 8000d0e:	d3e7      	bcc.n	8000ce0 <__gesf2+0x48>
 8000d10:	2000      	movs	r0, #0
 8000d12:	e7de      	b.n	8000cd2 <__gesf2+0x3a>
 8000d14:	4243      	negs	r3, r0
 8000d16:	4158      	adcs	r0, r3
 8000d18:	0040      	lsls	r0, r0, #1
 8000d1a:	3801      	subs	r0, #1
 8000d1c:	e7d9      	b.n	8000cd2 <__gesf2+0x3a>
 8000d1e:	2002      	movs	r0, #2
 8000d20:	4240      	negs	r0, r0
 8000d22:	e7d6      	b.n	8000cd2 <__gesf2+0x3a>

08000d24 <__lesf2>:
 8000d24:	b570      	push	{r4, r5, r6, lr}
 8000d26:	0042      	lsls	r2, r0, #1
 8000d28:	0245      	lsls	r5, r0, #9
 8000d2a:	024e      	lsls	r6, r1, #9
 8000d2c:	004c      	lsls	r4, r1, #1
 8000d2e:	0fc3      	lsrs	r3, r0, #31
 8000d30:	0a6d      	lsrs	r5, r5, #9
 8000d32:	0e12      	lsrs	r2, r2, #24
 8000d34:	0a76      	lsrs	r6, r6, #9
 8000d36:	0e24      	lsrs	r4, r4, #24
 8000d38:	0fc8      	lsrs	r0, r1, #31
 8000d3a:	2aff      	cmp	r2, #255	; 0xff
 8000d3c:	d00b      	beq.n	8000d56 <__lesf2+0x32>
 8000d3e:	2cff      	cmp	r4, #255	; 0xff
 8000d40:	d00d      	beq.n	8000d5e <__lesf2+0x3a>
 8000d42:	2a00      	cmp	r2, #0
 8000d44:	d11f      	bne.n	8000d86 <__lesf2+0x62>
 8000d46:	2c00      	cmp	r4, #0
 8000d48:	d116      	bne.n	8000d78 <__lesf2+0x54>
 8000d4a:	2e00      	cmp	r6, #0
 8000d4c:	d114      	bne.n	8000d78 <__lesf2+0x54>
 8000d4e:	2000      	movs	r0, #0
 8000d50:	2d00      	cmp	r5, #0
 8000d52:	d010      	beq.n	8000d76 <__lesf2+0x52>
 8000d54:	e009      	b.n	8000d6a <__lesf2+0x46>
 8000d56:	2d00      	cmp	r5, #0
 8000d58:	d10c      	bne.n	8000d74 <__lesf2+0x50>
 8000d5a:	2cff      	cmp	r4, #255	; 0xff
 8000d5c:	d113      	bne.n	8000d86 <__lesf2+0x62>
 8000d5e:	2e00      	cmp	r6, #0
 8000d60:	d108      	bne.n	8000d74 <__lesf2+0x50>
 8000d62:	2a00      	cmp	r2, #0
 8000d64:	d008      	beq.n	8000d78 <__lesf2+0x54>
 8000d66:	4283      	cmp	r3, r0
 8000d68:	d012      	beq.n	8000d90 <__lesf2+0x6c>
 8000d6a:	2102      	movs	r1, #2
 8000d6c:	1e58      	subs	r0, r3, #1
 8000d6e:	4008      	ands	r0, r1
 8000d70:	3801      	subs	r0, #1
 8000d72:	e000      	b.n	8000d76 <__lesf2+0x52>
 8000d74:	2002      	movs	r0, #2
 8000d76:	bd70      	pop	{r4, r5, r6, pc}
 8000d78:	2d00      	cmp	r5, #0
 8000d7a:	d1f4      	bne.n	8000d66 <__lesf2+0x42>
 8000d7c:	2800      	cmp	r0, #0
 8000d7e:	d1fa      	bne.n	8000d76 <__lesf2+0x52>
 8000d80:	2001      	movs	r0, #1
 8000d82:	4240      	negs	r0, r0
 8000d84:	e7f7      	b.n	8000d76 <__lesf2+0x52>
 8000d86:	2c00      	cmp	r4, #0
 8000d88:	d1ed      	bne.n	8000d66 <__lesf2+0x42>
 8000d8a:	2e00      	cmp	r6, #0
 8000d8c:	d1eb      	bne.n	8000d66 <__lesf2+0x42>
 8000d8e:	e7ec      	b.n	8000d6a <__lesf2+0x46>
 8000d90:	42a2      	cmp	r2, r4
 8000d92:	dc05      	bgt.n	8000da0 <__lesf2+0x7c>
 8000d94:	dbf2      	blt.n	8000d7c <__lesf2+0x58>
 8000d96:	42b5      	cmp	r5, r6
 8000d98:	d802      	bhi.n	8000da0 <__lesf2+0x7c>
 8000d9a:	d3ef      	bcc.n	8000d7c <__lesf2+0x58>
 8000d9c:	2000      	movs	r0, #0
 8000d9e:	e7ea      	b.n	8000d76 <__lesf2+0x52>
 8000da0:	4243      	negs	r3, r0
 8000da2:	4158      	adcs	r0, r3
 8000da4:	0040      	lsls	r0, r0, #1
 8000da6:	3801      	subs	r0, #1
 8000da8:	e7e5      	b.n	8000d76 <__lesf2+0x52>
 8000daa:	46c0      	nop			; (mov r8, r8)

08000dac <__aeabi_fmul>:
 8000dac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000dae:	464f      	mov	r7, r9
 8000db0:	4646      	mov	r6, r8
 8000db2:	46d6      	mov	lr, sl
 8000db4:	0244      	lsls	r4, r0, #9
 8000db6:	0045      	lsls	r5, r0, #1
 8000db8:	b5c0      	push	{r6, r7, lr}
 8000dba:	0a64      	lsrs	r4, r4, #9
 8000dbc:	1c0f      	adds	r7, r1, #0
 8000dbe:	0e2d      	lsrs	r5, r5, #24
 8000dc0:	0fc6      	lsrs	r6, r0, #31
 8000dc2:	2d00      	cmp	r5, #0
 8000dc4:	d100      	bne.n	8000dc8 <__aeabi_fmul+0x1c>
 8000dc6:	e08d      	b.n	8000ee4 <__aeabi_fmul+0x138>
 8000dc8:	2dff      	cmp	r5, #255	; 0xff
 8000dca:	d100      	bne.n	8000dce <__aeabi_fmul+0x22>
 8000dcc:	e092      	b.n	8000ef4 <__aeabi_fmul+0x148>
 8000dce:	2300      	movs	r3, #0
 8000dd0:	2080      	movs	r0, #128	; 0x80
 8000dd2:	4699      	mov	r9, r3
 8000dd4:	469a      	mov	sl, r3
 8000dd6:	00e4      	lsls	r4, r4, #3
 8000dd8:	04c0      	lsls	r0, r0, #19
 8000dda:	4304      	orrs	r4, r0
 8000ddc:	3d7f      	subs	r5, #127	; 0x7f
 8000dde:	0278      	lsls	r0, r7, #9
 8000de0:	0a43      	lsrs	r3, r0, #9
 8000de2:	4698      	mov	r8, r3
 8000de4:	007b      	lsls	r3, r7, #1
 8000de6:	0e1b      	lsrs	r3, r3, #24
 8000de8:	0fff      	lsrs	r7, r7, #31
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d100      	bne.n	8000df0 <__aeabi_fmul+0x44>
 8000dee:	e070      	b.n	8000ed2 <__aeabi_fmul+0x126>
 8000df0:	2bff      	cmp	r3, #255	; 0xff
 8000df2:	d100      	bne.n	8000df6 <__aeabi_fmul+0x4a>
 8000df4:	e086      	b.n	8000f04 <__aeabi_fmul+0x158>
 8000df6:	4642      	mov	r2, r8
 8000df8:	00d0      	lsls	r0, r2, #3
 8000dfa:	2280      	movs	r2, #128	; 0x80
 8000dfc:	3b7f      	subs	r3, #127	; 0x7f
 8000dfe:	18ed      	adds	r5, r5, r3
 8000e00:	2300      	movs	r3, #0
 8000e02:	04d2      	lsls	r2, r2, #19
 8000e04:	4302      	orrs	r2, r0
 8000e06:	4690      	mov	r8, r2
 8000e08:	469c      	mov	ip, r3
 8000e0a:	0031      	movs	r1, r6
 8000e0c:	464b      	mov	r3, r9
 8000e0e:	4079      	eors	r1, r7
 8000e10:	1c68      	adds	r0, r5, #1
 8000e12:	2b0f      	cmp	r3, #15
 8000e14:	d81c      	bhi.n	8000e50 <__aeabi_fmul+0xa4>
 8000e16:	4a76      	ldr	r2, [pc, #472]	; (8000ff0 <__aeabi_fmul+0x244>)
 8000e18:	009b      	lsls	r3, r3, #2
 8000e1a:	58d3      	ldr	r3, [r2, r3]
 8000e1c:	469f      	mov	pc, r3
 8000e1e:	0039      	movs	r1, r7
 8000e20:	4644      	mov	r4, r8
 8000e22:	46e2      	mov	sl, ip
 8000e24:	4653      	mov	r3, sl
 8000e26:	2b02      	cmp	r3, #2
 8000e28:	d00f      	beq.n	8000e4a <__aeabi_fmul+0x9e>
 8000e2a:	2b03      	cmp	r3, #3
 8000e2c:	d100      	bne.n	8000e30 <__aeabi_fmul+0x84>
 8000e2e:	e0d7      	b.n	8000fe0 <__aeabi_fmul+0x234>
 8000e30:	2b01      	cmp	r3, #1
 8000e32:	d137      	bne.n	8000ea4 <__aeabi_fmul+0xf8>
 8000e34:	2000      	movs	r0, #0
 8000e36:	2400      	movs	r4, #0
 8000e38:	05c0      	lsls	r0, r0, #23
 8000e3a:	4320      	orrs	r0, r4
 8000e3c:	07c9      	lsls	r1, r1, #31
 8000e3e:	4308      	orrs	r0, r1
 8000e40:	bce0      	pop	{r5, r6, r7}
 8000e42:	46ba      	mov	sl, r7
 8000e44:	46b1      	mov	r9, r6
 8000e46:	46a8      	mov	r8, r5
 8000e48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e4a:	20ff      	movs	r0, #255	; 0xff
 8000e4c:	2400      	movs	r4, #0
 8000e4e:	e7f3      	b.n	8000e38 <__aeabi_fmul+0x8c>
 8000e50:	0c26      	lsrs	r6, r4, #16
 8000e52:	0424      	lsls	r4, r4, #16
 8000e54:	0c22      	lsrs	r2, r4, #16
 8000e56:	4644      	mov	r4, r8
 8000e58:	0424      	lsls	r4, r4, #16
 8000e5a:	0c24      	lsrs	r4, r4, #16
 8000e5c:	4643      	mov	r3, r8
 8000e5e:	0027      	movs	r7, r4
 8000e60:	0c1b      	lsrs	r3, r3, #16
 8000e62:	4357      	muls	r7, r2
 8000e64:	4374      	muls	r4, r6
 8000e66:	435a      	muls	r2, r3
 8000e68:	435e      	muls	r6, r3
 8000e6a:	1912      	adds	r2, r2, r4
 8000e6c:	0c3b      	lsrs	r3, r7, #16
 8000e6e:	189b      	adds	r3, r3, r2
 8000e70:	429c      	cmp	r4, r3
 8000e72:	d903      	bls.n	8000e7c <__aeabi_fmul+0xd0>
 8000e74:	2280      	movs	r2, #128	; 0x80
 8000e76:	0252      	lsls	r2, r2, #9
 8000e78:	4694      	mov	ip, r2
 8000e7a:	4466      	add	r6, ip
 8000e7c:	043f      	lsls	r7, r7, #16
 8000e7e:	041a      	lsls	r2, r3, #16
 8000e80:	0c3f      	lsrs	r7, r7, #16
 8000e82:	19d2      	adds	r2, r2, r7
 8000e84:	0194      	lsls	r4, r2, #6
 8000e86:	1e67      	subs	r7, r4, #1
 8000e88:	41bc      	sbcs	r4, r7
 8000e8a:	0c1b      	lsrs	r3, r3, #16
 8000e8c:	0e92      	lsrs	r2, r2, #26
 8000e8e:	199b      	adds	r3, r3, r6
 8000e90:	4314      	orrs	r4, r2
 8000e92:	019b      	lsls	r3, r3, #6
 8000e94:	431c      	orrs	r4, r3
 8000e96:	011b      	lsls	r3, r3, #4
 8000e98:	d400      	bmi.n	8000e9c <__aeabi_fmul+0xf0>
 8000e9a:	e09b      	b.n	8000fd4 <__aeabi_fmul+0x228>
 8000e9c:	2301      	movs	r3, #1
 8000e9e:	0862      	lsrs	r2, r4, #1
 8000ea0:	401c      	ands	r4, r3
 8000ea2:	4314      	orrs	r4, r2
 8000ea4:	0002      	movs	r2, r0
 8000ea6:	327f      	adds	r2, #127	; 0x7f
 8000ea8:	2a00      	cmp	r2, #0
 8000eaa:	dd64      	ble.n	8000f76 <__aeabi_fmul+0x1ca>
 8000eac:	0763      	lsls	r3, r4, #29
 8000eae:	d004      	beq.n	8000eba <__aeabi_fmul+0x10e>
 8000eb0:	230f      	movs	r3, #15
 8000eb2:	4023      	ands	r3, r4
 8000eb4:	2b04      	cmp	r3, #4
 8000eb6:	d000      	beq.n	8000eba <__aeabi_fmul+0x10e>
 8000eb8:	3404      	adds	r4, #4
 8000eba:	0123      	lsls	r3, r4, #4
 8000ebc:	d503      	bpl.n	8000ec6 <__aeabi_fmul+0x11a>
 8000ebe:	0002      	movs	r2, r0
 8000ec0:	4b4c      	ldr	r3, [pc, #304]	; (8000ff4 <__aeabi_fmul+0x248>)
 8000ec2:	3280      	adds	r2, #128	; 0x80
 8000ec4:	401c      	ands	r4, r3
 8000ec6:	2afe      	cmp	r2, #254	; 0xfe
 8000ec8:	dcbf      	bgt.n	8000e4a <__aeabi_fmul+0x9e>
 8000eca:	01a4      	lsls	r4, r4, #6
 8000ecc:	0a64      	lsrs	r4, r4, #9
 8000ece:	b2d0      	uxtb	r0, r2
 8000ed0:	e7b2      	b.n	8000e38 <__aeabi_fmul+0x8c>
 8000ed2:	4643      	mov	r3, r8
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d13d      	bne.n	8000f54 <__aeabi_fmul+0x1a8>
 8000ed8:	464a      	mov	r2, r9
 8000eda:	3301      	adds	r3, #1
 8000edc:	431a      	orrs	r2, r3
 8000ede:	4691      	mov	r9, r2
 8000ee0:	469c      	mov	ip, r3
 8000ee2:	e792      	b.n	8000e0a <__aeabi_fmul+0x5e>
 8000ee4:	2c00      	cmp	r4, #0
 8000ee6:	d129      	bne.n	8000f3c <__aeabi_fmul+0x190>
 8000ee8:	2304      	movs	r3, #4
 8000eea:	4699      	mov	r9, r3
 8000eec:	3b03      	subs	r3, #3
 8000eee:	2500      	movs	r5, #0
 8000ef0:	469a      	mov	sl, r3
 8000ef2:	e774      	b.n	8000dde <__aeabi_fmul+0x32>
 8000ef4:	2c00      	cmp	r4, #0
 8000ef6:	d11b      	bne.n	8000f30 <__aeabi_fmul+0x184>
 8000ef8:	2308      	movs	r3, #8
 8000efa:	4699      	mov	r9, r3
 8000efc:	3b06      	subs	r3, #6
 8000efe:	25ff      	movs	r5, #255	; 0xff
 8000f00:	469a      	mov	sl, r3
 8000f02:	e76c      	b.n	8000dde <__aeabi_fmul+0x32>
 8000f04:	4643      	mov	r3, r8
 8000f06:	35ff      	adds	r5, #255	; 0xff
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d10b      	bne.n	8000f24 <__aeabi_fmul+0x178>
 8000f0c:	2302      	movs	r3, #2
 8000f0e:	464a      	mov	r2, r9
 8000f10:	431a      	orrs	r2, r3
 8000f12:	4691      	mov	r9, r2
 8000f14:	469c      	mov	ip, r3
 8000f16:	e778      	b.n	8000e0a <__aeabi_fmul+0x5e>
 8000f18:	4653      	mov	r3, sl
 8000f1a:	0031      	movs	r1, r6
 8000f1c:	2b02      	cmp	r3, #2
 8000f1e:	d000      	beq.n	8000f22 <__aeabi_fmul+0x176>
 8000f20:	e783      	b.n	8000e2a <__aeabi_fmul+0x7e>
 8000f22:	e792      	b.n	8000e4a <__aeabi_fmul+0x9e>
 8000f24:	2303      	movs	r3, #3
 8000f26:	464a      	mov	r2, r9
 8000f28:	431a      	orrs	r2, r3
 8000f2a:	4691      	mov	r9, r2
 8000f2c:	469c      	mov	ip, r3
 8000f2e:	e76c      	b.n	8000e0a <__aeabi_fmul+0x5e>
 8000f30:	230c      	movs	r3, #12
 8000f32:	4699      	mov	r9, r3
 8000f34:	3b09      	subs	r3, #9
 8000f36:	25ff      	movs	r5, #255	; 0xff
 8000f38:	469a      	mov	sl, r3
 8000f3a:	e750      	b.n	8000dde <__aeabi_fmul+0x32>
 8000f3c:	0020      	movs	r0, r4
 8000f3e:	f000 facf 	bl	80014e0 <__clzsi2>
 8000f42:	2576      	movs	r5, #118	; 0x76
 8000f44:	1f43      	subs	r3, r0, #5
 8000f46:	409c      	lsls	r4, r3
 8000f48:	2300      	movs	r3, #0
 8000f4a:	426d      	negs	r5, r5
 8000f4c:	4699      	mov	r9, r3
 8000f4e:	469a      	mov	sl, r3
 8000f50:	1a2d      	subs	r5, r5, r0
 8000f52:	e744      	b.n	8000dde <__aeabi_fmul+0x32>
 8000f54:	4640      	mov	r0, r8
 8000f56:	f000 fac3 	bl	80014e0 <__clzsi2>
 8000f5a:	4642      	mov	r2, r8
 8000f5c:	1f43      	subs	r3, r0, #5
 8000f5e:	409a      	lsls	r2, r3
 8000f60:	2300      	movs	r3, #0
 8000f62:	1a2d      	subs	r5, r5, r0
 8000f64:	4690      	mov	r8, r2
 8000f66:	469c      	mov	ip, r3
 8000f68:	3d76      	subs	r5, #118	; 0x76
 8000f6a:	e74e      	b.n	8000e0a <__aeabi_fmul+0x5e>
 8000f6c:	2480      	movs	r4, #128	; 0x80
 8000f6e:	2100      	movs	r1, #0
 8000f70:	20ff      	movs	r0, #255	; 0xff
 8000f72:	03e4      	lsls	r4, r4, #15
 8000f74:	e760      	b.n	8000e38 <__aeabi_fmul+0x8c>
 8000f76:	2301      	movs	r3, #1
 8000f78:	1a9b      	subs	r3, r3, r2
 8000f7a:	2b1b      	cmp	r3, #27
 8000f7c:	dd00      	ble.n	8000f80 <__aeabi_fmul+0x1d4>
 8000f7e:	e759      	b.n	8000e34 <__aeabi_fmul+0x88>
 8000f80:	0022      	movs	r2, r4
 8000f82:	309e      	adds	r0, #158	; 0x9e
 8000f84:	40da      	lsrs	r2, r3
 8000f86:	4084      	lsls	r4, r0
 8000f88:	0013      	movs	r3, r2
 8000f8a:	1e62      	subs	r2, r4, #1
 8000f8c:	4194      	sbcs	r4, r2
 8000f8e:	431c      	orrs	r4, r3
 8000f90:	0763      	lsls	r3, r4, #29
 8000f92:	d004      	beq.n	8000f9e <__aeabi_fmul+0x1f2>
 8000f94:	230f      	movs	r3, #15
 8000f96:	4023      	ands	r3, r4
 8000f98:	2b04      	cmp	r3, #4
 8000f9a:	d000      	beq.n	8000f9e <__aeabi_fmul+0x1f2>
 8000f9c:	3404      	adds	r4, #4
 8000f9e:	0163      	lsls	r3, r4, #5
 8000fa0:	d51a      	bpl.n	8000fd8 <__aeabi_fmul+0x22c>
 8000fa2:	2001      	movs	r0, #1
 8000fa4:	2400      	movs	r4, #0
 8000fa6:	e747      	b.n	8000e38 <__aeabi_fmul+0x8c>
 8000fa8:	2080      	movs	r0, #128	; 0x80
 8000faa:	03c0      	lsls	r0, r0, #15
 8000fac:	4204      	tst	r4, r0
 8000fae:	d009      	beq.n	8000fc4 <__aeabi_fmul+0x218>
 8000fb0:	4643      	mov	r3, r8
 8000fb2:	4203      	tst	r3, r0
 8000fb4:	d106      	bne.n	8000fc4 <__aeabi_fmul+0x218>
 8000fb6:	4644      	mov	r4, r8
 8000fb8:	4304      	orrs	r4, r0
 8000fba:	0264      	lsls	r4, r4, #9
 8000fbc:	0039      	movs	r1, r7
 8000fbe:	20ff      	movs	r0, #255	; 0xff
 8000fc0:	0a64      	lsrs	r4, r4, #9
 8000fc2:	e739      	b.n	8000e38 <__aeabi_fmul+0x8c>
 8000fc4:	2080      	movs	r0, #128	; 0x80
 8000fc6:	03c0      	lsls	r0, r0, #15
 8000fc8:	4304      	orrs	r4, r0
 8000fca:	0264      	lsls	r4, r4, #9
 8000fcc:	0031      	movs	r1, r6
 8000fce:	20ff      	movs	r0, #255	; 0xff
 8000fd0:	0a64      	lsrs	r4, r4, #9
 8000fd2:	e731      	b.n	8000e38 <__aeabi_fmul+0x8c>
 8000fd4:	0028      	movs	r0, r5
 8000fd6:	e765      	b.n	8000ea4 <__aeabi_fmul+0xf8>
 8000fd8:	01a4      	lsls	r4, r4, #6
 8000fda:	2000      	movs	r0, #0
 8000fdc:	0a64      	lsrs	r4, r4, #9
 8000fde:	e72b      	b.n	8000e38 <__aeabi_fmul+0x8c>
 8000fe0:	2080      	movs	r0, #128	; 0x80
 8000fe2:	03c0      	lsls	r0, r0, #15
 8000fe4:	4304      	orrs	r4, r0
 8000fe6:	0264      	lsls	r4, r4, #9
 8000fe8:	20ff      	movs	r0, #255	; 0xff
 8000fea:	0a64      	lsrs	r4, r4, #9
 8000fec:	e724      	b.n	8000e38 <__aeabi_fmul+0x8c>
 8000fee:	46c0      	nop			; (mov r8, r8)
 8000ff0:	08015bcc 	.word	0x08015bcc
 8000ff4:	f7ffffff 	.word	0xf7ffffff

08000ff8 <__aeabi_fsub>:
 8000ff8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ffa:	46ce      	mov	lr, r9
 8000ffc:	4647      	mov	r7, r8
 8000ffe:	0243      	lsls	r3, r0, #9
 8001000:	0a5b      	lsrs	r3, r3, #9
 8001002:	024e      	lsls	r6, r1, #9
 8001004:	00da      	lsls	r2, r3, #3
 8001006:	4694      	mov	ip, r2
 8001008:	0a72      	lsrs	r2, r6, #9
 800100a:	4691      	mov	r9, r2
 800100c:	0045      	lsls	r5, r0, #1
 800100e:	004a      	lsls	r2, r1, #1
 8001010:	b580      	push	{r7, lr}
 8001012:	0e2d      	lsrs	r5, r5, #24
 8001014:	001f      	movs	r7, r3
 8001016:	0fc4      	lsrs	r4, r0, #31
 8001018:	0e12      	lsrs	r2, r2, #24
 800101a:	0fc9      	lsrs	r1, r1, #31
 800101c:	09b6      	lsrs	r6, r6, #6
 800101e:	2aff      	cmp	r2, #255	; 0xff
 8001020:	d05b      	beq.n	80010da <__aeabi_fsub+0xe2>
 8001022:	2001      	movs	r0, #1
 8001024:	4041      	eors	r1, r0
 8001026:	428c      	cmp	r4, r1
 8001028:	d039      	beq.n	800109e <__aeabi_fsub+0xa6>
 800102a:	1aa8      	subs	r0, r5, r2
 800102c:	2800      	cmp	r0, #0
 800102e:	dd5a      	ble.n	80010e6 <__aeabi_fsub+0xee>
 8001030:	2a00      	cmp	r2, #0
 8001032:	d06a      	beq.n	800110a <__aeabi_fsub+0x112>
 8001034:	2dff      	cmp	r5, #255	; 0xff
 8001036:	d100      	bne.n	800103a <__aeabi_fsub+0x42>
 8001038:	e0d9      	b.n	80011ee <__aeabi_fsub+0x1f6>
 800103a:	2280      	movs	r2, #128	; 0x80
 800103c:	04d2      	lsls	r2, r2, #19
 800103e:	4316      	orrs	r6, r2
 8001040:	281b      	cmp	r0, #27
 8001042:	dc00      	bgt.n	8001046 <__aeabi_fsub+0x4e>
 8001044:	e0e9      	b.n	800121a <__aeabi_fsub+0x222>
 8001046:	2001      	movs	r0, #1
 8001048:	4663      	mov	r3, ip
 800104a:	1a18      	subs	r0, r3, r0
 800104c:	0143      	lsls	r3, r0, #5
 800104e:	d400      	bmi.n	8001052 <__aeabi_fsub+0x5a>
 8001050:	e0b4      	b.n	80011bc <__aeabi_fsub+0x1c4>
 8001052:	0180      	lsls	r0, r0, #6
 8001054:	0987      	lsrs	r7, r0, #6
 8001056:	0038      	movs	r0, r7
 8001058:	f000 fa42 	bl	80014e0 <__clzsi2>
 800105c:	3805      	subs	r0, #5
 800105e:	4087      	lsls	r7, r0
 8001060:	4285      	cmp	r5, r0
 8001062:	dc00      	bgt.n	8001066 <__aeabi_fsub+0x6e>
 8001064:	e0cc      	b.n	8001200 <__aeabi_fsub+0x208>
 8001066:	1a2d      	subs	r5, r5, r0
 8001068:	48b5      	ldr	r0, [pc, #724]	; (8001340 <__aeabi_fsub+0x348>)
 800106a:	4038      	ands	r0, r7
 800106c:	0743      	lsls	r3, r0, #29
 800106e:	d004      	beq.n	800107a <__aeabi_fsub+0x82>
 8001070:	230f      	movs	r3, #15
 8001072:	4003      	ands	r3, r0
 8001074:	2b04      	cmp	r3, #4
 8001076:	d000      	beq.n	800107a <__aeabi_fsub+0x82>
 8001078:	3004      	adds	r0, #4
 800107a:	0143      	lsls	r3, r0, #5
 800107c:	d400      	bmi.n	8001080 <__aeabi_fsub+0x88>
 800107e:	e0a0      	b.n	80011c2 <__aeabi_fsub+0x1ca>
 8001080:	1c6a      	adds	r2, r5, #1
 8001082:	2dfe      	cmp	r5, #254	; 0xfe
 8001084:	d100      	bne.n	8001088 <__aeabi_fsub+0x90>
 8001086:	e08d      	b.n	80011a4 <__aeabi_fsub+0x1ac>
 8001088:	0180      	lsls	r0, r0, #6
 800108a:	0a47      	lsrs	r7, r0, #9
 800108c:	b2d2      	uxtb	r2, r2
 800108e:	05d0      	lsls	r0, r2, #23
 8001090:	4338      	orrs	r0, r7
 8001092:	07e4      	lsls	r4, r4, #31
 8001094:	4320      	orrs	r0, r4
 8001096:	bcc0      	pop	{r6, r7}
 8001098:	46b9      	mov	r9, r7
 800109a:	46b0      	mov	r8, r6
 800109c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800109e:	1aa8      	subs	r0, r5, r2
 80010a0:	4680      	mov	r8, r0
 80010a2:	2800      	cmp	r0, #0
 80010a4:	dd45      	ble.n	8001132 <__aeabi_fsub+0x13a>
 80010a6:	2a00      	cmp	r2, #0
 80010a8:	d070      	beq.n	800118c <__aeabi_fsub+0x194>
 80010aa:	2dff      	cmp	r5, #255	; 0xff
 80010ac:	d100      	bne.n	80010b0 <__aeabi_fsub+0xb8>
 80010ae:	e09e      	b.n	80011ee <__aeabi_fsub+0x1f6>
 80010b0:	2380      	movs	r3, #128	; 0x80
 80010b2:	04db      	lsls	r3, r3, #19
 80010b4:	431e      	orrs	r6, r3
 80010b6:	4643      	mov	r3, r8
 80010b8:	2b1b      	cmp	r3, #27
 80010ba:	dc00      	bgt.n	80010be <__aeabi_fsub+0xc6>
 80010bc:	e0d2      	b.n	8001264 <__aeabi_fsub+0x26c>
 80010be:	2001      	movs	r0, #1
 80010c0:	4460      	add	r0, ip
 80010c2:	0143      	lsls	r3, r0, #5
 80010c4:	d57a      	bpl.n	80011bc <__aeabi_fsub+0x1c4>
 80010c6:	3501      	adds	r5, #1
 80010c8:	2dff      	cmp	r5, #255	; 0xff
 80010ca:	d06b      	beq.n	80011a4 <__aeabi_fsub+0x1ac>
 80010cc:	2301      	movs	r3, #1
 80010ce:	4a9d      	ldr	r2, [pc, #628]	; (8001344 <__aeabi_fsub+0x34c>)
 80010d0:	4003      	ands	r3, r0
 80010d2:	0840      	lsrs	r0, r0, #1
 80010d4:	4010      	ands	r0, r2
 80010d6:	4318      	orrs	r0, r3
 80010d8:	e7c8      	b.n	800106c <__aeabi_fsub+0x74>
 80010da:	2e00      	cmp	r6, #0
 80010dc:	d020      	beq.n	8001120 <__aeabi_fsub+0x128>
 80010de:	428c      	cmp	r4, r1
 80010e0:	d023      	beq.n	800112a <__aeabi_fsub+0x132>
 80010e2:	0028      	movs	r0, r5
 80010e4:	38ff      	subs	r0, #255	; 0xff
 80010e6:	2800      	cmp	r0, #0
 80010e8:	d039      	beq.n	800115e <__aeabi_fsub+0x166>
 80010ea:	1b57      	subs	r7, r2, r5
 80010ec:	2d00      	cmp	r5, #0
 80010ee:	d000      	beq.n	80010f2 <__aeabi_fsub+0xfa>
 80010f0:	e09d      	b.n	800122e <__aeabi_fsub+0x236>
 80010f2:	4663      	mov	r3, ip
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d100      	bne.n	80010fa <__aeabi_fsub+0x102>
 80010f8:	e0db      	b.n	80012b2 <__aeabi_fsub+0x2ba>
 80010fa:	1e7b      	subs	r3, r7, #1
 80010fc:	2f01      	cmp	r7, #1
 80010fe:	d100      	bne.n	8001102 <__aeabi_fsub+0x10a>
 8001100:	e10d      	b.n	800131e <__aeabi_fsub+0x326>
 8001102:	2fff      	cmp	r7, #255	; 0xff
 8001104:	d071      	beq.n	80011ea <__aeabi_fsub+0x1f2>
 8001106:	001f      	movs	r7, r3
 8001108:	e098      	b.n	800123c <__aeabi_fsub+0x244>
 800110a:	2e00      	cmp	r6, #0
 800110c:	d100      	bne.n	8001110 <__aeabi_fsub+0x118>
 800110e:	e0a7      	b.n	8001260 <__aeabi_fsub+0x268>
 8001110:	1e42      	subs	r2, r0, #1
 8001112:	2801      	cmp	r0, #1
 8001114:	d100      	bne.n	8001118 <__aeabi_fsub+0x120>
 8001116:	e0e6      	b.n	80012e6 <__aeabi_fsub+0x2ee>
 8001118:	28ff      	cmp	r0, #255	; 0xff
 800111a:	d068      	beq.n	80011ee <__aeabi_fsub+0x1f6>
 800111c:	0010      	movs	r0, r2
 800111e:	e78f      	b.n	8001040 <__aeabi_fsub+0x48>
 8001120:	2001      	movs	r0, #1
 8001122:	4041      	eors	r1, r0
 8001124:	42a1      	cmp	r1, r4
 8001126:	d000      	beq.n	800112a <__aeabi_fsub+0x132>
 8001128:	e77f      	b.n	800102a <__aeabi_fsub+0x32>
 800112a:	20ff      	movs	r0, #255	; 0xff
 800112c:	4240      	negs	r0, r0
 800112e:	4680      	mov	r8, r0
 8001130:	44a8      	add	r8, r5
 8001132:	4640      	mov	r0, r8
 8001134:	2800      	cmp	r0, #0
 8001136:	d038      	beq.n	80011aa <__aeabi_fsub+0x1b2>
 8001138:	1b51      	subs	r1, r2, r5
 800113a:	2d00      	cmp	r5, #0
 800113c:	d100      	bne.n	8001140 <__aeabi_fsub+0x148>
 800113e:	e0ae      	b.n	800129e <__aeabi_fsub+0x2a6>
 8001140:	2aff      	cmp	r2, #255	; 0xff
 8001142:	d100      	bne.n	8001146 <__aeabi_fsub+0x14e>
 8001144:	e0df      	b.n	8001306 <__aeabi_fsub+0x30e>
 8001146:	2380      	movs	r3, #128	; 0x80
 8001148:	4660      	mov	r0, ip
 800114a:	04db      	lsls	r3, r3, #19
 800114c:	4318      	orrs	r0, r3
 800114e:	4684      	mov	ip, r0
 8001150:	291b      	cmp	r1, #27
 8001152:	dc00      	bgt.n	8001156 <__aeabi_fsub+0x15e>
 8001154:	e0d9      	b.n	800130a <__aeabi_fsub+0x312>
 8001156:	2001      	movs	r0, #1
 8001158:	0015      	movs	r5, r2
 800115a:	1980      	adds	r0, r0, r6
 800115c:	e7b1      	b.n	80010c2 <__aeabi_fsub+0xca>
 800115e:	20fe      	movs	r0, #254	; 0xfe
 8001160:	1c6a      	adds	r2, r5, #1
 8001162:	4210      	tst	r0, r2
 8001164:	d171      	bne.n	800124a <__aeabi_fsub+0x252>
 8001166:	2d00      	cmp	r5, #0
 8001168:	d000      	beq.n	800116c <__aeabi_fsub+0x174>
 800116a:	e0a6      	b.n	80012ba <__aeabi_fsub+0x2c2>
 800116c:	4663      	mov	r3, ip
 800116e:	2b00      	cmp	r3, #0
 8001170:	d100      	bne.n	8001174 <__aeabi_fsub+0x17c>
 8001172:	e0d9      	b.n	8001328 <__aeabi_fsub+0x330>
 8001174:	2200      	movs	r2, #0
 8001176:	2e00      	cmp	r6, #0
 8001178:	d100      	bne.n	800117c <__aeabi_fsub+0x184>
 800117a:	e788      	b.n	800108e <__aeabi_fsub+0x96>
 800117c:	1b98      	subs	r0, r3, r6
 800117e:	0143      	lsls	r3, r0, #5
 8001180:	d400      	bmi.n	8001184 <__aeabi_fsub+0x18c>
 8001182:	e0e1      	b.n	8001348 <__aeabi_fsub+0x350>
 8001184:	4663      	mov	r3, ip
 8001186:	000c      	movs	r4, r1
 8001188:	1af0      	subs	r0, r6, r3
 800118a:	e76f      	b.n	800106c <__aeabi_fsub+0x74>
 800118c:	2e00      	cmp	r6, #0
 800118e:	d100      	bne.n	8001192 <__aeabi_fsub+0x19a>
 8001190:	e0b7      	b.n	8001302 <__aeabi_fsub+0x30a>
 8001192:	0002      	movs	r2, r0
 8001194:	3a01      	subs	r2, #1
 8001196:	2801      	cmp	r0, #1
 8001198:	d100      	bne.n	800119c <__aeabi_fsub+0x1a4>
 800119a:	e09c      	b.n	80012d6 <__aeabi_fsub+0x2de>
 800119c:	28ff      	cmp	r0, #255	; 0xff
 800119e:	d026      	beq.n	80011ee <__aeabi_fsub+0x1f6>
 80011a0:	4690      	mov	r8, r2
 80011a2:	e788      	b.n	80010b6 <__aeabi_fsub+0xbe>
 80011a4:	22ff      	movs	r2, #255	; 0xff
 80011a6:	2700      	movs	r7, #0
 80011a8:	e771      	b.n	800108e <__aeabi_fsub+0x96>
 80011aa:	20fe      	movs	r0, #254	; 0xfe
 80011ac:	1c6a      	adds	r2, r5, #1
 80011ae:	4210      	tst	r0, r2
 80011b0:	d064      	beq.n	800127c <__aeabi_fsub+0x284>
 80011b2:	2aff      	cmp	r2, #255	; 0xff
 80011b4:	d0f6      	beq.n	80011a4 <__aeabi_fsub+0x1ac>
 80011b6:	0015      	movs	r5, r2
 80011b8:	4466      	add	r6, ip
 80011ba:	0870      	lsrs	r0, r6, #1
 80011bc:	0743      	lsls	r3, r0, #29
 80011be:	d000      	beq.n	80011c2 <__aeabi_fsub+0x1ca>
 80011c0:	e756      	b.n	8001070 <__aeabi_fsub+0x78>
 80011c2:	08c3      	lsrs	r3, r0, #3
 80011c4:	2dff      	cmp	r5, #255	; 0xff
 80011c6:	d012      	beq.n	80011ee <__aeabi_fsub+0x1f6>
 80011c8:	025b      	lsls	r3, r3, #9
 80011ca:	0a5f      	lsrs	r7, r3, #9
 80011cc:	b2ea      	uxtb	r2, r5
 80011ce:	e75e      	b.n	800108e <__aeabi_fsub+0x96>
 80011d0:	4662      	mov	r2, ip
 80011d2:	2a00      	cmp	r2, #0
 80011d4:	d100      	bne.n	80011d8 <__aeabi_fsub+0x1e0>
 80011d6:	e096      	b.n	8001306 <__aeabi_fsub+0x30e>
 80011d8:	2e00      	cmp	r6, #0
 80011da:	d008      	beq.n	80011ee <__aeabi_fsub+0x1f6>
 80011dc:	2280      	movs	r2, #128	; 0x80
 80011de:	03d2      	lsls	r2, r2, #15
 80011e0:	4213      	tst	r3, r2
 80011e2:	d004      	beq.n	80011ee <__aeabi_fsub+0x1f6>
 80011e4:	4648      	mov	r0, r9
 80011e6:	4210      	tst	r0, r2
 80011e8:	d101      	bne.n	80011ee <__aeabi_fsub+0x1f6>
 80011ea:	000c      	movs	r4, r1
 80011ec:	464b      	mov	r3, r9
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d0d8      	beq.n	80011a4 <__aeabi_fsub+0x1ac>
 80011f2:	2780      	movs	r7, #128	; 0x80
 80011f4:	03ff      	lsls	r7, r7, #15
 80011f6:	431f      	orrs	r7, r3
 80011f8:	027f      	lsls	r7, r7, #9
 80011fa:	22ff      	movs	r2, #255	; 0xff
 80011fc:	0a7f      	lsrs	r7, r7, #9
 80011fe:	e746      	b.n	800108e <__aeabi_fsub+0x96>
 8001200:	2320      	movs	r3, #32
 8001202:	003a      	movs	r2, r7
 8001204:	1b45      	subs	r5, r0, r5
 8001206:	0038      	movs	r0, r7
 8001208:	3501      	adds	r5, #1
 800120a:	40ea      	lsrs	r2, r5
 800120c:	1b5d      	subs	r5, r3, r5
 800120e:	40a8      	lsls	r0, r5
 8001210:	1e43      	subs	r3, r0, #1
 8001212:	4198      	sbcs	r0, r3
 8001214:	2500      	movs	r5, #0
 8001216:	4310      	orrs	r0, r2
 8001218:	e728      	b.n	800106c <__aeabi_fsub+0x74>
 800121a:	2320      	movs	r3, #32
 800121c:	1a1b      	subs	r3, r3, r0
 800121e:	0032      	movs	r2, r6
 8001220:	409e      	lsls	r6, r3
 8001222:	40c2      	lsrs	r2, r0
 8001224:	0030      	movs	r0, r6
 8001226:	1e43      	subs	r3, r0, #1
 8001228:	4198      	sbcs	r0, r3
 800122a:	4310      	orrs	r0, r2
 800122c:	e70c      	b.n	8001048 <__aeabi_fsub+0x50>
 800122e:	2aff      	cmp	r2, #255	; 0xff
 8001230:	d0db      	beq.n	80011ea <__aeabi_fsub+0x1f2>
 8001232:	2380      	movs	r3, #128	; 0x80
 8001234:	4660      	mov	r0, ip
 8001236:	04db      	lsls	r3, r3, #19
 8001238:	4318      	orrs	r0, r3
 800123a:	4684      	mov	ip, r0
 800123c:	2f1b      	cmp	r7, #27
 800123e:	dd56      	ble.n	80012ee <__aeabi_fsub+0x2f6>
 8001240:	2001      	movs	r0, #1
 8001242:	000c      	movs	r4, r1
 8001244:	0015      	movs	r5, r2
 8001246:	1a30      	subs	r0, r6, r0
 8001248:	e700      	b.n	800104c <__aeabi_fsub+0x54>
 800124a:	4663      	mov	r3, ip
 800124c:	1b9f      	subs	r7, r3, r6
 800124e:	017b      	lsls	r3, r7, #5
 8001250:	d43d      	bmi.n	80012ce <__aeabi_fsub+0x2d6>
 8001252:	2f00      	cmp	r7, #0
 8001254:	d000      	beq.n	8001258 <__aeabi_fsub+0x260>
 8001256:	e6fe      	b.n	8001056 <__aeabi_fsub+0x5e>
 8001258:	2400      	movs	r4, #0
 800125a:	2200      	movs	r2, #0
 800125c:	2700      	movs	r7, #0
 800125e:	e716      	b.n	800108e <__aeabi_fsub+0x96>
 8001260:	0005      	movs	r5, r0
 8001262:	e7af      	b.n	80011c4 <__aeabi_fsub+0x1cc>
 8001264:	0032      	movs	r2, r6
 8001266:	4643      	mov	r3, r8
 8001268:	4641      	mov	r1, r8
 800126a:	40da      	lsrs	r2, r3
 800126c:	2320      	movs	r3, #32
 800126e:	1a5b      	subs	r3, r3, r1
 8001270:	409e      	lsls	r6, r3
 8001272:	0030      	movs	r0, r6
 8001274:	1e43      	subs	r3, r0, #1
 8001276:	4198      	sbcs	r0, r3
 8001278:	4310      	orrs	r0, r2
 800127a:	e721      	b.n	80010c0 <__aeabi_fsub+0xc8>
 800127c:	2d00      	cmp	r5, #0
 800127e:	d1a7      	bne.n	80011d0 <__aeabi_fsub+0x1d8>
 8001280:	4663      	mov	r3, ip
 8001282:	2b00      	cmp	r3, #0
 8001284:	d059      	beq.n	800133a <__aeabi_fsub+0x342>
 8001286:	2200      	movs	r2, #0
 8001288:	2e00      	cmp	r6, #0
 800128a:	d100      	bne.n	800128e <__aeabi_fsub+0x296>
 800128c:	e6ff      	b.n	800108e <__aeabi_fsub+0x96>
 800128e:	0030      	movs	r0, r6
 8001290:	4460      	add	r0, ip
 8001292:	0143      	lsls	r3, r0, #5
 8001294:	d592      	bpl.n	80011bc <__aeabi_fsub+0x1c4>
 8001296:	4b2a      	ldr	r3, [pc, #168]	; (8001340 <__aeabi_fsub+0x348>)
 8001298:	3501      	adds	r5, #1
 800129a:	4018      	ands	r0, r3
 800129c:	e78e      	b.n	80011bc <__aeabi_fsub+0x1c4>
 800129e:	4663      	mov	r3, ip
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d047      	beq.n	8001334 <__aeabi_fsub+0x33c>
 80012a4:	1e4b      	subs	r3, r1, #1
 80012a6:	2901      	cmp	r1, #1
 80012a8:	d015      	beq.n	80012d6 <__aeabi_fsub+0x2de>
 80012aa:	29ff      	cmp	r1, #255	; 0xff
 80012ac:	d02b      	beq.n	8001306 <__aeabi_fsub+0x30e>
 80012ae:	0019      	movs	r1, r3
 80012b0:	e74e      	b.n	8001150 <__aeabi_fsub+0x158>
 80012b2:	000c      	movs	r4, r1
 80012b4:	464b      	mov	r3, r9
 80012b6:	003d      	movs	r5, r7
 80012b8:	e784      	b.n	80011c4 <__aeabi_fsub+0x1cc>
 80012ba:	4662      	mov	r2, ip
 80012bc:	2a00      	cmp	r2, #0
 80012be:	d18b      	bne.n	80011d8 <__aeabi_fsub+0x1e0>
 80012c0:	2e00      	cmp	r6, #0
 80012c2:	d192      	bne.n	80011ea <__aeabi_fsub+0x1f2>
 80012c4:	2780      	movs	r7, #128	; 0x80
 80012c6:	2400      	movs	r4, #0
 80012c8:	22ff      	movs	r2, #255	; 0xff
 80012ca:	03ff      	lsls	r7, r7, #15
 80012cc:	e6df      	b.n	800108e <__aeabi_fsub+0x96>
 80012ce:	4663      	mov	r3, ip
 80012d0:	000c      	movs	r4, r1
 80012d2:	1af7      	subs	r7, r6, r3
 80012d4:	e6bf      	b.n	8001056 <__aeabi_fsub+0x5e>
 80012d6:	0030      	movs	r0, r6
 80012d8:	4460      	add	r0, ip
 80012da:	2501      	movs	r5, #1
 80012dc:	0143      	lsls	r3, r0, #5
 80012de:	d400      	bmi.n	80012e2 <__aeabi_fsub+0x2ea>
 80012e0:	e76c      	b.n	80011bc <__aeabi_fsub+0x1c4>
 80012e2:	2502      	movs	r5, #2
 80012e4:	e6f2      	b.n	80010cc <__aeabi_fsub+0xd4>
 80012e6:	4663      	mov	r3, ip
 80012e8:	2501      	movs	r5, #1
 80012ea:	1b98      	subs	r0, r3, r6
 80012ec:	e6ae      	b.n	800104c <__aeabi_fsub+0x54>
 80012ee:	2320      	movs	r3, #32
 80012f0:	4664      	mov	r4, ip
 80012f2:	4660      	mov	r0, ip
 80012f4:	40fc      	lsrs	r4, r7
 80012f6:	1bdf      	subs	r7, r3, r7
 80012f8:	40b8      	lsls	r0, r7
 80012fa:	1e43      	subs	r3, r0, #1
 80012fc:	4198      	sbcs	r0, r3
 80012fe:	4320      	orrs	r0, r4
 8001300:	e79f      	b.n	8001242 <__aeabi_fsub+0x24a>
 8001302:	0005      	movs	r5, r0
 8001304:	e75e      	b.n	80011c4 <__aeabi_fsub+0x1cc>
 8001306:	464b      	mov	r3, r9
 8001308:	e771      	b.n	80011ee <__aeabi_fsub+0x1f6>
 800130a:	2320      	movs	r3, #32
 800130c:	4665      	mov	r5, ip
 800130e:	4660      	mov	r0, ip
 8001310:	40cd      	lsrs	r5, r1
 8001312:	1a59      	subs	r1, r3, r1
 8001314:	4088      	lsls	r0, r1
 8001316:	1e43      	subs	r3, r0, #1
 8001318:	4198      	sbcs	r0, r3
 800131a:	4328      	orrs	r0, r5
 800131c:	e71c      	b.n	8001158 <__aeabi_fsub+0x160>
 800131e:	4663      	mov	r3, ip
 8001320:	000c      	movs	r4, r1
 8001322:	2501      	movs	r5, #1
 8001324:	1af0      	subs	r0, r6, r3
 8001326:	e691      	b.n	800104c <__aeabi_fsub+0x54>
 8001328:	2e00      	cmp	r6, #0
 800132a:	d095      	beq.n	8001258 <__aeabi_fsub+0x260>
 800132c:	000c      	movs	r4, r1
 800132e:	464f      	mov	r7, r9
 8001330:	2200      	movs	r2, #0
 8001332:	e6ac      	b.n	800108e <__aeabi_fsub+0x96>
 8001334:	464b      	mov	r3, r9
 8001336:	000d      	movs	r5, r1
 8001338:	e744      	b.n	80011c4 <__aeabi_fsub+0x1cc>
 800133a:	464f      	mov	r7, r9
 800133c:	2200      	movs	r2, #0
 800133e:	e6a6      	b.n	800108e <__aeabi_fsub+0x96>
 8001340:	fbffffff 	.word	0xfbffffff
 8001344:	7dffffff 	.word	0x7dffffff
 8001348:	2800      	cmp	r0, #0
 800134a:	d000      	beq.n	800134e <__aeabi_fsub+0x356>
 800134c:	e736      	b.n	80011bc <__aeabi_fsub+0x1c4>
 800134e:	2400      	movs	r4, #0
 8001350:	2700      	movs	r7, #0
 8001352:	e69c      	b.n	800108e <__aeabi_fsub+0x96>

08001354 <__aeabi_fcmpun>:
 8001354:	0243      	lsls	r3, r0, #9
 8001356:	024a      	lsls	r2, r1, #9
 8001358:	0040      	lsls	r0, r0, #1
 800135a:	0049      	lsls	r1, r1, #1
 800135c:	0a5b      	lsrs	r3, r3, #9
 800135e:	0a52      	lsrs	r2, r2, #9
 8001360:	0e09      	lsrs	r1, r1, #24
 8001362:	0e00      	lsrs	r0, r0, #24
 8001364:	28ff      	cmp	r0, #255	; 0xff
 8001366:	d006      	beq.n	8001376 <__aeabi_fcmpun+0x22>
 8001368:	2000      	movs	r0, #0
 800136a:	29ff      	cmp	r1, #255	; 0xff
 800136c:	d102      	bne.n	8001374 <__aeabi_fcmpun+0x20>
 800136e:	1e53      	subs	r3, r2, #1
 8001370:	419a      	sbcs	r2, r3
 8001372:	0010      	movs	r0, r2
 8001374:	4770      	bx	lr
 8001376:	38fe      	subs	r0, #254	; 0xfe
 8001378:	2b00      	cmp	r3, #0
 800137a:	d1fb      	bne.n	8001374 <__aeabi_fcmpun+0x20>
 800137c:	e7f4      	b.n	8001368 <__aeabi_fcmpun+0x14>
 800137e:	46c0      	nop			; (mov r8, r8)

08001380 <__aeabi_f2iz>:
 8001380:	0241      	lsls	r1, r0, #9
 8001382:	0042      	lsls	r2, r0, #1
 8001384:	0fc3      	lsrs	r3, r0, #31
 8001386:	0a49      	lsrs	r1, r1, #9
 8001388:	2000      	movs	r0, #0
 800138a:	0e12      	lsrs	r2, r2, #24
 800138c:	2a7e      	cmp	r2, #126	; 0x7e
 800138e:	dd03      	ble.n	8001398 <__aeabi_f2iz+0x18>
 8001390:	2a9d      	cmp	r2, #157	; 0x9d
 8001392:	dd02      	ble.n	800139a <__aeabi_f2iz+0x1a>
 8001394:	4a09      	ldr	r2, [pc, #36]	; (80013bc <__aeabi_f2iz+0x3c>)
 8001396:	1898      	adds	r0, r3, r2
 8001398:	4770      	bx	lr
 800139a:	2080      	movs	r0, #128	; 0x80
 800139c:	0400      	lsls	r0, r0, #16
 800139e:	4301      	orrs	r1, r0
 80013a0:	2a95      	cmp	r2, #149	; 0x95
 80013a2:	dc07      	bgt.n	80013b4 <__aeabi_f2iz+0x34>
 80013a4:	2096      	movs	r0, #150	; 0x96
 80013a6:	1a82      	subs	r2, r0, r2
 80013a8:	40d1      	lsrs	r1, r2
 80013aa:	4248      	negs	r0, r1
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d1f3      	bne.n	8001398 <__aeabi_f2iz+0x18>
 80013b0:	0008      	movs	r0, r1
 80013b2:	e7f1      	b.n	8001398 <__aeabi_f2iz+0x18>
 80013b4:	3a96      	subs	r2, #150	; 0x96
 80013b6:	4091      	lsls	r1, r2
 80013b8:	e7f7      	b.n	80013aa <__aeabi_f2iz+0x2a>
 80013ba:	46c0      	nop			; (mov r8, r8)
 80013bc:	7fffffff 	.word	0x7fffffff

080013c0 <__aeabi_i2f>:
 80013c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80013c2:	2800      	cmp	r0, #0
 80013c4:	d013      	beq.n	80013ee <__aeabi_i2f+0x2e>
 80013c6:	17c3      	asrs	r3, r0, #31
 80013c8:	18c6      	adds	r6, r0, r3
 80013ca:	405e      	eors	r6, r3
 80013cc:	0fc4      	lsrs	r4, r0, #31
 80013ce:	0030      	movs	r0, r6
 80013d0:	f000 f886 	bl	80014e0 <__clzsi2>
 80013d4:	239e      	movs	r3, #158	; 0x9e
 80013d6:	0005      	movs	r5, r0
 80013d8:	1a1b      	subs	r3, r3, r0
 80013da:	2b96      	cmp	r3, #150	; 0x96
 80013dc:	dc0f      	bgt.n	80013fe <__aeabi_i2f+0x3e>
 80013de:	2808      	cmp	r0, #8
 80013e0:	dd01      	ble.n	80013e6 <__aeabi_i2f+0x26>
 80013e2:	3d08      	subs	r5, #8
 80013e4:	40ae      	lsls	r6, r5
 80013e6:	0276      	lsls	r6, r6, #9
 80013e8:	0a76      	lsrs	r6, r6, #9
 80013ea:	b2d8      	uxtb	r0, r3
 80013ec:	e002      	b.n	80013f4 <__aeabi_i2f+0x34>
 80013ee:	2400      	movs	r4, #0
 80013f0:	2000      	movs	r0, #0
 80013f2:	2600      	movs	r6, #0
 80013f4:	05c0      	lsls	r0, r0, #23
 80013f6:	4330      	orrs	r0, r6
 80013f8:	07e4      	lsls	r4, r4, #31
 80013fa:	4320      	orrs	r0, r4
 80013fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80013fe:	2b99      	cmp	r3, #153	; 0x99
 8001400:	dd0c      	ble.n	800141c <__aeabi_i2f+0x5c>
 8001402:	2205      	movs	r2, #5
 8001404:	0031      	movs	r1, r6
 8001406:	1a12      	subs	r2, r2, r0
 8001408:	40d1      	lsrs	r1, r2
 800140a:	000a      	movs	r2, r1
 800140c:	0001      	movs	r1, r0
 800140e:	0030      	movs	r0, r6
 8001410:	311b      	adds	r1, #27
 8001412:	4088      	lsls	r0, r1
 8001414:	1e41      	subs	r1, r0, #1
 8001416:	4188      	sbcs	r0, r1
 8001418:	4302      	orrs	r2, r0
 800141a:	0016      	movs	r6, r2
 800141c:	2d05      	cmp	r5, #5
 800141e:	dc12      	bgt.n	8001446 <__aeabi_i2f+0x86>
 8001420:	0031      	movs	r1, r6
 8001422:	4f0d      	ldr	r7, [pc, #52]	; (8001458 <__aeabi_i2f+0x98>)
 8001424:	4039      	ands	r1, r7
 8001426:	0772      	lsls	r2, r6, #29
 8001428:	d009      	beq.n	800143e <__aeabi_i2f+0x7e>
 800142a:	200f      	movs	r0, #15
 800142c:	4030      	ands	r0, r6
 800142e:	2804      	cmp	r0, #4
 8001430:	d005      	beq.n	800143e <__aeabi_i2f+0x7e>
 8001432:	3104      	adds	r1, #4
 8001434:	014a      	lsls	r2, r1, #5
 8001436:	d502      	bpl.n	800143e <__aeabi_i2f+0x7e>
 8001438:	239f      	movs	r3, #159	; 0x9f
 800143a:	4039      	ands	r1, r7
 800143c:	1b5b      	subs	r3, r3, r5
 800143e:	0189      	lsls	r1, r1, #6
 8001440:	0a4e      	lsrs	r6, r1, #9
 8001442:	b2d8      	uxtb	r0, r3
 8001444:	e7d6      	b.n	80013f4 <__aeabi_i2f+0x34>
 8001446:	1f6a      	subs	r2, r5, #5
 8001448:	4096      	lsls	r6, r2
 800144a:	0031      	movs	r1, r6
 800144c:	4f02      	ldr	r7, [pc, #8]	; (8001458 <__aeabi_i2f+0x98>)
 800144e:	4039      	ands	r1, r7
 8001450:	0772      	lsls	r2, r6, #29
 8001452:	d0f4      	beq.n	800143e <__aeabi_i2f+0x7e>
 8001454:	e7e9      	b.n	800142a <__aeabi_i2f+0x6a>
 8001456:	46c0      	nop			; (mov r8, r8)
 8001458:	fbffffff 	.word	0xfbffffff

0800145c <__aeabi_ui2f>:
 800145c:	b570      	push	{r4, r5, r6, lr}
 800145e:	1e05      	subs	r5, r0, #0
 8001460:	d00e      	beq.n	8001480 <__aeabi_ui2f+0x24>
 8001462:	f000 f83d 	bl	80014e0 <__clzsi2>
 8001466:	239e      	movs	r3, #158	; 0x9e
 8001468:	0004      	movs	r4, r0
 800146a:	1a1b      	subs	r3, r3, r0
 800146c:	2b96      	cmp	r3, #150	; 0x96
 800146e:	dc0c      	bgt.n	800148a <__aeabi_ui2f+0x2e>
 8001470:	2808      	cmp	r0, #8
 8001472:	dd01      	ble.n	8001478 <__aeabi_ui2f+0x1c>
 8001474:	3c08      	subs	r4, #8
 8001476:	40a5      	lsls	r5, r4
 8001478:	026d      	lsls	r5, r5, #9
 800147a:	0a6d      	lsrs	r5, r5, #9
 800147c:	b2d8      	uxtb	r0, r3
 800147e:	e001      	b.n	8001484 <__aeabi_ui2f+0x28>
 8001480:	2000      	movs	r0, #0
 8001482:	2500      	movs	r5, #0
 8001484:	05c0      	lsls	r0, r0, #23
 8001486:	4328      	orrs	r0, r5
 8001488:	bd70      	pop	{r4, r5, r6, pc}
 800148a:	2b99      	cmp	r3, #153	; 0x99
 800148c:	dd09      	ble.n	80014a2 <__aeabi_ui2f+0x46>
 800148e:	0002      	movs	r2, r0
 8001490:	0029      	movs	r1, r5
 8001492:	321b      	adds	r2, #27
 8001494:	4091      	lsls	r1, r2
 8001496:	1e4a      	subs	r2, r1, #1
 8001498:	4191      	sbcs	r1, r2
 800149a:	2205      	movs	r2, #5
 800149c:	1a12      	subs	r2, r2, r0
 800149e:	40d5      	lsrs	r5, r2
 80014a0:	430d      	orrs	r5, r1
 80014a2:	2c05      	cmp	r4, #5
 80014a4:	dc12      	bgt.n	80014cc <__aeabi_ui2f+0x70>
 80014a6:	0029      	movs	r1, r5
 80014a8:	4e0c      	ldr	r6, [pc, #48]	; (80014dc <__aeabi_ui2f+0x80>)
 80014aa:	4031      	ands	r1, r6
 80014ac:	076a      	lsls	r2, r5, #29
 80014ae:	d009      	beq.n	80014c4 <__aeabi_ui2f+0x68>
 80014b0:	200f      	movs	r0, #15
 80014b2:	4028      	ands	r0, r5
 80014b4:	2804      	cmp	r0, #4
 80014b6:	d005      	beq.n	80014c4 <__aeabi_ui2f+0x68>
 80014b8:	3104      	adds	r1, #4
 80014ba:	014a      	lsls	r2, r1, #5
 80014bc:	d502      	bpl.n	80014c4 <__aeabi_ui2f+0x68>
 80014be:	239f      	movs	r3, #159	; 0x9f
 80014c0:	4031      	ands	r1, r6
 80014c2:	1b1b      	subs	r3, r3, r4
 80014c4:	0189      	lsls	r1, r1, #6
 80014c6:	0a4d      	lsrs	r5, r1, #9
 80014c8:	b2d8      	uxtb	r0, r3
 80014ca:	e7db      	b.n	8001484 <__aeabi_ui2f+0x28>
 80014cc:	1f62      	subs	r2, r4, #5
 80014ce:	4095      	lsls	r5, r2
 80014d0:	0029      	movs	r1, r5
 80014d2:	4e02      	ldr	r6, [pc, #8]	; (80014dc <__aeabi_ui2f+0x80>)
 80014d4:	4031      	ands	r1, r6
 80014d6:	076a      	lsls	r2, r5, #29
 80014d8:	d0f4      	beq.n	80014c4 <__aeabi_ui2f+0x68>
 80014da:	e7e9      	b.n	80014b0 <__aeabi_ui2f+0x54>
 80014dc:	fbffffff 	.word	0xfbffffff

080014e0 <__clzsi2>:
 80014e0:	211c      	movs	r1, #28
 80014e2:	2301      	movs	r3, #1
 80014e4:	041b      	lsls	r3, r3, #16
 80014e6:	4298      	cmp	r0, r3
 80014e8:	d301      	bcc.n	80014ee <__clzsi2+0xe>
 80014ea:	0c00      	lsrs	r0, r0, #16
 80014ec:	3910      	subs	r1, #16
 80014ee:	0a1b      	lsrs	r3, r3, #8
 80014f0:	4298      	cmp	r0, r3
 80014f2:	d301      	bcc.n	80014f8 <__clzsi2+0x18>
 80014f4:	0a00      	lsrs	r0, r0, #8
 80014f6:	3908      	subs	r1, #8
 80014f8:	091b      	lsrs	r3, r3, #4
 80014fa:	4298      	cmp	r0, r3
 80014fc:	d301      	bcc.n	8001502 <__clzsi2+0x22>
 80014fe:	0900      	lsrs	r0, r0, #4
 8001500:	3904      	subs	r1, #4
 8001502:	a202      	add	r2, pc, #8	; (adr r2, 800150c <__clzsi2+0x2c>)
 8001504:	5c10      	ldrb	r0, [r2, r0]
 8001506:	1840      	adds	r0, r0, r1
 8001508:	4770      	bx	lr
 800150a:	46c0      	nop			; (mov r8, r8)
 800150c:	02020304 	.word	0x02020304
 8001510:	01010101 	.word	0x01010101
	...

0800151c <__clzdi2>:
 800151c:	b510      	push	{r4, lr}
 800151e:	2900      	cmp	r1, #0
 8001520:	d103      	bne.n	800152a <__clzdi2+0xe>
 8001522:	f7ff ffdd 	bl	80014e0 <__clzsi2>
 8001526:	3020      	adds	r0, #32
 8001528:	e002      	b.n	8001530 <__clzdi2+0x14>
 800152a:	0008      	movs	r0, r1
 800152c:	f7ff ffd8 	bl	80014e0 <__clzsi2>
 8001530:	bd10      	pop	{r4, pc}
 8001532:	46c0      	nop			; (mov r8, r8)

08001534 <main>:
  * @brief  The application entry point.
  * @retval int
  */

int main(void)
{
 8001534:	b590      	push	{r4, r7, lr}
 8001536:	b083      	sub	sp, #12
 8001538:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800153a:	f008 fbff 	bl	8009d3c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800153e:	f000 f817 	bl	8001570 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001542:	f000 f98d 	bl	8001860 <MX_GPIO_Init>
  MX_DMA_Init();
 8001546:	f000 f96d 	bl	8001824 <MX_DMA_Init>
  MX_CRC_Init();
 800154a:	f000 f88d 	bl	8001668 <MX_CRC_Init>
  MX_RTC_Init();
 800154e:	f000 f8af 	bl	80016b0 <MX_RTC_Init>
  MX_MEMS_Init();
 8001552:	f00c ffce 	bl	800e4f2 <MX_MEMS_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    SD = MX_MEMS_Process();
 8001556:	4c05      	ldr	r4, [pc, #20]	; (800156c <main+0x38>)
 8001558:	003b      	movs	r3, r7
 800155a:	0018      	movs	r0, r3
 800155c:	f00c ffd0 	bl	800e500 <MX_MEMS_Process>
 8001560:	003a      	movs	r2, r7
 8001562:	0023      	movs	r3, r4
 8001564:	ca03      	ldmia	r2!, {r0, r1}
 8001566:	c303      	stmia	r3!, {r0, r1}
 8001568:	e7f5      	b.n	8001556 <main+0x22>
 800156a:	46c0      	nop			; (mov r8, r8)
 800156c:	20000b40 	.word	0x20000b40

08001570 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001570:	b590      	push	{r4, r7, lr}
 8001572:	b09f      	sub	sp, #124	; 0x7c
 8001574:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001576:	2440      	movs	r4, #64	; 0x40
 8001578:	193b      	adds	r3, r7, r4
 800157a:	0018      	movs	r0, r3
 800157c:	2338      	movs	r3, #56	; 0x38
 800157e:	001a      	movs	r2, r3
 8001580:	2100      	movs	r1, #0
 8001582:	f012 fa70 	bl	8013a66 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001586:	232c      	movs	r3, #44	; 0x2c
 8001588:	18fb      	adds	r3, r7, r3
 800158a:	0018      	movs	r0, r3
 800158c:	2314      	movs	r3, #20
 800158e:	001a      	movs	r2, r3
 8001590:	2100      	movs	r1, #0
 8001592:	f012 fa68 	bl	8013a66 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001596:	1d3b      	adds	r3, r7, #4
 8001598:	0018      	movs	r0, r3
 800159a:	2328      	movs	r3, #40	; 0x28
 800159c:	001a      	movs	r2, r3
 800159e:	2100      	movs	r1, #0
 80015a0:	f012 fa61 	bl	8013a66 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80015a4:	4b2e      	ldr	r3, [pc, #184]	; (8001660 <SystemClock_Config+0xf0>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	4a2e      	ldr	r2, [pc, #184]	; (8001664 <SystemClock_Config+0xf4>)
 80015aa:	401a      	ands	r2, r3
 80015ac:	4b2c      	ldr	r3, [pc, #176]	; (8001660 <SystemClock_Config+0xf0>)
 80015ae:	2180      	movs	r1, #128	; 0x80
 80015b0:	0109      	lsls	r1, r1, #4
 80015b2:	430a      	orrs	r2, r1
 80015b4:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80015b6:	193b      	adds	r3, r7, r4
 80015b8:	2209      	movs	r2, #9
 80015ba:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80015bc:	193b      	adds	r3, r7, r4
 80015be:	22a0      	movs	r2, #160	; 0xa0
 80015c0:	02d2      	lsls	r2, r2, #11
 80015c2:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80015c4:	0021      	movs	r1, r4
 80015c6:	187b      	adds	r3, r7, r1
 80015c8:	2201      	movs	r2, #1
 80015ca:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015cc:	187b      	adds	r3, r7, r1
 80015ce:	2202      	movs	r2, #2
 80015d0:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80015d2:	187b      	adds	r3, r7, r1
 80015d4:	2280      	movs	r2, #128	; 0x80
 80015d6:	0252      	lsls	r2, r2, #9
 80015d8:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_8;
 80015da:	187b      	adds	r3, r7, r1
 80015dc:	22c0      	movs	r2, #192	; 0xc0
 80015de:	0312      	lsls	r2, r2, #12
 80015e0:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 80015e2:	187b      	adds	r3, r7, r1
 80015e4:	2280      	movs	r2, #128	; 0x80
 80015e6:	03d2      	lsls	r2, r2, #15
 80015e8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015ea:	187b      	adds	r3, r7, r1
 80015ec:	0018      	movs	r0, r3
 80015ee:	f00a f8cf 	bl	800b790 <HAL_RCC_OscConfig>
 80015f2:	1e03      	subs	r3, r0, #0
 80015f4:	d001      	beq.n	80015fa <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80015f6:	f000 f975 	bl	80018e4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015fa:	212c      	movs	r1, #44	; 0x2c
 80015fc:	187b      	adds	r3, r7, r1
 80015fe:	220f      	movs	r2, #15
 8001600:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001602:	187b      	adds	r3, r7, r1
 8001604:	2203      	movs	r2, #3
 8001606:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001608:	187b      	adds	r3, r7, r1
 800160a:	2200      	movs	r2, #0
 800160c:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800160e:	187b      	adds	r3, r7, r1
 8001610:	2200      	movs	r2, #0
 8001612:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001614:	187b      	adds	r3, r7, r1
 8001616:	2200      	movs	r2, #0
 8001618:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800161a:	187b      	adds	r3, r7, r1
 800161c:	2101      	movs	r1, #1
 800161e:	0018      	movs	r0, r3
 8001620:	f00a fc8a 	bl	800bf38 <HAL_RCC_ClockConfig>
 8001624:	1e03      	subs	r3, r0, #0
 8001626:	d001      	beq.n	800162c <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8001628:	f000 f95c 	bl	80018e4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1
 800162c:	1d3b      	adds	r3, r7, #4
 800162e:	222a      	movs	r2, #42	; 0x2a
 8001630:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_RTC;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001632:	1d3b      	adds	r3, r7, #4
 8001634:	2200      	movs	r2, #0
 8001636:	611a      	str	r2, [r3, #16]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001638:	1d3b      	adds	r3, r7, #4
 800163a:	2200      	movs	r2, #0
 800163c:	619a      	str	r2, [r3, #24]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800163e:	1d3b      	adds	r3, r7, #4
 8001640:	2280      	movs	r2, #128	; 0x80
 8001642:	0292      	lsls	r2, r2, #10
 8001644:	605a      	str	r2, [r3, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001646:	1d3b      	adds	r3, r7, #4
 8001648:	0018      	movs	r0, r3
 800164a:	f00a fe99 	bl	800c380 <HAL_RCCEx_PeriphCLKConfig>
 800164e:	1e03      	subs	r3, r0, #0
 8001650:	d001      	beq.n	8001656 <SystemClock_Config+0xe6>
  {
    Error_Handler();
 8001652:	f000 f947 	bl	80018e4 <Error_Handler>
  }
}
 8001656:	46c0      	nop			; (mov r8, r8)
 8001658:	46bd      	mov	sp, r7
 800165a:	b01f      	add	sp, #124	; 0x7c
 800165c:	bd90      	pop	{r4, r7, pc}
 800165e:	46c0      	nop			; (mov r8, r8)
 8001660:	40007000 	.word	0x40007000
 8001664:	ffffe7ff 	.word	0xffffe7ff

08001668 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 800166c:	4b0e      	ldr	r3, [pc, #56]	; (80016a8 <MX_CRC_Init+0x40>)
 800166e:	4a0f      	ldr	r2, [pc, #60]	; (80016ac <MX_CRC_Init+0x44>)
 8001670:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8001672:	4b0d      	ldr	r3, [pc, #52]	; (80016a8 <MX_CRC_Init+0x40>)
 8001674:	2200      	movs	r2, #0
 8001676:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8001678:	4b0b      	ldr	r3, [pc, #44]	; (80016a8 <MX_CRC_Init+0x40>)
 800167a:	2200      	movs	r2, #0
 800167c:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 800167e:	4b0a      	ldr	r3, [pc, #40]	; (80016a8 <MX_CRC_Init+0x40>)
 8001680:	2200      	movs	r2, #0
 8001682:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8001684:	4b08      	ldr	r3, [pc, #32]	; (80016a8 <MX_CRC_Init+0x40>)
 8001686:	2200      	movs	r2, #0
 8001688:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 800168a:	4b07      	ldr	r3, [pc, #28]	; (80016a8 <MX_CRC_Init+0x40>)
 800168c:	2201      	movs	r2, #1
 800168e:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8001690:	4b05      	ldr	r3, [pc, #20]	; (80016a8 <MX_CRC_Init+0x40>)
 8001692:	0018      	movs	r0, r3
 8001694:	f008 fcc4 	bl	800a020 <HAL_CRC_Init>
 8001698:	1e03      	subs	r3, r0, #0
 800169a:	d001      	beq.n	80016a0 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 800169c:	f000 f922 	bl	80018e4 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80016a0:	46c0      	nop			; (mov r8, r8)
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	46c0      	nop			; (mov r8, r8)
 80016a8:	20000ab8 	.word	0x20000ab8
 80016ac:	40023000 	.word	0x40023000

080016b0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b086      	sub	sp, #24
 80016b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80016b6:	1d3b      	adds	r3, r7, #4
 80016b8:	0018      	movs	r0, r3
 80016ba:	2314      	movs	r3, #20
 80016bc:	001a      	movs	r2, r3
 80016be:	2100      	movs	r1, #0
 80016c0:	f012 f9d1 	bl	8013a66 <memset>
  RTC_DateTypeDef sDate = {0};
 80016c4:	003b      	movs	r3, r7
 80016c6:	2200      	movs	r2, #0
 80016c8:	601a      	str	r2, [r3, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80016ca:	4b29      	ldr	r3, [pc, #164]	; (8001770 <MX_RTC_Init+0xc0>)
 80016cc:	4a29      	ldr	r2, [pc, #164]	; (8001774 <MX_RTC_Init+0xc4>)
 80016ce:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80016d0:	4b27      	ldr	r3, [pc, #156]	; (8001770 <MX_RTC_Init+0xc0>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80016d6:	4b26      	ldr	r3, [pc, #152]	; (8001770 <MX_RTC_Init+0xc0>)
 80016d8:	227f      	movs	r2, #127	; 0x7f
 80016da:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80016dc:	4b24      	ldr	r3, [pc, #144]	; (8001770 <MX_RTC_Init+0xc0>)
 80016de:	22ff      	movs	r2, #255	; 0xff
 80016e0:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80016e2:	4b23      	ldr	r3, [pc, #140]	; (8001770 <MX_RTC_Init+0xc0>)
 80016e4:	2200      	movs	r2, #0
 80016e6:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80016e8:	4b21      	ldr	r3, [pc, #132]	; (8001770 <MX_RTC_Init+0xc0>)
 80016ea:	2200      	movs	r2, #0
 80016ec:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80016ee:	4b20      	ldr	r3, [pc, #128]	; (8001770 <MX_RTC_Init+0xc0>)
 80016f0:	2200      	movs	r2, #0
 80016f2:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80016f4:	4b1e      	ldr	r3, [pc, #120]	; (8001770 <MX_RTC_Init+0xc0>)
 80016f6:	2200      	movs	r2, #0
 80016f8:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80016fa:	4b1d      	ldr	r3, [pc, #116]	; (8001770 <MX_RTC_Init+0xc0>)
 80016fc:	0018      	movs	r0, r3
 80016fe:	f00a ffb3 	bl	800c668 <HAL_RTC_Init>
 8001702:	1e03      	subs	r3, r0, #0
 8001704:	d001      	beq.n	800170a <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 8001706:	f000 f8ed 	bl	80018e4 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 800170a:	1d3b      	adds	r3, r7, #4
 800170c:	2200      	movs	r2, #0
 800170e:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0x0;
 8001710:	1d3b      	adds	r3, r7, #4
 8001712:	2200      	movs	r2, #0
 8001714:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0x0;
 8001716:	1d3b      	adds	r3, r7, #4
 8001718:	2200      	movs	r2, #0
 800171a:	709a      	strb	r2, [r3, #2]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800171c:	1d3b      	adds	r3, r7, #4
 800171e:	2200      	movs	r2, #0
 8001720:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001722:	1d3b      	adds	r3, r7, #4
 8001724:	2200      	movs	r2, #0
 8001726:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001728:	1d39      	adds	r1, r7, #4
 800172a:	4b11      	ldr	r3, [pc, #68]	; (8001770 <MX_RTC_Init+0xc0>)
 800172c:	2201      	movs	r2, #1
 800172e:	0018      	movs	r0, r3
 8001730:	f00b f838 	bl	800c7a4 <HAL_RTC_SetTime>
 8001734:	1e03      	subs	r3, r0, #0
 8001736:	d001      	beq.n	800173c <MX_RTC_Init+0x8c>
  {
    Error_Handler();
 8001738:	f000 f8d4 	bl	80018e4 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800173c:	003b      	movs	r3, r7
 800173e:	2201      	movs	r2, #1
 8001740:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8001742:	003b      	movs	r3, r7
 8001744:	2201      	movs	r2, #1
 8001746:	705a      	strb	r2, [r3, #1]
  sDate.Date = 0x1;
 8001748:	003b      	movs	r3, r7
 800174a:	2201      	movs	r2, #1
 800174c:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0x0;
 800174e:	003b      	movs	r3, r7
 8001750:	2200      	movs	r2, #0
 8001752:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001754:	0039      	movs	r1, r7
 8001756:	4b06      	ldr	r3, [pc, #24]	; (8001770 <MX_RTC_Init+0xc0>)
 8001758:	2201      	movs	r2, #1
 800175a:	0018      	movs	r0, r3
 800175c:	f00b f942 	bl	800c9e4 <HAL_RTC_SetDate>
 8001760:	1e03      	subs	r3, r0, #0
 8001762:	d001      	beq.n	8001768 <MX_RTC_Init+0xb8>
  {
    Error_Handler();
 8001764:	f000 f8be 	bl	80018e4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001768:	46c0      	nop			; (mov r8, r8)
 800176a:	46bd      	mov	sp, r7
 800176c:	b006      	add	sp, #24
 800176e:	bd80      	pop	{r7, pc}
 8001770:	20000adc 	.word	0x20000adc
 8001774:	40002800 	.word	0x40002800

08001778 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
void MX_TIM3_Init(void)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b086      	sub	sp, #24
 800177c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800177e:	2308      	movs	r3, #8
 8001780:	18fb      	adds	r3, r7, r3
 8001782:	0018      	movs	r0, r3
 8001784:	2310      	movs	r3, #16
 8001786:	001a      	movs	r2, r3
 8001788:	2100      	movs	r1, #0
 800178a:	f012 f96c 	bl	8013a66 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800178e:	003b      	movs	r3, r7
 8001790:	0018      	movs	r0, r3
 8001792:	2308      	movs	r3, #8
 8001794:	001a      	movs	r2, r3
 8001796:	2100      	movs	r1, #0
 8001798:	f012 f965 	bl	8013a66 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800179c:	4b1e      	ldr	r3, [pc, #120]	; (8001818 <MX_TIM3_Init+0xa0>)
 800179e:	4a1f      	ldr	r2, [pc, #124]	; (800181c <MX_TIM3_Init+0xa4>)
 80017a0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80017a2:	4b1d      	ldr	r3, [pc, #116]	; (8001818 <MX_TIM3_Init+0xa0>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017a8:	4b1b      	ldr	r3, [pc, #108]	; (8001818 <MX_TIM3_Init+0xa0>)
 80017aa:	2200      	movs	r2, #0
 80017ac:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80017ae:	4b1a      	ldr	r3, [pc, #104]	; (8001818 <MX_TIM3_Init+0xa0>)
 80017b0:	4a1b      	ldr	r2, [pc, #108]	; (8001820 <MX_TIM3_Init+0xa8>)
 80017b2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017b4:	4b18      	ldr	r3, [pc, #96]	; (8001818 <MX_TIM3_Init+0xa0>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017ba:	4b17      	ldr	r3, [pc, #92]	; (8001818 <MX_TIM3_Init+0xa0>)
 80017bc:	2200      	movs	r2, #0
 80017be:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80017c0:	4b15      	ldr	r3, [pc, #84]	; (8001818 <MX_TIM3_Init+0xa0>)
 80017c2:	0018      	movs	r0, r3
 80017c4:	f00b faa0 	bl	800cd08 <HAL_TIM_Base_Init>
 80017c8:	1e03      	subs	r3, r0, #0
 80017ca:	d001      	beq.n	80017d0 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80017cc:	f000 f88a 	bl	80018e4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017d0:	2108      	movs	r1, #8
 80017d2:	187b      	adds	r3, r7, r1
 80017d4:	2280      	movs	r2, #128	; 0x80
 80017d6:	0152      	lsls	r2, r2, #5
 80017d8:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80017da:	187a      	adds	r2, r7, r1
 80017dc:	4b0e      	ldr	r3, [pc, #56]	; (8001818 <MX_TIM3_Init+0xa0>)
 80017de:	0011      	movs	r1, r2
 80017e0:	0018      	movs	r0, r3
 80017e2:	f00b fc31 	bl	800d048 <HAL_TIM_ConfigClockSource>
 80017e6:	1e03      	subs	r3, r0, #0
 80017e8:	d001      	beq.n	80017ee <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 80017ea:	f000 f87b 	bl	80018e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017ee:	003b      	movs	r3, r7
 80017f0:	2200      	movs	r2, #0
 80017f2:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017f4:	003b      	movs	r3, r7
 80017f6:	2200      	movs	r2, #0
 80017f8:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80017fa:	003a      	movs	r2, r7
 80017fc:	4b06      	ldr	r3, [pc, #24]	; (8001818 <MX_TIM3_Init+0xa0>)
 80017fe:	0011      	movs	r1, r2
 8001800:	0018      	movs	r0, r3
 8001802:	f00b fe0d 	bl	800d420 <HAL_TIMEx_MasterConfigSynchronization>
 8001806:	1e03      	subs	r3, r0, #0
 8001808:	d001      	beq.n	800180e <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 800180a:	f000 f86b 	bl	80018e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800180e:	46c0      	nop			; (mov r8, r8)
 8001810:	46bd      	mov	sp, r7
 8001812:	b006      	add	sp, #24
 8001814:	bd80      	pop	{r7, pc}
 8001816:	46c0      	nop			; (mov r8, r8)
 8001818:	20000b00 	.word	0x20000b00
 800181c:	40000400 	.word	0x40000400
 8001820:	0000ffff 	.word	0x0000ffff

08001824 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b082      	sub	sp, #8
 8001828:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800182a:	4b0c      	ldr	r3, [pc, #48]	; (800185c <MX_DMA_Init+0x38>)
 800182c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800182e:	4b0b      	ldr	r3, [pc, #44]	; (800185c <MX_DMA_Init+0x38>)
 8001830:	2101      	movs	r1, #1
 8001832:	430a      	orrs	r2, r1
 8001834:	631a      	str	r2, [r3, #48]	; 0x30
 8001836:	4b09      	ldr	r3, [pc, #36]	; (800185c <MX_DMA_Init+0x38>)
 8001838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800183a:	2201      	movs	r2, #1
 800183c:	4013      	ands	r3, r2
 800183e:	607b      	str	r3, [r7, #4]
 8001840:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_5_6_7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_6_7_IRQn, 0, 0);
 8001842:	2200      	movs	r2, #0
 8001844:	2100      	movs	r1, #0
 8001846:	200b      	movs	r0, #11
 8001848:	f008 fbb8 	bl	8009fbc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_6_7_IRQn);
 800184c:	200b      	movs	r0, #11
 800184e:	f008 fbca 	bl	8009fe6 <HAL_NVIC_EnableIRQ>

}
 8001852:	46c0      	nop			; (mov r8, r8)
 8001854:	46bd      	mov	sp, r7
 8001856:	b002      	add	sp, #8
 8001858:	bd80      	pop	{r7, pc}
 800185a:	46c0      	nop			; (mov r8, r8)
 800185c:	40021000 	.word	0x40021000

08001860 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b084      	sub	sp, #16
 8001864:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001866:	4b1e      	ldr	r3, [pc, #120]	; (80018e0 <MX_GPIO_Init+0x80>)
 8001868:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800186a:	4b1d      	ldr	r3, [pc, #116]	; (80018e0 <MX_GPIO_Init+0x80>)
 800186c:	2104      	movs	r1, #4
 800186e:	430a      	orrs	r2, r1
 8001870:	62da      	str	r2, [r3, #44]	; 0x2c
 8001872:	4b1b      	ldr	r3, [pc, #108]	; (80018e0 <MX_GPIO_Init+0x80>)
 8001874:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001876:	2204      	movs	r2, #4
 8001878:	4013      	ands	r3, r2
 800187a:	60fb      	str	r3, [r7, #12]
 800187c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800187e:	4b18      	ldr	r3, [pc, #96]	; (80018e0 <MX_GPIO_Init+0x80>)
 8001880:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001882:	4b17      	ldr	r3, [pc, #92]	; (80018e0 <MX_GPIO_Init+0x80>)
 8001884:	2180      	movs	r1, #128	; 0x80
 8001886:	430a      	orrs	r2, r1
 8001888:	62da      	str	r2, [r3, #44]	; 0x2c
 800188a:	4b15      	ldr	r3, [pc, #84]	; (80018e0 <MX_GPIO_Init+0x80>)
 800188c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800188e:	2280      	movs	r2, #128	; 0x80
 8001890:	4013      	ands	r3, r2
 8001892:	60bb      	str	r3, [r7, #8]
 8001894:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001896:	4b12      	ldr	r3, [pc, #72]	; (80018e0 <MX_GPIO_Init+0x80>)
 8001898:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800189a:	4b11      	ldr	r3, [pc, #68]	; (80018e0 <MX_GPIO_Init+0x80>)
 800189c:	2101      	movs	r1, #1
 800189e:	430a      	orrs	r2, r1
 80018a0:	62da      	str	r2, [r3, #44]	; 0x2c
 80018a2:	4b0f      	ldr	r3, [pc, #60]	; (80018e0 <MX_GPIO_Init+0x80>)
 80018a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018a6:	2201      	movs	r2, #1
 80018a8:	4013      	ands	r3, r2
 80018aa:	607b      	str	r3, [r7, #4]
 80018ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018ae:	4b0c      	ldr	r3, [pc, #48]	; (80018e0 <MX_GPIO_Init+0x80>)
 80018b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80018b2:	4b0b      	ldr	r3, [pc, #44]	; (80018e0 <MX_GPIO_Init+0x80>)
 80018b4:	2102      	movs	r1, #2
 80018b6:	430a      	orrs	r2, r1
 80018b8:	62da      	str	r2, [r3, #44]	; 0x2c
 80018ba:	4b09      	ldr	r3, [pc, #36]	; (80018e0 <MX_GPIO_Init+0x80>)
 80018bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018be:	2202      	movs	r2, #2
 80018c0:	4013      	ands	r3, r2
 80018c2:	603b      	str	r3, [r7, #0]
 80018c4:	683b      	ldr	r3, [r7, #0]

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 80018c6:	2200      	movs	r2, #0
 80018c8:	2100      	movs	r1, #0
 80018ca:	2007      	movs	r0, #7
 80018cc:	f008 fb76 	bl	8009fbc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 80018d0:	2007      	movs	r0, #7
 80018d2:	f008 fb88 	bl	8009fe6 <HAL_NVIC_EnableIRQ>

}
 80018d6:	46c0      	nop			; (mov r8, r8)
 80018d8:	46bd      	mov	sp, r7
 80018da:	b004      	add	sp, #16
 80018dc:	bd80      	pop	{r7, pc}
 80018de:	46c0      	nop			; (mov r8, r8)
 80018e0:	40021000 	.word	0x40021000

080018e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018e8:	b672      	cpsid	i
}
 80018ea:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80018ec:	e7fe      	b.n	80018ec <Error_Handler+0x8>
	...

080018f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018f4:	4b07      	ldr	r3, [pc, #28]	; (8001914 <HAL_MspInit+0x24>)
 80018f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80018f8:	4b06      	ldr	r3, [pc, #24]	; (8001914 <HAL_MspInit+0x24>)
 80018fa:	2101      	movs	r1, #1
 80018fc:	430a      	orrs	r2, r1
 80018fe:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8001900:	4b04      	ldr	r3, [pc, #16]	; (8001914 <HAL_MspInit+0x24>)
 8001902:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001904:	4b03      	ldr	r3, [pc, #12]	; (8001914 <HAL_MspInit+0x24>)
 8001906:	2180      	movs	r1, #128	; 0x80
 8001908:	0549      	lsls	r1, r1, #21
 800190a:	430a      	orrs	r2, r1
 800190c:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800190e:	46c0      	nop			; (mov r8, r8)
 8001910:	46bd      	mov	sp, r7
 8001912:	bd80      	pop	{r7, pc}
 8001914:	40021000 	.word	0x40021000

08001918 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b084      	sub	sp, #16
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	4a0a      	ldr	r2, [pc, #40]	; (8001950 <HAL_CRC_MspInit+0x38>)
 8001926:	4293      	cmp	r3, r2
 8001928:	d10d      	bne.n	8001946 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800192a:	4b0a      	ldr	r3, [pc, #40]	; (8001954 <HAL_CRC_MspInit+0x3c>)
 800192c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800192e:	4b09      	ldr	r3, [pc, #36]	; (8001954 <HAL_CRC_MspInit+0x3c>)
 8001930:	2180      	movs	r1, #128	; 0x80
 8001932:	0149      	lsls	r1, r1, #5
 8001934:	430a      	orrs	r2, r1
 8001936:	631a      	str	r2, [r3, #48]	; 0x30
 8001938:	4b06      	ldr	r3, [pc, #24]	; (8001954 <HAL_CRC_MspInit+0x3c>)
 800193a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800193c:	2380      	movs	r3, #128	; 0x80
 800193e:	015b      	lsls	r3, r3, #5
 8001940:	4013      	ands	r3, r2
 8001942:	60fb      	str	r3, [r7, #12]
 8001944:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8001946:	46c0      	nop			; (mov r8, r8)
 8001948:	46bd      	mov	sp, r7
 800194a:	b004      	add	sp, #16
 800194c:	bd80      	pop	{r7, pc}
 800194e:	46c0      	nop			; (mov r8, r8)
 8001950:	40023000 	.word	0x40023000
 8001954:	40021000 	.word	0x40021000

08001958 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b082      	sub	sp, #8
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	4a06      	ldr	r2, [pc, #24]	; (8001980 <HAL_RTC_MspInit+0x28>)
 8001966:	4293      	cmp	r3, r2
 8001968:	d106      	bne.n	8001978 <HAL_RTC_MspInit+0x20>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800196a:	4b06      	ldr	r3, [pc, #24]	; (8001984 <HAL_RTC_MspInit+0x2c>)
 800196c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800196e:	4b05      	ldr	r3, [pc, #20]	; (8001984 <HAL_RTC_MspInit+0x2c>)
 8001970:	2180      	movs	r1, #128	; 0x80
 8001972:	02c9      	lsls	r1, r1, #11
 8001974:	430a      	orrs	r2, r1
 8001976:	651a      	str	r2, [r3, #80]	; 0x50
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001978:	46c0      	nop			; (mov r8, r8)
 800197a:	46bd      	mov	sp, r7
 800197c:	b002      	add	sp, #8
 800197e:	bd80      	pop	{r7, pc}
 8001980:	40002800 	.word	0x40002800
 8001984:	40021000 	.word	0x40021000

08001988 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b082      	sub	sp, #8
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	4a0a      	ldr	r2, [pc, #40]	; (80019c0 <HAL_TIM_Base_MspInit+0x38>)
 8001996:	4293      	cmp	r3, r2
 8001998:	d10d      	bne.n	80019b6 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800199a:	4b0a      	ldr	r3, [pc, #40]	; (80019c4 <HAL_TIM_Base_MspInit+0x3c>)
 800199c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800199e:	4b09      	ldr	r3, [pc, #36]	; (80019c4 <HAL_TIM_Base_MspInit+0x3c>)
 80019a0:	2102      	movs	r1, #2
 80019a2:	430a      	orrs	r2, r1
 80019a4:	639a      	str	r2, [r3, #56]	; 0x38
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80019a6:	2200      	movs	r2, #0
 80019a8:	2100      	movs	r1, #0
 80019aa:	2010      	movs	r0, #16
 80019ac:	f008 fb06 	bl	8009fbc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80019b0:	2010      	movs	r0, #16
 80019b2:	f008 fb18 	bl	8009fe6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80019b6:	46c0      	nop			; (mov r8, r8)
 80019b8:	46bd      	mov	sp, r7
 80019ba:	b002      	add	sp, #8
 80019bc:	bd80      	pop	{r7, pc}
 80019be:	46c0      	nop			; (mov r8, r8)
 80019c0:	40000400 	.word	0x40000400
 80019c4:	40021000 	.word	0x40021000

080019c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80019cc:	e7fe      	b.n	80019cc <NMI_Handler+0x4>

080019ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019ce:	b580      	push	{r7, lr}
 80019d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019d2:	e7fe      	b.n	80019d2 <HardFault_Handler+0x4>

080019d4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80019d8:	46c0      	nop			; (mov r8, r8)
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd80      	pop	{r7, pc}

080019de <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019de:	b580      	push	{r7, lr}
 80019e0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019e2:	46c0      	nop			; (mov r8, r8)
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bd80      	pop	{r7, pc}

080019e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019ec:	f008 f9fa 	bl	8009de4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019f0:	46c0      	nop			; (mov r8, r8)
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}
	...

080019f8 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_EXTI_IRQHandler(&H_EXTI_13);
 80019fc:	4b03      	ldr	r3, [pc, #12]	; (8001a0c <EXTI4_15_IRQHandler+0x14>)
 80019fe:	0018      	movs	r0, r3
 8001a00:	f008 fdd0 	bl	800a5a4 <HAL_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8001a04:	46c0      	nop			; (mov r8, r8)
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}
 8001a0a:	46c0      	nop			; (mov r8, r8)
 8001a0c:	20000254 	.word	0x20000254

08001a10 <DMA1_Channel4_5_6_7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4, channel 5, channel 6 and channel 7 interrupts.
  */
void DMA1_Channel4_5_6_7_IRQHandler(void)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001a14:	4b03      	ldr	r3, [pc, #12]	; (8001a24 <DMA1_Channel4_5_6_7_IRQHandler+0x14>)
 8001a16:	0018      	movs	r0, r3
 8001a18:	f008 fcb4 	bl	800a384 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 1 */
}
 8001a1c:	46c0      	nop			; (mov r8, r8)
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}
 8001a22:	46c0      	nop			; (mov r8, r8)
 8001a24:	20000dc8 	.word	0x20000dc8

08001a28 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001a2c:	4b03      	ldr	r3, [pc, #12]	; (8001a3c <TIM3_IRQHandler+0x14>)
 8001a2e:	0018      	movs	r0, r3
 8001a30:	f00b fa22 	bl	800ce78 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001a34:	46c0      	nop			; (mov r8, r8)
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}
 8001a3a:	46c0      	nop			; (mov r8, r8)
 8001a3c:	20000b00 	.word	0x20000b00

08001a40 <BSP_I2C1_Init>:
/**
  * @brief  Initialize I2C HAL
  * @retval BSP status
  */
int32_t BSP_I2C1_Init(void)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b082      	sub	sp, #8
 8001a44:	af00      	add	r7, sp, #0

  int32_t ret = BSP_ERROR_NONE;
 8001a46:	2300      	movs	r3, #0
 8001a48:	607b      	str	r3, [r7, #4]

  hi2c1.Instance  = I2C1;
 8001a4a:	4b19      	ldr	r3, [pc, #100]	; (8001ab0 <BSP_I2C1_Init+0x70>)
 8001a4c:	4a19      	ldr	r2, [pc, #100]	; (8001ab4 <BSP_I2C1_Init+0x74>)
 8001a4e:	601a      	str	r2, [r3, #0]

  if(I2C1InitCounter++ == 0)
 8001a50:	4b19      	ldr	r3, [pc, #100]	; (8001ab8 <BSP_I2C1_Init+0x78>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	1c59      	adds	r1, r3, #1
 8001a56:	4a18      	ldr	r2, [pc, #96]	; (8001ab8 <BSP_I2C1_Init+0x78>)
 8001a58:	6011      	str	r1, [r2, #0]
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d123      	bne.n	8001aa6 <BSP_I2C1_Init+0x66>
  {
    if (HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_RESET)
 8001a5e:	4b14      	ldr	r3, [pc, #80]	; (8001ab0 <BSP_I2C1_Init+0x70>)
 8001a60:	0018      	movs	r0, r3
 8001a62:	f009 fb95 	bl	800b190 <HAL_I2C_GetState>
 8001a66:	1e03      	subs	r3, r0, #0
 8001a68:	d11d      	bne.n	8001aa6 <BSP_I2C1_Init+0x66>
    {
    #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* Init the I2C Msp */
      I2C1_MspInit(&hi2c1);
 8001a6a:	4b11      	ldr	r3, [pc, #68]	; (8001ab0 <BSP_I2C1_Init+0x70>)
 8001a6c:	0018      	movs	r0, r3
 8001a6e:	f000 f91b 	bl	8001ca8 <I2C1_MspInit>
        {
          return BSP_ERROR_MSP_FAILURE;
        }
      }
    #endif
      if(ret == BSP_ERROR_NONE)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d116      	bne.n	8001aa6 <BSP_I2C1_Init+0x66>
      {
        /* Init the I2C */
        if(MX_I2C1_Init(&hi2c1) != HAL_OK)
 8001a78:	4b0d      	ldr	r3, [pc, #52]	; (8001ab0 <BSP_I2C1_Init+0x70>)
 8001a7a:	0018      	movs	r0, r3
 8001a7c:	f000 f8c6 	bl	8001c0c <MX_I2C1_Init>
 8001a80:	1e03      	subs	r3, r0, #0
 8001a82:	d003      	beq.n	8001a8c <BSP_I2C1_Init+0x4c>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 8001a84:	2308      	movs	r3, #8
 8001a86:	425b      	negs	r3, r3
 8001a88:	607b      	str	r3, [r7, #4]
 8001a8a:	e00c      	b.n	8001aa6 <BSP_I2C1_Init+0x66>
        }
        else if(HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001a8c:	4b08      	ldr	r3, [pc, #32]	; (8001ab0 <BSP_I2C1_Init+0x70>)
 8001a8e:	2100      	movs	r1, #0
 8001a90:	0018      	movs	r0, r3
 8001a92:	f009 fde5 	bl	800b660 <HAL_I2CEx_ConfigAnalogFilter>
 8001a96:	1e03      	subs	r3, r0, #0
 8001a98:	d003      	beq.n	8001aa2 <BSP_I2C1_Init+0x62>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 8001a9a:	2308      	movs	r3, #8
 8001a9c:	425b      	negs	r3, r3
 8001a9e:	607b      	str	r3, [r7, #4]
 8001aa0:	e001      	b.n	8001aa6 <BSP_I2C1_Init+0x66>
        }
        else
        {
          ret = BSP_ERROR_NONE;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	607b      	str	r3, [r7, #4]
        }
      }
    }
  }
  return ret;
 8001aa6:	687b      	ldr	r3, [r7, #4]
}
 8001aa8:	0018      	movs	r0, r3
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	b002      	add	sp, #8
 8001aae:	bd80      	pop	{r7, pc}
 8001ab0:	20000b48 	.word	0x20000b48
 8001ab4:	40005400 	.word	0x40005400
 8001ab8:	20000b94 	.word	0x20000b94

08001abc <BSP_I2C1_DeInit>:
/**
  * @brief  DeInitialize I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C1_DeInit(void)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b082      	sub	sp, #8
 8001ac0:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	607b      	str	r3, [r7, #4]

  if (I2C1InitCounter > 0)
 8001ac6:	4b0f      	ldr	r3, [pc, #60]	; (8001b04 <BSP_I2C1_DeInit+0x48>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d015      	beq.n	8001afa <BSP_I2C1_DeInit+0x3e>
  {
    if (--I2C1InitCounter == 0)
 8001ace:	4b0d      	ldr	r3, [pc, #52]	; (8001b04 <BSP_I2C1_DeInit+0x48>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	1e5a      	subs	r2, r3, #1
 8001ad4:	4b0b      	ldr	r3, [pc, #44]	; (8001b04 <BSP_I2C1_DeInit+0x48>)
 8001ad6:	601a      	str	r2, [r3, #0]
 8001ad8:	4b0a      	ldr	r3, [pc, #40]	; (8001b04 <BSP_I2C1_DeInit+0x48>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d10c      	bne.n	8001afa <BSP_I2C1_DeInit+0x3e>
    {
  #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* DeInit the I2C */
      I2C1_MspDeInit(&hi2c1);
 8001ae0:	4b09      	ldr	r3, [pc, #36]	; (8001b08 <BSP_I2C1_DeInit+0x4c>)
 8001ae2:	0018      	movs	r0, r3
 8001ae4:	f000 f92e 	bl	8001d44 <I2C1_MspDeInit>
  #endif
      /* DeInit the I2C */
      if (HAL_I2C_DeInit(&hi2c1) != HAL_OK)
 8001ae8:	4b07      	ldr	r3, [pc, #28]	; (8001b08 <BSP_I2C1_DeInit+0x4c>)
 8001aea:	0018      	movs	r0, r3
 8001aec:	f009 f8ae 	bl	800ac4c <HAL_I2C_DeInit>
 8001af0:	1e03      	subs	r3, r0, #0
 8001af2:	d002      	beq.n	8001afa <BSP_I2C1_DeInit+0x3e>
      {
        ret = BSP_ERROR_BUS_FAILURE;
 8001af4:	2308      	movs	r3, #8
 8001af6:	425b      	negs	r3, r3
 8001af8:	607b      	str	r3, [r7, #4]
      }
    }
  }
  return ret;
 8001afa:	687b      	ldr	r3, [r7, #4]
}
 8001afc:	0018      	movs	r0, r3
 8001afe:	46bd      	mov	sp, r7
 8001b00:	b002      	add	sp, #8
 8001b02:	bd80      	pop	{r7, pc}
 8001b04:	20000b94 	.word	0x20000b94
 8001b08:	20000b48 	.word	0x20000b48

08001b0c <BSP_I2C1_WriteReg>:
  * @param  Length Data Length
  * @retval BSP status
  */

int32_t BSP_I2C1_WriteReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8001b0c:	b5b0      	push	{r4, r5, r7, lr}
 8001b0e:	b08a      	sub	sp, #40	; 0x28
 8001b10:	af04      	add	r7, sp, #16
 8001b12:	0004      	movs	r4, r0
 8001b14:	0008      	movs	r0, r1
 8001b16:	60ba      	str	r2, [r7, #8]
 8001b18:	0019      	movs	r1, r3
 8001b1a:	250e      	movs	r5, #14
 8001b1c:	197b      	adds	r3, r7, r5
 8001b1e:	1c22      	adds	r2, r4, #0
 8001b20:	801a      	strh	r2, [r3, #0]
 8001b22:	240c      	movs	r4, #12
 8001b24:	193b      	adds	r3, r7, r4
 8001b26:	1c02      	adds	r2, r0, #0
 8001b28:	801a      	strh	r2, [r3, #0]
 8001b2a:	1dbb      	adds	r3, r7, #6
 8001b2c:	1c0a      	adds	r2, r1, #0
 8001b2e:	801a      	strh	r2, [r3, #0]
  int32_t ret = BSP_ERROR_NONE;
 8001b30:	2300      	movs	r3, #0
 8001b32:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Write(&hi2c1, DevAddr,Reg, I2C_MEMADD_SIZE_8BIT,pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 8001b34:	193b      	adds	r3, r7, r4
 8001b36:	881a      	ldrh	r2, [r3, #0]
 8001b38:	197b      	adds	r3, r7, r5
 8001b3a:	8819      	ldrh	r1, [r3, #0]
 8001b3c:	4810      	ldr	r0, [pc, #64]	; (8001b80 <BSP_I2C1_WriteReg+0x74>)
 8001b3e:	2380      	movs	r3, #128	; 0x80
 8001b40:	015b      	lsls	r3, r3, #5
 8001b42:	9302      	str	r3, [sp, #8]
 8001b44:	1dbb      	adds	r3, r7, #6
 8001b46:	881b      	ldrh	r3, [r3, #0]
 8001b48:	9301      	str	r3, [sp, #4]
 8001b4a:	68bb      	ldr	r3, [r7, #8]
 8001b4c:	9300      	str	r3, [sp, #0]
 8001b4e:	2301      	movs	r3, #1
 8001b50:	f009 f8bc 	bl	800accc <HAL_I2C_Mem_Write>
 8001b54:	1e03      	subs	r3, r0, #0
 8001b56:	d00d      	beq.n	8001b74 <BSP_I2C1_WriteReg+0x68>
  {
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 8001b58:	4b09      	ldr	r3, [pc, #36]	; (8001b80 <BSP_I2C1_WriteReg+0x74>)
 8001b5a:	0018      	movs	r0, r3
 8001b5c:	f009 fb24 	bl	800b1a8 <HAL_I2C_GetError>
 8001b60:	0003      	movs	r3, r0
 8001b62:	2b04      	cmp	r3, #4
 8001b64:	d103      	bne.n	8001b6e <BSP_I2C1_WriteReg+0x62>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8001b66:	2366      	movs	r3, #102	; 0x66
 8001b68:	425b      	negs	r3, r3
 8001b6a:	617b      	str	r3, [r7, #20]
 8001b6c:	e002      	b.n	8001b74 <BSP_I2C1_WriteReg+0x68>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8001b6e:	2304      	movs	r3, #4
 8001b70:	425b      	negs	r3, r3
 8001b72:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 8001b74:	697b      	ldr	r3, [r7, #20]
}
 8001b76:	0018      	movs	r0, r3
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	b006      	add	sp, #24
 8001b7c:	bdb0      	pop	{r4, r5, r7, pc}
 8001b7e:	46c0      	nop			; (mov r8, r8)
 8001b80:	20000b48 	.word	0x20000b48

08001b84 <BSP_I2C1_ReadReg>:
  * @param  pData  Pointer to data buffer to read
  * @param  Length Data Length
  * @retval BSP status
  */
int32_t  BSP_I2C1_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8001b84:	b5b0      	push	{r4, r5, r7, lr}
 8001b86:	b08a      	sub	sp, #40	; 0x28
 8001b88:	af04      	add	r7, sp, #16
 8001b8a:	0004      	movs	r4, r0
 8001b8c:	0008      	movs	r0, r1
 8001b8e:	60ba      	str	r2, [r7, #8]
 8001b90:	0019      	movs	r1, r3
 8001b92:	250e      	movs	r5, #14
 8001b94:	197b      	adds	r3, r7, r5
 8001b96:	1c22      	adds	r2, r4, #0
 8001b98:	801a      	strh	r2, [r3, #0]
 8001b9a:	240c      	movs	r4, #12
 8001b9c:	193b      	adds	r3, r7, r4
 8001b9e:	1c02      	adds	r2, r0, #0
 8001ba0:	801a      	strh	r2, [r3, #0]
 8001ba2:	1dbb      	adds	r3, r7, #6
 8001ba4:	1c0a      	adds	r2, r1, #0
 8001ba6:	801a      	strh	r2, [r3, #0]
  int32_t ret = BSP_ERROR_NONE;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Read(&hi2c1, DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 8001bac:	193b      	adds	r3, r7, r4
 8001bae:	881a      	ldrh	r2, [r3, #0]
 8001bb0:	197b      	adds	r3, r7, r5
 8001bb2:	8819      	ldrh	r1, [r3, #0]
 8001bb4:	4810      	ldr	r0, [pc, #64]	; (8001bf8 <BSP_I2C1_ReadReg+0x74>)
 8001bb6:	2380      	movs	r3, #128	; 0x80
 8001bb8:	015b      	lsls	r3, r3, #5
 8001bba:	9302      	str	r3, [sp, #8]
 8001bbc:	1dbb      	adds	r3, r7, #6
 8001bbe:	881b      	ldrh	r3, [r3, #0]
 8001bc0:	9301      	str	r3, [sp, #4]
 8001bc2:	68bb      	ldr	r3, [r7, #8]
 8001bc4:	9300      	str	r3, [sp, #0]
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	f009 f9ae 	bl	800af28 <HAL_I2C_Mem_Read>
 8001bcc:	1e03      	subs	r3, r0, #0
 8001bce:	d00d      	beq.n	8001bec <BSP_I2C1_ReadReg+0x68>
  {
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 8001bd0:	4b09      	ldr	r3, [pc, #36]	; (8001bf8 <BSP_I2C1_ReadReg+0x74>)
 8001bd2:	0018      	movs	r0, r3
 8001bd4:	f009 fae8 	bl	800b1a8 <HAL_I2C_GetError>
 8001bd8:	0003      	movs	r3, r0
 8001bda:	2b04      	cmp	r3, #4
 8001bdc:	d103      	bne.n	8001be6 <BSP_I2C1_ReadReg+0x62>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8001bde:	2366      	movs	r3, #102	; 0x66
 8001be0:	425b      	negs	r3, r3
 8001be2:	617b      	str	r3, [r7, #20]
 8001be4:	e002      	b.n	8001bec <BSP_I2C1_ReadReg+0x68>
    }
    else
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8001be6:	2304      	movs	r3, #4
 8001be8:	425b      	negs	r3, r3
 8001bea:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 8001bec:	697b      	ldr	r3, [r7, #20]
}
 8001bee:	0018      	movs	r0, r3
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	b006      	add	sp, #24
 8001bf4:	bdb0      	pop	{r4, r5, r7, pc}
 8001bf6:	46c0      	nop			; (mov r8, r8)
 8001bf8:	20000b48 	.word	0x20000b48

08001bfc <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8001c00:	f008 f902 	bl	8009e08 <HAL_GetTick>
 8001c04:	0003      	movs	r3, r0
}
 8001c06:	0018      	movs	r0, r3
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bd80      	pop	{r7, pc}

08001c0c <MX_I2C1_Init>:

/* I2C1 init function */

__weak HAL_StatusTypeDef MX_I2C1_Init(I2C_HandleTypeDef* hi2c)
{
 8001c0c:	b590      	push	{r4, r7, lr}
 8001c0e:	b085      	sub	sp, #20
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8001c14:	240f      	movs	r4, #15
 8001c16:	193b      	adds	r3, r7, r4
 8001c18:	2200      	movs	r2, #0
 8001c1a:	701a      	strb	r2, [r3, #0]

  hi2c->Instance = I2C1;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	4a20      	ldr	r2, [pc, #128]	; (8001ca0 <MX_I2C1_Init+0x94>)
 8001c20:	601a      	str	r2, [r3, #0]
  hi2c->Init.Timing = 0x00707CBB;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	4a1f      	ldr	r2, [pc, #124]	; (8001ca4 <MX_I2C1_Init+0x98>)
 8001c26:	605a      	str	r2, [r3, #4]
  hi2c->Init.OwnAddress1 = 0;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	609a      	str	r2, [r3, #8]
  hi2c->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	2201      	movs	r2, #1
 8001c32:	60da      	str	r2, [r3, #12]
  hi2c->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	2200      	movs	r2, #0
 8001c38:	611a      	str	r2, [r3, #16]
  hi2c->Init.OwnAddress2 = 0;
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	615a      	str	r2, [r3, #20]
  hi2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	2200      	movs	r2, #0
 8001c44:	619a      	str	r2, [r3, #24]
  hi2c->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	2200      	movs	r2, #0
 8001c4a:	61da      	str	r2, [r3, #28]
  hi2c->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	2200      	movs	r2, #0
 8001c50:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(hi2c) != HAL_OK)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	0018      	movs	r0, r3
 8001c56:	f008 ff63 	bl	800ab20 <HAL_I2C_Init>
 8001c5a:	1e03      	subs	r3, r0, #0
 8001c5c:	d002      	beq.n	8001c64 <MX_I2C1_Init+0x58>
  {
    ret = HAL_ERROR;
 8001c5e:	193b      	adds	r3, r7, r4
 8001c60:	2201      	movs	r2, #1
 8001c62:	701a      	strb	r2, [r3, #0]
  }

  if (HAL_I2CEx_ConfigAnalogFilter(hi2c, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	2100      	movs	r1, #0
 8001c68:	0018      	movs	r0, r3
 8001c6a:	f009 fcf9 	bl	800b660 <HAL_I2CEx_ConfigAnalogFilter>
 8001c6e:	1e03      	subs	r3, r0, #0
 8001c70:	d003      	beq.n	8001c7a <MX_I2C1_Init+0x6e>
  {
    ret = HAL_ERROR;
 8001c72:	230f      	movs	r3, #15
 8001c74:	18fb      	adds	r3, r7, r3
 8001c76:	2201      	movs	r2, #1
 8001c78:	701a      	strb	r2, [r3, #0]
  }

  if (HAL_I2CEx_ConfigDigitalFilter(hi2c, 0) != HAL_OK)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	2100      	movs	r1, #0
 8001c7e:	0018      	movs	r0, r3
 8001c80:	f009 fd3a 	bl	800b6f8 <HAL_I2CEx_ConfigDigitalFilter>
 8001c84:	1e03      	subs	r3, r0, #0
 8001c86:	d003      	beq.n	8001c90 <MX_I2C1_Init+0x84>
  {
    ret = HAL_ERROR;
 8001c88:	230f      	movs	r3, #15
 8001c8a:	18fb      	adds	r3, r7, r3
 8001c8c:	2201      	movs	r2, #1
 8001c8e:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 8001c90:	230f      	movs	r3, #15
 8001c92:	18fb      	adds	r3, r7, r3
 8001c94:	781b      	ldrb	r3, [r3, #0]
}
 8001c96:	0018      	movs	r0, r3
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	b005      	add	sp, #20
 8001c9c:	bd90      	pop	{r4, r7, pc}
 8001c9e:	46c0      	nop			; (mov r8, r8)
 8001ca0:	40005400 	.word	0x40005400
 8001ca4:	00707cbb 	.word	0x00707cbb

08001ca8 <I2C1_MspInit>:

static void I2C1_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001ca8:	b590      	push	{r4, r7, lr}
 8001caa:	b089      	sub	sp, #36	; 0x24
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cb0:	4b22      	ldr	r3, [pc, #136]	; (8001d3c <I2C1_MspInit+0x94>)
 8001cb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001cb4:	4b21      	ldr	r3, [pc, #132]	; (8001d3c <I2C1_MspInit+0x94>)
 8001cb6:	2102      	movs	r1, #2
 8001cb8:	430a      	orrs	r2, r1
 8001cba:	62da      	str	r2, [r3, #44]	; 0x2c
 8001cbc:	4b1f      	ldr	r3, [pc, #124]	; (8001d3c <I2C1_MspInit+0x94>)
 8001cbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cc0:	2202      	movs	r2, #2
 8001cc2:	4013      	ands	r3, r2
 8001cc4:	60bb      	str	r3, [r7, #8]
 8001cc6:	68bb      	ldr	r3, [r7, #8]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = BUS_I2C1_SCL_GPIO_PIN;
 8001cc8:	210c      	movs	r1, #12
 8001cca:	187b      	adds	r3, r7, r1
 8001ccc:	2280      	movs	r2, #128	; 0x80
 8001cce:	0052      	lsls	r2, r2, #1
 8001cd0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001cd2:	000c      	movs	r4, r1
 8001cd4:	193b      	adds	r3, r7, r4
 8001cd6:	2212      	movs	r2, #18
 8001cd8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cda:	193b      	adds	r3, r7, r4
 8001cdc:	2200      	movs	r2, #0
 8001cde:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ce0:	193b      	adds	r3, r7, r4
 8001ce2:	2203      	movs	r2, #3
 8001ce4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = BUS_I2C1_SCL_GPIO_AF;
 8001ce6:	193b      	adds	r3, r7, r4
 8001ce8:	2204      	movs	r2, #4
 8001cea:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(BUS_I2C1_SCL_GPIO_PORT, &GPIO_InitStruct);
 8001cec:	193b      	adds	r3, r7, r4
 8001cee:	4a14      	ldr	r2, [pc, #80]	; (8001d40 <I2C1_MspInit+0x98>)
 8001cf0:	0019      	movs	r1, r3
 8001cf2:	0010      	movs	r0, r2
 8001cf4:	f008 fc7a 	bl	800a5ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_I2C1_SDA_GPIO_PIN;
 8001cf8:	0021      	movs	r1, r4
 8001cfa:	187b      	adds	r3, r7, r1
 8001cfc:	2280      	movs	r2, #128	; 0x80
 8001cfe:	0092      	lsls	r2, r2, #2
 8001d00:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d02:	187b      	adds	r3, r7, r1
 8001d04:	2212      	movs	r2, #18
 8001d06:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d08:	187b      	adds	r3, r7, r1
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d0e:	187b      	adds	r3, r7, r1
 8001d10:	2203      	movs	r2, #3
 8001d12:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = BUS_I2C1_SDA_GPIO_AF;
 8001d14:	187b      	adds	r3, r7, r1
 8001d16:	2204      	movs	r2, #4
 8001d18:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(BUS_I2C1_SDA_GPIO_PORT, &GPIO_InitStruct);
 8001d1a:	187b      	adds	r3, r7, r1
 8001d1c:	4a08      	ldr	r2, [pc, #32]	; (8001d40 <I2C1_MspInit+0x98>)
 8001d1e:	0019      	movs	r1, r3
 8001d20:	0010      	movs	r0, r2
 8001d22:	f008 fc63 	bl	800a5ec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001d26:	4b05      	ldr	r3, [pc, #20]	; (8001d3c <I2C1_MspInit+0x94>)
 8001d28:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001d2a:	4b04      	ldr	r3, [pc, #16]	; (8001d3c <I2C1_MspInit+0x94>)
 8001d2c:	2180      	movs	r1, #128	; 0x80
 8001d2e:	0389      	lsls	r1, r1, #14
 8001d30:	430a      	orrs	r2, r1
 8001d32:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
}
 8001d34:	46c0      	nop			; (mov r8, r8)
 8001d36:	46bd      	mov	sp, r7
 8001d38:	b009      	add	sp, #36	; 0x24
 8001d3a:	bd90      	pop	{r4, r7, pc}
 8001d3c:	40021000 	.word	0x40021000
 8001d40:	50000400 	.word	0x50000400

08001d44 <I2C1_MspDeInit>:

static void I2C1_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b082      	sub	sp, #8
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8001d4c:	4b0b      	ldr	r3, [pc, #44]	; (8001d7c <I2C1_MspDeInit+0x38>)
 8001d4e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001d50:	4b0a      	ldr	r3, [pc, #40]	; (8001d7c <I2C1_MspDeInit+0x38>)
 8001d52:	490b      	ldr	r1, [pc, #44]	; (8001d80 <I2C1_MspDeInit+0x3c>)
 8001d54:	400a      	ands	r2, r1
 8001d56:	639a      	str	r2, [r3, #56]	; 0x38

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(BUS_I2C1_SCL_GPIO_PORT, BUS_I2C1_SCL_GPIO_PIN);
 8001d58:	2380      	movs	r3, #128	; 0x80
 8001d5a:	005b      	lsls	r3, r3, #1
 8001d5c:	4a09      	ldr	r2, [pc, #36]	; (8001d84 <I2C1_MspDeInit+0x40>)
 8001d5e:	0019      	movs	r1, r3
 8001d60:	0010      	movs	r0, r2
 8001d62:	f008 fdc1 	bl	800a8e8 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(BUS_I2C1_SDA_GPIO_PORT, BUS_I2C1_SDA_GPIO_PIN);
 8001d66:	2380      	movs	r3, #128	; 0x80
 8001d68:	009b      	lsls	r3, r3, #2
 8001d6a:	4a06      	ldr	r2, [pc, #24]	; (8001d84 <I2C1_MspDeInit+0x40>)
 8001d6c:	0019      	movs	r1, r3
 8001d6e:	0010      	movs	r0, r2
 8001d70:	f008 fdba 	bl	800a8e8 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
}
 8001d74:	46c0      	nop			; (mov r8, r8)
 8001d76:	46bd      	mov	sp, r7
 8001d78:	b002      	add	sp, #8
 8001d7a:	bd80      	pop	{r7, pc}
 8001d7c:	40021000 	.word	0x40021000
 8001d80:	ffdfffff 	.word	0xffdfffff
 8001d84:	50000400 	.word	0x50000400

08001d88 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b086      	sub	sp, #24
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d90:	4a14      	ldr	r2, [pc, #80]	; (8001de4 <_sbrk+0x5c>)
 8001d92:	4b15      	ldr	r3, [pc, #84]	; (8001de8 <_sbrk+0x60>)
 8001d94:	1ad3      	subs	r3, r2, r3
 8001d96:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d98:	697b      	ldr	r3, [r7, #20]
 8001d9a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d9c:	4b13      	ldr	r3, [pc, #76]	; (8001dec <_sbrk+0x64>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d102      	bne.n	8001daa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001da4:	4b11      	ldr	r3, [pc, #68]	; (8001dec <_sbrk+0x64>)
 8001da6:	4a12      	ldr	r2, [pc, #72]	; (8001df0 <_sbrk+0x68>)
 8001da8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001daa:	4b10      	ldr	r3, [pc, #64]	; (8001dec <_sbrk+0x64>)
 8001dac:	681a      	ldr	r2, [r3, #0]
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	18d3      	adds	r3, r2, r3
 8001db2:	693a      	ldr	r2, [r7, #16]
 8001db4:	429a      	cmp	r2, r3
 8001db6:	d207      	bcs.n	8001dc8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001db8:	f011 fe22 	bl	8013a00 <__errno>
 8001dbc:	0003      	movs	r3, r0
 8001dbe:	220c      	movs	r2, #12
 8001dc0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	425b      	negs	r3, r3
 8001dc6:	e009      	b.n	8001ddc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001dc8:	4b08      	ldr	r3, [pc, #32]	; (8001dec <_sbrk+0x64>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001dce:	4b07      	ldr	r3, [pc, #28]	; (8001dec <_sbrk+0x64>)
 8001dd0:	681a      	ldr	r2, [r3, #0]
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	18d2      	adds	r2, r2, r3
 8001dd6:	4b05      	ldr	r3, [pc, #20]	; (8001dec <_sbrk+0x64>)
 8001dd8:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8001dda:	68fb      	ldr	r3, [r7, #12]
}
 8001ddc:	0018      	movs	r0, r3
 8001dde:	46bd      	mov	sp, r7
 8001de0:	b006      	add	sp, #24
 8001de2:	bd80      	pop	{r7, pc}
 8001de4:	20005000 	.word	0x20005000
 8001de8:	00002000 	.word	0x00002000
 8001dec:	20000b98 	.word	0x20000b98
 8001df0:	20001668 	.word	0x20001668

08001df4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001df8:	46c0      	nop			; (mov r8, r8)
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd80      	pop	{r7, pc}
	...

08001e00 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8001e00:	480d      	ldr	r0, [pc, #52]	; (8001e38 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8001e02:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001e04:	480d      	ldr	r0, [pc, #52]	; (8001e3c <LoopForever+0x6>)
  ldr r1, =_edata
 8001e06:	490e      	ldr	r1, [pc, #56]	; (8001e40 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001e08:	4a0e      	ldr	r2, [pc, #56]	; (8001e44 <LoopForever+0xe>)
  movs r3, #0
 8001e0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e0c:	e002      	b.n	8001e14 <LoopCopyDataInit>

08001e0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e12:	3304      	adds	r3, #4

08001e14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e18:	d3f9      	bcc.n	8001e0e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e1a:	4a0b      	ldr	r2, [pc, #44]	; (8001e48 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001e1c:	4c0b      	ldr	r4, [pc, #44]	; (8001e4c <LoopForever+0x16>)
  movs r3, #0
 8001e1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e20:	e001      	b.n	8001e26 <LoopFillZerobss>

08001e22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e24:	3204      	adds	r2, #4

08001e26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e28:	d3fb      	bcc.n	8001e22 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001e2a:	f7ff ffe3 	bl	8001df4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001e2e:	f011 fded 	bl	8013a0c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e32:	f7ff fb7f 	bl	8001534 <main>

08001e36 <LoopForever>:

LoopForever:
    b LoopForever
 8001e36:	e7fe      	b.n	8001e36 <LoopForever>
   ldr   r0, =_estack
 8001e38:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8001e3c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e40:	200002dc 	.word	0x200002dc
  ldr r2, =_sidata
 8001e44:	080167a4 	.word	0x080167a4
  ldr r2, =_sbss
 8001e48:	200002dc 	.word	0x200002dc
  ldr r4, =_ebss
 8001e4c:	20001664 	.word	0x20001664

08001e50 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001e50:	e7fe      	b.n	8001e50 <ADC1_COMP_IRQHandler>
	...

08001e54 <HTS221_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_RegisterBusIO(HTS221_Object_t *pObj, HTS221_IO_t *pIO)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b084      	sub	sp, #16
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
 8001e5c:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d103      	bne.n	8001e6c <HTS221_RegisterBusIO+0x18>
  {
    ret = HTS221_ERROR;
 8001e64:	2301      	movs	r3, #1
 8001e66:	425b      	negs	r3, r3
 8001e68:	60fb      	str	r3, [r7, #12]
 8001e6a:	e031      	b.n	8001ed0 <HTS221_RegisterBusIO+0x7c>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	681a      	ldr	r2, [r3, #0]
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	685a      	ldr	r2, [r3, #4]
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	689a      	ldr	r2, [r3, #8]
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	7b1a      	ldrb	r2, [r3, #12]
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	691a      	ldr	r2, [r3, #16]
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	695a      	ldr	r2, [r3, #20]
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	699a      	ldr	r2, [r3, #24]
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	4a0d      	ldr	r2, [pc, #52]	; (8001edc <HTS221_RegisterBusIO+0x88>)
 8001ea8:	621a      	str	r2, [r3, #32]
    pObj->Ctx.write_reg = WriteRegWrap;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	4a0c      	ldr	r2, [pc, #48]	; (8001ee0 <HTS221_RegisterBusIO+0x8c>)
 8001eae:	61da      	str	r2, [r3, #28]
    pObj->Ctx.handle   = pObj;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	687a      	ldr	r2, [r7, #4]
 8001eb4:	625a      	str	r2, [r3, #36]	; 0x24

    if (pObj->IO.Init != NULL)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d005      	beq.n	8001eca <HTS221_RegisterBusIO+0x76>
    {
      ret = pObj->IO.Init();
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	4798      	blx	r3
 8001ec4:	0003      	movs	r3, r0
 8001ec6:	60fb      	str	r3, [r7, #12]
 8001ec8:	e002      	b.n	8001ed0 <HTS221_RegisterBusIO+0x7c>
    }
    else
    {
      ret = HTS221_ERROR;
 8001eca:	2301      	movs	r3, #1
 8001ecc:	425b      	negs	r3, r3
 8001ece:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8001ed0:	68fb      	ldr	r3, [r7, #12]
}
 8001ed2:	0018      	movs	r0, r3
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	b004      	add	sp, #16
 8001ed8:	bd80      	pop	{r7, pc}
 8001eda:	46c0      	nop			; (mov r8, r8)
 8001edc:	080024fb 	.word	0x080024fb
 8001ee0:	08002575 	.word	0x08002575

08001ee4 <HTS221_Init>:
  * @brief  Initialize the HTS221 sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_Init(HTS221_Object_t *pObj)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b082      	sub	sp, #8
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 0U)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2228      	movs	r2, #40	; 0x28
 8001ef0:	5c9b      	ldrb	r3, [r3, r2]
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d108      	bne.n	8001f08 <HTS221_Init+0x24>
  {
    if (HTS221_Initialize(pObj) != HTS221_OK)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	0018      	movs	r0, r3
 8001efa:	f000 fa8f 	bl	800241c <HTS221_Initialize>
 8001efe:	1e03      	subs	r3, r0, #0
 8001f00:	d002      	beq.n	8001f08 <HTS221_Init+0x24>
    {
      return HTS221_ERROR;
 8001f02:	2301      	movs	r3, #1
 8001f04:	425b      	negs	r3, r3
 8001f06:	e004      	b.n	8001f12 <HTS221_Init+0x2e>
    }
  }

  pObj->is_initialized = 1;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2228      	movs	r2, #40	; 0x28
 8001f0c:	2101      	movs	r1, #1
 8001f0e:	5499      	strb	r1, [r3, r2]

  return HTS221_OK;
 8001f10:	2300      	movs	r3, #0
}
 8001f12:	0018      	movs	r0, r3
 8001f14:	46bd      	mov	sp, r7
 8001f16:	b002      	add	sp, #8
 8001f18:	bd80      	pop	{r7, pc}

08001f1a <HTS221_DeInit>:
  * @brief  Deinitialize the HTS221 sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_DeInit(HTS221_Object_t *pObj)
{
 8001f1a:	b580      	push	{r7, lr}
 8001f1c:	b082      	sub	sp, #8
 8001f1e:	af00      	add	r7, sp, #0
 8001f20:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 1U)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	2228      	movs	r2, #40	; 0x28
 8001f26:	5c9b      	ldrb	r3, [r3, r2]
 8001f28:	2b01      	cmp	r3, #1
 8001f2a:	d111      	bne.n	8001f50 <HTS221_DeInit+0x36>
  {
    if (HTS221_HUM_Disable(pObj) != HTS221_OK)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	0018      	movs	r0, r3
 8001f30:	f000 f874 	bl	800201c <HTS221_HUM_Disable>
 8001f34:	1e03      	subs	r3, r0, #0
 8001f36:	d002      	beq.n	8001f3e <HTS221_DeInit+0x24>
    {
      return HTS221_ERROR;
 8001f38:	2301      	movs	r3, #1
 8001f3a:	425b      	negs	r3, r3
 8001f3c:	e00d      	b.n	8001f5a <HTS221_DeInit+0x40>
    }

    if (HTS221_TEMP_Disable(pObj) != HTS221_OK)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	0018      	movs	r0, r3
 8001f42:	f000 f951 	bl	80021e8 <HTS221_TEMP_Disable>
 8001f46:	1e03      	subs	r3, r0, #0
 8001f48:	d002      	beq.n	8001f50 <HTS221_DeInit+0x36>
    {
      return HTS221_ERROR;
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	425b      	negs	r3, r3
 8001f4e:	e004      	b.n	8001f5a <HTS221_DeInit+0x40>
    }
  }

  pObj->is_initialized = 0;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2228      	movs	r2, #40	; 0x28
 8001f54:	2100      	movs	r1, #0
 8001f56:	5499      	strb	r1, [r3, r2]

  return HTS221_OK;
 8001f58:	2300      	movs	r3, #0
}
 8001f5a:	0018      	movs	r0, r3
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	b002      	add	sp, #8
 8001f60:	bd80      	pop	{r7, pc}

08001f62 <HTS221_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_ReadID(HTS221_Object_t *pObj, uint8_t *Id)
{
 8001f62:	b580      	push	{r7, lr}
 8001f64:	b082      	sub	sp, #8
 8001f66:	af00      	add	r7, sp, #0
 8001f68:	6078      	str	r0, [r7, #4]
 8001f6a:	6039      	str	r1, [r7, #0]
  if (hts221_device_id_get(&(pObj->Ctx), Id) != HTS221_OK)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	331c      	adds	r3, #28
 8001f70:	683a      	ldr	r2, [r7, #0]
 8001f72:	0011      	movs	r1, r2
 8001f74:	0018      	movs	r0, r3
 8001f76:	f000 fc61 	bl	800283c <hts221_device_id_get>
 8001f7a:	1e03      	subs	r3, r0, #0
 8001f7c:	d002      	beq.n	8001f84 <HTS221_ReadID+0x22>
  {
    return HTS221_ERROR;
 8001f7e:	2301      	movs	r3, #1
 8001f80:	425b      	negs	r3, r3
 8001f82:	e000      	b.n	8001f86 <HTS221_ReadID+0x24>
  }

  return HTS221_OK;
 8001f84:	2300      	movs	r3, #0
}
 8001f86:	0018      	movs	r0, r3
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	b002      	add	sp, #8
 8001f8c:	bd80      	pop	{r7, pc}
	...

08001f90 <HTS221_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to HTS221 sensor capabilities
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_GetCapabilities(HTS221_Object_t *pObj, HTS221_Capabilities_t *Capabilities)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b082      	sub	sp, #8
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
 8001f98:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Humidity    = 1;
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	2201      	movs	r2, #1
 8001f9e:	709a      	strb	r2, [r3, #2]
  Capabilities->Pressure    = 0;
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	705a      	strb	r2, [r3, #1]
  Capabilities->Temperature = 1;
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	2201      	movs	r2, #1
 8001faa:	701a      	strb	r2, [r3, #0]
  Capabilities->LowPower    = 0;
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	2200      	movs	r2, #0
 8001fb0:	70da      	strb	r2, [r3, #3]
  Capabilities->HumMaxOdr   = 12.5f;
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	4a06      	ldr	r2, [pc, #24]	; (8001fd0 <HTS221_GetCapabilities+0x40>)
 8001fb6:	605a      	str	r2, [r3, #4]
  Capabilities->TempMaxOdr  = 12.5f;
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	4a05      	ldr	r2, [pc, #20]	; (8001fd0 <HTS221_GetCapabilities+0x40>)
 8001fbc:	609a      	str	r2, [r3, #8]
  Capabilities->PressMaxOdr = 0.0f;
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	60da      	str	r2, [r3, #12]
  return HTS221_OK;
 8001fc4:	2300      	movs	r3, #0
}
 8001fc6:	0018      	movs	r0, r3
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	b002      	add	sp, #8
 8001fcc:	bd80      	pop	{r7, pc}
 8001fce:	46c0      	nop			; (mov r8, r8)
 8001fd0:	41480000 	.word	0x41480000

08001fd4 <HTS221_HUM_Enable>:
  * @brief  Enable the HTS221 humidity sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_HUM_Enable(HTS221_Object_t *pObj)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b082      	sub	sp, #8
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->hum_is_enabled == 1U)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2229      	movs	r2, #41	; 0x29
 8001fe0:	5c9b      	ldrb	r3, [r3, r2]
 8001fe2:	2b01      	cmp	r3, #1
 8001fe4:	d101      	bne.n	8001fea <HTS221_HUM_Enable+0x16>
  {
    return HTS221_OK;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	e014      	b.n	8002014 <HTS221_HUM_Enable+0x40>
  }

  /* Check if the HTS221 temperature sensor is already enabled. */
  /* If yes, skip the enable function, if not call enable function */
  if (pObj->temp_is_enabled == 0U)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	222a      	movs	r2, #42	; 0x2a
 8001fee:	5c9b      	ldrb	r3, [r3, r2]
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d10a      	bne.n	800200a <HTS221_HUM_Enable+0x36>
  {
    /* Power on the component. */
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_ENABLE) != HTS221_OK)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	331c      	adds	r3, #28
 8001ff8:	2101      	movs	r1, #1
 8001ffa:	0018      	movs	r0, r3
 8001ffc:	f000 fc30 	bl	8002860 <hts221_power_on_set>
 8002000:	1e03      	subs	r3, r0, #0
 8002002:	d002      	beq.n	800200a <HTS221_HUM_Enable+0x36>
    {
      return HTS221_ERROR;
 8002004:	2301      	movs	r3, #1
 8002006:	425b      	negs	r3, r3
 8002008:	e004      	b.n	8002014 <HTS221_HUM_Enable+0x40>
    }
  }

  pObj->hum_is_enabled = 1;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	2229      	movs	r2, #41	; 0x29
 800200e:	2101      	movs	r1, #1
 8002010:	5499      	strb	r1, [r3, r2]

  return HTS221_OK;
 8002012:	2300      	movs	r3, #0
}
 8002014:	0018      	movs	r0, r3
 8002016:	46bd      	mov	sp, r7
 8002018:	b002      	add	sp, #8
 800201a:	bd80      	pop	{r7, pc}

0800201c <HTS221_HUM_Disable>:
  * @brief  Disable the HTS221 humidity sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_HUM_Disable(HTS221_Object_t *pObj)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b082      	sub	sp, #8
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->hum_is_enabled == 0U)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	2229      	movs	r2, #41	; 0x29
 8002028:	5c9b      	ldrb	r3, [r3, r2]
 800202a:	2b00      	cmp	r3, #0
 800202c:	d101      	bne.n	8002032 <HTS221_HUM_Disable+0x16>
  {
    return HTS221_OK;
 800202e:	2300      	movs	r3, #0
 8002030:	e014      	b.n	800205c <HTS221_HUM_Disable+0x40>
  }

  /* Check if the HTS221 temperature sensor is still enable. */
  /* If yes, skip the disable function, if not call disable function */
  if (pObj->temp_is_enabled == 0U)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	222a      	movs	r2, #42	; 0x2a
 8002036:	5c9b      	ldrb	r3, [r3, r2]
 8002038:	2b00      	cmp	r3, #0
 800203a:	d10a      	bne.n	8002052 <HTS221_HUM_Disable+0x36>
  {
    /* Power off the component. */
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_DISABLE) != HTS221_OK)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	331c      	adds	r3, #28
 8002040:	2100      	movs	r1, #0
 8002042:	0018      	movs	r0, r3
 8002044:	f000 fc0c 	bl	8002860 <hts221_power_on_set>
 8002048:	1e03      	subs	r3, r0, #0
 800204a:	d002      	beq.n	8002052 <HTS221_HUM_Disable+0x36>
    {
      return HTS221_ERROR;
 800204c:	2301      	movs	r3, #1
 800204e:	425b      	negs	r3, r3
 8002050:	e004      	b.n	800205c <HTS221_HUM_Disable+0x40>
    }
  }

  pObj->hum_is_enabled = 0;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	2229      	movs	r2, #41	; 0x29
 8002056:	2100      	movs	r1, #0
 8002058:	5499      	strb	r1, [r3, r2]

  return HTS221_OK;
 800205a:	2300      	movs	r3, #0
}
 800205c:	0018      	movs	r0, r3
 800205e:	46bd      	mov	sp, r7
 8002060:	b002      	add	sp, #8
 8002062:	bd80      	pop	{r7, pc}

08002064 <HTS221_HUM_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_HUM_GetOutputDataRate(HTS221_Object_t *pObj, float *Odr)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b082      	sub	sp, #8
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
 800206c:	6039      	str	r1, [r7, #0]
  return HTS221_GetOutputDataRate(pObj, Odr);
 800206e:	683a      	ldr	r2, [r7, #0]
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	0011      	movs	r1, r2
 8002074:	0018      	movs	r0, r3
 8002076:	f000 f961 	bl	800233c <HTS221_GetOutputDataRate>
 800207a:	0003      	movs	r3, r0
}
 800207c:	0018      	movs	r0, r3
 800207e:	46bd      	mov	sp, r7
 8002080:	b002      	add	sp, #8
 8002082:	bd80      	pop	{r7, pc}

08002084 <HTS221_HUM_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_HUM_SetOutputDataRate(HTS221_Object_t *pObj, float Odr)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b082      	sub	sp, #8
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
 800208c:	6039      	str	r1, [r7, #0]
  return HTS221_SetOutputDataRate(pObj, Odr);
 800208e:	683a      	ldr	r2, [r7, #0]
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	1c11      	adds	r1, r2, #0
 8002094:	0018      	movs	r0, r3
 8002096:	f000 f991 	bl	80023bc <HTS221_SetOutputDataRate>
 800209a:	0003      	movs	r3, r0
}
 800209c:	0018      	movs	r0, r3
 800209e:	46bd      	mov	sp, r7
 80020a0:	b002      	add	sp, #8
 80020a2:	bd80      	pop	{r7, pc}

080020a4 <HTS221_HUM_GetHumidity>:
  * @param  pObj the device pObj
  * @param  Value pointer where the humidity value is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_HUM_GetHumidity(HTS221_Object_t *pObj, float *Value)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b088      	sub	sp, #32
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
 80020ac:	6039      	str	r1, [r7, #0]
  hts221_axis1bit16_t data_raw_humidity;
  lin_t lin_hum;

  if (hts221_hum_adc_point_0_get(&(pObj->Ctx), &lin_hum.x0) != HTS221_OK)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	331c      	adds	r3, #28
 80020b2:	220c      	movs	r2, #12
 80020b4:	18ba      	adds	r2, r7, r2
 80020b6:	0011      	movs	r1, r2
 80020b8:	0018      	movs	r0, r3
 80020ba:	f000 fcb7 	bl	8002a2c <hts221_hum_adc_point_0_get>
 80020be:	1e03      	subs	r3, r0, #0
 80020c0:	d002      	beq.n	80020c8 <HTS221_HUM_GetHumidity+0x24>
  {
    return HTS221_ERROR;
 80020c2:	2301      	movs	r3, #1
 80020c4:	425b      	negs	r3, r3
 80020c6:	e064      	b.n	8002192 <HTS221_HUM_GetHumidity+0xee>
  }

  if (hts221_hum_rh_point_0_get(&(pObj->Ctx), &lin_hum.y0) != HTS221_OK)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	331c      	adds	r3, #28
 80020cc:	001a      	movs	r2, r3
 80020ce:	230c      	movs	r3, #12
 80020d0:	18fb      	adds	r3, r7, r3
 80020d2:	3304      	adds	r3, #4
 80020d4:	0019      	movs	r1, r3
 80020d6:	0010      	movs	r0, r2
 80020d8:	f000 fbf0 	bl	80028bc <hts221_hum_rh_point_0_get>
 80020dc:	1e03      	subs	r3, r0, #0
 80020de:	d002      	beq.n	80020e6 <HTS221_HUM_GetHumidity+0x42>
  {
    return HTS221_ERROR;
 80020e0:	2301      	movs	r3, #1
 80020e2:	425b      	negs	r3, r3
 80020e4:	e055      	b.n	8002192 <HTS221_HUM_GetHumidity+0xee>
  }

  if (hts221_hum_adc_point_1_get(&(pObj->Ctx), &lin_hum.x1) != HTS221_OK)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	331c      	adds	r3, #28
 80020ea:	001a      	movs	r2, r3
 80020ec:	230c      	movs	r3, #12
 80020ee:	18fb      	adds	r3, r7, r3
 80020f0:	3308      	adds	r3, #8
 80020f2:	0019      	movs	r1, r3
 80020f4:	0010      	movs	r0, r2
 80020f6:	f000 fcc3 	bl	8002a80 <hts221_hum_adc_point_1_get>
 80020fa:	1e03      	subs	r3, r0, #0
 80020fc:	d002      	beq.n	8002104 <HTS221_HUM_GetHumidity+0x60>
  {
    return HTS221_ERROR;
 80020fe:	2301      	movs	r3, #1
 8002100:	425b      	negs	r3, r3
 8002102:	e046      	b.n	8002192 <HTS221_HUM_GetHumidity+0xee>
  }

  if (hts221_hum_rh_point_1_get(&(pObj->Ctx), &lin_hum.y1) != HTS221_OK)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	331c      	adds	r3, #28
 8002108:	001a      	movs	r2, r3
 800210a:	230c      	movs	r3, #12
 800210c:	18fb      	adds	r3, r7, r3
 800210e:	330c      	adds	r3, #12
 8002110:	0019      	movs	r1, r3
 8002112:	0010      	movs	r0, r2
 8002114:	f000 fbf4 	bl	8002900 <hts221_hum_rh_point_1_get>
 8002118:	1e03      	subs	r3, r0, #0
 800211a:	d002      	beq.n	8002122 <HTS221_HUM_GetHumidity+0x7e>
  {
    return HTS221_ERROR;
 800211c:	2301      	movs	r3, #1
 800211e:	425b      	negs	r3, r3
 8002120:	e037      	b.n	8002192 <HTS221_HUM_GetHumidity+0xee>
 8002122:	211c      	movs	r1, #28
 8002124:	187b      	adds	r3, r7, r1
 8002126:	2200      	movs	r2, #0
 8002128:	801a      	strh	r2, [r3, #0]
  }

  (void)memset(&data_raw_humidity.i16bit, 0x00, sizeof(int16_t));
  if (hts221_humidity_raw_get(&(pObj->Ctx), &data_raw_humidity.i16bit) != HTS221_OK)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	331c      	adds	r3, #28
 800212e:	187a      	adds	r2, r7, r1
 8002130:	0011      	movs	r1, r2
 8002132:	0018      	movs	r0, r3
 8002134:	f000 fb34 	bl	80027a0 <hts221_humidity_raw_get>
 8002138:	1e03      	subs	r3, r0, #0
 800213a:	d002      	beq.n	8002142 <HTS221_HUM_GetHumidity+0x9e>
  {
    return HTS221_ERROR;
 800213c:	2301      	movs	r3, #1
 800213e:	425b      	negs	r3, r3
 8002140:	e027      	b.n	8002192 <HTS221_HUM_GetHumidity+0xee>
  }

  *Value = Linear_Interpolation(&lin_hum, (float)data_raw_humidity.i16bit);
 8002142:	231c      	movs	r3, #28
 8002144:	18fb      	adds	r3, r7, r3
 8002146:	2200      	movs	r2, #0
 8002148:	5e9b      	ldrsh	r3, [r3, r2]
 800214a:	0018      	movs	r0, r3
 800214c:	f7ff f938 	bl	80013c0 <__aeabi_i2f>
 8002150:	1c02      	adds	r2, r0, #0
 8002152:	230c      	movs	r3, #12
 8002154:	18fb      	adds	r3, r7, r3
 8002156:	1c11      	adds	r1, r2, #0
 8002158:	0018      	movs	r0, r3
 800215a:	f000 f98a 	bl	8002472 <Linear_Interpolation>
 800215e:	1c02      	adds	r2, r0, #0
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	601a      	str	r2, [r3, #0]

  if (*Value < 0.0f)
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	2100      	movs	r1, #0
 800216a:	1c18      	adds	r0, r3, #0
 800216c:	f7fe f95e 	bl	800042c <__aeabi_fcmplt>
 8002170:	1e03      	subs	r3, r0, #0
 8002172:	d002      	beq.n	800217a <HTS221_HUM_GetHumidity+0xd6>
  {
    *Value = 0.0f;
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	2200      	movs	r2, #0
 8002178:	601a      	str	r2, [r3, #0]
  }

  if (*Value > 100.0f)
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	4907      	ldr	r1, [pc, #28]	; (800219c <HTS221_HUM_GetHumidity+0xf8>)
 8002180:	1c18      	adds	r0, r3, #0
 8002182:	f7fe f967 	bl	8000454 <__aeabi_fcmpgt>
 8002186:	1e03      	subs	r3, r0, #0
 8002188:	d002      	beq.n	8002190 <HTS221_HUM_GetHumidity+0xec>
  {
    *Value = 100.0f;
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	4a03      	ldr	r2, [pc, #12]	; (800219c <HTS221_HUM_GetHumidity+0xf8>)
 800218e:	601a      	str	r2, [r3, #0]
  }

  return HTS221_OK;
 8002190:	2300      	movs	r3, #0
}
 8002192:	0018      	movs	r0, r3
 8002194:	46bd      	mov	sp, r7
 8002196:	b008      	add	sp, #32
 8002198:	bd80      	pop	{r7, pc}
 800219a:	46c0      	nop			; (mov r8, r8)
 800219c:	42c80000 	.word	0x42c80000

080021a0 <HTS221_TEMP_Enable>:
  * @brief  Enable the HTS221 temperature sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_TEMP_Enable(HTS221_Object_t *pObj)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b082      	sub	sp, #8
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->temp_is_enabled == 1U)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	222a      	movs	r2, #42	; 0x2a
 80021ac:	5c9b      	ldrb	r3, [r3, r2]
 80021ae:	2b01      	cmp	r3, #1
 80021b0:	d101      	bne.n	80021b6 <HTS221_TEMP_Enable+0x16>
  {
    return HTS221_OK;
 80021b2:	2300      	movs	r3, #0
 80021b4:	e014      	b.n	80021e0 <HTS221_TEMP_Enable+0x40>
  }

  /* Check if the HTS221 humidity sensor is already enabled. */
  /* If yes, skip the enable function, if not call enable function */
  if (pObj->hum_is_enabled == 0U)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	2229      	movs	r2, #41	; 0x29
 80021ba:	5c9b      	ldrb	r3, [r3, r2]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d10a      	bne.n	80021d6 <HTS221_TEMP_Enable+0x36>
  {
    /* Power on the component. */
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_ENABLE) != HTS221_OK)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	331c      	adds	r3, #28
 80021c4:	2101      	movs	r1, #1
 80021c6:	0018      	movs	r0, r3
 80021c8:	f000 fb4a 	bl	8002860 <hts221_power_on_set>
 80021cc:	1e03      	subs	r3, r0, #0
 80021ce:	d002      	beq.n	80021d6 <HTS221_TEMP_Enable+0x36>
    {
      return HTS221_ERROR;
 80021d0:	2301      	movs	r3, #1
 80021d2:	425b      	negs	r3, r3
 80021d4:	e004      	b.n	80021e0 <HTS221_TEMP_Enable+0x40>
    }
  }

  pObj->temp_is_enabled = 1;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	222a      	movs	r2, #42	; 0x2a
 80021da:	2101      	movs	r1, #1
 80021dc:	5499      	strb	r1, [r3, r2]

  return HTS221_OK;
 80021de:	2300      	movs	r3, #0
}
 80021e0:	0018      	movs	r0, r3
 80021e2:	46bd      	mov	sp, r7
 80021e4:	b002      	add	sp, #8
 80021e6:	bd80      	pop	{r7, pc}

080021e8 <HTS221_TEMP_Disable>:
  * @brief  Disable the HTS221 temperature sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_TEMP_Disable(HTS221_Object_t *pObj)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b082      	sub	sp, #8
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->temp_is_enabled == 0U)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	222a      	movs	r2, #42	; 0x2a
 80021f4:	5c9b      	ldrb	r3, [r3, r2]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d101      	bne.n	80021fe <HTS221_TEMP_Disable+0x16>
  {
    return HTS221_OK;
 80021fa:	2300      	movs	r3, #0
 80021fc:	e014      	b.n	8002228 <HTS221_TEMP_Disable+0x40>
  }

  /* Check if the HTS221 humidity sensor is still enable. */
  /* If yes, skip the disable function, if not call disable function */
  if (pObj->hum_is_enabled == 0U)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	2229      	movs	r2, #41	; 0x29
 8002202:	5c9b      	ldrb	r3, [r3, r2]
 8002204:	2b00      	cmp	r3, #0
 8002206:	d10a      	bne.n	800221e <HTS221_TEMP_Disable+0x36>
  {
    /* Power off the component. */
    if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_DISABLE) != HTS221_OK)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	331c      	adds	r3, #28
 800220c:	2100      	movs	r1, #0
 800220e:	0018      	movs	r0, r3
 8002210:	f000 fb26 	bl	8002860 <hts221_power_on_set>
 8002214:	1e03      	subs	r3, r0, #0
 8002216:	d002      	beq.n	800221e <HTS221_TEMP_Disable+0x36>
    {
      return HTS221_ERROR;
 8002218:	2301      	movs	r3, #1
 800221a:	425b      	negs	r3, r3
 800221c:	e004      	b.n	8002228 <HTS221_TEMP_Disable+0x40>
    }
  }

  pObj->temp_is_enabled = 0;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	222a      	movs	r2, #42	; 0x2a
 8002222:	2100      	movs	r1, #0
 8002224:	5499      	strb	r1, [r3, r2]

  return HTS221_OK;
 8002226:	2300      	movs	r3, #0
}
 8002228:	0018      	movs	r0, r3
 800222a:	46bd      	mov	sp, r7
 800222c:	b002      	add	sp, #8
 800222e:	bd80      	pop	{r7, pc}

08002230 <HTS221_TEMP_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_TEMP_GetOutputDataRate(HTS221_Object_t *pObj, float *Odr)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b082      	sub	sp, #8
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
 8002238:	6039      	str	r1, [r7, #0]
  return HTS221_GetOutputDataRate(pObj, Odr);
 800223a:	683a      	ldr	r2, [r7, #0]
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	0011      	movs	r1, r2
 8002240:	0018      	movs	r0, r3
 8002242:	f000 f87b 	bl	800233c <HTS221_GetOutputDataRate>
 8002246:	0003      	movs	r3, r0
}
 8002248:	0018      	movs	r0, r3
 800224a:	46bd      	mov	sp, r7
 800224c:	b002      	add	sp, #8
 800224e:	bd80      	pop	{r7, pc}

08002250 <HTS221_TEMP_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_TEMP_SetOutputDataRate(HTS221_Object_t *pObj, float Odr)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b082      	sub	sp, #8
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
 8002258:	6039      	str	r1, [r7, #0]
  return HTS221_SetOutputDataRate(pObj, Odr);
 800225a:	683a      	ldr	r2, [r7, #0]
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	1c11      	adds	r1, r2, #0
 8002260:	0018      	movs	r0, r3
 8002262:	f000 f8ab 	bl	80023bc <HTS221_SetOutputDataRate>
 8002266:	0003      	movs	r3, r0
}
 8002268:	0018      	movs	r0, r3
 800226a:	46bd      	mov	sp, r7
 800226c:	b002      	add	sp, #8
 800226e:	bd80      	pop	{r7, pc}

08002270 <HTS221_TEMP_GetTemperature>:
  * @param  pObj the device pObj
  * @param  Value pointer where the temperature value is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t HTS221_TEMP_GetTemperature(HTS221_Object_t *pObj, float *Value)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b088      	sub	sp, #32
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
 8002278:	6039      	str	r1, [r7, #0]
  hts221_axis1bit16_t data_raw_temperature;
  lin_t lin_temp;

  if (hts221_temp_adc_point_0_get(&(pObj->Ctx), &lin_temp.x0) != HTS221_OK)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	331c      	adds	r3, #28
 800227e:	220c      	movs	r2, #12
 8002280:	18ba      	adds	r2, r7, r2
 8002282:	0011      	movs	r1, r2
 8002284:	0018      	movs	r0, r3
 8002286:	f000 fc25 	bl	8002ad4 <hts221_temp_adc_point_0_get>
 800228a:	1e03      	subs	r3, r0, #0
 800228c:	d002      	beq.n	8002294 <HTS221_TEMP_GetTemperature+0x24>
  {
    return HTS221_ERROR;
 800228e:	2301      	movs	r3, #1
 8002290:	425b      	negs	r3, r3
 8002292:	e04e      	b.n	8002332 <HTS221_TEMP_GetTemperature+0xc2>
  }

  if (hts221_temp_deg_point_0_get(&(pObj->Ctx), &lin_temp.y0) != HTS221_OK)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	331c      	adds	r3, #28
 8002298:	001a      	movs	r2, r3
 800229a:	230c      	movs	r3, #12
 800229c:	18fb      	adds	r3, r7, r3
 800229e:	3304      	adds	r3, #4
 80022a0:	0019      	movs	r1, r3
 80022a2:	0010      	movs	r0, r2
 80022a4:	f000 fb4e 	bl	8002944 <hts221_temp_deg_point_0_get>
 80022a8:	1e03      	subs	r3, r0, #0
 80022aa:	d002      	beq.n	80022b2 <HTS221_TEMP_GetTemperature+0x42>
  {
    return HTS221_ERROR;
 80022ac:	2301      	movs	r3, #1
 80022ae:	425b      	negs	r3, r3
 80022b0:	e03f      	b.n	8002332 <HTS221_TEMP_GetTemperature+0xc2>
  }

  if (hts221_temp_adc_point_1_get(&(pObj->Ctx), &lin_temp.x1) != HTS221_OK)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	331c      	adds	r3, #28
 80022b6:	001a      	movs	r2, r3
 80022b8:	230c      	movs	r3, #12
 80022ba:	18fb      	adds	r3, r7, r3
 80022bc:	3308      	adds	r3, #8
 80022be:	0019      	movs	r1, r3
 80022c0:	0010      	movs	r0, r2
 80022c2:	f000 fc31 	bl	8002b28 <hts221_temp_adc_point_1_get>
 80022c6:	1e03      	subs	r3, r0, #0
 80022c8:	d002      	beq.n	80022d0 <HTS221_TEMP_GetTemperature+0x60>
  {
    return HTS221_ERROR;
 80022ca:	2301      	movs	r3, #1
 80022cc:	425b      	negs	r3, r3
 80022ce:	e030      	b.n	8002332 <HTS221_TEMP_GetTemperature+0xc2>
  }

  if (hts221_temp_deg_point_1_get(&(pObj->Ctx), &lin_temp.y1) != HTS221_OK)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	331c      	adds	r3, #28
 80022d4:	001a      	movs	r2, r3
 80022d6:	230c      	movs	r3, #12
 80022d8:	18fb      	adds	r3, r7, r3
 80022da:	330c      	adds	r3, #12
 80022dc:	0019      	movs	r1, r3
 80022de:	0010      	movs	r0, r2
 80022e0:	f000 fb6a 	bl	80029b8 <hts221_temp_deg_point_1_get>
 80022e4:	1e03      	subs	r3, r0, #0
 80022e6:	d002      	beq.n	80022ee <HTS221_TEMP_GetTemperature+0x7e>
  {
    return HTS221_ERROR;
 80022e8:	2301      	movs	r3, #1
 80022ea:	425b      	negs	r3, r3
 80022ec:	e021      	b.n	8002332 <HTS221_TEMP_GetTemperature+0xc2>
 80022ee:	211c      	movs	r1, #28
 80022f0:	187b      	adds	r3, r7, r1
 80022f2:	2200      	movs	r2, #0
 80022f4:	801a      	strh	r2, [r3, #0]
  }

  (void)memset(&data_raw_temperature.i16bit, 0x00, sizeof(int16_t));
  if (hts221_temperature_raw_get(&(pObj->Ctx), &data_raw_temperature.i16bit) != HTS221_OK)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	331c      	adds	r3, #28
 80022fa:	187a      	adds	r2, r7, r1
 80022fc:	0011      	movs	r1, r2
 80022fe:	0018      	movs	r0, r3
 8002300:	f000 fa75 	bl	80027ee <hts221_temperature_raw_get>
 8002304:	1e03      	subs	r3, r0, #0
 8002306:	d002      	beq.n	800230e <HTS221_TEMP_GetTemperature+0x9e>
  {
    return HTS221_ERROR;
 8002308:	2301      	movs	r3, #1
 800230a:	425b      	negs	r3, r3
 800230c:	e011      	b.n	8002332 <HTS221_TEMP_GetTemperature+0xc2>
  }

  *Value = Linear_Interpolation(&lin_temp, (float)data_raw_temperature.i16bit);
 800230e:	231c      	movs	r3, #28
 8002310:	18fb      	adds	r3, r7, r3
 8002312:	2200      	movs	r2, #0
 8002314:	5e9b      	ldrsh	r3, [r3, r2]
 8002316:	0018      	movs	r0, r3
 8002318:	f7ff f852 	bl	80013c0 <__aeabi_i2f>
 800231c:	1c02      	adds	r2, r0, #0
 800231e:	230c      	movs	r3, #12
 8002320:	18fb      	adds	r3, r7, r3
 8002322:	1c11      	adds	r1, r2, #0
 8002324:	0018      	movs	r0, r3
 8002326:	f000 f8a4 	bl	8002472 <Linear_Interpolation>
 800232a:	1c02      	adds	r2, r0, #0
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	601a      	str	r2, [r3, #0]

  return HTS221_OK;
 8002330:	2300      	movs	r3, #0
}
 8002332:	0018      	movs	r0, r3
 8002334:	46bd      	mov	sp, r7
 8002336:	b008      	add	sp, #32
 8002338:	bd80      	pop	{r7, pc}
	...

0800233c <HTS221_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t HTS221_GetOutputDataRate(HTS221_Object_t *pObj, float *Odr)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b084      	sub	sp, #16
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
 8002344:	6039      	str	r1, [r7, #0]
  int32_t ret = HTS221_OK;
 8002346:	2300      	movs	r3, #0
 8002348:	60fb      	str	r3, [r7, #12]
  hts221_odr_t odr_low_level;

  if (hts221_data_rate_get(&(pObj->Ctx), &odr_low_level) != HTS221_OK)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	331c      	adds	r3, #28
 800234e:	220b      	movs	r2, #11
 8002350:	18ba      	adds	r2, r7, r2
 8002352:	0011      	movs	r1, r2
 8002354:	0018      	movs	r0, r3
 8002356:	f000 f9bc 	bl	80026d2 <hts221_data_rate_get>
 800235a:	1e03      	subs	r3, r0, #0
 800235c:	d002      	beq.n	8002364 <HTS221_GetOutputDataRate+0x28>
  {
    return HTS221_ERROR;
 800235e:	2301      	movs	r3, #1
 8002360:	425b      	negs	r3, r3
 8002362:	e023      	b.n	80023ac <HTS221_GetOutputDataRate+0x70>
  }

  switch (odr_low_level)
 8002364:	230b      	movs	r3, #11
 8002366:	18fb      	adds	r3, r7, r3
 8002368:	781b      	ldrb	r3, [r3, #0]
 800236a:	2b03      	cmp	r3, #3
 800236c:	d015      	beq.n	800239a <HTS221_GetOutputDataRate+0x5e>
 800236e:	dc18      	bgt.n	80023a2 <HTS221_GetOutputDataRate+0x66>
 8002370:	2b02      	cmp	r3, #2
 8002372:	d00e      	beq.n	8002392 <HTS221_GetOutputDataRate+0x56>
 8002374:	dc15      	bgt.n	80023a2 <HTS221_GetOutputDataRate+0x66>
 8002376:	2b00      	cmp	r3, #0
 8002378:	d002      	beq.n	8002380 <HTS221_GetOutputDataRate+0x44>
 800237a:	2b01      	cmp	r3, #1
 800237c:	d004      	beq.n	8002388 <HTS221_GetOutputDataRate+0x4c>
 800237e:	e010      	b.n	80023a2 <HTS221_GetOutputDataRate+0x66>
  {
    case HTS221_ONE_SHOT:
      *Odr = 0.0f;
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	2200      	movs	r2, #0
 8002384:	601a      	str	r2, [r3, #0]
      break;
 8002386:	e010      	b.n	80023aa <HTS221_GetOutputDataRate+0x6e>

    case HTS221_ODR_1Hz:
      *Odr = 1.0f;
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	22fe      	movs	r2, #254	; 0xfe
 800238c:	0592      	lsls	r2, r2, #22
 800238e:	601a      	str	r2, [r3, #0]
      break;
 8002390:	e00b      	b.n	80023aa <HTS221_GetOutputDataRate+0x6e>

    case HTS221_ODR_7Hz:
      *Odr = 7.0f;
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	4a07      	ldr	r2, [pc, #28]	; (80023b4 <HTS221_GetOutputDataRate+0x78>)
 8002396:	601a      	str	r2, [r3, #0]
      break;
 8002398:	e007      	b.n	80023aa <HTS221_GetOutputDataRate+0x6e>

    case HTS221_ODR_12Hz5:
      *Odr = 12.5f;
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	4a06      	ldr	r2, [pc, #24]	; (80023b8 <HTS221_GetOutputDataRate+0x7c>)
 800239e:	601a      	str	r2, [r3, #0]
      break;
 80023a0:	e003      	b.n	80023aa <HTS221_GetOutputDataRate+0x6e>

    default:
      ret = HTS221_ERROR;
 80023a2:	2301      	movs	r3, #1
 80023a4:	425b      	negs	r3, r3
 80023a6:	60fb      	str	r3, [r7, #12]
      break;
 80023a8:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 80023aa:	68fb      	ldr	r3, [r7, #12]
}
 80023ac:	0018      	movs	r0, r3
 80023ae:	46bd      	mov	sp, r7
 80023b0:	b004      	add	sp, #16
 80023b2:	bd80      	pop	{r7, pc}
 80023b4:	40e00000 	.word	0x40e00000
 80023b8:	41480000 	.word	0x41480000

080023bc <HTS221_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t HTS221_SetOutputDataRate(HTS221_Object_t *pObj, float Odr)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b084      	sub	sp, #16
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
 80023c4:	6039      	str	r1, [r7, #0]
  hts221_odr_t new_odr;

  new_odr = (Odr <= 1.0f) ? HTS221_ODR_1Hz
            : (Odr <= 7.0f) ? HTS221_ODR_7Hz
 80023c6:	21fe      	movs	r1, #254	; 0xfe
 80023c8:	0589      	lsls	r1, r1, #22
 80023ca:	6838      	ldr	r0, [r7, #0]
 80023cc:	f7fe f838 	bl	8000440 <__aeabi_fcmple>
 80023d0:	1e03      	subs	r3, r0, #0
 80023d2:	d001      	beq.n	80023d8 <HTS221_SetOutputDataRate+0x1c>
 80023d4:	2301      	movs	r3, #1
 80023d6:	e008      	b.n	80023ea <HTS221_SetOutputDataRate+0x2e>
 80023d8:	490f      	ldr	r1, [pc, #60]	; (8002418 <HTS221_SetOutputDataRate+0x5c>)
 80023da:	6838      	ldr	r0, [r7, #0]
 80023dc:	f7fe f830 	bl	8000440 <__aeabi_fcmple>
 80023e0:	1e03      	subs	r3, r0, #0
 80023e2:	d001      	beq.n	80023e8 <HTS221_SetOutputDataRate+0x2c>
 80023e4:	2302      	movs	r3, #2
 80023e6:	e000      	b.n	80023ea <HTS221_SetOutputDataRate+0x2e>
 80023e8:	2303      	movs	r3, #3
  new_odr = (Odr <= 1.0f) ? HTS221_ODR_1Hz
 80023ea:	210f      	movs	r1, #15
 80023ec:	187a      	adds	r2, r7, r1
 80023ee:	7013      	strb	r3, [r2, #0]
            :                 HTS221_ODR_12Hz5;

  if (hts221_data_rate_set(&(pObj->Ctx), new_odr) != HTS221_OK)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	331c      	adds	r3, #28
 80023f4:	001a      	movs	r2, r3
 80023f6:	187b      	adds	r3, r7, r1
 80023f8:	781b      	ldrb	r3, [r3, #0]
 80023fa:	0019      	movs	r1, r3
 80023fc:	0010      	movs	r0, r2
 80023fe:	f000 f938 	bl	8002672 <hts221_data_rate_set>
 8002402:	1e03      	subs	r3, r0, #0
 8002404:	d002      	beq.n	800240c <HTS221_SetOutputDataRate+0x50>
  {
    return HTS221_ERROR;
 8002406:	2301      	movs	r3, #1
 8002408:	425b      	negs	r3, r3
 800240a:	e000      	b.n	800240e <HTS221_SetOutputDataRate+0x52>
  }

  return HTS221_OK;
 800240c:	2300      	movs	r3, #0
}
 800240e:	0018      	movs	r0, r3
 8002410:	46bd      	mov	sp, r7
 8002412:	b004      	add	sp, #16
 8002414:	bd80      	pop	{r7, pc}
 8002416:	46c0      	nop			; (mov r8, r8)
 8002418:	40e00000 	.word	0x40e00000

0800241c <HTS221_Initialize>:
  * @brief  Initialize the HTS221 sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t HTS221_Initialize(HTS221_Object_t *pObj)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b082      	sub	sp, #8
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
  /* Power off the component. */
  if (hts221_power_on_set(&(pObj->Ctx), PROPERTY_DISABLE) != HTS221_OK)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	331c      	adds	r3, #28
 8002428:	2100      	movs	r1, #0
 800242a:	0018      	movs	r0, r3
 800242c:	f000 fa18 	bl	8002860 <hts221_power_on_set>
 8002430:	1e03      	subs	r3, r0, #0
 8002432:	d002      	beq.n	800243a <HTS221_Initialize+0x1e>
  {
    return HTS221_ERROR;
 8002434:	2301      	movs	r3, #1
 8002436:	425b      	negs	r3, r3
 8002438:	e017      	b.n	800246a <HTS221_Initialize+0x4e>
  }

  /* Enable BDU */
  if (hts221_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != HTS221_OK)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	331c      	adds	r3, #28
 800243e:	2101      	movs	r1, #1
 8002440:	0018      	movs	r0, r3
 8002442:	f000 f97d 	bl	8002740 <hts221_block_data_update_set>
 8002446:	1e03      	subs	r3, r0, #0
 8002448:	d002      	beq.n	8002450 <HTS221_Initialize+0x34>
  {
    return HTS221_ERROR;
 800244a:	2301      	movs	r3, #1
 800244c:	425b      	negs	r3, r3
 800244e:	e00c      	b.n	800246a <HTS221_Initialize+0x4e>
  }

  /* Set default ODR */
  if (HTS221_SetOutputDataRate(pObj, 1.0f) != HTS221_OK)
 8002450:	22fe      	movs	r2, #254	; 0xfe
 8002452:	0592      	lsls	r2, r2, #22
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	1c11      	adds	r1, r2, #0
 8002458:	0018      	movs	r0, r3
 800245a:	f7ff ffaf 	bl	80023bc <HTS221_SetOutputDataRate>
 800245e:	1e03      	subs	r3, r0, #0
 8002460:	d002      	beq.n	8002468 <HTS221_Initialize+0x4c>
  {
    return HTS221_ERROR;
 8002462:	2301      	movs	r3, #1
 8002464:	425b      	negs	r3, r3
 8002466:	e000      	b.n	800246a <HTS221_Initialize+0x4e>
  }

  return HTS221_OK;
 8002468:	2300      	movs	r3, #0
}
 800246a:	0018      	movs	r0, r3
 800246c:	46bd      	mov	sp, r7
 800246e:	b002      	add	sp, #8
 8002470:	bd80      	pop	{r7, pc}

08002472 <Linear_Interpolation>:
  * @param  Lin the line
  * @param  Coeff the coefficient
  * @retval Calculation result
  */
static float Linear_Interpolation(lin_t *Lin, float Coeff)
{
 8002472:	b5b0      	push	{r4, r5, r7, lr}
 8002474:	b082      	sub	sp, #8
 8002476:	af00      	add	r7, sp, #0
 8002478:	6078      	str	r0, [r7, #4]
 800247a:	6039      	str	r1, [r7, #0]
  return (((Lin->y1 - Lin->y0) * Coeff) + ((Lin->x1 * Lin->y0) - (Lin->x0 * Lin->y1))) / (Lin->x1 - Lin->x0);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	68da      	ldr	r2, [r3, #12]
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	1c19      	adds	r1, r3, #0
 8002486:	1c10      	adds	r0, r2, #0
 8002488:	f7fe fdb6 	bl	8000ff8 <__aeabi_fsub>
 800248c:	1c03      	adds	r3, r0, #0
 800248e:	6839      	ldr	r1, [r7, #0]
 8002490:	1c18      	adds	r0, r3, #0
 8002492:	f7fe fc8b 	bl	8000dac <__aeabi_fmul>
 8002496:	1c03      	adds	r3, r0, #0
 8002498:	1c1c      	adds	r4, r3, #0
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	689a      	ldr	r2, [r3, #8]
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	685b      	ldr	r3, [r3, #4]
 80024a2:	1c19      	adds	r1, r3, #0
 80024a4:	1c10      	adds	r0, r2, #0
 80024a6:	f7fe fc81 	bl	8000dac <__aeabi_fmul>
 80024aa:	1c03      	adds	r3, r0, #0
 80024ac:	1c1d      	adds	r5, r3, #0
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681a      	ldr	r2, [r3, #0]
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	68db      	ldr	r3, [r3, #12]
 80024b6:	1c19      	adds	r1, r3, #0
 80024b8:	1c10      	adds	r0, r2, #0
 80024ba:	f7fe fc77 	bl	8000dac <__aeabi_fmul>
 80024be:	1c03      	adds	r3, r0, #0
 80024c0:	1c19      	adds	r1, r3, #0
 80024c2:	1c28      	adds	r0, r5, #0
 80024c4:	f7fe fd98 	bl	8000ff8 <__aeabi_fsub>
 80024c8:	1c03      	adds	r3, r0, #0
 80024ca:	1c19      	adds	r1, r3, #0
 80024cc:	1c20      	adds	r0, r4, #0
 80024ce:	f7fe f907 	bl	80006e0 <__aeabi_fadd>
 80024d2:	1c03      	adds	r3, r0, #0
 80024d4:	1c1c      	adds	r4, r3, #0
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	689a      	ldr	r2, [r3, #8]
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	1c19      	adds	r1, r3, #0
 80024e0:	1c10      	adds	r0, r2, #0
 80024e2:	f7fe fd89 	bl	8000ff8 <__aeabi_fsub>
 80024e6:	1c03      	adds	r3, r0, #0
 80024e8:	1c19      	adds	r1, r3, #0
 80024ea:	1c20      	adds	r0, r4, #0
 80024ec:	f7fe fa96 	bl	8000a1c <__aeabi_fdiv>
 80024f0:	1c03      	adds	r3, r0, #0
}
 80024f2:	1c18      	adds	r0, r3, #0
 80024f4:	46bd      	mov	sp, r7
 80024f6:	b002      	add	sp, #8
 80024f8:	bdb0      	pop	{r4, r5, r7, pc}

080024fa <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80024fa:	b5f0      	push	{r4, r5, r6, r7, lr}
 80024fc:	b087      	sub	sp, #28
 80024fe:	af00      	add	r7, sp, #0
 8002500:	60f8      	str	r0, [r7, #12]
 8002502:	0008      	movs	r0, r1
 8002504:	607a      	str	r2, [r7, #4]
 8002506:	0019      	movs	r1, r3
 8002508:	250b      	movs	r5, #11
 800250a:	197b      	adds	r3, r7, r5
 800250c:	1c02      	adds	r2, r0, #0
 800250e:	701a      	strb	r2, [r3, #0]
 8002510:	2608      	movs	r6, #8
 8002512:	19bb      	adds	r3, r7, r6
 8002514:	1c0a      	adds	r2, r1, #0
 8002516:	801a      	strh	r2, [r3, #0]
  HTS221_Object_t *pObj = (HTS221_Object_t *)Handle;
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == (uint32_t)HTS221_I2C_BUS) /* I2C */
 800251c:	697b      	ldr	r3, [r7, #20]
 800251e:	689b      	ldr	r3, [r3, #8]
 8002520:	2b00      	cmp	r3, #0
 8002522:	d111      	bne.n	8002548 <ReadRegWrap+0x4e>
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8002524:	697b      	ldr	r3, [r7, #20]
 8002526:	695c      	ldr	r4, [r3, #20]
 8002528:	697b      	ldr	r3, [r7, #20]
 800252a:	7b1b      	ldrb	r3, [r3, #12]
 800252c:	b298      	uxth	r0, r3
 800252e:	197b      	adds	r3, r7, r5
 8002530:	781b      	ldrb	r3, [r3, #0]
 8002532:	2280      	movs	r2, #128	; 0x80
 8002534:	4252      	negs	r2, r2
 8002536:	4313      	orrs	r3, r2
 8002538:	b2db      	uxtb	r3, r3
 800253a:	b299      	uxth	r1, r3
 800253c:	19bb      	adds	r3, r7, r6
 800253e:	881b      	ldrh	r3, [r3, #0]
 8002540:	687a      	ldr	r2, [r7, #4]
 8002542:	47a0      	blx	r4
 8002544:	0003      	movs	r3, r0
 8002546:	e011      	b.n	800256c <ReadRegWrap+0x72>
  }
  else /* SPI 3-Wires */
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8002548:	697b      	ldr	r3, [r7, #20]
 800254a:	695c      	ldr	r4, [r3, #20]
 800254c:	697b      	ldr	r3, [r7, #20]
 800254e:	7b1b      	ldrb	r3, [r3, #12]
 8002550:	b298      	uxth	r0, r3
 8002552:	230b      	movs	r3, #11
 8002554:	18fb      	adds	r3, r7, r3
 8002556:	781b      	ldrb	r3, [r3, #0]
 8002558:	2240      	movs	r2, #64	; 0x40
 800255a:	4313      	orrs	r3, r2
 800255c:	b2db      	uxtb	r3, r3
 800255e:	b299      	uxth	r1, r3
 8002560:	2308      	movs	r3, #8
 8002562:	18fb      	adds	r3, r7, r3
 8002564:	881b      	ldrh	r3, [r3, #0]
 8002566:	687a      	ldr	r2, [r7, #4]
 8002568:	47a0      	blx	r4
 800256a:	0003      	movs	r3, r0
  }
}
 800256c:	0018      	movs	r0, r3
 800256e:	46bd      	mov	sp, r7
 8002570:	b007      	add	sp, #28
 8002572:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002574 <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8002574:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002576:	b087      	sub	sp, #28
 8002578:	af00      	add	r7, sp, #0
 800257a:	60f8      	str	r0, [r7, #12]
 800257c:	0008      	movs	r0, r1
 800257e:	607a      	str	r2, [r7, #4]
 8002580:	0019      	movs	r1, r3
 8002582:	250b      	movs	r5, #11
 8002584:	197b      	adds	r3, r7, r5
 8002586:	1c02      	adds	r2, r0, #0
 8002588:	701a      	strb	r2, [r3, #0]
 800258a:	2608      	movs	r6, #8
 800258c:	19bb      	adds	r3, r7, r6
 800258e:	1c0a      	adds	r2, r1, #0
 8002590:	801a      	strh	r2, [r3, #0]
  HTS221_Object_t *pObj = (HTS221_Object_t *)Handle;
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == (uint32_t)HTS221_I2C_BUS) /* I2C */
 8002596:	697b      	ldr	r3, [r7, #20]
 8002598:	689b      	ldr	r3, [r3, #8]
 800259a:	2b00      	cmp	r3, #0
 800259c:	d111      	bne.n	80025c2 <WriteRegWrap+0x4e>
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 800259e:	697b      	ldr	r3, [r7, #20]
 80025a0:	691c      	ldr	r4, [r3, #16]
 80025a2:	697b      	ldr	r3, [r7, #20]
 80025a4:	7b1b      	ldrb	r3, [r3, #12]
 80025a6:	b298      	uxth	r0, r3
 80025a8:	197b      	adds	r3, r7, r5
 80025aa:	781b      	ldrb	r3, [r3, #0]
 80025ac:	2280      	movs	r2, #128	; 0x80
 80025ae:	4252      	negs	r2, r2
 80025b0:	4313      	orrs	r3, r2
 80025b2:	b2db      	uxtb	r3, r3
 80025b4:	b299      	uxth	r1, r3
 80025b6:	19bb      	adds	r3, r7, r6
 80025b8:	881b      	ldrh	r3, [r3, #0]
 80025ba:	687a      	ldr	r2, [r7, #4]
 80025bc:	47a0      	blx	r4
 80025be:	0003      	movs	r3, r0
 80025c0:	e011      	b.n	80025e6 <WriteRegWrap+0x72>
  }
  else /* SPI 3-Wires */
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 80025c2:	697b      	ldr	r3, [r7, #20]
 80025c4:	691c      	ldr	r4, [r3, #16]
 80025c6:	697b      	ldr	r3, [r7, #20]
 80025c8:	7b1b      	ldrb	r3, [r3, #12]
 80025ca:	b298      	uxth	r0, r3
 80025cc:	230b      	movs	r3, #11
 80025ce:	18fb      	adds	r3, r7, r3
 80025d0:	781b      	ldrb	r3, [r3, #0]
 80025d2:	2240      	movs	r2, #64	; 0x40
 80025d4:	4313      	orrs	r3, r2
 80025d6:	b2db      	uxtb	r3, r3
 80025d8:	b299      	uxth	r1, r3
 80025da:	2308      	movs	r3, #8
 80025dc:	18fb      	adds	r3, r7, r3
 80025de:	881b      	ldrh	r3, [r3, #0]
 80025e0:	687a      	ldr	r2, [r7, #4]
 80025e2:	47a0      	blx	r4
 80025e4:	0003      	movs	r3, r0
  }
}
 80025e6:	0018      	movs	r0, r3
 80025e8:	46bd      	mov	sp, r7
 80025ea:	b007      	add	sp, #28
 80025ec:	bdf0      	pop	{r4, r5, r6, r7, pc}

080025ee <hts221_read_reg>:
  * @retval       interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_read_reg(stmdev_ctx_t *ctx, uint8_t reg, uint8_t *data,
                        uint16_t len)
{
 80025ee:	b5f0      	push	{r4, r5, r6, r7, lr}
 80025f0:	b087      	sub	sp, #28
 80025f2:	af00      	add	r7, sp, #0
 80025f4:	60f8      	str	r0, [r7, #12]
 80025f6:	0008      	movs	r0, r1
 80025f8:	607a      	str	r2, [r7, #4]
 80025fa:	0019      	movs	r1, r3
 80025fc:	260b      	movs	r6, #11
 80025fe:	19bb      	adds	r3, r7, r6
 8002600:	1c02      	adds	r2, r0, #0
 8002602:	701a      	strb	r2, [r3, #0]
 8002604:	2508      	movs	r5, #8
 8002606:	197b      	adds	r3, r7, r5
 8002608:	1c0a      	adds	r2, r1, #0
 800260a:	801a      	strh	r2, [r3, #0]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	685c      	ldr	r4, [r3, #4]
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	6898      	ldr	r0, [r3, #8]
 8002614:	197b      	adds	r3, r7, r5
 8002616:	881d      	ldrh	r5, [r3, #0]
 8002618:	687a      	ldr	r2, [r7, #4]
 800261a:	19bb      	adds	r3, r7, r6
 800261c:	7819      	ldrb	r1, [r3, #0]
 800261e:	002b      	movs	r3, r5
 8002620:	47a0      	blx	r4
 8002622:	0003      	movs	r3, r0
 8002624:	617b      	str	r3, [r7, #20]

  return ret;
 8002626:	697b      	ldr	r3, [r7, #20]
}
 8002628:	0018      	movs	r0, r3
 800262a:	46bd      	mov	sp, r7
 800262c:	b007      	add	sp, #28
 800262e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002630 <hts221_write_reg>:
  *
  */
int32_t hts221_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 8002630:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002632:	b087      	sub	sp, #28
 8002634:	af00      	add	r7, sp, #0
 8002636:	60f8      	str	r0, [r7, #12]
 8002638:	0008      	movs	r0, r1
 800263a:	607a      	str	r2, [r7, #4]
 800263c:	0019      	movs	r1, r3
 800263e:	260b      	movs	r6, #11
 8002640:	19bb      	adds	r3, r7, r6
 8002642:	1c02      	adds	r2, r0, #0
 8002644:	701a      	strb	r2, [r3, #0]
 8002646:	2508      	movs	r5, #8
 8002648:	197b      	adds	r3, r7, r5
 800264a:	1c0a      	adds	r2, r1, #0
 800264c:	801a      	strh	r2, [r3, #0]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	681c      	ldr	r4, [r3, #0]
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	6898      	ldr	r0, [r3, #8]
 8002656:	197b      	adds	r3, r7, r5
 8002658:	881d      	ldrh	r5, [r3, #0]
 800265a:	687a      	ldr	r2, [r7, #4]
 800265c:	19bb      	adds	r3, r7, r6
 800265e:	7819      	ldrb	r1, [r3, #0]
 8002660:	002b      	movs	r3, r5
 8002662:	47a0      	blx	r4
 8002664:	0003      	movs	r3, r0
 8002666:	617b      	str	r3, [r7, #20]

  return ret;
 8002668:	697b      	ldr	r3, [r7, #20]
}
 800266a:	0018      	movs	r0, r3
 800266c:	46bd      	mov	sp, r7
 800266e:	b007      	add	sp, #28
 8002670:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002672 <hts221_data_rate_set>:
  * @param  val     change the values of odr in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_data_rate_set(stmdev_ctx_t *ctx, hts221_odr_t val)
{
 8002672:	b590      	push	{r4, r7, lr}
 8002674:	b085      	sub	sp, #20
 8002676:	af00      	add	r7, sp, #0
 8002678:	6078      	str	r0, [r7, #4]
 800267a:	000a      	movs	r2, r1
 800267c:	1cfb      	adds	r3, r7, #3
 800267e:	701a      	strb	r2, [r3, #0]
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 8002680:	2408      	movs	r4, #8
 8002682:	193a      	adds	r2, r7, r4
 8002684:	6878      	ldr	r0, [r7, #4]
 8002686:	2301      	movs	r3, #1
 8002688:	2120      	movs	r1, #32
 800268a:	f7ff ffb0 	bl	80025ee <hts221_read_reg>
 800268e:	0003      	movs	r3, r0
 8002690:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	2b00      	cmp	r3, #0
 8002696:	d117      	bne.n	80026c8 <hts221_data_rate_set+0x56>
  {
    reg.odr = (uint8_t)val;
 8002698:	1cfb      	adds	r3, r7, #3
 800269a:	781b      	ldrb	r3, [r3, #0]
 800269c:	2203      	movs	r2, #3
 800269e:	4013      	ands	r3, r2
 80026a0:	b2da      	uxtb	r2, r3
 80026a2:	193b      	adds	r3, r7, r4
 80026a4:	2103      	movs	r1, #3
 80026a6:	400a      	ands	r2, r1
 80026a8:	0010      	movs	r0, r2
 80026aa:	781a      	ldrb	r2, [r3, #0]
 80026ac:	2103      	movs	r1, #3
 80026ae:	438a      	bics	r2, r1
 80026b0:	1c11      	adds	r1, r2, #0
 80026b2:	1c02      	adds	r2, r0, #0
 80026b4:	430a      	orrs	r2, r1
 80026b6:	701a      	strb	r2, [r3, #0]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 80026b8:	193a      	adds	r2, r7, r4
 80026ba:	6878      	ldr	r0, [r7, #4]
 80026bc:	2301      	movs	r3, #1
 80026be:	2120      	movs	r1, #32
 80026c0:	f7ff ffb6 	bl	8002630 <hts221_write_reg>
 80026c4:	0003      	movs	r3, r0
 80026c6:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80026c8:	68fb      	ldr	r3, [r7, #12]
}
 80026ca:	0018      	movs	r0, r3
 80026cc:	46bd      	mov	sp, r7
 80026ce:	b005      	add	sp, #20
 80026d0:	bd90      	pop	{r4, r7, pc}

080026d2 <hts221_data_rate_get>:
  * @param  val     Get the values of odr in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_data_rate_get(stmdev_ctx_t *ctx, hts221_odr_t *val)
{
 80026d2:	b590      	push	{r4, r7, lr}
 80026d4:	b085      	sub	sp, #20
 80026d6:	af00      	add	r7, sp, #0
 80026d8:	6078      	str	r0, [r7, #4]
 80026da:	6039      	str	r1, [r7, #0]
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 80026dc:	2408      	movs	r4, #8
 80026de:	193a      	adds	r2, r7, r4
 80026e0:	6878      	ldr	r0, [r7, #4]
 80026e2:	2301      	movs	r3, #1
 80026e4:	2120      	movs	r1, #32
 80026e6:	f7ff ff82 	bl	80025ee <hts221_read_reg>
 80026ea:	0003      	movs	r3, r0
 80026ec:	60fb      	str	r3, [r7, #12]

  switch (reg.odr)
 80026ee:	193b      	adds	r3, r7, r4
 80026f0:	781b      	ldrb	r3, [r3, #0]
 80026f2:	079b      	lsls	r3, r3, #30
 80026f4:	0f9b      	lsrs	r3, r3, #30
 80026f6:	b2db      	uxtb	r3, r3
 80026f8:	2b03      	cmp	r3, #3
 80026fa:	d014      	beq.n	8002726 <hts221_data_rate_get+0x54>
 80026fc:	dc17      	bgt.n	800272e <hts221_data_rate_get+0x5c>
 80026fe:	2b02      	cmp	r3, #2
 8002700:	d00d      	beq.n	800271e <hts221_data_rate_get+0x4c>
 8002702:	dc14      	bgt.n	800272e <hts221_data_rate_get+0x5c>
 8002704:	2b00      	cmp	r3, #0
 8002706:	d002      	beq.n	800270e <hts221_data_rate_get+0x3c>
 8002708:	2b01      	cmp	r3, #1
 800270a:	d004      	beq.n	8002716 <hts221_data_rate_get+0x44>
 800270c:	e00f      	b.n	800272e <hts221_data_rate_get+0x5c>
  {
    case HTS221_ONE_SHOT:
      *val = HTS221_ONE_SHOT;
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	2200      	movs	r2, #0
 8002712:	701a      	strb	r2, [r3, #0]
      break;
 8002714:	e00f      	b.n	8002736 <hts221_data_rate_get+0x64>

    case HTS221_ODR_1Hz:
      *val = HTS221_ODR_1Hz;
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	2201      	movs	r2, #1
 800271a:	701a      	strb	r2, [r3, #0]
      break;
 800271c:	e00b      	b.n	8002736 <hts221_data_rate_get+0x64>

    case HTS221_ODR_7Hz:
      *val = HTS221_ODR_7Hz;
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	2202      	movs	r2, #2
 8002722:	701a      	strb	r2, [r3, #0]
      break;
 8002724:	e007      	b.n	8002736 <hts221_data_rate_get+0x64>

    case HTS221_ODR_12Hz5:
      *val = HTS221_ODR_12Hz5;
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	2203      	movs	r2, #3
 800272a:	701a      	strb	r2, [r3, #0]
      break;
 800272c:	e003      	b.n	8002736 <hts221_data_rate_get+0x64>

    default:
      *val = HTS221_ODR_ND;
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	2204      	movs	r2, #4
 8002732:	701a      	strb	r2, [r3, #0]
      break;
 8002734:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 8002736:	68fb      	ldr	r3, [r7, #12]
}
 8002738:	0018      	movs	r0, r3
 800273a:	46bd      	mov	sp, r7
 800273c:	b005      	add	sp, #20
 800273e:	bd90      	pop	{r4, r7, pc}

08002740 <hts221_block_data_update_set>:
  * @param  val     change the values of bdu in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8002740:	b590      	push	{r4, r7, lr}
 8002742:	b085      	sub	sp, #20
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
 8002748:	000a      	movs	r2, r1
 800274a:	1cfb      	adds	r3, r7, #3
 800274c:	701a      	strb	r2, [r3, #0]
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 800274e:	2408      	movs	r4, #8
 8002750:	193a      	adds	r2, r7, r4
 8002752:	6878      	ldr	r0, [r7, #4]
 8002754:	2301      	movs	r3, #1
 8002756:	2120      	movs	r1, #32
 8002758:	f7ff ff49 	bl	80025ee <hts221_read_reg>
 800275c:	0003      	movs	r3, r0
 800275e:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	2b00      	cmp	r3, #0
 8002764:	d117      	bne.n	8002796 <hts221_block_data_update_set+0x56>
  {
    reg.bdu = val;
 8002766:	1cfb      	adds	r3, r7, #3
 8002768:	781b      	ldrb	r3, [r3, #0]
 800276a:	2201      	movs	r2, #1
 800276c:	4013      	ands	r3, r2
 800276e:	b2da      	uxtb	r2, r3
 8002770:	193b      	adds	r3, r7, r4
 8002772:	2101      	movs	r1, #1
 8002774:	400a      	ands	r2, r1
 8002776:	0090      	lsls	r0, r2, #2
 8002778:	781a      	ldrb	r2, [r3, #0]
 800277a:	2104      	movs	r1, #4
 800277c:	438a      	bics	r2, r1
 800277e:	1c11      	adds	r1, r2, #0
 8002780:	1c02      	adds	r2, r0, #0
 8002782:	430a      	orrs	r2, r1
 8002784:	701a      	strb	r2, [r3, #0]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 8002786:	193a      	adds	r2, r7, r4
 8002788:	6878      	ldr	r0, [r7, #4]
 800278a:	2301      	movs	r3, #1
 800278c:	2120      	movs	r1, #32
 800278e:	f7ff ff4f 	bl	8002630 <hts221_write_reg>
 8002792:	0003      	movs	r3, r0
 8002794:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8002796:	68fb      	ldr	r3, [r7, #12]
}
 8002798:	0018      	movs	r0, r3
 800279a:	46bd      	mov	sp, r7
 800279c:	b005      	add	sp, #20
 800279e:	bd90      	pop	{r4, r7, pc}

080027a0 <hts221_humidity_raw_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_humidity_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 80027a0:	b590      	push	{r4, r7, lr}
 80027a2:	b085      	sub	sp, #20
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
 80027a8:	6039      	str	r1, [r7, #0]
  uint8_t buff[2];
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_HUMIDITY_OUT_L, buff, 2);
 80027aa:	2408      	movs	r4, #8
 80027ac:	193a      	adds	r2, r7, r4
 80027ae:	6878      	ldr	r0, [r7, #4]
 80027b0:	2302      	movs	r3, #2
 80027b2:	2128      	movs	r1, #40	; 0x28
 80027b4:	f7ff ff1b 	bl	80025ee <hts221_read_reg>
 80027b8:	0003      	movs	r3, r0
 80027ba:	60fb      	str	r3, [r7, #12]
  *val = (int16_t)buff[1];
 80027bc:	0021      	movs	r1, r4
 80027be:	187b      	adds	r3, r7, r1
 80027c0:	785b      	ldrb	r3, [r3, #1]
 80027c2:	b21a      	sxth	r2, r3
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	801a      	strh	r2, [r3, #0]
  *val = (*val * 256) + (int16_t)buff[0];
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	2200      	movs	r2, #0
 80027cc:	5e9b      	ldrsh	r3, [r3, r2]
 80027ce:	b29b      	uxth	r3, r3
 80027d0:	021b      	lsls	r3, r3, #8
 80027d2:	b29a      	uxth	r2, r3
 80027d4:	187b      	adds	r3, r7, r1
 80027d6:	781b      	ldrb	r3, [r3, #0]
 80027d8:	b29b      	uxth	r3, r3
 80027da:	18d3      	adds	r3, r2, r3
 80027dc:	b29b      	uxth	r3, r3
 80027de:	b21a      	sxth	r2, r3
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	801a      	strh	r2, [r3, #0]

  return ret;
 80027e4:	68fb      	ldr	r3, [r7, #12]
}
 80027e6:	0018      	movs	r0, r3
 80027e8:	46bd      	mov	sp, r7
 80027ea:	b005      	add	sp, #20
 80027ec:	bd90      	pop	{r4, r7, pc}

080027ee <hts221_temperature_raw_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temperature_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 80027ee:	b590      	push	{r4, r7, lr}
 80027f0:	b085      	sub	sp, #20
 80027f2:	af00      	add	r7, sp, #0
 80027f4:	6078      	str	r0, [r7, #4]
 80027f6:	6039      	str	r1, [r7, #0]
  uint8_t buff[2];
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_TEMP_OUT_L, buff, 2);
 80027f8:	2408      	movs	r4, #8
 80027fa:	193a      	adds	r2, r7, r4
 80027fc:	6878      	ldr	r0, [r7, #4]
 80027fe:	2302      	movs	r3, #2
 8002800:	212a      	movs	r1, #42	; 0x2a
 8002802:	f7ff fef4 	bl	80025ee <hts221_read_reg>
 8002806:	0003      	movs	r3, r0
 8002808:	60fb      	str	r3, [r7, #12]
  *val = (int16_t)buff[1];
 800280a:	0021      	movs	r1, r4
 800280c:	187b      	adds	r3, r7, r1
 800280e:	785b      	ldrb	r3, [r3, #1]
 8002810:	b21a      	sxth	r2, r3
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	801a      	strh	r2, [r3, #0]
  *val = (*val * 256) + (int16_t)buff[0];
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	2200      	movs	r2, #0
 800281a:	5e9b      	ldrsh	r3, [r3, r2]
 800281c:	b29b      	uxth	r3, r3
 800281e:	021b      	lsls	r3, r3, #8
 8002820:	b29a      	uxth	r2, r3
 8002822:	187b      	adds	r3, r7, r1
 8002824:	781b      	ldrb	r3, [r3, #0]
 8002826:	b29b      	uxth	r3, r3
 8002828:	18d3      	adds	r3, r2, r3
 800282a:	b29b      	uxth	r3, r3
 800282c:	b21a      	sxth	r2, r3
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	801a      	strh	r2, [r3, #0]

  return ret;
 8002832:	68fb      	ldr	r3, [r7, #12]
}
 8002834:	0018      	movs	r0, r3
 8002836:	46bd      	mov	sp, r7
 8002838:	b005      	add	sp, #20
 800283a:	bd90      	pop	{r4, r7, pc}

0800283c <hts221_device_id_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b084      	sub	sp, #16
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
 8002844:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_WHO_AM_I, buff, 1);
 8002846:	683a      	ldr	r2, [r7, #0]
 8002848:	6878      	ldr	r0, [r7, #4]
 800284a:	2301      	movs	r3, #1
 800284c:	210f      	movs	r1, #15
 800284e:	f7ff fece 	bl	80025ee <hts221_read_reg>
 8002852:	0003      	movs	r3, r0
 8002854:	60fb      	str	r3, [r7, #12]

  return ret;
 8002856:	68fb      	ldr	r3, [r7, #12]
}
 8002858:	0018      	movs	r0, r3
 800285a:	46bd      	mov	sp, r7
 800285c:	b004      	add	sp, #16
 800285e:	bd80      	pop	{r7, pc}

08002860 <hts221_power_on_set>:
  * @param  val     change the values of pd in reg CTRL_REG1
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_power_on_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8002860:	b590      	push	{r4, r7, lr}
 8002862:	b085      	sub	sp, #20
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
 8002868:	000a      	movs	r2, r1
 800286a:	1cfb      	adds	r3, r7, #3
 800286c:	701a      	strb	r2, [r3, #0]
  hts221_ctrl_reg1_t reg;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 800286e:	2408      	movs	r4, #8
 8002870:	193a      	adds	r2, r7, r4
 8002872:	6878      	ldr	r0, [r7, #4]
 8002874:	2301      	movs	r3, #1
 8002876:	2120      	movs	r1, #32
 8002878:	f7ff feb9 	bl	80025ee <hts221_read_reg>
 800287c:	0003      	movs	r3, r0
 800287e:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	2b00      	cmp	r3, #0
 8002884:	d115      	bne.n	80028b2 <hts221_power_on_set+0x52>
  {
    reg.pd = val;
 8002886:	1cfb      	adds	r3, r7, #3
 8002888:	781b      	ldrb	r3, [r3, #0]
 800288a:	2201      	movs	r2, #1
 800288c:	4013      	ands	r3, r2
 800288e:	b2da      	uxtb	r2, r3
 8002890:	193b      	adds	r3, r7, r4
 8002892:	01d0      	lsls	r0, r2, #7
 8002894:	781a      	ldrb	r2, [r3, #0]
 8002896:	217f      	movs	r1, #127	; 0x7f
 8002898:	400a      	ands	r2, r1
 800289a:	1c11      	adds	r1, r2, #0
 800289c:	1c02      	adds	r2, r0, #0
 800289e:	430a      	orrs	r2, r1
 80028a0:	701a      	strb	r2, [r3, #0]
    ret = hts221_write_reg(ctx, HTS221_CTRL_REG1, (uint8_t *) &reg, 1);
 80028a2:	193a      	adds	r2, r7, r4
 80028a4:	6878      	ldr	r0, [r7, #4]
 80028a6:	2301      	movs	r3, #1
 80028a8:	2120      	movs	r1, #32
 80028aa:	f7ff fec1 	bl	8002630 <hts221_write_reg>
 80028ae:	0003      	movs	r3, r0
 80028b0:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80028b2:	68fb      	ldr	r3, [r7, #12]
}
 80028b4:	0018      	movs	r0, r3
 80028b6:	46bd      	mov	sp, r7
 80028b8:	b005      	add	sp, #20
 80028ba:	bd90      	pop	{r4, r7, pc}

080028bc <hts221_hum_rh_point_0_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_rh_point_0_get(stmdev_ctx_t *ctx, float_t *val)
{
 80028bc:	b590      	push	{r4, r7, lr}
 80028be:	b085      	sub	sp, #20
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
 80028c4:	6039      	str	r1, [r7, #0]
  uint8_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_H0_RH_X2, &coeff, 1);
 80028c6:	240b      	movs	r4, #11
 80028c8:	193a      	adds	r2, r7, r4
 80028ca:	6878      	ldr	r0, [r7, #4]
 80028cc:	2301      	movs	r3, #1
 80028ce:	2130      	movs	r1, #48	; 0x30
 80028d0:	f7ff fe8d 	bl	80025ee <hts221_read_reg>
 80028d4:	0003      	movs	r3, r0
 80028d6:	60fb      	str	r3, [r7, #12]
  *val = coeff / 2.0f;
 80028d8:	193b      	adds	r3, r7, r4
 80028da:	781b      	ldrb	r3, [r3, #0]
 80028dc:	0018      	movs	r0, r3
 80028de:	f7fe fd6f 	bl	80013c0 <__aeabi_i2f>
 80028e2:	1c03      	adds	r3, r0, #0
 80028e4:	2180      	movs	r1, #128	; 0x80
 80028e6:	05c9      	lsls	r1, r1, #23
 80028e8:	1c18      	adds	r0, r3, #0
 80028ea:	f7fe f897 	bl	8000a1c <__aeabi_fdiv>
 80028ee:	1c03      	adds	r3, r0, #0
 80028f0:	1c1a      	adds	r2, r3, #0
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	601a      	str	r2, [r3, #0]

  return ret;
 80028f6:	68fb      	ldr	r3, [r7, #12]
}
 80028f8:	0018      	movs	r0, r3
 80028fa:	46bd      	mov	sp, r7
 80028fc:	b005      	add	sp, #20
 80028fe:	bd90      	pop	{r4, r7, pc}

08002900 <hts221_hum_rh_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_rh_point_1_get(stmdev_ctx_t *ctx, float_t *val)
{
 8002900:	b590      	push	{r4, r7, lr}
 8002902:	b085      	sub	sp, #20
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
 8002908:	6039      	str	r1, [r7, #0]
  uint8_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_H1_RH_X2, &coeff, 1);
 800290a:	240b      	movs	r4, #11
 800290c:	193a      	adds	r2, r7, r4
 800290e:	6878      	ldr	r0, [r7, #4]
 8002910:	2301      	movs	r3, #1
 8002912:	2131      	movs	r1, #49	; 0x31
 8002914:	f7ff fe6b 	bl	80025ee <hts221_read_reg>
 8002918:	0003      	movs	r3, r0
 800291a:	60fb      	str	r3, [r7, #12]
  *val = coeff / 2.0f;
 800291c:	193b      	adds	r3, r7, r4
 800291e:	781b      	ldrb	r3, [r3, #0]
 8002920:	0018      	movs	r0, r3
 8002922:	f7fe fd4d 	bl	80013c0 <__aeabi_i2f>
 8002926:	1c03      	adds	r3, r0, #0
 8002928:	2180      	movs	r1, #128	; 0x80
 800292a:	05c9      	lsls	r1, r1, #23
 800292c:	1c18      	adds	r0, r3, #0
 800292e:	f7fe f875 	bl	8000a1c <__aeabi_fdiv>
 8002932:	1c03      	adds	r3, r0, #0
 8002934:	1c1a      	adds	r2, r3, #0
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	601a      	str	r2, [r3, #0]

  return ret;
 800293a:	68fb      	ldr	r3, [r7, #12]
}
 800293c:	0018      	movs	r0, r3
 800293e:	46bd      	mov	sp, r7
 8002940:	b005      	add	sp, #20
 8002942:	bd90      	pop	{r4, r7, pc}

08002944 <hts221_temp_deg_point_0_get>:
  * @param  buff    buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_deg_point_0_get(stmdev_ctx_t *ctx, float_t *val)
{
 8002944:	b5b0      	push	{r4, r5, r7, lr}
 8002946:	b086      	sub	sp, #24
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
 800294c:	6039      	str	r1, [r7, #0]
  hts221_t1_t0_msb_t reg;
  uint8_t coeff_h, coeff_l;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_T0_DEGC_X8, &coeff_l, 1);
 800294e:	240f      	movs	r4, #15
 8002950:	193a      	adds	r2, r7, r4
 8002952:	6878      	ldr	r0, [r7, #4]
 8002954:	2301      	movs	r3, #1
 8002956:	2132      	movs	r1, #50	; 0x32
 8002958:	f7ff fe49 	bl	80025ee <hts221_read_reg>
 800295c:	0003      	movs	r3, r0
 800295e:	617b      	str	r3, [r7, #20]

  if (ret == 0)
 8002960:	697b      	ldr	r3, [r7, #20]
 8002962:	2b00      	cmp	r3, #0
 8002964:	d123      	bne.n	80029ae <hts221_temp_deg_point_0_get+0x6a>
  {
    ret = hts221_read_reg(ctx, HTS221_T1_T0_MSB, (uint8_t *) &reg, 1);
 8002966:	2510      	movs	r5, #16
 8002968:	197a      	adds	r2, r7, r5
 800296a:	6878      	ldr	r0, [r7, #4]
 800296c:	2301      	movs	r3, #1
 800296e:	2135      	movs	r1, #53	; 0x35
 8002970:	f7ff fe3d 	bl	80025ee <hts221_read_reg>
 8002974:	0003      	movs	r3, r0
 8002976:	617b      	str	r3, [r7, #20]
    coeff_h = reg.t0_msb;
 8002978:	197b      	adds	r3, r7, r5
 800297a:	781b      	ldrb	r3, [r3, #0]
 800297c:	079b      	lsls	r3, r3, #30
 800297e:	0f9b      	lsrs	r3, r3, #30
 8002980:	b2da      	uxtb	r2, r3
 8002982:	2113      	movs	r1, #19
 8002984:	187b      	adds	r3, r7, r1
 8002986:	701a      	strb	r2, [r3, #0]
    *val = ((coeff_h * 256) + coeff_l) / 8.0f;
 8002988:	187b      	adds	r3, r7, r1
 800298a:	781b      	ldrb	r3, [r3, #0]
 800298c:	021b      	lsls	r3, r3, #8
 800298e:	193a      	adds	r2, r7, r4
 8002990:	7812      	ldrb	r2, [r2, #0]
 8002992:	189b      	adds	r3, r3, r2
 8002994:	0018      	movs	r0, r3
 8002996:	f7fe fd13 	bl	80013c0 <__aeabi_i2f>
 800299a:	1c03      	adds	r3, r0, #0
 800299c:	2182      	movs	r1, #130	; 0x82
 800299e:	05c9      	lsls	r1, r1, #23
 80029a0:	1c18      	adds	r0, r3, #0
 80029a2:	f7fe f83b 	bl	8000a1c <__aeabi_fdiv>
 80029a6:	1c03      	adds	r3, r0, #0
 80029a8:	1c1a      	adds	r2, r3, #0
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	601a      	str	r2, [r3, #0]
  }

  return ret;
 80029ae:	697b      	ldr	r3, [r7, #20]
}
 80029b0:	0018      	movs	r0, r3
 80029b2:	46bd      	mov	sp, r7
 80029b4:	b006      	add	sp, #24
 80029b6:	bdb0      	pop	{r4, r5, r7, pc}

080029b8 <hts221_temp_deg_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_deg_point_1_get(stmdev_ctx_t *ctx, float_t *val)
{
 80029b8:	b5b0      	push	{r4, r5, r7, lr}
 80029ba:	b086      	sub	sp, #24
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
 80029c0:	6039      	str	r1, [r7, #0]
  hts221_t1_t0_msb_t reg;
  uint8_t coeff_h, coeff_l;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_T1_DEGC_X8, &coeff_l, 1);
 80029c2:	240f      	movs	r4, #15
 80029c4:	193a      	adds	r2, r7, r4
 80029c6:	6878      	ldr	r0, [r7, #4]
 80029c8:	2301      	movs	r3, #1
 80029ca:	2133      	movs	r1, #51	; 0x33
 80029cc:	f7ff fe0f 	bl	80025ee <hts221_read_reg>
 80029d0:	0003      	movs	r3, r0
 80029d2:	617b      	str	r3, [r7, #20]

  if (ret == 0)
 80029d4:	697b      	ldr	r3, [r7, #20]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d123      	bne.n	8002a22 <hts221_temp_deg_point_1_get+0x6a>
  {
    ret = hts221_read_reg(ctx, HTS221_T1_T0_MSB, (uint8_t *) &reg, 1);
 80029da:	2510      	movs	r5, #16
 80029dc:	197a      	adds	r2, r7, r5
 80029de:	6878      	ldr	r0, [r7, #4]
 80029e0:	2301      	movs	r3, #1
 80029e2:	2135      	movs	r1, #53	; 0x35
 80029e4:	f7ff fe03 	bl	80025ee <hts221_read_reg>
 80029e8:	0003      	movs	r3, r0
 80029ea:	617b      	str	r3, [r7, #20]
    coeff_h = reg.t1_msb;
 80029ec:	197b      	adds	r3, r7, r5
 80029ee:	781b      	ldrb	r3, [r3, #0]
 80029f0:	071b      	lsls	r3, r3, #28
 80029f2:	0f9b      	lsrs	r3, r3, #30
 80029f4:	b2da      	uxtb	r2, r3
 80029f6:	2113      	movs	r1, #19
 80029f8:	187b      	adds	r3, r7, r1
 80029fa:	701a      	strb	r2, [r3, #0]
    *val = ((coeff_h * 256) + coeff_l) / 8.0f;
 80029fc:	187b      	adds	r3, r7, r1
 80029fe:	781b      	ldrb	r3, [r3, #0]
 8002a00:	021b      	lsls	r3, r3, #8
 8002a02:	193a      	adds	r2, r7, r4
 8002a04:	7812      	ldrb	r2, [r2, #0]
 8002a06:	189b      	adds	r3, r3, r2
 8002a08:	0018      	movs	r0, r3
 8002a0a:	f7fe fcd9 	bl	80013c0 <__aeabi_i2f>
 8002a0e:	1c03      	adds	r3, r0, #0
 8002a10:	2182      	movs	r1, #130	; 0x82
 8002a12:	05c9      	lsls	r1, r1, #23
 8002a14:	1c18      	adds	r0, r3, #0
 8002a16:	f7fe f801 	bl	8000a1c <__aeabi_fdiv>
 8002a1a:	1c03      	adds	r3, r0, #0
 8002a1c:	1c1a      	adds	r2, r3, #0
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	601a      	str	r2, [r3, #0]
  }

  return ret;
 8002a22:	697b      	ldr	r3, [r7, #20]
}
 8002a24:	0018      	movs	r0, r3
 8002a26:	46bd      	mov	sp, r7
 8002a28:	b006      	add	sp, #24
 8002a2a:	bdb0      	pop	{r4, r5, r7, pc}

08002a2c <hts221_hum_adc_point_0_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_adc_point_0_get(stmdev_ctx_t *ctx, float_t *val)
{
 8002a2c:	b590      	push	{r4, r7, lr}
 8002a2e:	b085      	sub	sp, #20
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
 8002a34:	6039      	str	r1, [r7, #0]
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_H0_T0_OUT_L, coeff_p, 2);
 8002a36:	2408      	movs	r4, #8
 8002a38:	193a      	adds	r2, r7, r4
 8002a3a:	6878      	ldr	r0, [r7, #4]
 8002a3c:	2302      	movs	r3, #2
 8002a3e:	2136      	movs	r1, #54	; 0x36
 8002a40:	f7ff fdd5 	bl	80025ee <hts221_read_reg>
 8002a44:	0003      	movs	r3, r0
 8002a46:	60fb      	str	r3, [r7, #12]
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 8002a48:	0021      	movs	r1, r4
 8002a4a:	187b      	adds	r3, r7, r1
 8002a4c:	785b      	ldrb	r3, [r3, #1]
 8002a4e:	b29b      	uxth	r3, r3
 8002a50:	021b      	lsls	r3, r3, #8
 8002a52:	b29a      	uxth	r2, r3
 8002a54:	187b      	adds	r3, r7, r1
 8002a56:	781b      	ldrb	r3, [r3, #0]
 8002a58:	b29b      	uxth	r3, r3
 8002a5a:	18d3      	adds	r3, r2, r3
 8002a5c:	b29a      	uxth	r2, r3
 8002a5e:	210a      	movs	r1, #10
 8002a60:	187b      	adds	r3, r7, r1
 8002a62:	801a      	strh	r2, [r3, #0]
  *val = coeff * 1.0f;
 8002a64:	187b      	adds	r3, r7, r1
 8002a66:	2200      	movs	r2, #0
 8002a68:	5e9b      	ldrsh	r3, [r3, r2]
 8002a6a:	0018      	movs	r0, r3
 8002a6c:	f7fe fca8 	bl	80013c0 <__aeabi_i2f>
 8002a70:	1c02      	adds	r2, r0, #0
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	601a      	str	r2, [r3, #0]

  return ret;
 8002a76:	68fb      	ldr	r3, [r7, #12]
}
 8002a78:	0018      	movs	r0, r3
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	b005      	add	sp, #20
 8002a7e:	bd90      	pop	{r4, r7, pc}

08002a80 <hts221_hum_adc_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_hum_adc_point_1_get(stmdev_ctx_t *ctx, float_t *val)
{
 8002a80:	b590      	push	{r4, r7, lr}
 8002a82:	b085      	sub	sp, #20
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
 8002a88:	6039      	str	r1, [r7, #0]
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_H1_T0_OUT_L, coeff_p, 2);
 8002a8a:	2408      	movs	r4, #8
 8002a8c:	193a      	adds	r2, r7, r4
 8002a8e:	6878      	ldr	r0, [r7, #4]
 8002a90:	2302      	movs	r3, #2
 8002a92:	213a      	movs	r1, #58	; 0x3a
 8002a94:	f7ff fdab 	bl	80025ee <hts221_read_reg>
 8002a98:	0003      	movs	r3, r0
 8002a9a:	60fb      	str	r3, [r7, #12]
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 8002a9c:	0021      	movs	r1, r4
 8002a9e:	187b      	adds	r3, r7, r1
 8002aa0:	785b      	ldrb	r3, [r3, #1]
 8002aa2:	b29b      	uxth	r3, r3
 8002aa4:	021b      	lsls	r3, r3, #8
 8002aa6:	b29a      	uxth	r2, r3
 8002aa8:	187b      	adds	r3, r7, r1
 8002aaa:	781b      	ldrb	r3, [r3, #0]
 8002aac:	b29b      	uxth	r3, r3
 8002aae:	18d3      	adds	r3, r2, r3
 8002ab0:	b29a      	uxth	r2, r3
 8002ab2:	210a      	movs	r1, #10
 8002ab4:	187b      	adds	r3, r7, r1
 8002ab6:	801a      	strh	r2, [r3, #0]
  *val = coeff * 1.0f;
 8002ab8:	187b      	adds	r3, r7, r1
 8002aba:	2200      	movs	r2, #0
 8002abc:	5e9b      	ldrsh	r3, [r3, r2]
 8002abe:	0018      	movs	r0, r3
 8002ac0:	f7fe fc7e 	bl	80013c0 <__aeabi_i2f>
 8002ac4:	1c02      	adds	r2, r0, #0
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	601a      	str	r2, [r3, #0]

  return ret;
 8002aca:	68fb      	ldr	r3, [r7, #12]
}
 8002acc:	0018      	movs	r0, r3
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	b005      	add	sp, #20
 8002ad2:	bd90      	pop	{r4, r7, pc}

08002ad4 <hts221_temp_adc_point_0_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_adc_point_0_get(stmdev_ctx_t *ctx, float_t *val)
{
 8002ad4:	b590      	push	{r4, r7, lr}
 8002ad6:	b085      	sub	sp, #20
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
 8002adc:	6039      	str	r1, [r7, #0]
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_T0_OUT_L, coeff_p, 2);
 8002ade:	2408      	movs	r4, #8
 8002ae0:	193a      	adds	r2, r7, r4
 8002ae2:	6878      	ldr	r0, [r7, #4]
 8002ae4:	2302      	movs	r3, #2
 8002ae6:	213c      	movs	r1, #60	; 0x3c
 8002ae8:	f7ff fd81 	bl	80025ee <hts221_read_reg>
 8002aec:	0003      	movs	r3, r0
 8002aee:	60fb      	str	r3, [r7, #12]
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 8002af0:	0021      	movs	r1, r4
 8002af2:	187b      	adds	r3, r7, r1
 8002af4:	785b      	ldrb	r3, [r3, #1]
 8002af6:	b29b      	uxth	r3, r3
 8002af8:	021b      	lsls	r3, r3, #8
 8002afa:	b29a      	uxth	r2, r3
 8002afc:	187b      	adds	r3, r7, r1
 8002afe:	781b      	ldrb	r3, [r3, #0]
 8002b00:	b29b      	uxth	r3, r3
 8002b02:	18d3      	adds	r3, r2, r3
 8002b04:	b29a      	uxth	r2, r3
 8002b06:	210a      	movs	r1, #10
 8002b08:	187b      	adds	r3, r7, r1
 8002b0a:	801a      	strh	r2, [r3, #0]
  *val = coeff * 1.0f;
 8002b0c:	187b      	adds	r3, r7, r1
 8002b0e:	2200      	movs	r2, #0
 8002b10:	5e9b      	ldrsh	r3, [r3, r2]
 8002b12:	0018      	movs	r0, r3
 8002b14:	f7fe fc54 	bl	80013c0 <__aeabi_i2f>
 8002b18:	1c02      	adds	r2, r0, #0
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	601a      	str	r2, [r3, #0]

  return ret;
 8002b1e:	68fb      	ldr	r3, [r7, #12]
}
 8002b20:	0018      	movs	r0, r3
 8002b22:	46bd      	mov	sp, r7
 8002b24:	b005      	add	sp, #20
 8002b26:	bd90      	pop	{r4, r7, pc}

08002b28 <hts221_temp_adc_point_1_get>:
  * @param  val     buffer that stores data read
  * @retval         interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t hts221_temp_adc_point_1_get(stmdev_ctx_t *ctx, float_t *val)
{
 8002b28:	b590      	push	{r4, r7, lr}
 8002b2a:	b085      	sub	sp, #20
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
 8002b30:	6039      	str	r1, [r7, #0]
  uint8_t coeff_p[2];
  int16_t coeff;
  int32_t ret;

  ret = hts221_read_reg(ctx, HTS221_T1_OUT_L, coeff_p, 2);
 8002b32:	2408      	movs	r4, #8
 8002b34:	193a      	adds	r2, r7, r4
 8002b36:	6878      	ldr	r0, [r7, #4]
 8002b38:	2302      	movs	r3, #2
 8002b3a:	213e      	movs	r1, #62	; 0x3e
 8002b3c:	f7ff fd57 	bl	80025ee <hts221_read_reg>
 8002b40:	0003      	movs	r3, r0
 8002b42:	60fb      	str	r3, [r7, #12]
  coeff = (coeff_p[1] * 256) + coeff_p[0];
 8002b44:	0021      	movs	r1, r4
 8002b46:	187b      	adds	r3, r7, r1
 8002b48:	785b      	ldrb	r3, [r3, #1]
 8002b4a:	b29b      	uxth	r3, r3
 8002b4c:	021b      	lsls	r3, r3, #8
 8002b4e:	b29a      	uxth	r2, r3
 8002b50:	187b      	adds	r3, r7, r1
 8002b52:	781b      	ldrb	r3, [r3, #0]
 8002b54:	b29b      	uxth	r3, r3
 8002b56:	18d3      	adds	r3, r2, r3
 8002b58:	b29a      	uxth	r2, r3
 8002b5a:	210a      	movs	r1, #10
 8002b5c:	187b      	adds	r3, r7, r1
 8002b5e:	801a      	strh	r2, [r3, #0]
  *val = coeff * 1.0f;
 8002b60:	187b      	adds	r3, r7, r1
 8002b62:	2200      	movs	r2, #0
 8002b64:	5e9b      	ldrsh	r3, [r3, r2]
 8002b66:	0018      	movs	r0, r3
 8002b68:	f7fe fc2a 	bl	80013c0 <__aeabi_i2f>
 8002b6c:	1c02      	adds	r2, r0, #0
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	601a      	str	r2, [r3, #0]

  return ret;
 8002b72:	68fb      	ldr	r3, [r7, #12]
}
 8002b74:	0018      	movs	r0, r3
 8002b76:	46bd      	mov	sp, r7
 8002b78:	b005      	add	sp, #20
 8002b7a:	bd90      	pop	{r4, r7, pc}

08002b7c <LIS2DW12_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_RegisterBusIO(LIS2DW12_Object_t *pObj, LIS2DW12_IO_t *pIO)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b084      	sub	sp, #16
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
 8002b84:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2DW12_OK;
 8002b86:	2300      	movs	r3, #0
 8002b88:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d103      	bne.n	8002b98 <LIS2DW12_RegisterBusIO+0x1c>
  {
    ret = LIS2DW12_ERROR;
 8002b90:	2301      	movs	r3, #1
 8002b92:	425b      	negs	r3, r3
 8002b94:	60fb      	str	r3, [r7, #12]
 8002b96:	e04e      	b.n	8002c36 <LIS2DW12_RegisterBusIO+0xba>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	681a      	ldr	r2, [r3, #0]
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	685a      	ldr	r2, [r3, #4]
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	689a      	ldr	r2, [r3, #8]
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	7b1a      	ldrb	r2, [r3, #12]
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	691a      	ldr	r2, [r3, #16]
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	695a      	ldr	r2, [r3, #20]
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	699a      	ldr	r2, [r3, #24]
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	4a1b      	ldr	r2, [pc, #108]	; (8002c40 <LIS2DW12_RegisterBusIO+0xc4>)
 8002bd4:	621a      	str	r2, [r3, #32]
    pObj->Ctx.write_reg = WriteRegWrap;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	4a1a      	ldr	r2, [pc, #104]	; (8002c44 <LIS2DW12_RegisterBusIO+0xc8>)
 8002bda:	61da      	str	r2, [r3, #28]
    pObj->Ctx.handle   = pObj;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	687a      	ldr	r2, [r7, #4]
 8002be0:	625a      	str	r2, [r3, #36]	; 0x24

    if (pObj->IO.Init == NULL)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d103      	bne.n	8002bf2 <LIS2DW12_RegisterBusIO+0x76>
    {
      ret = LIS2DW12_ERROR;
 8002bea:	2301      	movs	r3, #1
 8002bec:	425b      	negs	r3, r3
 8002bee:	60fb      	str	r3, [r7, #12]
 8002bf0:	e021      	b.n	8002c36 <LIS2DW12_RegisterBusIO+0xba>
    }
    else if (pObj->IO.Init() != LIS2DW12_OK)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	4798      	blx	r3
 8002bf8:	1e03      	subs	r3, r0, #0
 8002bfa:	d003      	beq.n	8002c04 <LIS2DW12_RegisterBusIO+0x88>
    {
      ret = LIS2DW12_ERROR;
 8002bfc:	2301      	movs	r3, #1
 8002bfe:	425b      	negs	r3, r3
 8002c00:	60fb      	str	r3, [r7, #12]
 8002c02:	e018      	b.n	8002c36 <LIS2DW12_RegisterBusIO+0xba>
    }
    else
    {
      if (pObj->IO.BusType == LIS2DW12_SPI_3WIRES_BUS) /* SPI 3-Wires */
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	689b      	ldr	r3, [r3, #8]
 8002c08:	2b02      	cmp	r3, #2
 8002c0a:	d114      	bne.n	8002c36 <LIS2DW12_RegisterBusIO+0xba>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2228      	movs	r2, #40	; 0x28
 8002c10:	5c9b      	ldrb	r3, [r3, r2]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d10f      	bne.n	8002c36 <LIS2DW12_RegisterBusIO+0xba>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x05;
 8002c16:	210b      	movs	r1, #11
 8002c18:	187b      	adds	r3, r7, r1
 8002c1a:	2205      	movs	r2, #5
 8002c1c:	701a      	strb	r2, [r3, #0]

          if (LIS2DW12_Write_Reg(pObj, LIS2DW12_CTRL2, data) != LIS2DW12_OK)
 8002c1e:	187b      	adds	r3, r7, r1
 8002c20:	781a      	ldrb	r2, [r3, #0]
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	2121      	movs	r1, #33	; 0x21
 8002c26:	0018      	movs	r0, r3
 8002c28:	f000 fbf6 	bl	8003418 <LIS2DW12_Write_Reg>
 8002c2c:	1e03      	subs	r3, r0, #0
 8002c2e:	d002      	beq.n	8002c36 <LIS2DW12_RegisterBusIO+0xba>
          {
            ret = LIS2DW12_ERROR;
 8002c30:	2301      	movs	r3, #1
 8002c32:	425b      	negs	r3, r3
 8002c34:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 8002c36:	68fb      	ldr	r3, [r7, #12]
}
 8002c38:	0018      	movs	r0, r3
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	b004      	add	sp, #16
 8002c3e:	bd80      	pop	{r7, pc}
 8002c40:	08003761 	.word	0x08003761
 8002c44:	080037a5 	.word	0x080037a5

08002c48 <LIS2DW12_Init>:
  * @brief  Initialize the LIS2DW12 sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_Init(LIS2DW12_Object_t *pObj)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b082      	sub	sp, #8
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
  /* Enable register address automatically incremented during a multiple byte
  access with a serial interface. */
  if (lis2dw12_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LIS2DW12_OK)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	331c      	adds	r3, #28
 8002c54:	2101      	movs	r1, #1
 8002c56:	0018      	movs	r0, r3
 8002c58:	f001 f8bc 	bl	8003dd4 <lis2dw12_auto_increment_set>
 8002c5c:	1e03      	subs	r3, r0, #0
 8002c5e:	d002      	beq.n	8002c66 <LIS2DW12_Init+0x1e>
  {
    return LIS2DW12_ERROR;
 8002c60:	2301      	movs	r3, #1
 8002c62:	425b      	negs	r3, r3
 8002c64:	e046      	b.n	8002cf4 <LIS2DW12_Init+0xac>
  }

  /* Enable BDU */
  if (lis2dw12_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LIS2DW12_OK)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	331c      	adds	r3, #28
 8002c6a:	2101      	movs	r1, #1
 8002c6c:	0018      	movs	r0, r3
 8002c6e:	f000 ffb5 	bl	8003bdc <lis2dw12_block_data_update_set>
 8002c72:	1e03      	subs	r3, r0, #0
 8002c74:	d002      	beq.n	8002c7c <LIS2DW12_Init+0x34>
  {
    return LIS2DW12_ERROR;
 8002c76:	2301      	movs	r3, #1
 8002c78:	425b      	negs	r3, r3
 8002c7a:	e03b      	b.n	8002cf4 <LIS2DW12_Init+0xac>
  }

  /* FIFO mode selection */
  if (lis2dw12_fifo_mode_set(&(pObj->Ctx), LIS2DW12_BYPASS_MODE) != LIS2DW12_OK)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	331c      	adds	r3, #28
 8002c80:	2100      	movs	r1, #0
 8002c82:	0018      	movs	r0, r3
 8002c84:	f001 f8d6 	bl	8003e34 <lis2dw12_fifo_mode_set>
 8002c88:	1e03      	subs	r3, r0, #0
 8002c8a:	d002      	beq.n	8002c92 <LIS2DW12_Init+0x4a>
  {
    return LIS2DW12_ERROR;
 8002c8c:	2301      	movs	r3, #1
 8002c8e:	425b      	negs	r3, r3
 8002c90:	e030      	b.n	8002cf4 <LIS2DW12_Init+0xac>
  }

  /* Power mode selection */
  if (lis2dw12_power_mode_set(&(pObj->Ctx), LIS2DW12_HIGH_PERFORMANCE) != LIS2DW12_OK)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	331c      	adds	r3, #28
 8002c96:	2104      	movs	r1, #4
 8002c98:	0018      	movs	r0, r3
 8002c9a:	f000 fde7 	bl	800386c <lis2dw12_power_mode_set>
 8002c9e:	1e03      	subs	r3, r0, #0
 8002ca0:	d002      	beq.n	8002ca8 <LIS2DW12_Init+0x60>
  {
    return LIS2DW12_ERROR;
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	425b      	negs	r3, r3
 8002ca6:	e025      	b.n	8002cf4 <LIS2DW12_Init+0xac>
  }

  /* Select default output data rate. */
  pObj->acc_odr = 100.0f;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	4a14      	ldr	r2, [pc, #80]	; (8002cfc <LIS2DW12_Init+0xb4>)
 8002cac:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Select default operating mode. */
  pObj->acc_operating_mode = LIS2DW12_HIGH_PERFORMANCE_MODE;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	2230      	movs	r2, #48	; 0x30
 8002cb2:	2100      	movs	r1, #0
 8002cb4:	5499      	strb	r1, [r3, r2]
  /* Select default low noise (disabled). */
  pObj->acc_low_noise = LIS2DW12_LOW_NOISE_DISABLE;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	2231      	movs	r2, #49	; 0x31
 8002cba:	2100      	movs	r1, #0
 8002cbc:	5499      	strb	r1, [r3, r2]

  /* Output data rate selection - power down. */
  if (lis2dw12_data_rate_set(&(pObj->Ctx), LIS2DW12_XL_ODR_OFF) != LIS2DW12_OK)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	331c      	adds	r3, #28
 8002cc2:	2100      	movs	r1, #0
 8002cc4:	0018      	movs	r0, r3
 8002cc6:	f000 fec7 	bl	8003a58 <lis2dw12_data_rate_set>
 8002cca:	1e03      	subs	r3, r0, #0
 8002ccc:	d002      	beq.n	8002cd4 <LIS2DW12_Init+0x8c>
  {
    return LIS2DW12_ERROR;
 8002cce:	2301      	movs	r3, #1
 8002cd0:	425b      	negs	r3, r3
 8002cd2:	e00f      	b.n	8002cf4 <LIS2DW12_Init+0xac>
  }

  /* Full scale selection. */
  if (lis2dw12_full_scale_set(&(pObj->Ctx), LIS2DW12_2g) != LIS2DW12_OK)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	331c      	adds	r3, #28
 8002cd8:	2100      	movs	r1, #0
 8002cda:	0018      	movs	r0, r3
 8002cdc:	f000 ffae 	bl	8003c3c <lis2dw12_full_scale_set>
 8002ce0:	1e03      	subs	r3, r0, #0
 8002ce2:	d002      	beq.n	8002cea <LIS2DW12_Init+0xa2>
  {
    return LIS2DW12_ERROR;
 8002ce4:	2301      	movs	r3, #1
 8002ce6:	425b      	negs	r3, r3
 8002ce8:	e004      	b.n	8002cf4 <LIS2DW12_Init+0xac>
  }

  pObj->is_initialized = 1;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	2228      	movs	r2, #40	; 0x28
 8002cee:	2101      	movs	r1, #1
 8002cf0:	5499      	strb	r1, [r3, r2]

  return LIS2DW12_OK;
 8002cf2:	2300      	movs	r3, #0
}
 8002cf4:	0018      	movs	r0, r3
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	b002      	add	sp, #8
 8002cfa:	bd80      	pop	{r7, pc}
 8002cfc:	42c80000 	.word	0x42c80000

08002d00 <LIS2DW12_DeInit>:
  * @brief  Deinitialize the LIS2DW12 sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_DeInit(LIS2DW12_Object_t *pObj)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b082      	sub	sp, #8
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LIS2DW12_ACC_Disable(pObj) != LIS2DW12_OK)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	0018      	movs	r0, r3
 8002d0c:	f000 f87e 	bl	8002e0c <LIS2DW12_ACC_Disable>
 8002d10:	1e03      	subs	r3, r0, #0
 8002d12:	d002      	beq.n	8002d1a <LIS2DW12_DeInit+0x1a>
  {
    return LIS2DW12_ERROR;
 8002d14:	2301      	movs	r3, #1
 8002d16:	425b      	negs	r3, r3
 8002d18:	e00f      	b.n	8002d3a <LIS2DW12_DeInit+0x3a>
  }

  /* Reset output data rate. */
  pObj->acc_odr = 0.0f;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset operating mode to default value. */
  pObj->acc_operating_mode = LIS2DW12_HIGH_PERFORMANCE_MODE;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2230      	movs	r2, #48	; 0x30
 8002d24:	2100      	movs	r1, #0
 8002d26:	5499      	strb	r1, [r3, r2]
  /* Reset low noise to default value (disabled). */
  pObj->acc_low_noise = LIS2DW12_LOW_NOISE_DISABLE;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2231      	movs	r2, #49	; 0x31
 8002d2c:	2100      	movs	r1, #0
 8002d2e:	5499      	strb	r1, [r3, r2]

  pObj->is_initialized = 0;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2228      	movs	r2, #40	; 0x28
 8002d34:	2100      	movs	r1, #0
 8002d36:	5499      	strb	r1, [r3, r2]

  return LIS2DW12_OK;
 8002d38:	2300      	movs	r3, #0
}
 8002d3a:	0018      	movs	r0, r3
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	b002      	add	sp, #8
 8002d40:	bd80      	pop	{r7, pc}

08002d42 <LIS2DW12_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ReadID(LIS2DW12_Object_t *pObj, uint8_t *Id)
{
 8002d42:	b580      	push	{r7, lr}
 8002d44:	b082      	sub	sp, #8
 8002d46:	af00      	add	r7, sp, #0
 8002d48:	6078      	str	r0, [r7, #4]
 8002d4a:	6039      	str	r1, [r7, #0]
  if (lis2dw12_device_id_get(&(pObj->Ctx), Id) != LIS2DW12_OK)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	331c      	adds	r3, #28
 8002d50:	683a      	ldr	r2, [r7, #0]
 8002d52:	0011      	movs	r1, r2
 8002d54:	0018      	movs	r0, r3
 8002d56:	f001 f82b 	bl	8003db0 <lis2dw12_device_id_get>
 8002d5a:	1e03      	subs	r3, r0, #0
 8002d5c:	d002      	beq.n	8002d64 <LIS2DW12_ReadID+0x22>
  {
    return LIS2DW12_ERROR;
 8002d5e:	2301      	movs	r3, #1
 8002d60:	425b      	negs	r3, r3
 8002d62:	e000      	b.n	8002d66 <LIS2DW12_ReadID+0x24>
  }

  return LIS2DW12_OK;
 8002d64:	2300      	movs	r3, #0
}
 8002d66:	0018      	movs	r0, r3
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	b002      	add	sp, #8
 8002d6c:	bd80      	pop	{r7, pc}
	...

08002d70 <LIS2DW12_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to LIS2DW12 sensor capabilities
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_GetCapabilities(LIS2DW12_Object_t *pObj, LIS2DW12_Capabilities_t *Capabilities)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b082      	sub	sp, #8
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
 8002d78:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 1;
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	2201      	movs	r2, #1
 8002d7e:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 0;
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	2200      	movs	r2, #0
 8002d84:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 0;
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	2200      	movs	r2, #0
 8002d8a:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	2200      	movs	r2, #0
 8002d90:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 0;
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	2200      	movs	r2, #0
 8002d96:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 16;
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	2210      	movs	r2, #16
 8002d9c:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 0;
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	2200      	movs	r2, #0
 8002da2:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 0.0f;
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	2200      	movs	r2, #0
 8002da8:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 1600.0f;
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	4a04      	ldr	r2, [pc, #16]	; (8002dc0 <LIS2DW12_GetCapabilities+0x50>)
 8002dae:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 0.0f;
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	2200      	movs	r2, #0
 8002db4:	619a      	str	r2, [r3, #24]
  return LIS2DW12_OK;
 8002db6:	2300      	movs	r3, #0
}
 8002db8:	0018      	movs	r0, r3
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	b002      	add	sp, #8
 8002dbe:	bd80      	pop	{r7, pc}
 8002dc0:	44c80000 	.word	0x44c80000

08002dc4 <LIS2DW12_ACC_Enable>:
  * @brief  Enable the LIS2DW12 accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_Enable(LIS2DW12_Object_t *pObj)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b082      	sub	sp, #8
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2229      	movs	r2, #41	; 0x29
 8002dd0:	5c9b      	ldrb	r3, [r3, r2]
 8002dd2:	2b01      	cmp	r3, #1
 8002dd4:	d101      	bne.n	8002dda <LIS2DW12_ACC_Enable+0x16>
  {
    return LIS2DW12_OK;
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	e014      	b.n	8002e04 <LIS2DW12_ACC_Enable+0x40>
  }

  /* Output data rate selection. */
  if (LIS2DW12_ACC_SetOutputDataRate_When_Enabled(pObj, pObj->acc_odr, pObj->acc_operating_mode,
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	2230      	movs	r2, #48	; 0x30
 8002de2:	5c9a      	ldrb	r2, [r3, r2]
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2031      	movs	r0, #49	; 0x31
 8002de8:	5c1b      	ldrb	r3, [r3, r0]
 8002dea:	6878      	ldr	r0, [r7, #4]
 8002dec:	f000 fb34 	bl	8003458 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled>
 8002df0:	1e03      	subs	r3, r0, #0
 8002df2:	d002      	beq.n	8002dfa <LIS2DW12_ACC_Enable+0x36>
                                                  pObj->acc_low_noise) != LIS2DW12_OK)
  {
    return LIS2DW12_ERROR;
 8002df4:	2301      	movs	r3, #1
 8002df6:	425b      	negs	r3, r3
 8002df8:	e004      	b.n	8002e04 <LIS2DW12_ACC_Enable+0x40>
  }

  pObj->acc_is_enabled = 1;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	2229      	movs	r2, #41	; 0x29
 8002dfe:	2101      	movs	r1, #1
 8002e00:	5499      	strb	r1, [r3, r2]

  return LIS2DW12_OK;
 8002e02:	2300      	movs	r3, #0
}
 8002e04:	0018      	movs	r0, r3
 8002e06:	46bd      	mov	sp, r7
 8002e08:	b002      	add	sp, #8
 8002e0a:	bd80      	pop	{r7, pc}

08002e0c <LIS2DW12_ACC_Disable>:
  * @brief  Disable the LIS2DW12 accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_Disable(LIS2DW12_Object_t *pObj)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b082      	sub	sp, #8
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->acc_is_enabled == 0U)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2229      	movs	r2, #41	; 0x29
 8002e18:	5c9b      	ldrb	r3, [r3, r2]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d101      	bne.n	8002e22 <LIS2DW12_ACC_Disable+0x16>
  {
    return LIS2DW12_OK;
 8002e1e:	2300      	movs	r3, #0
 8002e20:	e00f      	b.n	8002e42 <LIS2DW12_ACC_Disable+0x36>
  }

  /* Output data rate selection - power down. */
  if (lis2dw12_data_rate_set(&(pObj->Ctx), LIS2DW12_XL_ODR_OFF) != LIS2DW12_OK)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	331c      	adds	r3, #28
 8002e26:	2100      	movs	r1, #0
 8002e28:	0018      	movs	r0, r3
 8002e2a:	f000 fe15 	bl	8003a58 <lis2dw12_data_rate_set>
 8002e2e:	1e03      	subs	r3, r0, #0
 8002e30:	d002      	beq.n	8002e38 <LIS2DW12_ACC_Disable+0x2c>
  {
    return LIS2DW12_ERROR;
 8002e32:	2301      	movs	r3, #1
 8002e34:	425b      	negs	r3, r3
 8002e36:	e004      	b.n	8002e42 <LIS2DW12_ACC_Disable+0x36>
  }

  pObj->acc_is_enabled = 0;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2229      	movs	r2, #41	; 0x29
 8002e3c:	2100      	movs	r1, #0
 8002e3e:	5499      	strb	r1, [r3, r2]

  return LIS2DW12_OK;
 8002e40:	2300      	movs	r3, #0
}
 8002e42:	0018      	movs	r0, r3
 8002e44:	46bd      	mov	sp, r7
 8002e46:	b002      	add	sp, #8
 8002e48:	bd80      	pop	{r7, pc}
	...

08002e4c <LIS2DW12_ACC_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_GetSensitivity(LIS2DW12_Object_t *pObj, float *Sensitivity)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b084      	sub	sp, #16
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
 8002e54:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2DW12_OK;
 8002e56:	2300      	movs	r3, #0
 8002e58:	60fb      	str	r3, [r7, #12]
  lis2dw12_fs_t full_scale;
  lis2dw12_mode_t mode;

  /* Read actual full scale selection from sensor. */
  if (lis2dw12_full_scale_get(&(pObj->Ctx), &full_scale) != LIS2DW12_OK)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	331c      	adds	r3, #28
 8002e5e:	220b      	movs	r2, #11
 8002e60:	18ba      	adds	r2, r7, r2
 8002e62:	0011      	movs	r1, r2
 8002e64:	0018      	movs	r0, r3
 8002e66:	f000 ff19 	bl	8003c9c <lis2dw12_full_scale_get>
 8002e6a:	1e03      	subs	r3, r0, #0
 8002e6c:	d002      	beq.n	8002e74 <LIS2DW12_ACC_GetSensitivity+0x28>
  {
    return LIS2DW12_ERROR;
 8002e6e:	2301      	movs	r3, #1
 8002e70:	425b      	negs	r3, r3
 8002e72:	e06a      	b.n	8002f4a <LIS2DW12_ACC_GetSensitivity+0xfe>
  }

  /* Read actual power mode selection from sensor. */
  if (lis2dw12_power_mode_get(&(pObj->Ctx), &mode) != LIS2DW12_OK)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	331c      	adds	r3, #28
 8002e78:	220a      	movs	r2, #10
 8002e7a:	18ba      	adds	r2, r7, r2
 8002e7c:	0011      	movs	r1, r2
 8002e7e:	0018      	movs	r0, r3
 8002e80:	f000 fd60 	bl	8003944 <lis2dw12_power_mode_get>
 8002e84:	1e03      	subs	r3, r0, #0
 8002e86:	d002      	beq.n	8002e8e <LIS2DW12_ACC_GetSensitivity+0x42>
  {
    return LIS2DW12_ERROR;
 8002e88:	2301      	movs	r3, #1
 8002e8a:	425b      	negs	r3, r3
 8002e8c:	e05d      	b.n	8002f4a <LIS2DW12_ACC_GetSensitivity+0xfe>
  }

  switch (mode)
 8002e8e:	230a      	movs	r3, #10
 8002e90:	18fb      	adds	r3, r7, r3
 8002e92:	781b      	ldrb	r3, [r3, #0]
 8002e94:	2b1b      	cmp	r3, #27
 8002e96:	d850      	bhi.n	8002f3a <LIS2DW12_ACC_GetSensitivity+0xee>
 8002e98:	009a      	lsls	r2, r3, #2
 8002e9a:	4b2e      	ldr	r3, [pc, #184]	; (8002f54 <LIS2DW12_ACC_GetSensitivity+0x108>)
 8002e9c:	18d3      	adds	r3, r2, r3
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	469f      	mov	pc, r3
  {
    case LIS2DW12_CONT_LOW_PWR_12bit:
    case LIS2DW12_SINGLE_LOW_PWR_12bit:
    case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
    case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
      switch (full_scale)
 8002ea2:	230b      	movs	r3, #11
 8002ea4:	18fb      	adds	r3, r7, r3
 8002ea6:	781b      	ldrb	r3, [r3, #0]
 8002ea8:	2b03      	cmp	r3, #3
 8002eaa:	d014      	beq.n	8002ed6 <LIS2DW12_ACC_GetSensitivity+0x8a>
 8002eac:	dc17      	bgt.n	8002ede <LIS2DW12_ACC_GetSensitivity+0x92>
 8002eae:	2b02      	cmp	r3, #2
 8002eb0:	d00d      	beq.n	8002ece <LIS2DW12_ACC_GetSensitivity+0x82>
 8002eb2:	dc14      	bgt.n	8002ede <LIS2DW12_ACC_GetSensitivity+0x92>
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d002      	beq.n	8002ebe <LIS2DW12_ACC_GetSensitivity+0x72>
 8002eb8:	2b01      	cmp	r3, #1
 8002eba:	d004      	beq.n	8002ec6 <LIS2DW12_ACC_GetSensitivity+0x7a>
 8002ebc:	e00f      	b.n	8002ede <LIS2DW12_ACC_GetSensitivity+0x92>
      {
        case LIS2DW12_2g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_2G_LOPOW1_MODE;
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	4a25      	ldr	r2, [pc, #148]	; (8002f58 <LIS2DW12_ACC_GetSensitivity+0x10c>)
 8002ec2:	601a      	str	r2, [r3, #0]
          break;
 8002ec4:	e012      	b.n	8002eec <LIS2DW12_ACC_GetSensitivity+0xa0>

        case LIS2DW12_4g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_4G_LOPOW1_MODE;
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	4a24      	ldr	r2, [pc, #144]	; (8002f5c <LIS2DW12_ACC_GetSensitivity+0x110>)
 8002eca:	601a      	str	r2, [r3, #0]
          break;
 8002ecc:	e00e      	b.n	8002eec <LIS2DW12_ACC_GetSensitivity+0xa0>

        case LIS2DW12_8g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_8G_LOPOW1_MODE;
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	4a23      	ldr	r2, [pc, #140]	; (8002f60 <LIS2DW12_ACC_GetSensitivity+0x114>)
 8002ed2:	601a      	str	r2, [r3, #0]
          break;
 8002ed4:	e00a      	b.n	8002eec <LIS2DW12_ACC_GetSensitivity+0xa0>

        case LIS2DW12_16g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_16G_LOPOW1_MODE;
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	4a22      	ldr	r2, [pc, #136]	; (8002f64 <LIS2DW12_ACC_GetSensitivity+0x118>)
 8002eda:	601a      	str	r2, [r3, #0]
          break;
 8002edc:	e006      	b.n	8002eec <LIS2DW12_ACC_GetSensitivity+0xa0>

        default:
          *Sensitivity = -1.0f;
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	4a21      	ldr	r2, [pc, #132]	; (8002f68 <LIS2DW12_ACC_GetSensitivity+0x11c>)
 8002ee2:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 8002ee4:	2301      	movs	r3, #1
 8002ee6:	425b      	negs	r3, r3
 8002ee8:	60fb      	str	r3, [r7, #12]
          break;
 8002eea:	46c0      	nop			; (mov r8, r8)
      }
      break;
 8002eec:	e02c      	b.n	8002f48 <LIS2DW12_ACC_GetSensitivity+0xfc>
    case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_3:
    case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_2:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
      switch (full_scale)
 8002eee:	230b      	movs	r3, #11
 8002ef0:	18fb      	adds	r3, r7, r3
 8002ef2:	781b      	ldrb	r3, [r3, #0]
 8002ef4:	2b03      	cmp	r3, #3
 8002ef6:	d014      	beq.n	8002f22 <LIS2DW12_ACC_GetSensitivity+0xd6>
 8002ef8:	dc17      	bgt.n	8002f2a <LIS2DW12_ACC_GetSensitivity+0xde>
 8002efa:	2b02      	cmp	r3, #2
 8002efc:	d00d      	beq.n	8002f1a <LIS2DW12_ACC_GetSensitivity+0xce>
 8002efe:	dc14      	bgt.n	8002f2a <LIS2DW12_ACC_GetSensitivity+0xde>
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d002      	beq.n	8002f0a <LIS2DW12_ACC_GetSensitivity+0xbe>
 8002f04:	2b01      	cmp	r3, #1
 8002f06:	d004      	beq.n	8002f12 <LIS2DW12_ACC_GetSensitivity+0xc6>
 8002f08:	e00f      	b.n	8002f2a <LIS2DW12_ACC_GetSensitivity+0xde>
      {
        case LIS2DW12_2g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_2G_OTHER_MODES;
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	4a17      	ldr	r2, [pc, #92]	; (8002f6c <LIS2DW12_ACC_GetSensitivity+0x120>)
 8002f0e:	601a      	str	r2, [r3, #0]
          break;
 8002f10:	e012      	b.n	8002f38 <LIS2DW12_ACC_GetSensitivity+0xec>

        case LIS2DW12_4g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_4G_OTHER_MODES;
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	4a16      	ldr	r2, [pc, #88]	; (8002f70 <LIS2DW12_ACC_GetSensitivity+0x124>)
 8002f16:	601a      	str	r2, [r3, #0]
          break;
 8002f18:	e00e      	b.n	8002f38 <LIS2DW12_ACC_GetSensitivity+0xec>

        case LIS2DW12_8g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_8G_OTHER_MODES;
 8002f1a:	683b      	ldr	r3, [r7, #0]
 8002f1c:	4a0e      	ldr	r2, [pc, #56]	; (8002f58 <LIS2DW12_ACC_GetSensitivity+0x10c>)
 8002f1e:	601a      	str	r2, [r3, #0]
          break;
 8002f20:	e00a      	b.n	8002f38 <LIS2DW12_ACC_GetSensitivity+0xec>

        case LIS2DW12_16g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_16G_OTHER_MODES;
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	4a0d      	ldr	r2, [pc, #52]	; (8002f5c <LIS2DW12_ACC_GetSensitivity+0x110>)
 8002f26:	601a      	str	r2, [r3, #0]
          break;
 8002f28:	e006      	b.n	8002f38 <LIS2DW12_ACC_GetSensitivity+0xec>

        default:
          *Sensitivity = -1.0f;
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	4a0e      	ldr	r2, [pc, #56]	; (8002f68 <LIS2DW12_ACC_GetSensitivity+0x11c>)
 8002f2e:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 8002f30:	2301      	movs	r3, #1
 8002f32:	425b      	negs	r3, r3
 8002f34:	60fb      	str	r3, [r7, #12]
          break;
 8002f36:	46c0      	nop			; (mov r8, r8)
      }
      break;
 8002f38:	e006      	b.n	8002f48 <LIS2DW12_ACC_GetSensitivity+0xfc>

    default:
      *Sensitivity = -1.0f;
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	4a0a      	ldr	r2, [pc, #40]	; (8002f68 <LIS2DW12_ACC_GetSensitivity+0x11c>)
 8002f3e:	601a      	str	r2, [r3, #0]
      ret = LIS2DW12_ERROR;
 8002f40:	2301      	movs	r3, #1
 8002f42:	425b      	negs	r3, r3
 8002f44:	60fb      	str	r3, [r7, #12]
      break;
 8002f46:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 8002f48:	68fb      	ldr	r3, [r7, #12]
}
 8002f4a:	0018      	movs	r0, r3
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	b004      	add	sp, #16
 8002f50:	bd80      	pop	{r7, pc}
 8002f52:	46c0      	nop			; (mov r8, r8)
 8002f54:	08015c30 	.word	0x08015c30
 8002f58:	3f79db23 	.word	0x3f79db23
 8002f5c:	3ff9db23 	.word	0x3ff9db23
 8002f60:	4079db23 	.word	0x4079db23
 8002f64:	40f9db23 	.word	0x40f9db23
 8002f68:	bf800000 	.word	0xbf800000
 8002f6c:	3e79db23 	.word	0x3e79db23
 8002f70:	3ef9db23 	.word	0x3ef9db23

08002f74 <LIS2DW12_ACC_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_GetOutputDataRate(LIS2DW12_Object_t *pObj, float *Odr)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b084      	sub	sp, #16
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
 8002f7c:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2DW12_OK;
 8002f7e:	2300      	movs	r3, #0
 8002f80:	60fb      	str	r3, [r7, #12]
  lis2dw12_odr_t odr_low_level;
  lis2dw12_mode_t mode;

  /* Get current output data rate. */
  if (lis2dw12_data_rate_get(&(pObj->Ctx), &odr_low_level) != LIS2DW12_OK)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	331c      	adds	r3, #28
 8002f86:	220b      	movs	r2, #11
 8002f88:	18ba      	adds	r2, r7, r2
 8002f8a:	0011      	movs	r1, r2
 8002f8c:	0018      	movs	r0, r3
 8002f8e:	f000 fdbb 	bl	8003b08 <lis2dw12_data_rate_get>
 8002f92:	1e03      	subs	r3, r0, #0
 8002f94:	d002      	beq.n	8002f9c <LIS2DW12_ACC_GetOutputDataRate+0x28>
  {
    return LIS2DW12_ERROR;
 8002f96:	2301      	movs	r3, #1
 8002f98:	425b      	negs	r3, r3
 8002f9a:	e09f      	b.n	80030dc <LIS2DW12_ACC_GetOutputDataRate+0x168>
  }

  /* Read actual power mode selection from sensor. */
  if (lis2dw12_power_mode_get(&(pObj->Ctx), &mode) != LIS2DW12_OK)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	331c      	adds	r3, #28
 8002fa0:	220a      	movs	r2, #10
 8002fa2:	18ba      	adds	r2, r7, r2
 8002fa4:	0011      	movs	r1, r2
 8002fa6:	0018      	movs	r0, r3
 8002fa8:	f000 fccc 	bl	8003944 <lis2dw12_power_mode_get>
 8002fac:	1e03      	subs	r3, r0, #0
 8002fae:	d002      	beq.n	8002fb6 <LIS2DW12_ACC_GetOutputDataRate+0x42>
  {
    return LIS2DW12_ERROR;
 8002fb0:	2301      	movs	r3, #1
 8002fb2:	425b      	negs	r3, r3
 8002fb4:	e092      	b.n	80030dc <LIS2DW12_ACC_GetOutputDataRate+0x168>
  }

  switch (odr_low_level)
 8002fb6:	230b      	movs	r3, #11
 8002fb8:	18fb      	adds	r3, r7, r3
 8002fba:	781b      	ldrb	r3, [r3, #0]
 8002fbc:	2b32      	cmp	r3, #50	; 0x32
 8002fbe:	d900      	bls.n	8002fc2 <LIS2DW12_ACC_GetOutputDataRate+0x4e>
 8002fc0:	e084      	b.n	80030cc <LIS2DW12_ACC_GetOutputDataRate+0x158>
 8002fc2:	009a      	lsls	r2, r3, #2
 8002fc4:	4b47      	ldr	r3, [pc, #284]	; (80030e4 <LIS2DW12_ACC_GetOutputDataRate+0x170>)
 8002fc6:	18d3      	adds	r3, r2, r3
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	469f      	mov	pc, r3
  {
    case LIS2DW12_XL_ODR_OFF:
    case LIS2DW12_XL_SET_SW_TRIG:
    case LIS2DW12_XL_SET_PIN_TRIG:
      *Odr = 0.0f;
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	2200      	movs	r2, #0
 8002fd0:	601a      	str	r2, [r3, #0]
      break;
 8002fd2:	e082      	b.n	80030da <LIS2DW12_ACC_GetOutputDataRate+0x166>

    case LIS2DW12_XL_ODR_1Hz6_LP_ONLY:
      switch (mode)
 8002fd4:	230a      	movs	r3, #10
 8002fd6:	18fb      	adds	r3, r7, r3
 8002fd8:	781b      	ldrb	r3, [r3, #0]
 8002fda:	2b1b      	cmp	r3, #27
 8002fdc:	d80c      	bhi.n	8002ff8 <LIS2DW12_ACC_GetOutputDataRate+0x84>
 8002fde:	009a      	lsls	r2, r3, #2
 8002fe0:	4b41      	ldr	r3, [pc, #260]	; (80030e8 <LIS2DW12_ACC_GetOutputDataRate+0x174>)
 8002fe2:	18d3      	adds	r3, r2, r3
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	469f      	mov	pc, r3
      {
        case LIS2DW12_HIGH_PERFORMANCE:
        case LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE:
          *Odr = 12.5f;
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	4a40      	ldr	r2, [pc, #256]	; (80030ec <LIS2DW12_ACC_GetOutputDataRate+0x178>)
 8002fec:	601a      	str	r2, [r3, #0]
          break;
 8002fee:	e00a      	b.n	8003006 <LIS2DW12_ACC_GetOutputDataRate+0x92>
        case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
        case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
          *Odr = 1.6f;
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	4a3f      	ldr	r2, [pc, #252]	; (80030f0 <LIS2DW12_ACC_GetOutputDataRate+0x17c>)
 8002ff4:	601a      	str	r2, [r3, #0]
          break;
 8002ff6:	e006      	b.n	8003006 <LIS2DW12_ACC_GetOutputDataRate+0x92>

        default:
          *Odr = -1.0f;
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	4a3e      	ldr	r2, [pc, #248]	; (80030f4 <LIS2DW12_ACC_GetOutputDataRate+0x180>)
 8002ffc:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 8002ffe:	2301      	movs	r3, #1
 8003000:	425b      	negs	r3, r3
 8003002:	60fb      	str	r3, [r7, #12]
          break;
 8003004:	46c0      	nop			; (mov r8, r8)
      }
      break;
 8003006:	e068      	b.n	80030da <LIS2DW12_ACC_GetOutputDataRate+0x166>

    case LIS2DW12_XL_ODR_12Hz5:
      *Odr = 12.5f;
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	4a38      	ldr	r2, [pc, #224]	; (80030ec <LIS2DW12_ACC_GetOutputDataRate+0x178>)
 800300c:	601a      	str	r2, [r3, #0]
      break;
 800300e:	e064      	b.n	80030da <LIS2DW12_ACC_GetOutputDataRate+0x166>

    case LIS2DW12_XL_ODR_25Hz:
      *Odr = 25.0f;
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	4a39      	ldr	r2, [pc, #228]	; (80030f8 <LIS2DW12_ACC_GetOutputDataRate+0x184>)
 8003014:	601a      	str	r2, [r3, #0]
      break;
 8003016:	e060      	b.n	80030da <LIS2DW12_ACC_GetOutputDataRate+0x166>

    case LIS2DW12_XL_ODR_50Hz:
      *Odr = 50.0f;
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	4a38      	ldr	r2, [pc, #224]	; (80030fc <LIS2DW12_ACC_GetOutputDataRate+0x188>)
 800301c:	601a      	str	r2, [r3, #0]
      break;
 800301e:	e05c      	b.n	80030da <LIS2DW12_ACC_GetOutputDataRate+0x166>

    case LIS2DW12_XL_ODR_100Hz:
      *Odr = 100.0f;
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	4a37      	ldr	r2, [pc, #220]	; (8003100 <LIS2DW12_ACC_GetOutputDataRate+0x18c>)
 8003024:	601a      	str	r2, [r3, #0]
      break;
 8003026:	e058      	b.n	80030da <LIS2DW12_ACC_GetOutputDataRate+0x166>

    case LIS2DW12_XL_ODR_200Hz:
      *Odr = 200.0f;
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	4a36      	ldr	r2, [pc, #216]	; (8003104 <LIS2DW12_ACC_GetOutputDataRate+0x190>)
 800302c:	601a      	str	r2, [r3, #0]
      break;
 800302e:	e054      	b.n	80030da <LIS2DW12_ACC_GetOutputDataRate+0x166>

    case LIS2DW12_XL_ODR_400Hz:
      switch (mode)
 8003030:	230a      	movs	r3, #10
 8003032:	18fb      	adds	r3, r7, r3
 8003034:	781b      	ldrb	r3, [r3, #0]
 8003036:	2b1b      	cmp	r3, #27
 8003038:	d80c      	bhi.n	8003054 <LIS2DW12_ACC_GetOutputDataRate+0xe0>
 800303a:	009a      	lsls	r2, r3, #2
 800303c:	4b32      	ldr	r3, [pc, #200]	; (8003108 <LIS2DW12_ACC_GetOutputDataRate+0x194>)
 800303e:	18d3      	adds	r3, r2, r3
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	469f      	mov	pc, r3
      {
        case LIS2DW12_HIGH_PERFORMANCE:
        case LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE:
          *Odr = 400.0f;
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	4a31      	ldr	r2, [pc, #196]	; (800310c <LIS2DW12_ACC_GetOutputDataRate+0x198>)
 8003048:	601a      	str	r2, [r3, #0]
          break;
 800304a:	e00a      	b.n	8003062 <LIS2DW12_ACC_GetOutputDataRate+0xee>
        case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
        case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
          *Odr = 200.0f;
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	4a2d      	ldr	r2, [pc, #180]	; (8003104 <LIS2DW12_ACC_GetOutputDataRate+0x190>)
 8003050:	601a      	str	r2, [r3, #0]
          break;
 8003052:	e006      	b.n	8003062 <LIS2DW12_ACC_GetOutputDataRate+0xee>

        default:
          *Odr = -1.0f;
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	4a27      	ldr	r2, [pc, #156]	; (80030f4 <LIS2DW12_ACC_GetOutputDataRate+0x180>)
 8003058:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 800305a:	2301      	movs	r3, #1
 800305c:	425b      	negs	r3, r3
 800305e:	60fb      	str	r3, [r7, #12]
          break;
 8003060:	46c0      	nop			; (mov r8, r8)
      }
      break;
 8003062:	e03a      	b.n	80030da <LIS2DW12_ACC_GetOutputDataRate+0x166>

    case LIS2DW12_XL_ODR_800Hz:
      switch (mode)
 8003064:	230a      	movs	r3, #10
 8003066:	18fb      	adds	r3, r7, r3
 8003068:	781b      	ldrb	r3, [r3, #0]
 800306a:	2b1b      	cmp	r3, #27
 800306c:	d80c      	bhi.n	8003088 <LIS2DW12_ACC_GetOutputDataRate+0x114>
 800306e:	009a      	lsls	r2, r3, #2
 8003070:	4b27      	ldr	r3, [pc, #156]	; (8003110 <LIS2DW12_ACC_GetOutputDataRate+0x19c>)
 8003072:	18d3      	adds	r3, r2, r3
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	469f      	mov	pc, r3
      {
        case LIS2DW12_HIGH_PERFORMANCE:
        case LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE:
          *Odr = 800.0f;
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	4a26      	ldr	r2, [pc, #152]	; (8003114 <LIS2DW12_ACC_GetOutputDataRate+0x1a0>)
 800307c:	601a      	str	r2, [r3, #0]
          break;
 800307e:	e00a      	b.n	8003096 <LIS2DW12_ACC_GetOutputDataRate+0x122>
        case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
        case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
          *Odr = 200.0f;
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	4a20      	ldr	r2, [pc, #128]	; (8003104 <LIS2DW12_ACC_GetOutputDataRate+0x190>)
 8003084:	601a      	str	r2, [r3, #0]
          break;
 8003086:	e006      	b.n	8003096 <LIS2DW12_ACC_GetOutputDataRate+0x122>

        default:
          *Odr = -1.0f;
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	4a1a      	ldr	r2, [pc, #104]	; (80030f4 <LIS2DW12_ACC_GetOutputDataRate+0x180>)
 800308c:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 800308e:	2301      	movs	r3, #1
 8003090:	425b      	negs	r3, r3
 8003092:	60fb      	str	r3, [r7, #12]
          break;
 8003094:	46c0      	nop			; (mov r8, r8)
      }
      break;
 8003096:	e020      	b.n	80030da <LIS2DW12_ACC_GetOutputDataRate+0x166>

    case LIS2DW12_XL_ODR_1k6Hz:
      switch (mode)
 8003098:	230a      	movs	r3, #10
 800309a:	18fb      	adds	r3, r7, r3
 800309c:	781b      	ldrb	r3, [r3, #0]
 800309e:	2b1b      	cmp	r3, #27
 80030a0:	d80c      	bhi.n	80030bc <LIS2DW12_ACC_GetOutputDataRate+0x148>
 80030a2:	009a      	lsls	r2, r3, #2
 80030a4:	4b1c      	ldr	r3, [pc, #112]	; (8003118 <LIS2DW12_ACC_GetOutputDataRate+0x1a4>)
 80030a6:	18d3      	adds	r3, r2, r3
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	469f      	mov	pc, r3
      {
        case LIS2DW12_HIGH_PERFORMANCE:
        case LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE:
          *Odr = 1600.0f;
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	4a1b      	ldr	r2, [pc, #108]	; (800311c <LIS2DW12_ACC_GetOutputDataRate+0x1a8>)
 80030b0:	601a      	str	r2, [r3, #0]
          break;
 80030b2:	e00a      	b.n	80030ca <LIS2DW12_ACC_GetOutputDataRate+0x156>
        case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
        case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
          *Odr = 200.0f;
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	4a13      	ldr	r2, [pc, #76]	; (8003104 <LIS2DW12_ACC_GetOutputDataRate+0x190>)
 80030b8:	601a      	str	r2, [r3, #0]
          break;
 80030ba:	e006      	b.n	80030ca <LIS2DW12_ACC_GetOutputDataRate+0x156>

        default:
          *Odr = -1.0f;
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	4a0d      	ldr	r2, [pc, #52]	; (80030f4 <LIS2DW12_ACC_GetOutputDataRate+0x180>)
 80030c0:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 80030c2:	2301      	movs	r3, #1
 80030c4:	425b      	negs	r3, r3
 80030c6:	60fb      	str	r3, [r7, #12]
          break;
 80030c8:	46c0      	nop			; (mov r8, r8)
      }
      break;
 80030ca:	e006      	b.n	80030da <LIS2DW12_ACC_GetOutputDataRate+0x166>

    default:
      *Odr = -1.0f;
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	4a09      	ldr	r2, [pc, #36]	; (80030f4 <LIS2DW12_ACC_GetOutputDataRate+0x180>)
 80030d0:	601a      	str	r2, [r3, #0]
      ret = LIS2DW12_ERROR;
 80030d2:	2301      	movs	r3, #1
 80030d4:	425b      	negs	r3, r3
 80030d6:	60fb      	str	r3, [r7, #12]
      break;
 80030d8:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 80030da:	68fb      	ldr	r3, [r7, #12]
}
 80030dc:	0018      	movs	r0, r3
 80030de:	46bd      	mov	sp, r7
 80030e0:	b004      	add	sp, #16
 80030e2:	bd80      	pop	{r7, pc}
 80030e4:	08015ca0 	.word	0x08015ca0
 80030e8:	08015d6c 	.word	0x08015d6c
 80030ec:	41480000 	.word	0x41480000
 80030f0:	3fcccccd 	.word	0x3fcccccd
 80030f4:	bf800000 	.word	0xbf800000
 80030f8:	41c80000 	.word	0x41c80000
 80030fc:	42480000 	.word	0x42480000
 8003100:	42c80000 	.word	0x42c80000
 8003104:	43480000 	.word	0x43480000
 8003108:	08015ddc 	.word	0x08015ddc
 800310c:	43c80000 	.word	0x43c80000
 8003110:	08015e4c 	.word	0x08015e4c
 8003114:	44480000 	.word	0x44480000
 8003118:	08015ebc 	.word	0x08015ebc
 800311c:	44c80000 	.word	0x44c80000

08003120 <LIS2DW12_ACC_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_SetOutputDataRate(LIS2DW12_Object_t *pObj, float Odr)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	b082      	sub	sp, #8
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
 8003128:	6039      	str	r1, [r7, #0]
  /* By default we use High Performance mode and Low Noise disabled */
  return LIS2DW12_ACC_SetOutputDataRate_With_Mode(pObj, Odr, LIS2DW12_HIGH_PERFORMANCE_MODE, LIS2DW12_LOW_NOISE_DISABLE);
 800312a:	6839      	ldr	r1, [r7, #0]
 800312c:	6878      	ldr	r0, [r7, #4]
 800312e:	2300      	movs	r3, #0
 8003130:	2200      	movs	r2, #0
 8003132:	f000 f805 	bl	8003140 <LIS2DW12_ACC_SetOutputDataRate_With_Mode>
 8003136:	0003      	movs	r3, r0
}
 8003138:	0018      	movs	r0, r3
 800313a:	46bd      	mov	sp, r7
 800313c:	b002      	add	sp, #8
 800313e:	bd80      	pop	{r7, pc}

08003140 <LIS2DW12_ACC_SetOutputDataRate_With_Mode>:
  * @param  Noise the low noise option
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_SetOutputDataRate_With_Mode(LIS2DW12_Object_t *pObj, float Odr, LIS2DW12_Operating_Mode_t Mode,
                                                 LIS2DW12_Low_Noise_t Noise)
{
 8003140:	b590      	push	{r4, r7, lr}
 8003142:	b085      	sub	sp, #20
 8003144:	af00      	add	r7, sp, #0
 8003146:	60f8      	str	r0, [r7, #12]
 8003148:	60b9      	str	r1, [r7, #8]
 800314a:	0019      	movs	r1, r3
 800314c:	1dfb      	adds	r3, r7, #7
 800314e:	701a      	strb	r2, [r3, #0]
 8003150:	1dbb      	adds	r3, r7, #6
 8003152:	1c0a      	adds	r2, r1, #0
 8003154:	701a      	strb	r2, [r3, #0]
  /* Check if the component is enabled */
  if (pObj->acc_is_enabled == 1U)
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	2229      	movs	r2, #41	; 0x29
 800315a:	5c9b      	ldrb	r3, [r3, r2]
 800315c:	2b01      	cmp	r3, #1
 800315e:	d10a      	bne.n	8003176 <LIS2DW12_ACC_SetOutputDataRate_With_Mode+0x36>
  {
    return LIS2DW12_ACC_SetOutputDataRate_When_Enabled(pObj, Odr, Mode, Noise);
 8003160:	1dbb      	adds	r3, r7, #6
 8003162:	781c      	ldrb	r4, [r3, #0]
 8003164:	1dfb      	adds	r3, r7, #7
 8003166:	781a      	ldrb	r2, [r3, #0]
 8003168:	68b9      	ldr	r1, [r7, #8]
 800316a:	68f8      	ldr	r0, [r7, #12]
 800316c:	0023      	movs	r3, r4
 800316e:	f000 f973 	bl	8003458 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled>
 8003172:	0003      	movs	r3, r0
 8003174:	e009      	b.n	800318a <LIS2DW12_ACC_SetOutputDataRate_With_Mode+0x4a>
  }
  else
  {
    return LIS2DW12_ACC_SetOutputDataRate_When_Disabled(pObj, Odr, Mode, Noise);
 8003176:	1dbb      	adds	r3, r7, #6
 8003178:	781c      	ldrb	r4, [r3, #0]
 800317a:	1dfb      	adds	r3, r7, #7
 800317c:	781a      	ldrb	r2, [r3, #0]
 800317e:	68b9      	ldr	r1, [r7, #8]
 8003180:	68f8      	ldr	r0, [r7, #12]
 8003182:	0023      	movs	r3, r4
 8003184:	f000 fa7c 	bl	8003680 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled>
 8003188:	0003      	movs	r3, r0
  }
}
 800318a:	0018      	movs	r0, r3
 800318c:	46bd      	mov	sp, r7
 800318e:	b005      	add	sp, #20
 8003190:	bd90      	pop	{r4, r7, pc}

08003192 <LIS2DW12_ACC_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_GetFullScale(LIS2DW12_Object_t *pObj, int32_t *FullScale)
{
 8003192:	b580      	push	{r7, lr}
 8003194:	b084      	sub	sp, #16
 8003196:	af00      	add	r7, sp, #0
 8003198:	6078      	str	r0, [r7, #4]
 800319a:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2DW12_OK;
 800319c:	2300      	movs	r3, #0
 800319e:	60fb      	str	r3, [r7, #12]
  lis2dw12_fs_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lis2dw12_full_scale_get(&(pObj->Ctx), &fs_low_level) != LIS2DW12_OK)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	331c      	adds	r3, #28
 80031a4:	220b      	movs	r2, #11
 80031a6:	18ba      	adds	r2, r7, r2
 80031a8:	0011      	movs	r1, r2
 80031aa:	0018      	movs	r0, r3
 80031ac:	f000 fd76 	bl	8003c9c <lis2dw12_full_scale_get>
 80031b0:	1e03      	subs	r3, r0, #0
 80031b2:	d002      	beq.n	80031ba <LIS2DW12_ACC_GetFullScale+0x28>
  {
    return LIS2DW12_ERROR;
 80031b4:	2301      	movs	r3, #1
 80031b6:	425b      	negs	r3, r3
 80031b8:	e026      	b.n	8003208 <LIS2DW12_ACC_GetFullScale+0x76>
  }

  switch (fs_low_level)
 80031ba:	230b      	movs	r3, #11
 80031bc:	18fb      	adds	r3, r7, r3
 80031be:	781b      	ldrb	r3, [r3, #0]
 80031c0:	2b03      	cmp	r3, #3
 80031c2:	d014      	beq.n	80031ee <LIS2DW12_ACC_GetFullScale+0x5c>
 80031c4:	dc17      	bgt.n	80031f6 <LIS2DW12_ACC_GetFullScale+0x64>
 80031c6:	2b02      	cmp	r3, #2
 80031c8:	d00d      	beq.n	80031e6 <LIS2DW12_ACC_GetFullScale+0x54>
 80031ca:	dc14      	bgt.n	80031f6 <LIS2DW12_ACC_GetFullScale+0x64>
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d002      	beq.n	80031d6 <LIS2DW12_ACC_GetFullScale+0x44>
 80031d0:	2b01      	cmp	r3, #1
 80031d2:	d004      	beq.n	80031de <LIS2DW12_ACC_GetFullScale+0x4c>
 80031d4:	e00f      	b.n	80031f6 <LIS2DW12_ACC_GetFullScale+0x64>
  {
    case LIS2DW12_2g:
      *FullScale =  2;
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	2202      	movs	r2, #2
 80031da:	601a      	str	r2, [r3, #0]
      break;
 80031dc:	e013      	b.n	8003206 <LIS2DW12_ACC_GetFullScale+0x74>

    case LIS2DW12_4g:
      *FullScale =  4;
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	2204      	movs	r2, #4
 80031e2:	601a      	str	r2, [r3, #0]
      break;
 80031e4:	e00f      	b.n	8003206 <LIS2DW12_ACC_GetFullScale+0x74>

    case LIS2DW12_8g:
      *FullScale =  8;
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	2208      	movs	r2, #8
 80031ea:	601a      	str	r2, [r3, #0]
      break;
 80031ec:	e00b      	b.n	8003206 <LIS2DW12_ACC_GetFullScale+0x74>

    case LIS2DW12_16g:
      *FullScale = 16;
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	2210      	movs	r2, #16
 80031f2:	601a      	str	r2, [r3, #0]
      break;
 80031f4:	e007      	b.n	8003206 <LIS2DW12_ACC_GetFullScale+0x74>

    default:
      *FullScale = -1;
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	2201      	movs	r2, #1
 80031fa:	4252      	negs	r2, r2
 80031fc:	601a      	str	r2, [r3, #0]
      ret = LIS2DW12_ERROR;
 80031fe:	2301      	movs	r3, #1
 8003200:	425b      	negs	r3, r3
 8003202:	60fb      	str	r3, [r7, #12]
      break;
 8003204:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 8003206:	68fb      	ldr	r3, [r7, #12]
}
 8003208:	0018      	movs	r0, r3
 800320a:	46bd      	mov	sp, r7
 800320c:	b004      	add	sp, #16
 800320e:	bd80      	pop	{r7, pc}

08003210 <LIS2DW12_ACC_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_SetFullScale(LIS2DW12_Object_t *pObj, int32_t FullScale)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	b084      	sub	sp, #16
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
 8003218:	6039      	str	r1, [r7, #0]
  lis2dw12_fs_t new_fs;

  /* Seems like MISRA C-2012 rule 14.3a violation but only from single file statical analysis point of view because
     the parameter passed to the function is not known at the moment of analysis */
  new_fs = (FullScale <= 2) ? LIS2DW12_2g
           : (FullScale <= 4) ? LIS2DW12_4g
 800321a:	683b      	ldr	r3, [r7, #0]
 800321c:	2b02      	cmp	r3, #2
 800321e:	dd0b      	ble.n	8003238 <LIS2DW12_ACC_SetFullScale+0x28>
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	2b04      	cmp	r3, #4
 8003224:	dd06      	ble.n	8003234 <LIS2DW12_ACC_SetFullScale+0x24>
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	2b08      	cmp	r3, #8
 800322a:	dc01      	bgt.n	8003230 <LIS2DW12_ACC_SetFullScale+0x20>
 800322c:	2302      	movs	r3, #2
 800322e:	e004      	b.n	800323a <LIS2DW12_ACC_SetFullScale+0x2a>
 8003230:	2303      	movs	r3, #3
 8003232:	e002      	b.n	800323a <LIS2DW12_ACC_SetFullScale+0x2a>
 8003234:	2301      	movs	r3, #1
 8003236:	e000      	b.n	800323a <LIS2DW12_ACC_SetFullScale+0x2a>
 8003238:	2300      	movs	r3, #0
  new_fs = (FullScale <= 2) ? LIS2DW12_2g
 800323a:	210f      	movs	r1, #15
 800323c:	187a      	adds	r2, r7, r1
 800323e:	7013      	strb	r3, [r2, #0]
           : (FullScale <= 8) ? LIS2DW12_8g
           :                    LIS2DW12_16g;

  if (lis2dw12_full_scale_set(&(pObj->Ctx), new_fs) != LIS2DW12_OK)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	331c      	adds	r3, #28
 8003244:	001a      	movs	r2, r3
 8003246:	187b      	adds	r3, r7, r1
 8003248:	781b      	ldrb	r3, [r3, #0]
 800324a:	0019      	movs	r1, r3
 800324c:	0010      	movs	r0, r2
 800324e:	f000 fcf5 	bl	8003c3c <lis2dw12_full_scale_set>
 8003252:	1e03      	subs	r3, r0, #0
 8003254:	d002      	beq.n	800325c <LIS2DW12_ACC_SetFullScale+0x4c>
  {
    return LIS2DW12_ERROR;
 8003256:	2301      	movs	r3, #1
 8003258:	425b      	negs	r3, r3
 800325a:	e000      	b.n	800325e <LIS2DW12_ACC_SetFullScale+0x4e>
  }

  return LIS2DW12_OK;
 800325c:	2300      	movs	r3, #0
}
 800325e:	0018      	movs	r0, r3
 8003260:	46bd      	mov	sp, r7
 8003262:	b004      	add	sp, #16
 8003264:	bd80      	pop	{r7, pc}
	...

08003268 <LIS2DW12_ACC_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_GetAxesRaw(LIS2DW12_Object_t *pObj, LIS2DW12_AxesRaw_t *Value)
{
 8003268:	b580      	push	{r7, lr}
 800326a:	b086      	sub	sp, #24
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
 8003270:	6039      	str	r1, [r7, #0]
  lis2dw12_axis3bit16_t data_raw;
  lis2dw12_mode_t mode;
  int32_t ret = LIS2DW12_OK;
 8003272:	2300      	movs	r3, #0
 8003274:	617b      	str	r3, [r7, #20]

  /* Read actual power mode selection from sensor. */
  if (lis2dw12_power_mode_get(&(pObj->Ctx), &mode) != LIS2DW12_OK)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	331c      	adds	r3, #28
 800327a:	220b      	movs	r2, #11
 800327c:	18ba      	adds	r2, r7, r2
 800327e:	0011      	movs	r1, r2
 8003280:	0018      	movs	r0, r3
 8003282:	f000 fb5f 	bl	8003944 <lis2dw12_power_mode_get>
 8003286:	1e03      	subs	r3, r0, #0
 8003288:	d002      	beq.n	8003290 <LIS2DW12_ACC_GetAxesRaw+0x28>
  {
    return LIS2DW12_ERROR;
 800328a:	2301      	movs	r3, #1
 800328c:	425b      	negs	r3, r3
 800328e:	e05f      	b.n	8003350 <LIS2DW12_ACC_GetAxesRaw+0xe8>
  }

  /* Read raw data values. */
  if (lis2dw12_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LIS2DW12_OK)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	331c      	adds	r3, #28
 8003294:	220c      	movs	r2, #12
 8003296:	18ba      	adds	r2, r7, r2
 8003298:	0011      	movs	r1, r2
 800329a:	0018      	movs	r0, r3
 800329c:	f000 fd35 	bl	8003d0a <lis2dw12_acceleration_raw_get>
 80032a0:	1e03      	subs	r3, r0, #0
 80032a2:	d002      	beq.n	80032aa <LIS2DW12_ACC_GetAxesRaw+0x42>
  {
    return LIS2DW12_ERROR;
 80032a4:	2301      	movs	r3, #1
 80032a6:	425b      	negs	r3, r3
 80032a8:	e052      	b.n	8003350 <LIS2DW12_ACC_GetAxesRaw+0xe8>
  }

  switch (mode)
 80032aa:	230b      	movs	r3, #11
 80032ac:	18fb      	adds	r3, r7, r3
 80032ae:	781b      	ldrb	r3, [r3, #0]
 80032b0:	2b1b      	cmp	r3, #27
 80032b2:	d848      	bhi.n	8003346 <LIS2DW12_ACC_GetAxesRaw+0xde>
 80032b4:	009a      	lsls	r2, r3, #2
 80032b6:	4b28      	ldr	r3, [pc, #160]	; (8003358 <LIS2DW12_ACC_GetAxesRaw+0xf0>)
 80032b8:	18d3      	adds	r3, r2, r3
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	469f      	mov	pc, r3
    case LIS2DW12_CONT_LOW_PWR_12bit:
    case LIS2DW12_SINGLE_LOW_PWR_12bit:
    case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
    case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
      /* Data format 12 bits. */
      Value->x = (data_raw.i16bit[0] / 16);
 80032be:	230c      	movs	r3, #12
 80032c0:	18fb      	adds	r3, r7, r3
 80032c2:	2200      	movs	r2, #0
 80032c4:	5e9b      	ldrsh	r3, [r3, r2]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	da00      	bge.n	80032cc <LIS2DW12_ACC_GetAxesRaw+0x64>
 80032ca:	330f      	adds	r3, #15
 80032cc:	111b      	asrs	r3, r3, #4
 80032ce:	b21a      	sxth	r2, r3
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	801a      	strh	r2, [r3, #0]
      Value->y = (data_raw.i16bit[1] / 16);
 80032d4:	230c      	movs	r3, #12
 80032d6:	18fb      	adds	r3, r7, r3
 80032d8:	2202      	movs	r2, #2
 80032da:	5e9b      	ldrsh	r3, [r3, r2]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	da00      	bge.n	80032e2 <LIS2DW12_ACC_GetAxesRaw+0x7a>
 80032e0:	330f      	adds	r3, #15
 80032e2:	111b      	asrs	r3, r3, #4
 80032e4:	b21a      	sxth	r2, r3
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	805a      	strh	r2, [r3, #2]
      Value->z = (data_raw.i16bit[2] / 16);
 80032ea:	230c      	movs	r3, #12
 80032ec:	18fb      	adds	r3, r7, r3
 80032ee:	2204      	movs	r2, #4
 80032f0:	5e9b      	ldrsh	r3, [r3, r2]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	da00      	bge.n	80032f8 <LIS2DW12_ACC_GetAxesRaw+0x90>
 80032f6:	330f      	adds	r3, #15
 80032f8:	111b      	asrs	r3, r3, #4
 80032fa:	b21a      	sxth	r2, r3
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	809a      	strh	r2, [r3, #4]
      break;
 8003300:	e025      	b.n	800334e <LIS2DW12_ACC_GetAxesRaw+0xe6>
    case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_2:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
      /* Data format 14 bits. */
      Value->x = (data_raw.i16bit[0] / 4);
 8003302:	230c      	movs	r3, #12
 8003304:	18fb      	adds	r3, r7, r3
 8003306:	2200      	movs	r2, #0
 8003308:	5e9b      	ldrsh	r3, [r3, r2]
 800330a:	2b00      	cmp	r3, #0
 800330c:	da00      	bge.n	8003310 <LIS2DW12_ACC_GetAxesRaw+0xa8>
 800330e:	3303      	adds	r3, #3
 8003310:	109b      	asrs	r3, r3, #2
 8003312:	b21a      	sxth	r2, r3
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	801a      	strh	r2, [r3, #0]
      Value->y = (data_raw.i16bit[1] / 4);
 8003318:	230c      	movs	r3, #12
 800331a:	18fb      	adds	r3, r7, r3
 800331c:	2202      	movs	r2, #2
 800331e:	5e9b      	ldrsh	r3, [r3, r2]
 8003320:	2b00      	cmp	r3, #0
 8003322:	da00      	bge.n	8003326 <LIS2DW12_ACC_GetAxesRaw+0xbe>
 8003324:	3303      	adds	r3, #3
 8003326:	109b      	asrs	r3, r3, #2
 8003328:	b21a      	sxth	r2, r3
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	805a      	strh	r2, [r3, #2]
      Value->z = (data_raw.i16bit[2] / 4);
 800332e:	230c      	movs	r3, #12
 8003330:	18fb      	adds	r3, r7, r3
 8003332:	2204      	movs	r2, #4
 8003334:	5e9b      	ldrsh	r3, [r3, r2]
 8003336:	2b00      	cmp	r3, #0
 8003338:	da00      	bge.n	800333c <LIS2DW12_ACC_GetAxesRaw+0xd4>
 800333a:	3303      	adds	r3, #3
 800333c:	109b      	asrs	r3, r3, #2
 800333e:	b21a      	sxth	r2, r3
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	809a      	strh	r2, [r3, #4]
      break;
 8003344:	e003      	b.n	800334e <LIS2DW12_ACC_GetAxesRaw+0xe6>

    default:
      ret = LIS2DW12_ERROR;
 8003346:	2301      	movs	r3, #1
 8003348:	425b      	negs	r3, r3
 800334a:	617b      	str	r3, [r7, #20]
      break;
 800334c:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 800334e:	697b      	ldr	r3, [r7, #20]
}
 8003350:	0018      	movs	r0, r3
 8003352:	46bd      	mov	sp, r7
 8003354:	b006      	add	sp, #24
 8003356:	bd80      	pop	{r7, pc}
 8003358:	08015f2c 	.word	0x08015f2c

0800335c <LIS2DW12_ACC_GetAxes>:
  * @param  pObj the device pObj
  * @param  Acceleration pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_GetAxes(LIS2DW12_Object_t *pObj, LIS2DW12_Axes_t *Acceleration)
{
 800335c:	b590      	push	{r4, r7, lr}
 800335e:	b087      	sub	sp, #28
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
 8003364:	6039      	str	r1, [r7, #0]
  LIS2DW12_AxesRaw_t data_raw;
  float sensitivity = 0.0f;
 8003366:	2300      	movs	r3, #0
 8003368:	60fb      	str	r3, [r7, #12]

  /* Read raw data values. */
  if (LIS2DW12_ACC_GetAxesRaw(pObj, &data_raw) != LIS2DW12_OK)
 800336a:	2310      	movs	r3, #16
 800336c:	18fa      	adds	r2, r7, r3
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	0011      	movs	r1, r2
 8003372:	0018      	movs	r0, r3
 8003374:	f7ff ff78 	bl	8003268 <LIS2DW12_ACC_GetAxesRaw>
 8003378:	1e03      	subs	r3, r0, #0
 800337a:	d002      	beq.n	8003382 <LIS2DW12_ACC_GetAxes+0x26>
  {
    return LIS2DW12_ERROR;
 800337c:	2301      	movs	r3, #1
 800337e:	425b      	negs	r3, r3
 8003380:	e046      	b.n	8003410 <LIS2DW12_ACC_GetAxes+0xb4>
  }

  /* Get LIS2DW12 actual sensitivity. */
  if (LIS2DW12_ACC_GetSensitivity(pObj, &sensitivity) != LIS2DW12_OK)
 8003382:	230c      	movs	r3, #12
 8003384:	18fa      	adds	r2, r7, r3
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	0011      	movs	r1, r2
 800338a:	0018      	movs	r0, r3
 800338c:	f7ff fd5e 	bl	8002e4c <LIS2DW12_ACC_GetSensitivity>
 8003390:	1e03      	subs	r3, r0, #0
 8003392:	d002      	beq.n	800339a <LIS2DW12_ACC_GetAxes+0x3e>
  {
    return LIS2DW12_ERROR;
 8003394:	2301      	movs	r3, #1
 8003396:	425b      	negs	r3, r3
 8003398:	e03a      	b.n	8003410 <LIS2DW12_ACC_GetAxes+0xb4>
  }

  /* Calculate the data. */
  Acceleration->x = (int32_t)((float)((float)data_raw.x * sensitivity));
 800339a:	2410      	movs	r4, #16
 800339c:	193b      	adds	r3, r7, r4
 800339e:	2200      	movs	r2, #0
 80033a0:	5e9b      	ldrsh	r3, [r3, r2]
 80033a2:	0018      	movs	r0, r3
 80033a4:	f7fe f80c 	bl	80013c0 <__aeabi_i2f>
 80033a8:	1c02      	adds	r2, r0, #0
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	1c19      	adds	r1, r3, #0
 80033ae:	1c10      	adds	r0, r2, #0
 80033b0:	f7fd fcfc 	bl	8000dac <__aeabi_fmul>
 80033b4:	1c03      	adds	r3, r0, #0
 80033b6:	1c18      	adds	r0, r3, #0
 80033b8:	f7fd ffe2 	bl	8001380 <__aeabi_f2iz>
 80033bc:	0002      	movs	r2, r0
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float)((float)data_raw.y * sensitivity));
 80033c2:	193b      	adds	r3, r7, r4
 80033c4:	2202      	movs	r2, #2
 80033c6:	5e9b      	ldrsh	r3, [r3, r2]
 80033c8:	0018      	movs	r0, r3
 80033ca:	f7fd fff9 	bl	80013c0 <__aeabi_i2f>
 80033ce:	1c02      	adds	r2, r0, #0
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	1c19      	adds	r1, r3, #0
 80033d4:	1c10      	adds	r0, r2, #0
 80033d6:	f7fd fce9 	bl	8000dac <__aeabi_fmul>
 80033da:	1c03      	adds	r3, r0, #0
 80033dc:	1c18      	adds	r0, r3, #0
 80033de:	f7fd ffcf 	bl	8001380 <__aeabi_f2iz>
 80033e2:	0002      	movs	r2, r0
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float)((float)data_raw.z * sensitivity));
 80033e8:	193b      	adds	r3, r7, r4
 80033ea:	2204      	movs	r2, #4
 80033ec:	5e9b      	ldrsh	r3, [r3, r2]
 80033ee:	0018      	movs	r0, r3
 80033f0:	f7fd ffe6 	bl	80013c0 <__aeabi_i2f>
 80033f4:	1c02      	adds	r2, r0, #0
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	1c19      	adds	r1, r3, #0
 80033fa:	1c10      	adds	r0, r2, #0
 80033fc:	f7fd fcd6 	bl	8000dac <__aeabi_fmul>
 8003400:	1c03      	adds	r3, r0, #0
 8003402:	1c18      	adds	r0, r3, #0
 8003404:	f7fd ffbc 	bl	8001380 <__aeabi_f2iz>
 8003408:	0002      	movs	r2, r0
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	609a      	str	r2, [r3, #8]

  return LIS2DW12_OK;
 800340e:	2300      	movs	r3, #0
}
 8003410:	0018      	movs	r0, r3
 8003412:	46bd      	mov	sp, r7
 8003414:	b007      	add	sp, #28
 8003416:	bd90      	pop	{r4, r7, pc}

08003418 <LIS2DW12_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_Write_Reg(LIS2DW12_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	b082      	sub	sp, #8
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
 8003420:	0008      	movs	r0, r1
 8003422:	0011      	movs	r1, r2
 8003424:	1cfb      	adds	r3, r7, #3
 8003426:	1c02      	adds	r2, r0, #0
 8003428:	701a      	strb	r2, [r3, #0]
 800342a:	1cbb      	adds	r3, r7, #2
 800342c:	1c0a      	adds	r2, r1, #0
 800342e:	701a      	strb	r2, [r3, #0]
  if (lis2dw12_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LIS2DW12_OK)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	331c      	adds	r3, #28
 8003434:	0018      	movs	r0, r3
 8003436:	1cba      	adds	r2, r7, #2
 8003438:	1cfb      	adds	r3, r7, #3
 800343a:	7819      	ldrb	r1, [r3, #0]
 800343c:	2301      	movs	r3, #1
 800343e:	f000 f9f4 	bl	800382a <lis2dw12_write_reg>
 8003442:	1e03      	subs	r3, r0, #0
 8003444:	d002      	beq.n	800344c <LIS2DW12_Write_Reg+0x34>
  {
    return LIS2DW12_ERROR;
 8003446:	2301      	movs	r3, #1
 8003448:	425b      	negs	r3, r3
 800344a:	e000      	b.n	800344e <LIS2DW12_Write_Reg+0x36>
  }

  return LIS2DW12_OK;
 800344c:	2300      	movs	r3, #0
}
 800344e:	0018      	movs	r0, r3
 8003450:	46bd      	mov	sp, r7
 8003452:	b002      	add	sp, #8
 8003454:	bd80      	pop	{r7, pc}
	...

08003458 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled>:
  * @param  Noise the low noise option
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LIS2DW12_ACC_SetOutputDataRate_When_Enabled(LIS2DW12_Object_t *pObj, float Odr,
                                                           LIS2DW12_Operating_Mode_t Mode, LIS2DW12_Low_Noise_t Noise)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	b086      	sub	sp, #24
 800345c:	af00      	add	r7, sp, #0
 800345e:	60f8      	str	r0, [r7, #12]
 8003460:	60b9      	str	r1, [r7, #8]
 8003462:	0019      	movs	r1, r3
 8003464:	1dfb      	adds	r3, r7, #7
 8003466:	701a      	strb	r2, [r3, #0]
 8003468:	1dbb      	adds	r3, r7, #6
 800346a:	1c0a      	adds	r2, r1, #0
 800346c:	701a      	strb	r2, [r3, #0]
  lis2dw12_odr_t new_odr;
  lis2dw12_mode_t new_power_mode;

  switch (Mode)
 800346e:	1dfb      	adds	r3, r7, #7
 8003470:	781b      	ldrb	r3, [r3, #0]
 8003472:	2b04      	cmp	r3, #4
 8003474:	d100      	bne.n	8003478 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x20>
 8003476:	e067      	b.n	8003548 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xf0>
 8003478:	dc06      	bgt.n	8003488 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x30>
 800347a:	2b03      	cmp	r3, #3
 800347c:	d04c      	beq.n	8003518 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xc0>
 800347e:	dc03      	bgt.n	8003488 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x30>
 8003480:	2b01      	cmp	r3, #1
 8003482:	d019      	beq.n	80034b8 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x60>
 8003484:	2b02      	cmp	r3, #2
 8003486:	d02f      	beq.n	80034e8 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x90>
  {
    case LIS2DW12_HIGH_PERFORMANCE_MODE:
    default:
      switch (Noise)
 8003488:	1dbb      	adds	r3, r7, #6
 800348a:	781b      	ldrb	r3, [r3, #0]
 800348c:	2b01      	cmp	r3, #1
 800348e:	d004      	beq.n	800349a <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x42>
      {
        case LIS2DW12_LOW_NOISE_DISABLE:
        default:
          new_power_mode = LIS2DW12_HIGH_PERFORMANCE;
 8003490:	2317      	movs	r3, #23
 8003492:	18fb      	adds	r3, r7, r3
 8003494:	2204      	movs	r2, #4
 8003496:	701a      	strb	r2, [r3, #0]
          break;
 8003498:	e004      	b.n	80034a4 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x4c>
        case LIS2DW12_LOW_NOISE_ENABLE:
          new_power_mode = LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE;
 800349a:	2317      	movs	r3, #23
 800349c:	18fb      	adds	r3, r7, r3
 800349e:	2214      	movs	r2, #20
 80034a0:	701a      	strb	r2, [r3, #0]
          break;
 80034a2:	46c0      	nop			; (mov r8, r8)
      }

      /* If High Performance mode minimum ODR is 12.5Hz */
      if (Odr < 12.5f)
 80034a4:	496e      	ldr	r1, [pc, #440]	; (8003660 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x208>)
 80034a6:	68b8      	ldr	r0, [r7, #8]
 80034a8:	f7fc ffc0 	bl	800042c <__aeabi_fcmplt>
 80034ac:	1e03      	subs	r3, r0, #0
 80034ae:	d100      	bne.n	80034b2 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x5a>
      {
        Odr = 12.5f;
      }
      break;
 80034b0:	e062      	b.n	8003578 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x120>
        Odr = 12.5f;
 80034b2:	4b6b      	ldr	r3, [pc, #428]	; (8003660 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x208>)
 80034b4:	60bb      	str	r3, [r7, #8]
      break;
 80034b6:	e05f      	b.n	8003578 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x120>
    case LIS2DW12_LOW_POWER_MODE4:
      switch (Noise)
 80034b8:	1dbb      	adds	r3, r7, #6
 80034ba:	781b      	ldrb	r3, [r3, #0]
 80034bc:	2b01      	cmp	r3, #1
 80034be:	d004      	beq.n	80034ca <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x72>
      {
        case LIS2DW12_LOW_NOISE_DISABLE:
        default:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_4;
 80034c0:	2317      	movs	r3, #23
 80034c2:	18fb      	adds	r3, r7, r3
 80034c4:	2203      	movs	r2, #3
 80034c6:	701a      	strb	r2, [r3, #0]
          break;
 80034c8:	e004      	b.n	80034d4 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x7c>
        case LIS2DW12_LOW_NOISE_ENABLE:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_4;
 80034ca:	2317      	movs	r3, #23
 80034cc:	18fb      	adds	r3, r7, r3
 80034ce:	2213      	movs	r2, #19
 80034d0:	701a      	strb	r2, [r3, #0]
          break;
 80034d2:	46c0      	nop			; (mov r8, r8)
      }

      /* If Low Power mode maximum ODR is 200Hz */
      if (Odr > 200.0f)
 80034d4:	4963      	ldr	r1, [pc, #396]	; (8003664 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x20c>)
 80034d6:	68b8      	ldr	r0, [r7, #8]
 80034d8:	f7fc ffbc 	bl	8000454 <__aeabi_fcmpgt>
 80034dc:	1e03      	subs	r3, r0, #0
 80034de:	d100      	bne.n	80034e2 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x8a>
      {
        Odr = 200.0f;
      }
      break;
 80034e0:	e04a      	b.n	8003578 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x120>
        Odr = 200.0f;
 80034e2:	4b60      	ldr	r3, [pc, #384]	; (8003664 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x20c>)
 80034e4:	60bb      	str	r3, [r7, #8]
      break;
 80034e6:	e047      	b.n	8003578 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x120>
    case LIS2DW12_LOW_POWER_MODE3:
      switch (Noise)
 80034e8:	1dbb      	adds	r3, r7, #6
 80034ea:	781b      	ldrb	r3, [r3, #0]
 80034ec:	2b01      	cmp	r3, #1
 80034ee:	d004      	beq.n	80034fa <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xa2>
      {
        case LIS2DW12_LOW_NOISE_DISABLE:
        default:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_3;
 80034f0:	2317      	movs	r3, #23
 80034f2:	18fb      	adds	r3, r7, r3
 80034f4:	2202      	movs	r2, #2
 80034f6:	701a      	strb	r2, [r3, #0]
          break;
 80034f8:	e004      	b.n	8003504 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xac>
        case LIS2DW12_LOW_NOISE_ENABLE:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_3;
 80034fa:	2317      	movs	r3, #23
 80034fc:	18fb      	adds	r3, r7, r3
 80034fe:	2212      	movs	r2, #18
 8003500:	701a      	strb	r2, [r3, #0]
          break;
 8003502:	46c0      	nop			; (mov r8, r8)
      }

      /* If Low Power mode maximum ODR is 200Hz */
      if (Odr > 200.0f)
 8003504:	4957      	ldr	r1, [pc, #348]	; (8003664 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x20c>)
 8003506:	68b8      	ldr	r0, [r7, #8]
 8003508:	f7fc ffa4 	bl	8000454 <__aeabi_fcmpgt>
 800350c:	1e03      	subs	r3, r0, #0
 800350e:	d100      	bne.n	8003512 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xba>
      {
        Odr = 200.0f;
      }
      break;
 8003510:	e032      	b.n	8003578 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x120>
        Odr = 200.0f;
 8003512:	4b54      	ldr	r3, [pc, #336]	; (8003664 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x20c>)
 8003514:	60bb      	str	r3, [r7, #8]
      break;
 8003516:	e02f      	b.n	8003578 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x120>
    case LIS2DW12_LOW_POWER_MODE2:
      switch (Noise)
 8003518:	1dbb      	adds	r3, r7, #6
 800351a:	781b      	ldrb	r3, [r3, #0]
 800351c:	2b01      	cmp	r3, #1
 800351e:	d004      	beq.n	800352a <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xd2>
      {
        case LIS2DW12_LOW_NOISE_DISABLE:
        default:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_2;
 8003520:	2317      	movs	r3, #23
 8003522:	18fb      	adds	r3, r7, r3
 8003524:	2201      	movs	r2, #1
 8003526:	701a      	strb	r2, [r3, #0]
          break;
 8003528:	e004      	b.n	8003534 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xdc>
        case LIS2DW12_LOW_NOISE_ENABLE:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_2;
 800352a:	2317      	movs	r3, #23
 800352c:	18fb      	adds	r3, r7, r3
 800352e:	2211      	movs	r2, #17
 8003530:	701a      	strb	r2, [r3, #0]
          break;
 8003532:	46c0      	nop			; (mov r8, r8)
      }

      /* If Low Power mode maximum ODR is 200Hz */
      if (Odr > 200.0f)
 8003534:	494b      	ldr	r1, [pc, #300]	; (8003664 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x20c>)
 8003536:	68b8      	ldr	r0, [r7, #8]
 8003538:	f7fc ff8c 	bl	8000454 <__aeabi_fcmpgt>
 800353c:	1e03      	subs	r3, r0, #0
 800353e:	d100      	bne.n	8003542 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xea>
      {
        Odr = 200.0f;
      }
      break;
 8003540:	e01a      	b.n	8003578 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x120>
        Odr = 200.0f;
 8003542:	4b48      	ldr	r3, [pc, #288]	; (8003664 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x20c>)
 8003544:	60bb      	str	r3, [r7, #8]
      break;
 8003546:	e017      	b.n	8003578 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x120>
    case LIS2DW12_LOW_POWER_MODE1:
      switch (Noise)
 8003548:	1dbb      	adds	r3, r7, #6
 800354a:	781b      	ldrb	r3, [r3, #0]
 800354c:	2b01      	cmp	r3, #1
 800354e:	d004      	beq.n	800355a <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x102>
      {
        case LIS2DW12_LOW_NOISE_DISABLE:
        default:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_12bit;
 8003550:	2317      	movs	r3, #23
 8003552:	18fb      	adds	r3, r7, r3
 8003554:	2200      	movs	r2, #0
 8003556:	701a      	strb	r2, [r3, #0]
          break;
 8003558:	e004      	b.n	8003564 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x10c>
        case LIS2DW12_LOW_NOISE_ENABLE:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit;
 800355a:	2317      	movs	r3, #23
 800355c:	18fb      	adds	r3, r7, r3
 800355e:	2210      	movs	r2, #16
 8003560:	701a      	strb	r2, [r3, #0]
          break;
 8003562:	46c0      	nop			; (mov r8, r8)
      }

      /* If Low Power mode maximum ODR is 200Hz */
      if (Odr > 200.0f)
 8003564:	493f      	ldr	r1, [pc, #252]	; (8003664 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x20c>)
 8003566:	68b8      	ldr	r0, [r7, #8]
 8003568:	f7fc ff74 	bl	8000454 <__aeabi_fcmpgt>
 800356c:	1e03      	subs	r3, r0, #0
 800356e:	d100      	bne.n	8003572 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x11a>
      {
        Odr = 200.0f;
      }
      break;
 8003570:	e001      	b.n	8003576 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x11e>
        Odr = 200.0f;
 8003572:	4b3c      	ldr	r3, [pc, #240]	; (8003664 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x20c>)
 8003574:	60bb      	str	r3, [r7, #8]
      break;
 8003576:	46c0      	nop			; (mov r8, r8)
  }

  new_odr = (Odr <=    1.6f) ? LIS2DW12_XL_ODR_1Hz6_LP_ONLY
            : (Odr <=   12.5f) ? LIS2DW12_XL_ODR_12Hz5
 8003578:	493b      	ldr	r1, [pc, #236]	; (8003668 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x210>)
 800357a:	68b8      	ldr	r0, [r7, #8]
 800357c:	f7fc ff60 	bl	8000440 <__aeabi_fcmple>
 8003580:	1e03      	subs	r3, r0, #0
 8003582:	d001      	beq.n	8003588 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x130>
 8003584:	2301      	movs	r3, #1
 8003586:	e038      	b.n	80035fa <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1a2>
 8003588:	4935      	ldr	r1, [pc, #212]	; (8003660 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x208>)
 800358a:	68b8      	ldr	r0, [r7, #8]
 800358c:	f7fc ff58 	bl	8000440 <__aeabi_fcmple>
 8003590:	1e03      	subs	r3, r0, #0
 8003592:	d001      	beq.n	8003598 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x140>
 8003594:	2302      	movs	r3, #2
 8003596:	e030      	b.n	80035fa <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1a2>
 8003598:	4934      	ldr	r1, [pc, #208]	; (800366c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x214>)
 800359a:	68b8      	ldr	r0, [r7, #8]
 800359c:	f7fc ff50 	bl	8000440 <__aeabi_fcmple>
 80035a0:	1e03      	subs	r3, r0, #0
 80035a2:	d001      	beq.n	80035a8 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x150>
 80035a4:	2303      	movs	r3, #3
 80035a6:	e028      	b.n	80035fa <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1a2>
 80035a8:	4931      	ldr	r1, [pc, #196]	; (8003670 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x218>)
 80035aa:	68b8      	ldr	r0, [r7, #8]
 80035ac:	f7fc ff48 	bl	8000440 <__aeabi_fcmple>
 80035b0:	1e03      	subs	r3, r0, #0
 80035b2:	d001      	beq.n	80035b8 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x160>
 80035b4:	2304      	movs	r3, #4
 80035b6:	e020      	b.n	80035fa <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1a2>
 80035b8:	492e      	ldr	r1, [pc, #184]	; (8003674 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x21c>)
 80035ba:	68b8      	ldr	r0, [r7, #8]
 80035bc:	f7fc ff40 	bl	8000440 <__aeabi_fcmple>
 80035c0:	1e03      	subs	r3, r0, #0
 80035c2:	d001      	beq.n	80035c8 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x170>
 80035c4:	2305      	movs	r3, #5
 80035c6:	e018      	b.n	80035fa <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1a2>
 80035c8:	4926      	ldr	r1, [pc, #152]	; (8003664 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x20c>)
 80035ca:	68b8      	ldr	r0, [r7, #8]
 80035cc:	f7fc ff38 	bl	8000440 <__aeabi_fcmple>
 80035d0:	1e03      	subs	r3, r0, #0
 80035d2:	d001      	beq.n	80035d8 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x180>
 80035d4:	2306      	movs	r3, #6
 80035d6:	e010      	b.n	80035fa <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1a2>
 80035d8:	4927      	ldr	r1, [pc, #156]	; (8003678 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x220>)
 80035da:	68b8      	ldr	r0, [r7, #8]
 80035dc:	f7fc ff30 	bl	8000440 <__aeabi_fcmple>
 80035e0:	1e03      	subs	r3, r0, #0
 80035e2:	d001      	beq.n	80035e8 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x190>
 80035e4:	2307      	movs	r3, #7
 80035e6:	e008      	b.n	80035fa <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1a2>
 80035e8:	4924      	ldr	r1, [pc, #144]	; (800367c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x224>)
 80035ea:	68b8      	ldr	r0, [r7, #8]
 80035ec:	f7fc ff28 	bl	8000440 <__aeabi_fcmple>
 80035f0:	1e03      	subs	r3, r0, #0
 80035f2:	d001      	beq.n	80035f8 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1a0>
 80035f4:	2308      	movs	r3, #8
 80035f6:	e000      	b.n	80035fa <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1a2>
 80035f8:	2309      	movs	r3, #9
  new_odr = (Odr <=    1.6f) ? LIS2DW12_XL_ODR_1Hz6_LP_ONLY
 80035fa:	2116      	movs	r1, #22
 80035fc:	187a      	adds	r2, r7, r1
 80035fe:	7013      	strb	r3, [r2, #0]
            : (Odr <=  400.0f) ? LIS2DW12_XL_ODR_400Hz
            : (Odr <=  800.0f) ? LIS2DW12_XL_ODR_800Hz
            :                    LIS2DW12_XL_ODR_1k6Hz;

  /* Output data rate selection. */
  if (lis2dw12_data_rate_set(&(pObj->Ctx), new_odr) != LIS2DW12_OK)
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	331c      	adds	r3, #28
 8003604:	001a      	movs	r2, r3
 8003606:	187b      	adds	r3, r7, r1
 8003608:	781b      	ldrb	r3, [r3, #0]
 800360a:	0019      	movs	r1, r3
 800360c:	0010      	movs	r0, r2
 800360e:	f000 fa23 	bl	8003a58 <lis2dw12_data_rate_set>
 8003612:	1e03      	subs	r3, r0, #0
 8003614:	d002      	beq.n	800361c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c4>
  {
    return LIS2DW12_ERROR;
 8003616:	2301      	movs	r3, #1
 8003618:	425b      	negs	r3, r3
 800361a:	e01c      	b.n	8003656 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1fe>
  }

  /* Power mode selection. */
  if (lis2dw12_power_mode_set(&(pObj->Ctx), new_power_mode) != LIS2DW12_OK)
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	331c      	adds	r3, #28
 8003620:	001a      	movs	r2, r3
 8003622:	2317      	movs	r3, #23
 8003624:	18fb      	adds	r3, r7, r3
 8003626:	781b      	ldrb	r3, [r3, #0]
 8003628:	0019      	movs	r1, r3
 800362a:	0010      	movs	r0, r2
 800362c:	f000 f91e 	bl	800386c <lis2dw12_power_mode_set>
 8003630:	1e03      	subs	r3, r0, #0
 8003632:	d002      	beq.n	800363a <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1e2>
  {
    return LIS2DW12_ERROR;
 8003634:	2301      	movs	r3, #1
 8003636:	425b      	negs	r3, r3
 8003638:	e00d      	b.n	8003656 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1fe>
  }

  /* Store the current Odr, Mode and Noise values */
  pObj->acc_odr = Odr;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	68ba      	ldr	r2, [r7, #8]
 800363e:	62da      	str	r2, [r3, #44]	; 0x2c
  pObj->acc_operating_mode = Mode;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	1dfa      	adds	r2, r7, #7
 8003644:	2130      	movs	r1, #48	; 0x30
 8003646:	7812      	ldrb	r2, [r2, #0]
 8003648:	545a      	strb	r2, [r3, r1]
  pObj->acc_low_noise = Noise;
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	1dba      	adds	r2, r7, #6
 800364e:	2131      	movs	r1, #49	; 0x31
 8003650:	7812      	ldrb	r2, [r2, #0]
 8003652:	545a      	strb	r2, [r3, r1]

  return LIS2DW12_OK;
 8003654:	2300      	movs	r3, #0
}
 8003656:	0018      	movs	r0, r3
 8003658:	46bd      	mov	sp, r7
 800365a:	b006      	add	sp, #24
 800365c:	bd80      	pop	{r7, pc}
 800365e:	46c0      	nop			; (mov r8, r8)
 8003660:	41480000 	.word	0x41480000
 8003664:	43480000 	.word	0x43480000
 8003668:	3fcccccd 	.word	0x3fcccccd
 800366c:	41c80000 	.word	0x41c80000
 8003670:	42480000 	.word	0x42480000
 8003674:	42c80000 	.word	0x42c80000
 8003678:	43c80000 	.word	0x43c80000
 800367c:	44480000 	.word	0x44480000

08003680 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled>:
  * @param  Noise the low noise option
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LIS2DW12_ACC_SetOutputDataRate_When_Disabled(LIS2DW12_Object_t *pObj, float Odr,
                                                            LIS2DW12_Operating_Mode_t Mode, LIS2DW12_Low_Noise_t Noise)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b084      	sub	sp, #16
 8003684:	af00      	add	r7, sp, #0
 8003686:	60f8      	str	r0, [r7, #12]
 8003688:	60b9      	str	r1, [r7, #8]
 800368a:	0019      	movs	r1, r3
 800368c:	1dfb      	adds	r3, r7, #7
 800368e:	701a      	strb	r2, [r3, #0]
 8003690:	1dbb      	adds	r3, r7, #6
 8003692:	1c0a      	adds	r2, r1, #0
 8003694:	701a      	strb	r2, [r3, #0]
  /* Store the new Odr, Mode and Noise values */
  pObj->acc_operating_mode = Mode;
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	1dfa      	adds	r2, r7, #7
 800369a:	2130      	movs	r1, #48	; 0x30
 800369c:	7812      	ldrb	r2, [r2, #0]
 800369e:	545a      	strb	r2, [r3, r1]
  pObj->acc_low_noise = Noise;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	1dba      	adds	r2, r7, #6
 80036a4:	2131      	movs	r1, #49	; 0x31
 80036a6:	7812      	ldrb	r2, [r2, #0]
 80036a8:	545a      	strb	r2, [r3, r1]

  pObj->acc_odr = (Odr <=    1.6f) ?    1.6f
                  : (Odr <=   12.5f) ?   12.5f
 80036aa:	4924      	ldr	r1, [pc, #144]	; (800373c <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xbc>)
 80036ac:	68b8      	ldr	r0, [r7, #8]
 80036ae:	f7fc fec7 	bl	8000440 <__aeabi_fcmple>
 80036b2:	1e03      	subs	r3, r0, #0
 80036b4:	d001      	beq.n	80036ba <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x3a>
 80036b6:	4b21      	ldr	r3, [pc, #132]	; (800373c <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xbc>)
 80036b8:	e038      	b.n	800372c <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xac>
                  : (Odr <=   25.0f) ?   25.0f
 80036ba:	4921      	ldr	r1, [pc, #132]	; (8003740 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xc0>)
 80036bc:	68b8      	ldr	r0, [r7, #8]
 80036be:	f7fc febf 	bl	8000440 <__aeabi_fcmple>
 80036c2:	1e03      	subs	r3, r0, #0
 80036c4:	d001      	beq.n	80036ca <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x4a>
 80036c6:	4b1e      	ldr	r3, [pc, #120]	; (8003740 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xc0>)
 80036c8:	e030      	b.n	800372c <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xac>
                  : (Odr <=   50.0f) ?   50.0f
 80036ca:	491e      	ldr	r1, [pc, #120]	; (8003744 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xc4>)
 80036cc:	68b8      	ldr	r0, [r7, #8]
 80036ce:	f7fc feb7 	bl	8000440 <__aeabi_fcmple>
 80036d2:	1e03      	subs	r3, r0, #0
 80036d4:	d001      	beq.n	80036da <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x5a>
 80036d6:	4b1b      	ldr	r3, [pc, #108]	; (8003744 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xc4>)
 80036d8:	e028      	b.n	800372c <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xac>
                  : (Odr <=  100.0f) ?  100.0f
 80036da:	491b      	ldr	r1, [pc, #108]	; (8003748 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xc8>)
 80036dc:	68b8      	ldr	r0, [r7, #8]
 80036de:	f7fc feaf 	bl	8000440 <__aeabi_fcmple>
 80036e2:	1e03      	subs	r3, r0, #0
 80036e4:	d001      	beq.n	80036ea <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x6a>
 80036e6:	4b18      	ldr	r3, [pc, #96]	; (8003748 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xc8>)
 80036e8:	e020      	b.n	800372c <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xac>
                  : (Odr <=  200.0f) ?  200.0f
 80036ea:	4918      	ldr	r1, [pc, #96]	; (800374c <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xcc>)
 80036ec:	68b8      	ldr	r0, [r7, #8]
 80036ee:	f7fc fea7 	bl	8000440 <__aeabi_fcmple>
 80036f2:	1e03      	subs	r3, r0, #0
 80036f4:	d001      	beq.n	80036fa <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x7a>
 80036f6:	4b15      	ldr	r3, [pc, #84]	; (800374c <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xcc>)
 80036f8:	e018      	b.n	800372c <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xac>
                  : (Odr <=  400.0f) ?  400.0f
 80036fa:	4915      	ldr	r1, [pc, #84]	; (8003750 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd0>)
 80036fc:	68b8      	ldr	r0, [r7, #8]
 80036fe:	f7fc fe9f 	bl	8000440 <__aeabi_fcmple>
 8003702:	1e03      	subs	r3, r0, #0
 8003704:	d001      	beq.n	800370a <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x8a>
 8003706:	4b12      	ldr	r3, [pc, #72]	; (8003750 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd0>)
 8003708:	e010      	b.n	800372c <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xac>
                  : (Odr <=  800.0f) ?  800.0f
 800370a:	4912      	ldr	r1, [pc, #72]	; (8003754 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd4>)
 800370c:	68b8      	ldr	r0, [r7, #8]
 800370e:	f7fc fe97 	bl	8000440 <__aeabi_fcmple>
 8003712:	1e03      	subs	r3, r0, #0
 8003714:	d001      	beq.n	800371a <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x9a>
 8003716:	4b0f      	ldr	r3, [pc, #60]	; (8003754 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd4>)
 8003718:	e008      	b.n	800372c <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xac>
                  :                    1600.0f;
 800371a:	490f      	ldr	r1, [pc, #60]	; (8003758 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd8>)
 800371c:	68b8      	ldr	r0, [r7, #8]
 800371e:	f7fc fe8f 	bl	8000440 <__aeabi_fcmple>
 8003722:	1e03      	subs	r3, r0, #0
 8003724:	d001      	beq.n	800372a <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xaa>
 8003726:	4b0c      	ldr	r3, [pc, #48]	; (8003758 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd8>)
 8003728:	e000      	b.n	800372c <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xac>
 800372a:	4b0c      	ldr	r3, [pc, #48]	; (800375c <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xdc>)
  pObj->acc_odr = (Odr <=    1.6f) ?    1.6f
 800372c:	68fa      	ldr	r2, [r7, #12]
 800372e:	62d3      	str	r3, [r2, #44]	; 0x2c

  return LIS2DW12_OK;
 8003730:	2300      	movs	r3, #0
}
 8003732:	0018      	movs	r0, r3
 8003734:	46bd      	mov	sp, r7
 8003736:	b004      	add	sp, #16
 8003738:	bd80      	pop	{r7, pc}
 800373a:	46c0      	nop			; (mov r8, r8)
 800373c:	3fcccccd 	.word	0x3fcccccd
 8003740:	41480000 	.word	0x41480000
 8003744:	41c80000 	.word	0x41c80000
 8003748:	42480000 	.word	0x42480000
 800374c:	42c80000 	.word	0x42c80000
 8003750:	43480000 	.word	0x43480000
 8003754:	43c80000 	.word	0x43c80000
 8003758:	44480000 	.word	0x44480000
 800375c:	44c80000 	.word	0x44c80000

08003760 <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8003760:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003762:	b087      	sub	sp, #28
 8003764:	af00      	add	r7, sp, #0
 8003766:	60f8      	str	r0, [r7, #12]
 8003768:	0008      	movs	r0, r1
 800376a:	607a      	str	r2, [r7, #4]
 800376c:	0019      	movs	r1, r3
 800376e:	250b      	movs	r5, #11
 8003770:	197b      	adds	r3, r7, r5
 8003772:	1c02      	adds	r2, r0, #0
 8003774:	701a      	strb	r2, [r3, #0]
 8003776:	2608      	movs	r6, #8
 8003778:	19bb      	adds	r3, r7, r6
 800377a:	1c0a      	adds	r2, r1, #0
 800377c:	801a      	strh	r2, [r3, #0]
  LIS2DW12_Object_t *pObj = (LIS2DW12_Object_t *)Handle;
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8003782:	697b      	ldr	r3, [r7, #20]
 8003784:	695c      	ldr	r4, [r3, #20]
 8003786:	697b      	ldr	r3, [r7, #20]
 8003788:	7b1b      	ldrb	r3, [r3, #12]
 800378a:	b298      	uxth	r0, r3
 800378c:	197b      	adds	r3, r7, r5
 800378e:	781b      	ldrb	r3, [r3, #0]
 8003790:	b299      	uxth	r1, r3
 8003792:	19bb      	adds	r3, r7, r6
 8003794:	881b      	ldrh	r3, [r3, #0]
 8003796:	687a      	ldr	r2, [r7, #4]
 8003798:	47a0      	blx	r4
 800379a:	0003      	movs	r3, r0
}
 800379c:	0018      	movs	r0, r3
 800379e:	46bd      	mov	sp, r7
 80037a0:	b007      	add	sp, #28
 80037a2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080037a4 <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80037a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80037a6:	b087      	sub	sp, #28
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	60f8      	str	r0, [r7, #12]
 80037ac:	0008      	movs	r0, r1
 80037ae:	607a      	str	r2, [r7, #4]
 80037b0:	0019      	movs	r1, r3
 80037b2:	250b      	movs	r5, #11
 80037b4:	197b      	adds	r3, r7, r5
 80037b6:	1c02      	adds	r2, r0, #0
 80037b8:	701a      	strb	r2, [r3, #0]
 80037ba:	2608      	movs	r6, #8
 80037bc:	19bb      	adds	r3, r7, r6
 80037be:	1c0a      	adds	r2, r1, #0
 80037c0:	801a      	strh	r2, [r3, #0]
  LIS2DW12_Object_t *pObj = (LIS2DW12_Object_t *)Handle;
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 80037c6:	697b      	ldr	r3, [r7, #20]
 80037c8:	691c      	ldr	r4, [r3, #16]
 80037ca:	697b      	ldr	r3, [r7, #20]
 80037cc:	7b1b      	ldrb	r3, [r3, #12]
 80037ce:	b298      	uxth	r0, r3
 80037d0:	197b      	adds	r3, r7, r5
 80037d2:	781b      	ldrb	r3, [r3, #0]
 80037d4:	b299      	uxth	r1, r3
 80037d6:	19bb      	adds	r3, r7, r6
 80037d8:	881b      	ldrh	r3, [r3, #0]
 80037da:	687a      	ldr	r2, [r7, #4]
 80037dc:	47a0      	blx	r4
 80037de:	0003      	movs	r3, r0
}
 80037e0:	0018      	movs	r0, r3
 80037e2:	46bd      	mov	sp, r7
 80037e4:	b007      	add	sp, #28
 80037e6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080037e8 <lis2dw12_read_reg>:
  *
  */
int32_t lis2dw12_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 80037e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80037ea:	b087      	sub	sp, #28
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	60f8      	str	r0, [r7, #12]
 80037f0:	0008      	movs	r0, r1
 80037f2:	607a      	str	r2, [r7, #4]
 80037f4:	0019      	movs	r1, r3
 80037f6:	260b      	movs	r6, #11
 80037f8:	19bb      	adds	r3, r7, r6
 80037fa:	1c02      	adds	r2, r0, #0
 80037fc:	701a      	strb	r2, [r3, #0]
 80037fe:	2508      	movs	r5, #8
 8003800:	197b      	adds	r3, r7, r5
 8003802:	1c0a      	adds	r2, r1, #0
 8003804:	801a      	strh	r2, [r3, #0]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	685c      	ldr	r4, [r3, #4]
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	6898      	ldr	r0, [r3, #8]
 800380e:	197b      	adds	r3, r7, r5
 8003810:	881d      	ldrh	r5, [r3, #0]
 8003812:	687a      	ldr	r2, [r7, #4]
 8003814:	19bb      	adds	r3, r7, r6
 8003816:	7819      	ldrb	r1, [r3, #0]
 8003818:	002b      	movs	r3, r5
 800381a:	47a0      	blx	r4
 800381c:	0003      	movs	r3, r0
 800381e:	617b      	str	r3, [r7, #20]

  return ret;
 8003820:	697b      	ldr	r3, [r7, #20]
}
 8003822:	0018      	movs	r0, r3
 8003824:	46bd      	mov	sp, r7
 8003826:	b007      	add	sp, #28
 8003828:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800382a <lis2dw12_write_reg>:
  *
  */
int32_t lis2dw12_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                           uint8_t *data,
                           uint16_t len)
{
 800382a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800382c:	b087      	sub	sp, #28
 800382e:	af00      	add	r7, sp, #0
 8003830:	60f8      	str	r0, [r7, #12]
 8003832:	0008      	movs	r0, r1
 8003834:	607a      	str	r2, [r7, #4]
 8003836:	0019      	movs	r1, r3
 8003838:	260b      	movs	r6, #11
 800383a:	19bb      	adds	r3, r7, r6
 800383c:	1c02      	adds	r2, r0, #0
 800383e:	701a      	strb	r2, [r3, #0]
 8003840:	2508      	movs	r5, #8
 8003842:	197b      	adds	r3, r7, r5
 8003844:	1c0a      	adds	r2, r1, #0
 8003846:	801a      	strh	r2, [r3, #0]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	681c      	ldr	r4, [r3, #0]
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	6898      	ldr	r0, [r3, #8]
 8003850:	197b      	adds	r3, r7, r5
 8003852:	881d      	ldrh	r5, [r3, #0]
 8003854:	687a      	ldr	r2, [r7, #4]
 8003856:	19bb      	adds	r3, r7, r6
 8003858:	7819      	ldrb	r1, [r3, #0]
 800385a:	002b      	movs	r3, r5
 800385c:	47a0      	blx	r4
 800385e:	0003      	movs	r3, r0
 8003860:	617b      	str	r3, [r7, #20]

  return ret;
 8003862:	697b      	ldr	r3, [r7, #20]
}
 8003864:	0018      	movs	r0, r3
 8003866:	46bd      	mov	sp, r7
 8003868:	b007      	add	sp, #28
 800386a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800386c <lis2dw12_power_mode_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_power_mode_set(stmdev_ctx_t *ctx,
                                lis2dw12_mode_t val)
{
 800386c:	b590      	push	{r4, r7, lr}
 800386e:	b087      	sub	sp, #28
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
 8003874:	000a      	movs	r2, r1
 8003876:	1cfb      	adds	r3, r7, #3
 8003878:	701a      	strb	r2, [r3, #0]
  lis2dw12_ctrl1_t ctrl1;
  lis2dw12_ctrl6_t ctrl6;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 800387a:	2410      	movs	r4, #16
 800387c:	193a      	adds	r2, r7, r4
 800387e:	6878      	ldr	r0, [r7, #4]
 8003880:	2301      	movs	r3, #1
 8003882:	2120      	movs	r1, #32
 8003884:	f7ff ffb0 	bl	80037e8 <lis2dw12_read_reg>
 8003888:	0003      	movs	r3, r0
 800388a:	617b      	str	r3, [r7, #20]

  if (ret == 0)
 800388c:	697b      	ldr	r3, [r7, #20]
 800388e:	2b00      	cmp	r3, #0
 8003890:	d129      	bne.n	80038e6 <lis2dw12_power_mode_set+0x7a>
  {
    ctrl1.mode = ((uint8_t) val & 0x0CU) >> 2;
 8003892:	1cfb      	adds	r3, r7, #3
 8003894:	781b      	ldrb	r3, [r3, #0]
 8003896:	089b      	lsrs	r3, r3, #2
 8003898:	1c1a      	adds	r2, r3, #0
 800389a:	2303      	movs	r3, #3
 800389c:	4013      	ands	r3, r2
 800389e:	b2da      	uxtb	r2, r3
 80038a0:	193b      	adds	r3, r7, r4
 80038a2:	2103      	movs	r1, #3
 80038a4:	400a      	ands	r2, r1
 80038a6:	0090      	lsls	r0, r2, #2
 80038a8:	781a      	ldrb	r2, [r3, #0]
 80038aa:	210c      	movs	r1, #12
 80038ac:	438a      	bics	r2, r1
 80038ae:	1c11      	adds	r1, r2, #0
 80038b0:	1c02      	adds	r2, r0, #0
 80038b2:	430a      	orrs	r2, r1
 80038b4:	701a      	strb	r2, [r3, #0]
    ctrl1.lp_mode = (uint8_t) val & 0x03U ;
 80038b6:	1cfb      	adds	r3, r7, #3
 80038b8:	781b      	ldrb	r3, [r3, #0]
 80038ba:	2203      	movs	r2, #3
 80038bc:	4013      	ands	r3, r2
 80038be:	b2da      	uxtb	r2, r3
 80038c0:	193b      	adds	r3, r7, r4
 80038c2:	2103      	movs	r1, #3
 80038c4:	400a      	ands	r2, r1
 80038c6:	0010      	movs	r0, r2
 80038c8:	781a      	ldrb	r2, [r3, #0]
 80038ca:	2103      	movs	r1, #3
 80038cc:	438a      	bics	r2, r1
 80038ce:	1c11      	adds	r1, r2, #0
 80038d0:	1c02      	adds	r2, r0, #0
 80038d2:	430a      	orrs	r2, r1
 80038d4:	701a      	strb	r2, [r3, #0]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 80038d6:	193a      	adds	r2, r7, r4
 80038d8:	6878      	ldr	r0, [r7, #4]
 80038da:	2301      	movs	r3, #1
 80038dc:	2120      	movs	r1, #32
 80038de:	f7ff ffa4 	bl	800382a <lis2dw12_write_reg>
 80038e2:	0003      	movs	r3, r0
 80038e4:	617b      	str	r3, [r7, #20]
  }

  if (ret == 0)
 80038e6:	697b      	ldr	r3, [r7, #20]
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d108      	bne.n	80038fe <lis2dw12_power_mode_set+0x92>
  {
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &ctrl6, 1);
 80038ec:	230c      	movs	r3, #12
 80038ee:	18fa      	adds	r2, r7, r3
 80038f0:	6878      	ldr	r0, [r7, #4]
 80038f2:	2301      	movs	r3, #1
 80038f4:	2125      	movs	r1, #37	; 0x25
 80038f6:	f7ff ff77 	bl	80037e8 <lis2dw12_read_reg>
 80038fa:	0003      	movs	r3, r0
 80038fc:	617b      	str	r3, [r7, #20]
  }

  if (ret == 0)
 80038fe:	697b      	ldr	r3, [r7, #20]
 8003900:	2b00      	cmp	r3, #0
 8003902:	d11a      	bne.n	800393a <lis2dw12_power_mode_set+0xce>
  {
    ctrl6.low_noise = ((uint8_t) val & 0x10U) >> 4;
 8003904:	1cfb      	adds	r3, r7, #3
 8003906:	781b      	ldrb	r3, [r3, #0]
 8003908:	091b      	lsrs	r3, r3, #4
 800390a:	1c1a      	adds	r2, r3, #0
 800390c:	2301      	movs	r3, #1
 800390e:	4013      	ands	r3, r2
 8003910:	b2da      	uxtb	r2, r3
 8003912:	240c      	movs	r4, #12
 8003914:	193b      	adds	r3, r7, r4
 8003916:	2101      	movs	r1, #1
 8003918:	400a      	ands	r2, r1
 800391a:	0090      	lsls	r0, r2, #2
 800391c:	781a      	ldrb	r2, [r3, #0]
 800391e:	2104      	movs	r1, #4
 8003920:	438a      	bics	r2, r1
 8003922:	1c11      	adds	r1, r2, #0
 8003924:	1c02      	adds	r2, r0, #0
 8003926:	430a      	orrs	r2, r1
 8003928:	701a      	strb	r2, [r3, #0]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &ctrl6, 1);
 800392a:	193a      	adds	r2, r7, r4
 800392c:	6878      	ldr	r0, [r7, #4]
 800392e:	2301      	movs	r3, #1
 8003930:	2125      	movs	r1, #37	; 0x25
 8003932:	f7ff ff7a 	bl	800382a <lis2dw12_write_reg>
 8003936:	0003      	movs	r3, r0
 8003938:	617b      	str	r3, [r7, #20]
  }

  return ret;
 800393a:	697b      	ldr	r3, [r7, #20]
}
 800393c:	0018      	movs	r0, r3
 800393e:	46bd      	mov	sp, r7
 8003940:	b007      	add	sp, #28
 8003942:	bd90      	pop	{r4, r7, pc}

08003944 <lis2dw12_power_mode_get>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_power_mode_get(stmdev_ctx_t *ctx,
                                lis2dw12_mode_t *val)
{
 8003944:	b5b0      	push	{r4, r5, r7, lr}
 8003946:	b086      	sub	sp, #24
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
 800394c:	6039      	str	r1, [r7, #0]
  lis2dw12_ctrl1_t ctrl1;
  lis2dw12_ctrl6_t ctrl6;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 800394e:	2410      	movs	r4, #16
 8003950:	193a      	adds	r2, r7, r4
 8003952:	6878      	ldr	r0, [r7, #4]
 8003954:	2301      	movs	r3, #1
 8003956:	2120      	movs	r1, #32
 8003958:	f7ff ff46 	bl	80037e8 <lis2dw12_read_reg>
 800395c:	0003      	movs	r3, r0
 800395e:	617b      	str	r3, [r7, #20]

  if (ret == 0)
 8003960:	697b      	ldr	r3, [r7, #20]
 8003962:	2b00      	cmp	r3, #0
 8003964:	d000      	beq.n	8003968 <lis2dw12_power_mode_get+0x24>
 8003966:	e06e      	b.n	8003a46 <lis2dw12_power_mode_get+0x102>
  {
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &ctrl6, 1);
 8003968:	250c      	movs	r5, #12
 800396a:	197a      	adds	r2, r7, r5
 800396c:	6878      	ldr	r0, [r7, #4]
 800396e:	2301      	movs	r3, #1
 8003970:	2125      	movs	r1, #37	; 0x25
 8003972:	f7ff ff39 	bl	80037e8 <lis2dw12_read_reg>
 8003976:	0003      	movs	r3, r0
 8003978:	617b      	str	r3, [r7, #20]

    switch (((ctrl6.low_noise << 4) + (ctrl1.mode << 2) +
 800397a:	197b      	adds	r3, r7, r5
 800397c:	781b      	ldrb	r3, [r3, #0]
 800397e:	075b      	lsls	r3, r3, #29
 8003980:	0fdb      	lsrs	r3, r3, #31
 8003982:	b2db      	uxtb	r3, r3
 8003984:	011a      	lsls	r2, r3, #4
 8003986:	193b      	adds	r3, r7, r4
 8003988:	781b      	ldrb	r3, [r3, #0]
 800398a:	071b      	lsls	r3, r3, #28
 800398c:	0f9b      	lsrs	r3, r3, #30
 800398e:	b2db      	uxtb	r3, r3
 8003990:	009b      	lsls	r3, r3, #2
 8003992:	18d3      	adds	r3, r2, r3
             ctrl1.lp_mode))
 8003994:	193a      	adds	r2, r7, r4
 8003996:	7812      	ldrb	r2, [r2, #0]
 8003998:	0792      	lsls	r2, r2, #30
 800399a:	0f92      	lsrs	r2, r2, #30
 800399c:	b2d2      	uxtb	r2, r2
    switch (((ctrl6.low_noise << 4) + (ctrl1.mode << 2) +
 800399e:	189b      	adds	r3, r3, r2
 80039a0:	2b1b      	cmp	r3, #27
 80039a2:	d84c      	bhi.n	8003a3e <lis2dw12_power_mode_get+0xfa>
 80039a4:	009a      	lsls	r2, r3, #2
 80039a6:	4b2b      	ldr	r3, [pc, #172]	; (8003a54 <lis2dw12_power_mode_get+0x110>)
 80039a8:	18d3      	adds	r3, r2, r3
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	469f      	mov	pc, r3
    {
      case LIS2DW12_HIGH_PERFORMANCE:
        *val = LIS2DW12_HIGH_PERFORMANCE;
 80039ae:	683b      	ldr	r3, [r7, #0]
 80039b0:	2204      	movs	r2, #4
 80039b2:	701a      	strb	r2, [r3, #0]
        break;
 80039b4:	e048      	b.n	8003a48 <lis2dw12_power_mode_get+0x104>

      case LIS2DW12_CONT_LOW_PWR_4:
        *val = LIS2DW12_CONT_LOW_PWR_4;
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	2203      	movs	r2, #3
 80039ba:	701a      	strb	r2, [r3, #0]
        break;
 80039bc:	e044      	b.n	8003a48 <lis2dw12_power_mode_get+0x104>

      case LIS2DW12_CONT_LOW_PWR_3:
        *val = LIS2DW12_CONT_LOW_PWR_3;
 80039be:	683b      	ldr	r3, [r7, #0]
 80039c0:	2202      	movs	r2, #2
 80039c2:	701a      	strb	r2, [r3, #0]
        break;
 80039c4:	e040      	b.n	8003a48 <lis2dw12_power_mode_get+0x104>

      case LIS2DW12_CONT_LOW_PWR_2:
        *val = LIS2DW12_CONT_LOW_PWR_2;
 80039c6:	683b      	ldr	r3, [r7, #0]
 80039c8:	2201      	movs	r2, #1
 80039ca:	701a      	strb	r2, [r3, #0]
        break;
 80039cc:	e03c      	b.n	8003a48 <lis2dw12_power_mode_get+0x104>

      case LIS2DW12_CONT_LOW_PWR_12bit:
        *val = LIS2DW12_CONT_LOW_PWR_12bit;
 80039ce:	683b      	ldr	r3, [r7, #0]
 80039d0:	2200      	movs	r2, #0
 80039d2:	701a      	strb	r2, [r3, #0]
        break;
 80039d4:	e038      	b.n	8003a48 <lis2dw12_power_mode_get+0x104>

      case LIS2DW12_SINGLE_LOW_PWR_4:
        *val = LIS2DW12_SINGLE_LOW_PWR_4;
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	220b      	movs	r2, #11
 80039da:	701a      	strb	r2, [r3, #0]
        break;
 80039dc:	e034      	b.n	8003a48 <lis2dw12_power_mode_get+0x104>

      case LIS2DW12_SINGLE_LOW_PWR_3:
        *val = LIS2DW12_SINGLE_LOW_PWR_3;
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	220a      	movs	r2, #10
 80039e2:	701a      	strb	r2, [r3, #0]
        break;
 80039e4:	e030      	b.n	8003a48 <lis2dw12_power_mode_get+0x104>

      case LIS2DW12_SINGLE_LOW_PWR_2:
        *val = LIS2DW12_SINGLE_LOW_PWR_2;
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	2209      	movs	r2, #9
 80039ea:	701a      	strb	r2, [r3, #0]
        break;
 80039ec:	e02c      	b.n	8003a48 <lis2dw12_power_mode_get+0x104>

      case LIS2DW12_SINGLE_LOW_PWR_12bit:
        *val = LIS2DW12_SINGLE_LOW_PWR_12bit;
 80039ee:	683b      	ldr	r3, [r7, #0]
 80039f0:	2208      	movs	r2, #8
 80039f2:	701a      	strb	r2, [r3, #0]
        break;
 80039f4:	e028      	b.n	8003a48 <lis2dw12_power_mode_get+0x104>

      case LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE:
        *val = LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE;
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	2214      	movs	r2, #20
 80039fa:	701a      	strb	r2, [r3, #0]
        break;
 80039fc:	e024      	b.n	8003a48 <lis2dw12_power_mode_get+0x104>

      case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_4:
        *val = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_4;
 80039fe:	683b      	ldr	r3, [r7, #0]
 8003a00:	2213      	movs	r2, #19
 8003a02:	701a      	strb	r2, [r3, #0]
        break;
 8003a04:	e020      	b.n	8003a48 <lis2dw12_power_mode_get+0x104>

      case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_3:
        *val = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_3;
 8003a06:	683b      	ldr	r3, [r7, #0]
 8003a08:	2212      	movs	r2, #18
 8003a0a:	701a      	strb	r2, [r3, #0]
        break;
 8003a0c:	e01c      	b.n	8003a48 <lis2dw12_power_mode_get+0x104>

      case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_2:
        *val = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_2;
 8003a0e:	683b      	ldr	r3, [r7, #0]
 8003a10:	2211      	movs	r2, #17
 8003a12:	701a      	strb	r2, [r3, #0]
        break;
 8003a14:	e018      	b.n	8003a48 <lis2dw12_power_mode_get+0x104>

      case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
        *val = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit;
 8003a16:	683b      	ldr	r3, [r7, #0]
 8003a18:	2210      	movs	r2, #16
 8003a1a:	701a      	strb	r2, [r3, #0]
        break;
 8003a1c:	e014      	b.n	8003a48 <lis2dw12_power_mode_get+0x104>

      case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
        *val = LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4;
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	221b      	movs	r2, #27
 8003a22:	701a      	strb	r2, [r3, #0]
        break;
 8003a24:	e010      	b.n	8003a48 <lis2dw12_power_mode_get+0x104>

      case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
        *val = LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3;
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	221a      	movs	r2, #26
 8003a2a:	701a      	strb	r2, [r3, #0]
        break;
 8003a2c:	e00c      	b.n	8003a48 <lis2dw12_power_mode_get+0x104>

      case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
        *val = LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2;
 8003a2e:	683b      	ldr	r3, [r7, #0]
 8003a30:	2219      	movs	r2, #25
 8003a32:	701a      	strb	r2, [r3, #0]
        break;
 8003a34:	e008      	b.n	8003a48 <lis2dw12_power_mode_get+0x104>

      case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
        *val = LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit;
 8003a36:	683b      	ldr	r3, [r7, #0]
 8003a38:	2218      	movs	r2, #24
 8003a3a:	701a      	strb	r2, [r3, #0]
        break;
 8003a3c:	e004      	b.n	8003a48 <lis2dw12_power_mode_get+0x104>

      default:
        *val = LIS2DW12_HIGH_PERFORMANCE;
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	2204      	movs	r2, #4
 8003a42:	701a      	strb	r2, [r3, #0]
        break;
 8003a44:	e000      	b.n	8003a48 <lis2dw12_power_mode_get+0x104>
    }
  }
 8003a46:	46c0      	nop			; (mov r8, r8)

  return ret;
 8003a48:	697b      	ldr	r3, [r7, #20]
}
 8003a4a:	0018      	movs	r0, r3
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	b006      	add	sp, #24
 8003a50:	bdb0      	pop	{r4, r5, r7, pc}
 8003a52:	46c0      	nop			; (mov r8, r8)
 8003a54:	08015f9c 	.word	0x08015f9c

08003a58 <lis2dw12_data_rate_set>:
  * @param  val      change the values of odr in reg CTRL1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_data_rate_set(stmdev_ctx_t *ctx, lis2dw12_odr_t val)
{
 8003a58:	b590      	push	{r4, r7, lr}
 8003a5a:	b087      	sub	sp, #28
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
 8003a60:	000a      	movs	r2, r1
 8003a62:	1cfb      	adds	r3, r7, #3
 8003a64:	701a      	strb	r2, [r3, #0]
  lis2dw12_ctrl1_t ctrl1;
  lis2dw12_ctrl3_t ctrl3;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 8003a66:	2410      	movs	r4, #16
 8003a68:	193a      	adds	r2, r7, r4
 8003a6a:	6878      	ldr	r0, [r7, #4]
 8003a6c:	2301      	movs	r3, #1
 8003a6e:	2120      	movs	r1, #32
 8003a70:	f7ff feba 	bl	80037e8 <lis2dw12_read_reg>
 8003a74:	0003      	movs	r3, r0
 8003a76:	617b      	str	r3, [r7, #20]

  if (ret == 0)
 8003a78:	697b      	ldr	r3, [r7, #20]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d115      	bne.n	8003aaa <lis2dw12_data_rate_set+0x52>
  {
    ctrl1.odr = (uint8_t) val;
 8003a7e:	1cfb      	adds	r3, r7, #3
 8003a80:	781b      	ldrb	r3, [r3, #0]
 8003a82:	220f      	movs	r2, #15
 8003a84:	4013      	ands	r3, r2
 8003a86:	b2da      	uxtb	r2, r3
 8003a88:	193b      	adds	r3, r7, r4
 8003a8a:	0110      	lsls	r0, r2, #4
 8003a8c:	781a      	ldrb	r2, [r3, #0]
 8003a8e:	210f      	movs	r1, #15
 8003a90:	400a      	ands	r2, r1
 8003a92:	1c11      	adds	r1, r2, #0
 8003a94:	1c02      	adds	r2, r0, #0
 8003a96:	430a      	orrs	r2, r1
 8003a98:	701a      	strb	r2, [r3, #0]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 8003a9a:	193a      	adds	r2, r7, r4
 8003a9c:	6878      	ldr	r0, [r7, #4]
 8003a9e:	2301      	movs	r3, #1
 8003aa0:	2120      	movs	r1, #32
 8003aa2:	f7ff fec2 	bl	800382a <lis2dw12_write_reg>
 8003aa6:	0003      	movs	r3, r0
 8003aa8:	617b      	str	r3, [r7, #20]
  }

  if (ret == 0)
 8003aaa:	697b      	ldr	r3, [r7, #20]
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d108      	bne.n	8003ac2 <lis2dw12_data_rate_set+0x6a>
  {
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL3, (uint8_t *) &ctrl3, 1);
 8003ab0:	230c      	movs	r3, #12
 8003ab2:	18fa      	adds	r2, r7, r3
 8003ab4:	6878      	ldr	r0, [r7, #4]
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	2122      	movs	r1, #34	; 0x22
 8003aba:	f7ff fe95 	bl	80037e8 <lis2dw12_read_reg>
 8003abe:	0003      	movs	r3, r0
 8003ac0:	617b      	str	r3, [r7, #20]
  }

  if (ret == 0)
 8003ac2:	697b      	ldr	r3, [r7, #20]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d11a      	bne.n	8003afe <lis2dw12_data_rate_set+0xa6>
  {
    ctrl3.slp_mode = ((uint8_t) val & 0x30U) >> 4;
 8003ac8:	1cfb      	adds	r3, r7, #3
 8003aca:	781b      	ldrb	r3, [r3, #0]
 8003acc:	091b      	lsrs	r3, r3, #4
 8003ace:	1c1a      	adds	r2, r3, #0
 8003ad0:	2303      	movs	r3, #3
 8003ad2:	4013      	ands	r3, r2
 8003ad4:	b2da      	uxtb	r2, r3
 8003ad6:	240c      	movs	r4, #12
 8003ad8:	193b      	adds	r3, r7, r4
 8003ada:	2103      	movs	r1, #3
 8003adc:	400a      	ands	r2, r1
 8003ade:	0010      	movs	r0, r2
 8003ae0:	781a      	ldrb	r2, [r3, #0]
 8003ae2:	2103      	movs	r1, #3
 8003ae4:	438a      	bics	r2, r1
 8003ae6:	1c11      	adds	r1, r2, #0
 8003ae8:	1c02      	adds	r2, r0, #0
 8003aea:	430a      	orrs	r2, r1
 8003aec:	701a      	strb	r2, [r3, #0]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL3, (uint8_t *) &ctrl3, 1);
 8003aee:	193a      	adds	r2, r7, r4
 8003af0:	6878      	ldr	r0, [r7, #4]
 8003af2:	2301      	movs	r3, #1
 8003af4:	2122      	movs	r1, #34	; 0x22
 8003af6:	f7ff fe98 	bl	800382a <lis2dw12_write_reg>
 8003afa:	0003      	movs	r3, r0
 8003afc:	617b      	str	r3, [r7, #20]
  }

  return ret;
 8003afe:	697b      	ldr	r3, [r7, #20]
}
 8003b00:	0018      	movs	r0, r3
 8003b02:	46bd      	mov	sp, r7
 8003b04:	b007      	add	sp, #28
 8003b06:	bd90      	pop	{r4, r7, pc}

08003b08 <lis2dw12_data_rate_get>:
  * @param  val      Get the values of odr in reg CTRL1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_data_rate_get(stmdev_ctx_t *ctx, lis2dw12_odr_t *val)
{
 8003b08:	b5b0      	push	{r4, r5, r7, lr}
 8003b0a:	b086      	sub	sp, #24
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
 8003b10:	6039      	str	r1, [r7, #0]
  lis2dw12_ctrl1_t ctrl1;
  lis2dw12_ctrl3_t ctrl3;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 8003b12:	2410      	movs	r4, #16
 8003b14:	193a      	adds	r2, r7, r4
 8003b16:	6878      	ldr	r0, [r7, #4]
 8003b18:	2301      	movs	r3, #1
 8003b1a:	2120      	movs	r1, #32
 8003b1c:	f7ff fe64 	bl	80037e8 <lis2dw12_read_reg>
 8003b20:	0003      	movs	r3, r0
 8003b22:	617b      	str	r3, [r7, #20]

  if (ret == 0)
 8003b24:	697b      	ldr	r3, [r7, #20]
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d14f      	bne.n	8003bca <lis2dw12_data_rate_get+0xc2>
  {
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL3, (uint8_t *) &ctrl3, 1);
 8003b2a:	250c      	movs	r5, #12
 8003b2c:	197a      	adds	r2, r7, r5
 8003b2e:	6878      	ldr	r0, [r7, #4]
 8003b30:	2301      	movs	r3, #1
 8003b32:	2122      	movs	r1, #34	; 0x22
 8003b34:	f7ff fe58 	bl	80037e8 <lis2dw12_read_reg>
 8003b38:	0003      	movs	r3, r0
 8003b3a:	617b      	str	r3, [r7, #20]

    switch ((ctrl3.slp_mode << 4) + ctrl1.odr)
 8003b3c:	197b      	adds	r3, r7, r5
 8003b3e:	781b      	ldrb	r3, [r3, #0]
 8003b40:	079b      	lsls	r3, r3, #30
 8003b42:	0f9b      	lsrs	r3, r3, #30
 8003b44:	b2db      	uxtb	r3, r3
 8003b46:	011b      	lsls	r3, r3, #4
 8003b48:	193a      	adds	r2, r7, r4
 8003b4a:	7812      	ldrb	r2, [r2, #0]
 8003b4c:	0612      	lsls	r2, r2, #24
 8003b4e:	0f12      	lsrs	r2, r2, #28
 8003b50:	b2d2      	uxtb	r2, r2
 8003b52:	189b      	adds	r3, r3, r2
 8003b54:	2b32      	cmp	r3, #50	; 0x32
 8003b56:	d834      	bhi.n	8003bc2 <lis2dw12_data_rate_get+0xba>
 8003b58:	009a      	lsls	r2, r3, #2
 8003b5a:	4b1f      	ldr	r3, [pc, #124]	; (8003bd8 <lis2dw12_data_rate_get+0xd0>)
 8003b5c:	18d3      	adds	r3, r2, r3
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	469f      	mov	pc, r3
    {
      case LIS2DW12_XL_ODR_OFF:
        *val = LIS2DW12_XL_ODR_OFF;
 8003b62:	683b      	ldr	r3, [r7, #0]
 8003b64:	2200      	movs	r2, #0
 8003b66:	701a      	strb	r2, [r3, #0]
        break;
 8003b68:	e030      	b.n	8003bcc <lis2dw12_data_rate_get+0xc4>

      case LIS2DW12_XL_ODR_1Hz6_LP_ONLY:
        *val = LIS2DW12_XL_ODR_1Hz6_LP_ONLY;
 8003b6a:	683b      	ldr	r3, [r7, #0]
 8003b6c:	2201      	movs	r2, #1
 8003b6e:	701a      	strb	r2, [r3, #0]
        break;
 8003b70:	e02c      	b.n	8003bcc <lis2dw12_data_rate_get+0xc4>

      case LIS2DW12_XL_ODR_12Hz5:
        *val = LIS2DW12_XL_ODR_12Hz5;
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	2202      	movs	r2, #2
 8003b76:	701a      	strb	r2, [r3, #0]
        break;
 8003b78:	e028      	b.n	8003bcc <lis2dw12_data_rate_get+0xc4>

      case LIS2DW12_XL_ODR_25Hz:
        *val = LIS2DW12_XL_ODR_25Hz;
 8003b7a:	683b      	ldr	r3, [r7, #0]
 8003b7c:	2203      	movs	r2, #3
 8003b7e:	701a      	strb	r2, [r3, #0]
        break;
 8003b80:	e024      	b.n	8003bcc <lis2dw12_data_rate_get+0xc4>

      case LIS2DW12_XL_ODR_50Hz:
        *val = LIS2DW12_XL_ODR_50Hz;
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	2204      	movs	r2, #4
 8003b86:	701a      	strb	r2, [r3, #0]
        break;
 8003b88:	e020      	b.n	8003bcc <lis2dw12_data_rate_get+0xc4>

      case LIS2DW12_XL_ODR_100Hz:
        *val = LIS2DW12_XL_ODR_100Hz;
 8003b8a:	683b      	ldr	r3, [r7, #0]
 8003b8c:	2205      	movs	r2, #5
 8003b8e:	701a      	strb	r2, [r3, #0]
        break;
 8003b90:	e01c      	b.n	8003bcc <lis2dw12_data_rate_get+0xc4>

      case LIS2DW12_XL_ODR_200Hz:
        *val = LIS2DW12_XL_ODR_200Hz;
 8003b92:	683b      	ldr	r3, [r7, #0]
 8003b94:	2206      	movs	r2, #6
 8003b96:	701a      	strb	r2, [r3, #0]
        break;
 8003b98:	e018      	b.n	8003bcc <lis2dw12_data_rate_get+0xc4>

      case LIS2DW12_XL_ODR_400Hz:
        *val = LIS2DW12_XL_ODR_400Hz;
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	2207      	movs	r2, #7
 8003b9e:	701a      	strb	r2, [r3, #0]
        break;
 8003ba0:	e014      	b.n	8003bcc <lis2dw12_data_rate_get+0xc4>

      case LIS2DW12_XL_ODR_800Hz:
        *val = LIS2DW12_XL_ODR_800Hz;
 8003ba2:	683b      	ldr	r3, [r7, #0]
 8003ba4:	2208      	movs	r2, #8
 8003ba6:	701a      	strb	r2, [r3, #0]
        break;
 8003ba8:	e010      	b.n	8003bcc <lis2dw12_data_rate_get+0xc4>

      case LIS2DW12_XL_ODR_1k6Hz:
        *val = LIS2DW12_XL_ODR_1k6Hz;
 8003baa:	683b      	ldr	r3, [r7, #0]
 8003bac:	2209      	movs	r2, #9
 8003bae:	701a      	strb	r2, [r3, #0]
        break;
 8003bb0:	e00c      	b.n	8003bcc <lis2dw12_data_rate_get+0xc4>

      case LIS2DW12_XL_SET_SW_TRIG:
        *val = LIS2DW12_XL_SET_SW_TRIG;
 8003bb2:	683b      	ldr	r3, [r7, #0]
 8003bb4:	2232      	movs	r2, #50	; 0x32
 8003bb6:	701a      	strb	r2, [r3, #0]
        break;
 8003bb8:	e008      	b.n	8003bcc <lis2dw12_data_rate_get+0xc4>

      case LIS2DW12_XL_SET_PIN_TRIG:
        *val = LIS2DW12_XL_SET_PIN_TRIG;
 8003bba:	683b      	ldr	r3, [r7, #0]
 8003bbc:	2212      	movs	r2, #18
 8003bbe:	701a      	strb	r2, [r3, #0]
        break;
 8003bc0:	e004      	b.n	8003bcc <lis2dw12_data_rate_get+0xc4>

      default:
        *val = LIS2DW12_XL_ODR_OFF;
 8003bc2:	683b      	ldr	r3, [r7, #0]
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	701a      	strb	r2, [r3, #0]
        break;
 8003bc8:	e000      	b.n	8003bcc <lis2dw12_data_rate_get+0xc4>
    }
  }
 8003bca:	46c0      	nop			; (mov r8, r8)

  return ret;
 8003bcc:	697b      	ldr	r3, [r7, #20]
}
 8003bce:	0018      	movs	r0, r3
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	b006      	add	sp, #24
 8003bd4:	bdb0      	pop	{r4, r5, r7, pc}
 8003bd6:	46c0      	nop			; (mov r8, r8)
 8003bd8:	0801600c 	.word	0x0801600c

08003bdc <lis2dw12_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8003bdc:	b590      	push	{r4, r7, lr}
 8003bde:	b085      	sub	sp, #20
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
 8003be4:	000a      	movs	r2, r1
 8003be6:	1cfb      	adds	r3, r7, #3
 8003be8:	701a      	strb	r2, [r3, #0]
  lis2dw12_ctrl2_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL2, (uint8_t *) &reg, 1);
 8003bea:	2408      	movs	r4, #8
 8003bec:	193a      	adds	r2, r7, r4
 8003bee:	6878      	ldr	r0, [r7, #4]
 8003bf0:	2301      	movs	r3, #1
 8003bf2:	2121      	movs	r1, #33	; 0x21
 8003bf4:	f7ff fdf8 	bl	80037e8 <lis2dw12_read_reg>
 8003bf8:	0003      	movs	r3, r0
 8003bfa:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d117      	bne.n	8003c32 <lis2dw12_block_data_update_set+0x56>
  {
    reg.bdu = val;
 8003c02:	1cfb      	adds	r3, r7, #3
 8003c04:	781b      	ldrb	r3, [r3, #0]
 8003c06:	2201      	movs	r2, #1
 8003c08:	4013      	ands	r3, r2
 8003c0a:	b2da      	uxtb	r2, r3
 8003c0c:	193b      	adds	r3, r7, r4
 8003c0e:	2101      	movs	r1, #1
 8003c10:	400a      	ands	r2, r1
 8003c12:	00d0      	lsls	r0, r2, #3
 8003c14:	781a      	ldrb	r2, [r3, #0]
 8003c16:	2108      	movs	r1, #8
 8003c18:	438a      	bics	r2, r1
 8003c1a:	1c11      	adds	r1, r2, #0
 8003c1c:	1c02      	adds	r2, r0, #0
 8003c1e:	430a      	orrs	r2, r1
 8003c20:	701a      	strb	r2, [r3, #0]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL2, (uint8_t *) &reg, 1);
 8003c22:	193a      	adds	r2, r7, r4
 8003c24:	6878      	ldr	r0, [r7, #4]
 8003c26:	2301      	movs	r3, #1
 8003c28:	2121      	movs	r1, #33	; 0x21
 8003c2a:	f7ff fdfe 	bl	800382a <lis2dw12_write_reg>
 8003c2e:	0003      	movs	r3, r0
 8003c30:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8003c32:	68fb      	ldr	r3, [r7, #12]
}
 8003c34:	0018      	movs	r0, r3
 8003c36:	46bd      	mov	sp, r7
 8003c38:	b005      	add	sp, #20
 8003c3a:	bd90      	pop	{r4, r7, pc}

08003c3c <lis2dw12_full_scale_set>:
  * @param  val      change the values of fs in reg CTRL6
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_full_scale_set(stmdev_ctx_t *ctx, lis2dw12_fs_t val)
{
 8003c3c:	b590      	push	{r4, r7, lr}
 8003c3e:	b085      	sub	sp, #20
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
 8003c44:	000a      	movs	r2, r1
 8003c46:	1cfb      	adds	r3, r7, #3
 8003c48:	701a      	strb	r2, [r3, #0]
  lis2dw12_ctrl6_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &reg, 1);
 8003c4a:	2408      	movs	r4, #8
 8003c4c:	193a      	adds	r2, r7, r4
 8003c4e:	6878      	ldr	r0, [r7, #4]
 8003c50:	2301      	movs	r3, #1
 8003c52:	2125      	movs	r1, #37	; 0x25
 8003c54:	f7ff fdc8 	bl	80037e8 <lis2dw12_read_reg>
 8003c58:	0003      	movs	r3, r0
 8003c5a:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d117      	bne.n	8003c92 <lis2dw12_full_scale_set+0x56>
  {
    reg.fs = (uint8_t) val;
 8003c62:	1cfb      	adds	r3, r7, #3
 8003c64:	781b      	ldrb	r3, [r3, #0]
 8003c66:	2203      	movs	r2, #3
 8003c68:	4013      	ands	r3, r2
 8003c6a:	b2da      	uxtb	r2, r3
 8003c6c:	193b      	adds	r3, r7, r4
 8003c6e:	2103      	movs	r1, #3
 8003c70:	400a      	ands	r2, r1
 8003c72:	0110      	lsls	r0, r2, #4
 8003c74:	781a      	ldrb	r2, [r3, #0]
 8003c76:	2130      	movs	r1, #48	; 0x30
 8003c78:	438a      	bics	r2, r1
 8003c7a:	1c11      	adds	r1, r2, #0
 8003c7c:	1c02      	adds	r2, r0, #0
 8003c7e:	430a      	orrs	r2, r1
 8003c80:	701a      	strb	r2, [r3, #0]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &reg, 1);
 8003c82:	193a      	adds	r2, r7, r4
 8003c84:	6878      	ldr	r0, [r7, #4]
 8003c86:	2301      	movs	r3, #1
 8003c88:	2125      	movs	r1, #37	; 0x25
 8003c8a:	f7ff fdce 	bl	800382a <lis2dw12_write_reg>
 8003c8e:	0003      	movs	r3, r0
 8003c90:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8003c92:	68fb      	ldr	r3, [r7, #12]
}
 8003c94:	0018      	movs	r0, r3
 8003c96:	46bd      	mov	sp, r7
 8003c98:	b005      	add	sp, #20
 8003c9a:	bd90      	pop	{r4, r7, pc}

08003c9c <lis2dw12_full_scale_get>:
  * @param  val      Get the values of fs in reg CTRL6
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_full_scale_get(stmdev_ctx_t *ctx, lis2dw12_fs_t *val)
{
 8003c9c:	b590      	push	{r4, r7, lr}
 8003c9e:	b085      	sub	sp, #20
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
 8003ca4:	6039      	str	r1, [r7, #0]
  lis2dw12_ctrl6_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &reg, 1);
 8003ca6:	2408      	movs	r4, #8
 8003ca8:	193a      	adds	r2, r7, r4
 8003caa:	6878      	ldr	r0, [r7, #4]
 8003cac:	2301      	movs	r3, #1
 8003cae:	2125      	movs	r1, #37	; 0x25
 8003cb0:	f7ff fd9a 	bl	80037e8 <lis2dw12_read_reg>
 8003cb4:	0003      	movs	r3, r0
 8003cb6:	60fb      	str	r3, [r7, #12]

  switch (reg.fs)
 8003cb8:	193b      	adds	r3, r7, r4
 8003cba:	781b      	ldrb	r3, [r3, #0]
 8003cbc:	069b      	lsls	r3, r3, #26
 8003cbe:	0f9b      	lsrs	r3, r3, #30
 8003cc0:	b2db      	uxtb	r3, r3
 8003cc2:	2b03      	cmp	r3, #3
 8003cc4:	d014      	beq.n	8003cf0 <lis2dw12_full_scale_get+0x54>
 8003cc6:	dc17      	bgt.n	8003cf8 <lis2dw12_full_scale_get+0x5c>
 8003cc8:	2b02      	cmp	r3, #2
 8003cca:	d00d      	beq.n	8003ce8 <lis2dw12_full_scale_get+0x4c>
 8003ccc:	dc14      	bgt.n	8003cf8 <lis2dw12_full_scale_get+0x5c>
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d002      	beq.n	8003cd8 <lis2dw12_full_scale_get+0x3c>
 8003cd2:	2b01      	cmp	r3, #1
 8003cd4:	d004      	beq.n	8003ce0 <lis2dw12_full_scale_get+0x44>
 8003cd6:	e00f      	b.n	8003cf8 <lis2dw12_full_scale_get+0x5c>
  {
    case LIS2DW12_2g:
      *val = LIS2DW12_2g;
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	2200      	movs	r2, #0
 8003cdc:	701a      	strb	r2, [r3, #0]
      break;
 8003cde:	e00f      	b.n	8003d00 <lis2dw12_full_scale_get+0x64>

    case LIS2DW12_4g:
      *val = LIS2DW12_4g;
 8003ce0:	683b      	ldr	r3, [r7, #0]
 8003ce2:	2201      	movs	r2, #1
 8003ce4:	701a      	strb	r2, [r3, #0]
      break;
 8003ce6:	e00b      	b.n	8003d00 <lis2dw12_full_scale_get+0x64>

    case LIS2DW12_8g:
      *val = LIS2DW12_8g;
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	2202      	movs	r2, #2
 8003cec:	701a      	strb	r2, [r3, #0]
      break;
 8003cee:	e007      	b.n	8003d00 <lis2dw12_full_scale_get+0x64>

    case LIS2DW12_16g:
      *val = LIS2DW12_16g;
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	2203      	movs	r2, #3
 8003cf4:	701a      	strb	r2, [r3, #0]
      break;
 8003cf6:	e003      	b.n	8003d00 <lis2dw12_full_scale_get+0x64>

    default:
      *val = LIS2DW12_2g;
 8003cf8:	683b      	ldr	r3, [r7, #0]
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	701a      	strb	r2, [r3, #0]
      break;
 8003cfe:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 8003d00:	68fb      	ldr	r3, [r7, #12]
}
 8003d02:	0018      	movs	r0, r3
 8003d04:	46bd      	mov	sp, r7
 8003d06:	b005      	add	sp, #20
 8003d08:	bd90      	pop	{r4, r7, pc}

08003d0a <lis2dw12_acceleration_raw_get>:
  * @param  val      buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8003d0a:	b590      	push	{r4, r7, lr}
 8003d0c:	b087      	sub	sp, #28
 8003d0e:	af00      	add	r7, sp, #0
 8003d10:	6078      	str	r0, [r7, #4]
 8003d12:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_OUT_X_L, buff, 6);
 8003d14:	240c      	movs	r4, #12
 8003d16:	193a      	adds	r2, r7, r4
 8003d18:	6878      	ldr	r0, [r7, #4]
 8003d1a:	2306      	movs	r3, #6
 8003d1c:	2128      	movs	r1, #40	; 0x28
 8003d1e:	f7ff fd63 	bl	80037e8 <lis2dw12_read_reg>
 8003d22:	0003      	movs	r3, r0
 8003d24:	617b      	str	r3, [r7, #20]
  val[0] = (int16_t)buff[1];
 8003d26:	0021      	movs	r1, r4
 8003d28:	187b      	adds	r3, r7, r1
 8003d2a:	785b      	ldrb	r3, [r3, #1]
 8003d2c:	b21a      	sxth	r2, r3
 8003d2e:	683b      	ldr	r3, [r7, #0]
 8003d30:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	2200      	movs	r2, #0
 8003d36:	5e9b      	ldrsh	r3, [r3, r2]
 8003d38:	b29b      	uxth	r3, r3
 8003d3a:	021b      	lsls	r3, r3, #8
 8003d3c:	b29a      	uxth	r2, r3
 8003d3e:	187b      	adds	r3, r7, r1
 8003d40:	781b      	ldrb	r3, [r3, #0]
 8003d42:	b29b      	uxth	r3, r3
 8003d44:	18d3      	adds	r3, r2, r3
 8003d46:	b29b      	uxth	r3, r3
 8003d48:	b21a      	sxth	r2, r3
 8003d4a:	683b      	ldr	r3, [r7, #0]
 8003d4c:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8003d4e:	187b      	adds	r3, r7, r1
 8003d50:	78da      	ldrb	r2, [r3, #3]
 8003d52:	683b      	ldr	r3, [r7, #0]
 8003d54:	3302      	adds	r3, #2
 8003d56:	b212      	sxth	r2, r2
 8003d58:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8003d5a:	683b      	ldr	r3, [r7, #0]
 8003d5c:	3302      	adds	r3, #2
 8003d5e:	2200      	movs	r2, #0
 8003d60:	5e9b      	ldrsh	r3, [r3, r2]
 8003d62:	b29b      	uxth	r3, r3
 8003d64:	021b      	lsls	r3, r3, #8
 8003d66:	b29a      	uxth	r2, r3
 8003d68:	187b      	adds	r3, r7, r1
 8003d6a:	789b      	ldrb	r3, [r3, #2]
 8003d6c:	b29b      	uxth	r3, r3
 8003d6e:	18d3      	adds	r3, r2, r3
 8003d70:	b29a      	uxth	r2, r3
 8003d72:	683b      	ldr	r3, [r7, #0]
 8003d74:	3302      	adds	r3, #2
 8003d76:	b212      	sxth	r2, r2
 8003d78:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8003d7a:	187b      	adds	r3, r7, r1
 8003d7c:	795a      	ldrb	r2, [r3, #5]
 8003d7e:	683b      	ldr	r3, [r7, #0]
 8003d80:	3304      	adds	r3, #4
 8003d82:	b212      	sxth	r2, r2
 8003d84:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8003d86:	683b      	ldr	r3, [r7, #0]
 8003d88:	3304      	adds	r3, #4
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	5e9b      	ldrsh	r3, [r3, r2]
 8003d8e:	b29b      	uxth	r3, r3
 8003d90:	021b      	lsls	r3, r3, #8
 8003d92:	b29a      	uxth	r2, r3
 8003d94:	187b      	adds	r3, r7, r1
 8003d96:	791b      	ldrb	r3, [r3, #4]
 8003d98:	b29b      	uxth	r3, r3
 8003d9a:	18d3      	adds	r3, r2, r3
 8003d9c:	b29a      	uxth	r2, r3
 8003d9e:	683b      	ldr	r3, [r7, #0]
 8003da0:	3304      	adds	r3, #4
 8003da2:	b212      	sxth	r2, r2
 8003da4:	801a      	strh	r2, [r3, #0]

  return ret;
 8003da6:	697b      	ldr	r3, [r7, #20]
}
 8003da8:	0018      	movs	r0, r3
 8003daa:	46bd      	mov	sp, r7
 8003dac:	b007      	add	sp, #28
 8003dae:	bd90      	pop	{r4, r7, pc}

08003db0 <lis2dw12_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b084      	sub	sp, #16
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
 8003db8:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_WHO_AM_I, buff, 1);
 8003dba:	683a      	ldr	r2, [r7, #0]
 8003dbc:	6878      	ldr	r0, [r7, #4]
 8003dbe:	2301      	movs	r3, #1
 8003dc0:	210f      	movs	r1, #15
 8003dc2:	f7ff fd11 	bl	80037e8 <lis2dw12_read_reg>
 8003dc6:	0003      	movs	r3, r0
 8003dc8:	60fb      	str	r3, [r7, #12]

  return ret;
 8003dca:	68fb      	ldr	r3, [r7, #12]
}
 8003dcc:	0018      	movs	r0, r3
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	b004      	add	sp, #16
 8003dd2:	bd80      	pop	{r7, pc}

08003dd4 <lis2dw12_auto_increment_set>:
  * @param  val      change the values of if_add_inc in reg CTRL2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8003dd4:	b590      	push	{r4, r7, lr}
 8003dd6:	b085      	sub	sp, #20
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
 8003ddc:	000a      	movs	r2, r1
 8003dde:	1cfb      	adds	r3, r7, #3
 8003de0:	701a      	strb	r2, [r3, #0]
  lis2dw12_ctrl2_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL2, (uint8_t *) &reg, 1);
 8003de2:	2408      	movs	r4, #8
 8003de4:	193a      	adds	r2, r7, r4
 8003de6:	6878      	ldr	r0, [r7, #4]
 8003de8:	2301      	movs	r3, #1
 8003dea:	2121      	movs	r1, #33	; 0x21
 8003dec:	f7ff fcfc 	bl	80037e8 <lis2dw12_read_reg>
 8003df0:	0003      	movs	r3, r0
 8003df2:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d117      	bne.n	8003e2a <lis2dw12_auto_increment_set+0x56>
  {
    reg.if_add_inc = val;
 8003dfa:	1cfb      	adds	r3, r7, #3
 8003dfc:	781b      	ldrb	r3, [r3, #0]
 8003dfe:	2201      	movs	r2, #1
 8003e00:	4013      	ands	r3, r2
 8003e02:	b2da      	uxtb	r2, r3
 8003e04:	193b      	adds	r3, r7, r4
 8003e06:	2101      	movs	r1, #1
 8003e08:	400a      	ands	r2, r1
 8003e0a:	0090      	lsls	r0, r2, #2
 8003e0c:	781a      	ldrb	r2, [r3, #0]
 8003e0e:	2104      	movs	r1, #4
 8003e10:	438a      	bics	r2, r1
 8003e12:	1c11      	adds	r1, r2, #0
 8003e14:	1c02      	adds	r2, r0, #0
 8003e16:	430a      	orrs	r2, r1
 8003e18:	701a      	strb	r2, [r3, #0]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL2, (uint8_t *) &reg, 1);
 8003e1a:	193a      	adds	r2, r7, r4
 8003e1c:	6878      	ldr	r0, [r7, #4]
 8003e1e:	2301      	movs	r3, #1
 8003e20:	2121      	movs	r1, #33	; 0x21
 8003e22:	f7ff fd02 	bl	800382a <lis2dw12_write_reg>
 8003e26:	0003      	movs	r3, r0
 8003e28:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8003e2a:	68fb      	ldr	r3, [r7, #12]
}
 8003e2c:	0018      	movs	r0, r3
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	b005      	add	sp, #20
 8003e32:	bd90      	pop	{r4, r7, pc}

08003e34 <lis2dw12_fifo_mode_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_fifo_mode_set(stmdev_ctx_t *ctx,
                               lis2dw12_fmode_t val)
{
 8003e34:	b590      	push	{r4, r7, lr}
 8003e36:	b085      	sub	sp, #20
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
 8003e3c:	000a      	movs	r2, r1
 8003e3e:	1cfb      	adds	r3, r7, #3
 8003e40:	701a      	strb	r2, [r3, #0]
  lis2dw12_fifo_ctrl_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_FIFO_CTRL, (uint8_t *) &reg, 1);
 8003e42:	2408      	movs	r4, #8
 8003e44:	193a      	adds	r2, r7, r4
 8003e46:	6878      	ldr	r0, [r7, #4]
 8003e48:	2301      	movs	r3, #1
 8003e4a:	212e      	movs	r1, #46	; 0x2e
 8003e4c:	f7ff fccc 	bl	80037e8 <lis2dw12_read_reg>
 8003e50:	0003      	movs	r3, r0
 8003e52:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d115      	bne.n	8003e86 <lis2dw12_fifo_mode_set+0x52>
  {
    reg.fmode = (uint8_t) val;
 8003e5a:	1cfb      	adds	r3, r7, #3
 8003e5c:	781b      	ldrb	r3, [r3, #0]
 8003e5e:	2207      	movs	r2, #7
 8003e60:	4013      	ands	r3, r2
 8003e62:	b2da      	uxtb	r2, r3
 8003e64:	193b      	adds	r3, r7, r4
 8003e66:	0150      	lsls	r0, r2, #5
 8003e68:	781a      	ldrb	r2, [r3, #0]
 8003e6a:	211f      	movs	r1, #31
 8003e6c:	400a      	ands	r2, r1
 8003e6e:	1c11      	adds	r1, r2, #0
 8003e70:	1c02      	adds	r2, r0, #0
 8003e72:	430a      	orrs	r2, r1
 8003e74:	701a      	strb	r2, [r3, #0]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_FIFO_CTRL, (uint8_t *) &reg, 1);
 8003e76:	193a      	adds	r2, r7, r4
 8003e78:	6878      	ldr	r0, [r7, #4]
 8003e7a:	2301      	movs	r3, #1
 8003e7c:	212e      	movs	r1, #46	; 0x2e
 8003e7e:	f7ff fcd4 	bl	800382a <lis2dw12_write_reg>
 8003e82:	0003      	movs	r3, r0
 8003e84:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8003e86:	68fb      	ldr	r3, [r7, #12]
}
 8003e88:	0018      	movs	r0, r3
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	b005      	add	sp, #20
 8003e8e:	bd90      	pop	{r4, r7, pc}

08003e90 <LIS2MDL_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_RegisterBusIO(LIS2MDL_Object_t *pObj, LIS2MDL_IO_t *pIO)
{
 8003e90:	b580      	push	{r7, lr}
 8003e92:	b084      	sub	sp, #16
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
 8003e98:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2MDL_OK;
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d103      	bne.n	8003eac <LIS2MDL_RegisterBusIO+0x1c>
  {
    ret = LIS2MDL_ERROR;
 8003ea4:	2301      	movs	r3, #1
 8003ea6:	425b      	negs	r3, r3
 8003ea8:	60fb      	str	r3, [r7, #12]
 8003eaa:	e063      	b.n	8003f74 <LIS2MDL_RegisterBusIO+0xe4>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8003eac:	683b      	ldr	r3, [r7, #0]
 8003eae:	681a      	ldr	r2, [r3, #0]
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8003eb4:	683b      	ldr	r3, [r7, #0]
 8003eb6:	685a      	ldr	r2, [r3, #4]
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8003ebc:	683b      	ldr	r3, [r7, #0]
 8003ebe:	689a      	ldr	r2, [r3, #8]
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	7b1a      	ldrb	r2, [r3, #12]
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	691a      	ldr	r2, [r3, #16]
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	695a      	ldr	r2, [r3, #20]
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	699a      	ldr	r2, [r3, #24]
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadMagRegWrap;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	4a26      	ldr	r2, [pc, #152]	; (8003f80 <LIS2MDL_RegisterBusIO+0xf0>)
 8003ee8:	621a      	str	r2, [r3, #32]
    pObj->Ctx.write_reg = WriteMagRegWrap;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	4a25      	ldr	r2, [pc, #148]	; (8003f84 <LIS2MDL_RegisterBusIO+0xf4>)
 8003eee:	61da      	str	r2, [r3, #28]
    pObj->Ctx.handle    = pObj;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	687a      	ldr	r2, [r7, #4]
 8003ef4:	625a      	str	r2, [r3, #36]	; 0x24

    if (pObj->IO.Init == NULL)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d103      	bne.n	8003f06 <LIS2MDL_RegisterBusIO+0x76>
    {
      ret = LIS2MDL_ERROR;
 8003efe:	2301      	movs	r3, #1
 8003f00:	425b      	negs	r3, r3
 8003f02:	60fb      	str	r3, [r7, #12]
 8003f04:	e036      	b.n	8003f74 <LIS2MDL_RegisterBusIO+0xe4>
    }
    else if (pObj->IO.Init() != LIS2MDL_OK)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	4798      	blx	r3
 8003f0c:	1e03      	subs	r3, r0, #0
 8003f0e:	d003      	beq.n	8003f18 <LIS2MDL_RegisterBusIO+0x88>
    {
      ret = LIS2MDL_ERROR;
 8003f10:	2301      	movs	r3, #1
 8003f12:	425b      	negs	r3, r3
 8003f14:	60fb      	str	r3, [r7, #12]
 8003f16:	e02d      	b.n	8003f74 <LIS2MDL_RegisterBusIO+0xe4>
    }
    else
    {
      if (pObj->IO.BusType != LIS2MDL_I2C_BUS) /* If the bus type is not I2C */
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	689b      	ldr	r3, [r3, #8]
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d029      	beq.n	8003f74 <LIS2MDL_RegisterBusIO+0xe4>
      {
        /* Disable I2C interface support and enable eventually SPI 4-Wires only the first time */
        if (pObj->is_initialized == 0U)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2228      	movs	r2, #40	; 0x28
 8003f24:	5c9b      	ldrb	r3, [r3, r2]
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d124      	bne.n	8003f74 <LIS2MDL_RegisterBusIO+0xe4>
        {
          if (pObj->IO.BusType == LIS2MDL_SPI_4WIRES_BUS) /* SPI 4-Wires */
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	689b      	ldr	r3, [r3, #8]
 8003f2e:	2b01      	cmp	r3, #1
 8003f30:	d10f      	bne.n	8003f52 <LIS2MDL_RegisterBusIO+0xc2>
          {
            /* Enable SPI 4-Wires and disable I2C support on the component */
            uint8_t data = 0x34;
 8003f32:	210b      	movs	r1, #11
 8003f34:	187b      	adds	r3, r7, r1
 8003f36:	2234      	movs	r2, #52	; 0x34
 8003f38:	701a      	strb	r2, [r3, #0]

            if (LIS2MDL_Write_Reg(pObj, LIS2MDL_CFG_REG_C, data) != LIS2MDL_OK)
 8003f3a:	187b      	adds	r3, r7, r1
 8003f3c:	781a      	ldrb	r2, [r3, #0]
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	2162      	movs	r1, #98	; 0x62
 8003f42:	0018      	movs	r0, r3
 8003f44:	f000 fb2a 	bl	800459c <LIS2MDL_Write_Reg>
 8003f48:	1e03      	subs	r3, r0, #0
 8003f4a:	d013      	beq.n	8003f74 <LIS2MDL_RegisterBusIO+0xe4>
            {
              return LIS2MDL_ERROR;
 8003f4c:	2301      	movs	r3, #1
 8003f4e:	425b      	negs	r3, r3
 8003f50:	e011      	b.n	8003f76 <LIS2MDL_RegisterBusIO+0xe6>
            }
          }
          else if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	689b      	ldr	r3, [r3, #8]
 8003f56:	2b03      	cmp	r3, #3
 8003f58:	d101      	bne.n	8003f5e <LIS2MDL_RegisterBusIO+0xce>
          {
            /* Do nothing, just keep I2C support on the component */
            return ret;
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	e00b      	b.n	8003f76 <LIS2MDL_RegisterBusIO+0xe6>
          }
          else
          {
            /* Disable I2C interface on the component */
            if (lis2mdl_i2c_interface_set(&(pObj->Ctx), LIS2MDL_I2C_DISABLE) != LIS2MDL_OK)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	331c      	adds	r3, #28
 8003f62:	2101      	movs	r1, #1
 8003f64:	0018      	movs	r0, r3
 8003f66:	f001 f831 	bl	8004fcc <lis2mdl_i2c_interface_set>
 8003f6a:	1e03      	subs	r3, r0, #0
 8003f6c:	d002      	beq.n	8003f74 <LIS2MDL_RegisterBusIO+0xe4>
            {
              return LIS2MDL_ERROR;
 8003f6e:	2301      	movs	r3, #1
 8003f70:	425b      	negs	r3, r3
 8003f72:	e000      	b.n	8003f76 <LIS2MDL_RegisterBusIO+0xe6>
        }
      }
    }
  }

  return ret;
 8003f74:	68fb      	ldr	r3, [r7, #12]
}
 8003f76:	0018      	movs	r0, r3
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	b004      	add	sp, #16
 8003f7c:	bd80      	pop	{r7, pc}
 8003f7e:	46c0      	nop			; (mov r8, r8)
 8003f80:	080045fb 	.word	0x080045fb
 8003f84:	0800469d 	.word	0x0800469d

08003f88 <LIS2MDL_Init>:
  * @brief  Initialize the LIS2MDL sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_Init(LIS2MDL_Object_t *pObj)
{
 8003f88:	b590      	push	{r4, r7, lr}
 8003f8a:	b085      	sub	sp, #20
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
  lis2mdl_cfg_reg_a_t reg_a;
  lis2mdl_cfg_reg_c_t reg_c;

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	689b      	ldr	r3, [r3, #8]
 8003f94:	2b03      	cmp	r3, #3
 8003f96:	d147      	bne.n	8004028 <LIS2MDL_Init+0xa0>
  {
    /* Read configuration from CFG_REG_C & CFG_REG_A regs */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_C, (uint8_t *)&reg_c, 1) != LIS2MDL_OK)
 8003f98:	2308      	movs	r3, #8
 8003f9a:	18fa      	adds	r2, r7, r3
 8003f9c:	6878      	ldr	r0, [r7, #4]
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	2162      	movs	r1, #98	; 0x62
 8003fa2:	f000 fbcc 	bl	800473e <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 8003fa6:	1e03      	subs	r3, r0, #0
 8003fa8:	d002      	beq.n	8003fb0 <LIS2MDL_Init+0x28>
    {
      return LIS2MDL_ERROR;
 8003faa:	2301      	movs	r3, #1
 8003fac:	425b      	negs	r3, r3
 8003fae:	e06c      	b.n	800408a <LIS2MDL_Init+0x102>
    }
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8003fb0:	230c      	movs	r3, #12
 8003fb2:	18fa      	adds	r2, r7, r3
 8003fb4:	6878      	ldr	r0, [r7, #4]
 8003fb6:	2301      	movs	r3, #1
 8003fb8:	2160      	movs	r1, #96	; 0x60
 8003fba:	f000 fbc0 	bl	800473e <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 8003fbe:	1e03      	subs	r3, r0, #0
 8003fc0:	d002      	beq.n	8003fc8 <LIS2MDL_Init+0x40>
    {
      return LIS2MDL_ERROR;
 8003fc2:	2301      	movs	r3, #1
 8003fc4:	425b      	negs	r3, r3
 8003fc6:	e060      	b.n	800408a <LIS2MDL_Init+0x102>
    }

    /* Enable BDU */
    reg_c.bdu = PROPERTY_ENABLE;
 8003fc8:	2008      	movs	r0, #8
 8003fca:	183b      	adds	r3, r7, r0
 8003fcc:	781a      	ldrb	r2, [r3, #0]
 8003fce:	2110      	movs	r1, #16
 8003fd0:	430a      	orrs	r2, r1
 8003fd2:	701a      	strb	r2, [r3, #0]

    /* Self Test disabled. */
    reg_c.self_test = PROPERTY_DISABLE;
 8003fd4:	183b      	adds	r3, r7, r0
 8003fd6:	781a      	ldrb	r2, [r3, #0]
 8003fd8:	2102      	movs	r1, #2
 8003fda:	438a      	bics	r2, r1
 8003fdc:	701a      	strb	r2, [r3, #0]

    /* Operating mode selection - power down */
    reg_a.md = LIS2MDL_POWER_DOWN;
 8003fde:	240c      	movs	r4, #12
 8003fe0:	193b      	adds	r3, r7, r4
 8003fe2:	781a      	ldrb	r2, [r3, #0]
 8003fe4:	2103      	movs	r1, #3
 8003fe6:	438a      	bics	r2, r1
 8003fe8:	1c11      	adds	r1, r2, #0
 8003fea:	2202      	movs	r2, #2
 8003fec:	430a      	orrs	r2, r1
 8003fee:	701a      	strb	r2, [r3, #0]

    /* Output data rate selection */
    reg_a.odr = LIS2MDL_ODR_100Hz;
 8003ff0:	193b      	adds	r3, r7, r4
 8003ff2:	781a      	ldrb	r2, [r3, #0]
 8003ff4:	210c      	movs	r1, #12
 8003ff6:	430a      	orrs	r2, r1
 8003ff8:	701a      	strb	r2, [r3, #0]

    /* Write configuration to CFG_REG_C & CFG_REG_A regs */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_C, (uint8_t *)&reg_c, 1) != LIS2MDL_OK)
 8003ffa:	183a      	adds	r2, r7, r0
 8003ffc:	6878      	ldr	r0, [r7, #4]
 8003ffe:	2301      	movs	r3, #1
 8004000:	2162      	movs	r1, #98	; 0x62
 8004002:	f000 fd03 	bl	8004a0c <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 8004006:	1e03      	subs	r3, r0, #0
 8004008:	d002      	beq.n	8004010 <LIS2MDL_Init+0x88>
    {
      return LIS2MDL_ERROR;
 800400a:	2301      	movs	r3, #1
 800400c:	425b      	negs	r3, r3
 800400e:	e03c      	b.n	800408a <LIS2MDL_Init+0x102>
    }
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8004010:	230c      	movs	r3, #12
 8004012:	18fa      	adds	r2, r7, r3
 8004014:	6878      	ldr	r0, [r7, #4]
 8004016:	2301      	movs	r3, #1
 8004018:	2160      	movs	r1, #96	; 0x60
 800401a:	f000 fcf7 	bl	8004a0c <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 800401e:	1e03      	subs	r3, r0, #0
 8004020:	d02e      	beq.n	8004080 <LIS2MDL_Init+0xf8>
    {
      return LIS2MDL_ERROR;
 8004022:	2301      	movs	r3, #1
 8004024:	425b      	negs	r3, r3
 8004026:	e030      	b.n	800408a <LIS2MDL_Init+0x102>
    }
  }
  else
  {
    /* Enable BDU */
    if (lis2mdl_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LIS2MDL_OK)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	331c      	adds	r3, #28
 800402c:	2101      	movs	r1, #1
 800402e:	0018      	movs	r0, r3
 8004030:	f000 ff07 	bl	8004e42 <lis2mdl_block_data_update_set>
 8004034:	1e03      	subs	r3, r0, #0
 8004036:	d002      	beq.n	800403e <LIS2MDL_Init+0xb6>
    {
      return LIS2MDL_ERROR;
 8004038:	2301      	movs	r3, #1
 800403a:	425b      	negs	r3, r3
 800403c:	e025      	b.n	800408a <LIS2MDL_Init+0x102>
    }

    /* Operating mode selection - power down */
    if (lis2mdl_operating_mode_set(&(pObj->Ctx), LIS2MDL_POWER_DOWN) != LIS2MDL_OK)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	331c      	adds	r3, #28
 8004042:	2102      	movs	r1, #2
 8004044:	0018      	movs	r0, r3
 8004046:	f000 fe65 	bl	8004d14 <lis2mdl_operating_mode_set>
 800404a:	1e03      	subs	r3, r0, #0
 800404c:	d002      	beq.n	8004054 <LIS2MDL_Init+0xcc>
    {
      return LIS2MDL_ERROR;
 800404e:	2301      	movs	r3, #1
 8004050:	425b      	negs	r3, r3
 8004052:	e01a      	b.n	800408a <LIS2MDL_Init+0x102>
    }

    /* Output data rate selection */
    if (lis2mdl_data_rate_set(&(pObj->Ctx), LIS2MDL_ODR_100Hz) != LIS2MDL_OK)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	331c      	adds	r3, #28
 8004058:	2103      	movs	r1, #3
 800405a:	0018      	movs	r0, r3
 800405c:	f000 fe8a 	bl	8004d74 <lis2mdl_data_rate_set>
 8004060:	1e03      	subs	r3, r0, #0
 8004062:	d002      	beq.n	800406a <LIS2MDL_Init+0xe2>
    {
      return LIS2MDL_ERROR;
 8004064:	2301      	movs	r3, #1
 8004066:	425b      	negs	r3, r3
 8004068:	e00f      	b.n	800408a <LIS2MDL_Init+0x102>
    }

    /* Self Test disabled. */
    if (lis2mdl_self_test_set(&(pObj->Ctx), PROPERTY_DISABLE) != LIS2MDL_OK)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	331c      	adds	r3, #28
 800406e:	2100      	movs	r1, #0
 8004070:	0018      	movs	r0, r3
 8004072:	f000 ff7b 	bl	8004f6c <lis2mdl_self_test_set>
 8004076:	1e03      	subs	r3, r0, #0
 8004078:	d002      	beq.n	8004080 <LIS2MDL_Init+0xf8>
    {
      return LIS2MDL_ERROR;
 800407a:	2301      	movs	r3, #1
 800407c:	425b      	negs	r3, r3
 800407e:	e004      	b.n	800408a <LIS2MDL_Init+0x102>
    }
  }

  pObj->is_initialized = 1;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2228      	movs	r2, #40	; 0x28
 8004084:	2101      	movs	r1, #1
 8004086:	5499      	strb	r1, [r3, r2]

  return LIS2MDL_OK;
 8004088:	2300      	movs	r3, #0
}
 800408a:	0018      	movs	r0, r3
 800408c:	46bd      	mov	sp, r7
 800408e:	b005      	add	sp, #20
 8004090:	bd90      	pop	{r4, r7, pc}

08004092 <LIS2MDL_DeInit>:
  * @brief  Deinitialize the LIS2MDL magnetometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_DeInit(LIS2MDL_Object_t *pObj)
{
 8004092:	b580      	push	{r7, lr}
 8004094:	b082      	sub	sp, #8
 8004096:	af00      	add	r7, sp, #0
 8004098:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LIS2MDL_MAG_Disable(pObj) != LIS2MDL_OK)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	0018      	movs	r0, r3
 800409e:	f000 f89d 	bl	80041dc <LIS2MDL_MAG_Disable>
 80040a2:	1e03      	subs	r3, r0, #0
 80040a4:	d002      	beq.n	80040ac <LIS2MDL_DeInit+0x1a>
  {
    return LIS2MDL_ERROR;
 80040a6:	2301      	movs	r3, #1
 80040a8:	425b      	negs	r3, r3
 80040aa:	e004      	b.n	80040b6 <LIS2MDL_DeInit+0x24>
  }

  pObj->is_initialized = 0;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2228      	movs	r2, #40	; 0x28
 80040b0:	2100      	movs	r1, #0
 80040b2:	5499      	strb	r1, [r3, r2]

  return LIS2MDL_OK;
 80040b4:	2300      	movs	r3, #0
}
 80040b6:	0018      	movs	r0, r3
 80040b8:	46bd      	mov	sp, r7
 80040ba:	b002      	add	sp, #8
 80040bc:	bd80      	pop	{r7, pc}

080040be <LIS2MDL_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_ReadID(LIS2MDL_Object_t *pObj, uint8_t *Id)
{
 80040be:	b580      	push	{r7, lr}
 80040c0:	b082      	sub	sp, #8
 80040c2:	af00      	add	r7, sp, #0
 80040c4:	6078      	str	r0, [r7, #4]
 80040c6:	6039      	str	r1, [r7, #0]
  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	689b      	ldr	r3, [r3, #8]
 80040cc:	2b03      	cmp	r3, #3
 80040ce:	d10a      	bne.n	80040e6 <LIS2MDL_ReadID+0x28>
  {
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_WHO_AM_I, Id, 1) != LIS2MDL_OK)
 80040d0:	683a      	ldr	r2, [r7, #0]
 80040d2:	6878      	ldr	r0, [r7, #4]
 80040d4:	2301      	movs	r3, #1
 80040d6:	214f      	movs	r1, #79	; 0x4f
 80040d8:	f000 fb31 	bl	800473e <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 80040dc:	1e03      	subs	r3, r0, #0
 80040de:	d00e      	beq.n	80040fe <LIS2MDL_ReadID+0x40>
    {
      return LIS2MDL_ERROR;
 80040e0:	2301      	movs	r3, #1
 80040e2:	425b      	negs	r3, r3
 80040e4:	e00c      	b.n	8004100 <LIS2MDL_ReadID+0x42>
    }
  }
  else
  {
    if (lis2mdl_device_id_get(&(pObj->Ctx), Id) != LIS2MDL_OK)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	331c      	adds	r3, #28
 80040ea:	683a      	ldr	r2, [r7, #0]
 80040ec:	0011      	movs	r1, r2
 80040ee:	0018      	movs	r0, r3
 80040f0:	f000 ff2a 	bl	8004f48 <lis2mdl_device_id_get>
 80040f4:	1e03      	subs	r3, r0, #0
 80040f6:	d002      	beq.n	80040fe <LIS2MDL_ReadID+0x40>
    {
      return LIS2MDL_ERROR;
 80040f8:	2301      	movs	r3, #1
 80040fa:	425b      	negs	r3, r3
 80040fc:	e000      	b.n	8004100 <LIS2MDL_ReadID+0x42>
    }
  }

  return LIS2MDL_OK;
 80040fe:	2300      	movs	r3, #0
}
 8004100:	0018      	movs	r0, r3
 8004102:	46bd      	mov	sp, r7
 8004104:	b002      	add	sp, #8
 8004106:	bd80      	pop	{r7, pc}

08004108 <LIS2MDL_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to LIS2MDL magnetometer sensor capabilities
  * @retval Component status
  */
int32_t LIS2MDL_GetCapabilities(LIS2MDL_Object_t *pObj, LIS2MDL_Capabilities_t *Capabilities)
{
 8004108:	b580      	push	{r7, lr}
 800410a:	b082      	sub	sp, #8
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
 8004110:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 0;
 8004112:	683b      	ldr	r3, [r7, #0]
 8004114:	2200      	movs	r2, #0
 8004116:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 0;
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	2200      	movs	r2, #0
 800411c:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 1;
 800411e:	683b      	ldr	r3, [r7, #0]
 8004120:	2201      	movs	r2, #1
 8004122:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	2200      	movs	r2, #0
 8004128:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 0;
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	2200      	movs	r2, #0
 800412e:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 0;
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	2200      	movs	r2, #0
 8004134:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 50;
 8004136:	683b      	ldr	r3, [r7, #0]
 8004138:	2232      	movs	r2, #50	; 0x32
 800413a:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 0.0f;
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	2200      	movs	r2, #0
 8004140:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 0.0f;
 8004142:	683b      	ldr	r3, [r7, #0]
 8004144:	2200      	movs	r2, #0
 8004146:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 100.0f;
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	4a03      	ldr	r2, [pc, #12]	; (8004158 <LIS2MDL_GetCapabilities+0x50>)
 800414c:	619a      	str	r2, [r3, #24]
  return LIS2MDL_OK;
 800414e:	2300      	movs	r3, #0
}
 8004150:	0018      	movs	r0, r3
 8004152:	46bd      	mov	sp, r7
 8004154:	b002      	add	sp, #8
 8004156:	bd80      	pop	{r7, pc}
 8004158:	42c80000 	.word	0x42c80000

0800415c <LIS2MDL_MAG_Enable>:
  * @brief Enable the LIS2MDL magnetometer sensor
  * @param pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_Enable(LIS2MDL_Object_t *pObj)
{
 800415c:	b580      	push	{r7, lr}
 800415e:	b084      	sub	sp, #16
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
  lis2mdl_cfg_reg_a_t reg_a;

  /* Check if the component is already enabled */
  if (pObj->mag_is_enabled == 1U)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2229      	movs	r2, #41	; 0x29
 8004168:	5c9b      	ldrb	r3, [r3, r2]
 800416a:	2b01      	cmp	r3, #1
 800416c:	d101      	bne.n	8004172 <LIS2MDL_MAG_Enable+0x16>
  {
    return LIS2MDL_OK;
 800416e:	2300      	movs	r3, #0
 8004170:	e030      	b.n	80041d4 <LIS2MDL_MAG_Enable+0x78>
  }

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	689b      	ldr	r3, [r3, #8]
 8004176:	2b03      	cmp	r3, #3
 8004178:	d11c      	bne.n	80041b4 <LIS2MDL_MAG_Enable+0x58>
  {
    /* Read configuration from CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 800417a:	230c      	movs	r3, #12
 800417c:	18fa      	adds	r2, r7, r3
 800417e:	6878      	ldr	r0, [r7, #4]
 8004180:	2301      	movs	r3, #1
 8004182:	2160      	movs	r1, #96	; 0x60
 8004184:	f000 fadb 	bl	800473e <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 8004188:	1e03      	subs	r3, r0, #0
 800418a:	d002      	beq.n	8004192 <LIS2MDL_MAG_Enable+0x36>
    {
      return LIS2MDL_ERROR;
 800418c:	2301      	movs	r3, #1
 800418e:	425b      	negs	r3, r3
 8004190:	e020      	b.n	80041d4 <LIS2MDL_MAG_Enable+0x78>
    }

    /* Operation mode selection. */
    reg_a.md = LIS2MDL_CONTINUOUS_MODE;
 8004192:	200c      	movs	r0, #12
 8004194:	183b      	adds	r3, r7, r0
 8004196:	781a      	ldrb	r2, [r3, #0]
 8004198:	2103      	movs	r1, #3
 800419a:	438a      	bics	r2, r1
 800419c:	701a      	strb	r2, [r3, #0]

    /* Write configuration to CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 800419e:	183a      	adds	r2, r7, r0
 80041a0:	6878      	ldr	r0, [r7, #4]
 80041a2:	2301      	movs	r3, #1
 80041a4:	2160      	movs	r1, #96	; 0x60
 80041a6:	f000 fc31 	bl	8004a0c <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 80041aa:	1e03      	subs	r3, r0, #0
 80041ac:	d00d      	beq.n	80041ca <LIS2MDL_MAG_Enable+0x6e>
    {
      return LIS2MDL_ERROR;
 80041ae:	2301      	movs	r3, #1
 80041b0:	425b      	negs	r3, r3
 80041b2:	e00f      	b.n	80041d4 <LIS2MDL_MAG_Enable+0x78>
    }
  }
  else
  {
    /* Operation mode selection. */
    if (lis2mdl_operating_mode_set(&(pObj->Ctx), LIS2MDL_CONTINUOUS_MODE) != LIS2MDL_OK)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	331c      	adds	r3, #28
 80041b8:	2100      	movs	r1, #0
 80041ba:	0018      	movs	r0, r3
 80041bc:	f000 fdaa 	bl	8004d14 <lis2mdl_operating_mode_set>
 80041c0:	1e03      	subs	r3, r0, #0
 80041c2:	d002      	beq.n	80041ca <LIS2MDL_MAG_Enable+0x6e>
    {
      return LIS2MDL_ERROR;
 80041c4:	2301      	movs	r3, #1
 80041c6:	425b      	negs	r3, r3
 80041c8:	e004      	b.n	80041d4 <LIS2MDL_MAG_Enable+0x78>
    }
  }

  pObj->mag_is_enabled = 1;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	2229      	movs	r2, #41	; 0x29
 80041ce:	2101      	movs	r1, #1
 80041d0:	5499      	strb	r1, [r3, r2]

  return LIS2MDL_OK;
 80041d2:	2300      	movs	r3, #0
}
 80041d4:	0018      	movs	r0, r3
 80041d6:	46bd      	mov	sp, r7
 80041d8:	b004      	add	sp, #16
 80041da:	bd80      	pop	{r7, pc}

080041dc <LIS2MDL_MAG_Disable>:
  * @brief Disable the LIS2MDL magnetometer sensor
  * @param pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_Disable(LIS2MDL_Object_t *pObj)
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	b084      	sub	sp, #16
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
  lis2mdl_cfg_reg_a_t reg_a;

  /* Check if the component is already disabled */
  if (pObj->mag_is_enabled == 0U)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2229      	movs	r2, #41	; 0x29
 80041e8:	5c9b      	ldrb	r3, [r3, r2]
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d101      	bne.n	80041f2 <LIS2MDL_MAG_Disable+0x16>
  {
    return LIS2MDL_OK;
 80041ee:	2300      	movs	r3, #0
 80041f0:	e033      	b.n	800425a <LIS2MDL_MAG_Disable+0x7e>
  }

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	689b      	ldr	r3, [r3, #8]
 80041f6:	2b03      	cmp	r3, #3
 80041f8:	d11f      	bne.n	800423a <LIS2MDL_MAG_Disable+0x5e>
  {
    /* Read configuration from CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 80041fa:	230c      	movs	r3, #12
 80041fc:	18fa      	adds	r2, r7, r3
 80041fe:	6878      	ldr	r0, [r7, #4]
 8004200:	2301      	movs	r3, #1
 8004202:	2160      	movs	r1, #96	; 0x60
 8004204:	f000 fa9b 	bl	800473e <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 8004208:	1e03      	subs	r3, r0, #0
 800420a:	d002      	beq.n	8004212 <LIS2MDL_MAG_Disable+0x36>
    {
      return LIS2MDL_ERROR;
 800420c:	2301      	movs	r3, #1
 800420e:	425b      	negs	r3, r3
 8004210:	e023      	b.n	800425a <LIS2MDL_MAG_Disable+0x7e>
    }

    /* Operation mode selection. */
    reg_a.md = LIS2MDL_POWER_DOWN;
 8004212:	200c      	movs	r0, #12
 8004214:	183b      	adds	r3, r7, r0
 8004216:	781a      	ldrb	r2, [r3, #0]
 8004218:	2103      	movs	r1, #3
 800421a:	438a      	bics	r2, r1
 800421c:	1c11      	adds	r1, r2, #0
 800421e:	2202      	movs	r2, #2
 8004220:	430a      	orrs	r2, r1
 8004222:	701a      	strb	r2, [r3, #0]

    /* Write configuration to CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8004224:	183a      	adds	r2, r7, r0
 8004226:	6878      	ldr	r0, [r7, #4]
 8004228:	2301      	movs	r3, #1
 800422a:	2160      	movs	r1, #96	; 0x60
 800422c:	f000 fbee 	bl	8004a0c <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 8004230:	1e03      	subs	r3, r0, #0
 8004232:	d00d      	beq.n	8004250 <LIS2MDL_MAG_Disable+0x74>
    {
      return LIS2MDL_ERROR;
 8004234:	2301      	movs	r3, #1
 8004236:	425b      	negs	r3, r3
 8004238:	e00f      	b.n	800425a <LIS2MDL_MAG_Disable+0x7e>
    }
  }
  else
  {
    /* Operation mode selection. */
    if (lis2mdl_operating_mode_set(&(pObj->Ctx), LIS2MDL_POWER_DOWN) != LIS2MDL_OK)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	331c      	adds	r3, #28
 800423e:	2102      	movs	r1, #2
 8004240:	0018      	movs	r0, r3
 8004242:	f000 fd67 	bl	8004d14 <lis2mdl_operating_mode_set>
 8004246:	1e03      	subs	r3, r0, #0
 8004248:	d002      	beq.n	8004250 <LIS2MDL_MAG_Disable+0x74>
    {
      return LIS2MDL_ERROR;
 800424a:	2301      	movs	r3, #1
 800424c:	425b      	negs	r3, r3
 800424e:	e004      	b.n	800425a <LIS2MDL_MAG_Disable+0x7e>
    }
  }

  pObj->mag_is_enabled = 0;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2229      	movs	r2, #41	; 0x29
 8004254:	2100      	movs	r1, #0
 8004256:	5499      	strb	r1, [r3, r2]

  return LIS2MDL_OK;
 8004258:	2300      	movs	r3, #0
}
 800425a:	0018      	movs	r0, r3
 800425c:	46bd      	mov	sp, r7
 800425e:	b004      	add	sp, #16
 8004260:	bd80      	pop	{r7, pc}

08004262 <LIS2MDL_MAG_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_GetSensitivity(LIS2MDL_Object_t *pObj, float *Sensitivity)
{
 8004262:	b580      	push	{r7, lr}
 8004264:	b082      	sub	sp, #8
 8004266:	af00      	add	r7, sp, #0
 8004268:	6078      	str	r0, [r7, #4]
 800426a:	6039      	str	r1, [r7, #0]
  *Sensitivity = LIS2MDL_MAG_SENSITIVITY_FS_50GAUSS;
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	22ff      	movs	r2, #255	; 0xff
 8004270:	0592      	lsls	r2, r2, #22
 8004272:	601a      	str	r2, [r3, #0]

  return LIS2MDL_OK;
 8004274:	2300      	movs	r3, #0
}
 8004276:	0018      	movs	r0, r3
 8004278:	46bd      	mov	sp, r7
 800427a:	b002      	add	sp, #8
 800427c:	bd80      	pop	{r7, pc}
	...

08004280 <LIS2MDL_MAG_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_GetOutputDataRate(LIS2MDL_Object_t *pObj, float *Odr)
{
 8004280:	b580      	push	{r7, lr}
 8004282:	b084      	sub	sp, #16
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
 8004288:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2MDL_OK;
 800428a:	2300      	movs	r3, #0
 800428c:	60fb      	str	r3, [r7, #12]
  lis2mdl_odr_t odr_low_level;

  /* Get current output data rate. */
  if (lis2mdl_data_rate_get(&(pObj->Ctx), &odr_low_level) != LIS2MDL_OK)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	331c      	adds	r3, #28
 8004292:	220b      	movs	r2, #11
 8004294:	18ba      	adds	r2, r7, r2
 8004296:	0011      	movs	r1, r2
 8004298:	0018      	movs	r0, r3
 800429a:	f000 fd9b 	bl	8004dd4 <lis2mdl_data_rate_get>
 800429e:	1e03      	subs	r3, r0, #0
 80042a0:	d002      	beq.n	80042a8 <LIS2MDL_MAG_GetOutputDataRate+0x28>
  {
    return LIS2MDL_ERROR;
 80042a2:	2301      	movs	r3, #1
 80042a4:	425b      	negs	r3, r3
 80042a6:	e022      	b.n	80042ee <LIS2MDL_MAG_GetOutputDataRate+0x6e>
  }

  switch (odr_low_level)
 80042a8:	230b      	movs	r3, #11
 80042aa:	18fb      	adds	r3, r7, r3
 80042ac:	781b      	ldrb	r3, [r3, #0]
 80042ae:	2b03      	cmp	r3, #3
 80042b0:	d014      	beq.n	80042dc <LIS2MDL_MAG_GetOutputDataRate+0x5c>
 80042b2:	dc17      	bgt.n	80042e4 <LIS2MDL_MAG_GetOutputDataRate+0x64>
 80042b4:	2b02      	cmp	r3, #2
 80042b6:	d00d      	beq.n	80042d4 <LIS2MDL_MAG_GetOutputDataRate+0x54>
 80042b8:	dc14      	bgt.n	80042e4 <LIS2MDL_MAG_GetOutputDataRate+0x64>
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d002      	beq.n	80042c4 <LIS2MDL_MAG_GetOutputDataRate+0x44>
 80042be:	2b01      	cmp	r3, #1
 80042c0:	d004      	beq.n	80042cc <LIS2MDL_MAG_GetOutputDataRate+0x4c>
 80042c2:	e00f      	b.n	80042e4 <LIS2MDL_MAG_GetOutputDataRate+0x64>
  {
    case LIS2MDL_ODR_10Hz:
      *Odr = 10.0f;
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	4a0c      	ldr	r2, [pc, #48]	; (80042f8 <LIS2MDL_MAG_GetOutputDataRate+0x78>)
 80042c8:	601a      	str	r2, [r3, #0]
      break;
 80042ca:	e00f      	b.n	80042ec <LIS2MDL_MAG_GetOutputDataRate+0x6c>

    case LIS2MDL_ODR_20Hz:
      *Odr = 20.0f;
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	4a0b      	ldr	r2, [pc, #44]	; (80042fc <LIS2MDL_MAG_GetOutputDataRate+0x7c>)
 80042d0:	601a      	str	r2, [r3, #0]
      break;
 80042d2:	e00b      	b.n	80042ec <LIS2MDL_MAG_GetOutputDataRate+0x6c>

    case LIS2MDL_ODR_50Hz:
      *Odr = 50.0f;
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	4a0a      	ldr	r2, [pc, #40]	; (8004300 <LIS2MDL_MAG_GetOutputDataRate+0x80>)
 80042d8:	601a      	str	r2, [r3, #0]
      break;
 80042da:	e007      	b.n	80042ec <LIS2MDL_MAG_GetOutputDataRate+0x6c>

    case LIS2MDL_ODR_100Hz:
      *Odr = 100.0f;
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	4a09      	ldr	r2, [pc, #36]	; (8004304 <LIS2MDL_MAG_GetOutputDataRate+0x84>)
 80042e0:	601a      	str	r2, [r3, #0]
      break;
 80042e2:	e003      	b.n	80042ec <LIS2MDL_MAG_GetOutputDataRate+0x6c>

    default:
      ret = LIS2MDL_ERROR;
 80042e4:	2301      	movs	r3, #1
 80042e6:	425b      	negs	r3, r3
 80042e8:	60fb      	str	r3, [r7, #12]
      break;
 80042ea:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 80042ec:	68fb      	ldr	r3, [r7, #12]
}
 80042ee:	0018      	movs	r0, r3
 80042f0:	46bd      	mov	sp, r7
 80042f2:	b004      	add	sp, #16
 80042f4:	bd80      	pop	{r7, pc}
 80042f6:	46c0      	nop			; (mov r8, r8)
 80042f8:	41200000 	.word	0x41200000
 80042fc:	41a00000 	.word	0x41a00000
 8004300:	42480000 	.word	0x42480000
 8004304:	42c80000 	.word	0x42c80000

08004308 <LIS2MDL_MAG_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_SetOutputDataRate(LIS2MDL_Object_t *pObj, float Odr)
{
 8004308:	b590      	push	{r4, r7, lr}
 800430a:	b085      	sub	sp, #20
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
 8004310:	6039      	str	r1, [r7, #0]
  lis2mdl_odr_t new_odr;
  lis2mdl_cfg_reg_a_t reg_a;

  new_odr = (Odr <= 10.000f) ? LIS2MDL_ODR_10Hz
            : (Odr <= 20.000f) ? LIS2MDL_ODR_20Hz
 8004312:	492e      	ldr	r1, [pc, #184]	; (80043cc <LIS2MDL_MAG_SetOutputDataRate+0xc4>)
 8004314:	6838      	ldr	r0, [r7, #0]
 8004316:	f7fc f893 	bl	8000440 <__aeabi_fcmple>
 800431a:	1e03      	subs	r3, r0, #0
 800431c:	d001      	beq.n	8004322 <LIS2MDL_MAG_SetOutputDataRate+0x1a>
 800431e:	2300      	movs	r3, #0
 8004320:	e010      	b.n	8004344 <LIS2MDL_MAG_SetOutputDataRate+0x3c>
 8004322:	492b      	ldr	r1, [pc, #172]	; (80043d0 <LIS2MDL_MAG_SetOutputDataRate+0xc8>)
 8004324:	6838      	ldr	r0, [r7, #0]
 8004326:	f7fc f88b 	bl	8000440 <__aeabi_fcmple>
 800432a:	1e03      	subs	r3, r0, #0
 800432c:	d001      	beq.n	8004332 <LIS2MDL_MAG_SetOutputDataRate+0x2a>
 800432e:	2301      	movs	r3, #1
 8004330:	e008      	b.n	8004344 <LIS2MDL_MAG_SetOutputDataRate+0x3c>
 8004332:	4928      	ldr	r1, [pc, #160]	; (80043d4 <LIS2MDL_MAG_SetOutputDataRate+0xcc>)
 8004334:	6838      	ldr	r0, [r7, #0]
 8004336:	f7fc f883 	bl	8000440 <__aeabi_fcmple>
 800433a:	1e03      	subs	r3, r0, #0
 800433c:	d001      	beq.n	8004342 <LIS2MDL_MAG_SetOutputDataRate+0x3a>
 800433e:	2302      	movs	r3, #2
 8004340:	e000      	b.n	8004344 <LIS2MDL_MAG_SetOutputDataRate+0x3c>
 8004342:	2303      	movs	r3, #3
  new_odr = (Odr <= 10.000f) ? LIS2MDL_ODR_10Hz
 8004344:	220f      	movs	r2, #15
 8004346:	18ba      	adds	r2, r7, r2
 8004348:	7013      	strb	r3, [r2, #0]
            : (Odr <= 50.000f) ? LIS2MDL_ODR_50Hz
            :                    LIS2MDL_ODR_100Hz;

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	689b      	ldr	r3, [r3, #8]
 800434e:	2b03      	cmp	r3, #3
 8004350:	d128      	bne.n	80043a4 <LIS2MDL_MAG_SetOutputDataRate+0x9c>
  {
    /* Read configuration from CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8004352:	230c      	movs	r3, #12
 8004354:	18fa      	adds	r2, r7, r3
 8004356:	6878      	ldr	r0, [r7, #4]
 8004358:	2301      	movs	r3, #1
 800435a:	2160      	movs	r1, #96	; 0x60
 800435c:	f000 f9ef 	bl	800473e <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 8004360:	1e03      	subs	r3, r0, #0
 8004362:	d002      	beq.n	800436a <LIS2MDL_MAG_SetOutputDataRate+0x62>
    {
      return LIS2MDL_ERROR;
 8004364:	2301      	movs	r3, #1
 8004366:	425b      	negs	r3, r3
 8004368:	e02c      	b.n	80043c4 <LIS2MDL_MAG_SetOutputDataRate+0xbc>
    }

    /* Output data rate selection */
    reg_a.odr = new_odr;
 800436a:	230f      	movs	r3, #15
 800436c:	18fb      	adds	r3, r7, r3
 800436e:	781b      	ldrb	r3, [r3, #0]
 8004370:	2203      	movs	r2, #3
 8004372:	4013      	ands	r3, r2
 8004374:	b2da      	uxtb	r2, r3
 8004376:	240c      	movs	r4, #12
 8004378:	193b      	adds	r3, r7, r4
 800437a:	2103      	movs	r1, #3
 800437c:	400a      	ands	r2, r1
 800437e:	0090      	lsls	r0, r2, #2
 8004380:	781a      	ldrb	r2, [r3, #0]
 8004382:	210c      	movs	r1, #12
 8004384:	438a      	bics	r2, r1
 8004386:	1c11      	adds	r1, r2, #0
 8004388:	1c02      	adds	r2, r0, #0
 800438a:	430a      	orrs	r2, r1
 800438c:	701a      	strb	r2, [r3, #0]

    /* Write configuration to CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 800438e:	193a      	adds	r2, r7, r4
 8004390:	6878      	ldr	r0, [r7, #4]
 8004392:	2301      	movs	r3, #1
 8004394:	2160      	movs	r1, #96	; 0x60
 8004396:	f000 fb39 	bl	8004a0c <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 800439a:	1e03      	subs	r3, r0, #0
 800439c:	d011      	beq.n	80043c2 <LIS2MDL_MAG_SetOutputDataRate+0xba>
    {
      return LIS2MDL_ERROR;
 800439e:	2301      	movs	r3, #1
 80043a0:	425b      	negs	r3, r3
 80043a2:	e00f      	b.n	80043c4 <LIS2MDL_MAG_SetOutputDataRate+0xbc>
    }
  }
  else
  {
    if (lis2mdl_data_rate_set(&(pObj->Ctx), new_odr) != LIS2MDL_OK)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	331c      	adds	r3, #28
 80043a8:	001a      	movs	r2, r3
 80043aa:	230f      	movs	r3, #15
 80043ac:	18fb      	adds	r3, r7, r3
 80043ae:	781b      	ldrb	r3, [r3, #0]
 80043b0:	0019      	movs	r1, r3
 80043b2:	0010      	movs	r0, r2
 80043b4:	f000 fcde 	bl	8004d74 <lis2mdl_data_rate_set>
 80043b8:	1e03      	subs	r3, r0, #0
 80043ba:	d002      	beq.n	80043c2 <LIS2MDL_MAG_SetOutputDataRate+0xba>
    {
      return LIS2MDL_ERROR;
 80043bc:	2301      	movs	r3, #1
 80043be:	425b      	negs	r3, r3
 80043c0:	e000      	b.n	80043c4 <LIS2MDL_MAG_SetOutputDataRate+0xbc>
    }
  }

  return LIS2MDL_OK;
 80043c2:	2300      	movs	r3, #0
}
 80043c4:	0018      	movs	r0, r3
 80043c6:	46bd      	mov	sp, r7
 80043c8:	b005      	add	sp, #20
 80043ca:	bd90      	pop	{r4, r7, pc}
 80043cc:	41200000 	.word	0x41200000
 80043d0:	41a00000 	.word	0x41a00000
 80043d4:	42480000 	.word	0x42480000

080043d8 <LIS2MDL_MAG_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_GetFullScale(LIS2MDL_Object_t *pObj, int32_t *FullScale)
{
 80043d8:	b580      	push	{r7, lr}
 80043da:	b082      	sub	sp, #8
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
 80043e0:	6039      	str	r1, [r7, #0]
  *FullScale = 50;
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	2232      	movs	r2, #50	; 0x32
 80043e6:	601a      	str	r2, [r3, #0]

  return LIS2MDL_OK;
 80043e8:	2300      	movs	r3, #0
}
 80043ea:	0018      	movs	r0, r3
 80043ec:	46bd      	mov	sp, r7
 80043ee:	b002      	add	sp, #8
 80043f0:	bd80      	pop	{r7, pc}

080043f2 <LIS2MDL_MAG_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_SetFullScale(LIS2MDL_Object_t *pObj, int32_t FullScale)
{
 80043f2:	b580      	push	{r7, lr}
 80043f4:	b082      	sub	sp, #8
 80043f6:	af00      	add	r7, sp, #0
 80043f8:	6078      	str	r0, [r7, #4]
 80043fa:	6039      	str	r1, [r7, #0]
  return LIS2MDL_OK;
 80043fc:	2300      	movs	r3, #0
}
 80043fe:	0018      	movs	r0, r3
 8004400:	46bd      	mov	sp, r7
 8004402:	b002      	add	sp, #8
 8004404:	bd80      	pop	{r7, pc}

08004406 <LIS2MDL_MAG_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_GetAxesRaw(LIS2MDL_Object_t *pObj, LIS2MDL_AxesRaw_t *Value)
{
 8004406:	b580      	push	{r7, lr}
 8004408:	b084      	sub	sp, #16
 800440a:	af00      	add	r7, sp, #0
 800440c:	6078      	str	r0, [r7, #4]
 800440e:	6039      	str	r1, [r7, #0]
  lis2mdl_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lis2mdl_magnetic_raw_get(&(pObj->Ctx), data_raw.i16bit) != LIS2MDL_OK)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	331c      	adds	r3, #28
 8004414:	2208      	movs	r2, #8
 8004416:	18ba      	adds	r2, r7, r2
 8004418:	0011      	movs	r1, r2
 800441a:	0018      	movs	r0, r3
 800441c:	f000 fd41 	bl	8004ea2 <lis2mdl_magnetic_raw_get>
 8004420:	1e03      	subs	r3, r0, #0
 8004422:	d002      	beq.n	800442a <LIS2MDL_MAG_GetAxesRaw+0x24>
  {
    return LIS2MDL_ERROR;
 8004424:	2301      	movs	r3, #1
 8004426:	425b      	negs	r3, r3
 8004428:	e010      	b.n	800444c <LIS2MDL_MAG_GetAxesRaw+0x46>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 800442a:	2108      	movs	r1, #8
 800442c:	187b      	adds	r3, r7, r1
 800442e:	2200      	movs	r2, #0
 8004430:	5e9a      	ldrsh	r2, [r3, r2]
 8004432:	683b      	ldr	r3, [r7, #0]
 8004434:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 8004436:	187b      	adds	r3, r7, r1
 8004438:	2202      	movs	r2, #2
 800443a:	5e9a      	ldrsh	r2, [r3, r2]
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 8004440:	187b      	adds	r3, r7, r1
 8004442:	2204      	movs	r2, #4
 8004444:	5e9a      	ldrsh	r2, [r3, r2]
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	809a      	strh	r2, [r3, #4]

  return LIS2MDL_OK;
 800444a:	2300      	movs	r3, #0
}
 800444c:	0018      	movs	r0, r3
 800444e:	46bd      	mov	sp, r7
 8004450:	b004      	add	sp, #16
 8004452:	bd80      	pop	{r7, pc}

08004454 <LIS2MDL_MAG_GetAxes>:
  * @param  pObj the device pObj
  * @param  MagneticField pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_GetAxes(LIS2MDL_Object_t *pObj, LIS2MDL_Axes_t *MagneticField)
{
 8004454:	b590      	push	{r4, r7, lr}
 8004456:	b089      	sub	sp, #36	; 0x24
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
 800445c:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  lis2mdl_axis3bit16_t data_raw;
  float sensitivity;

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	689b      	ldr	r3, [r3, #8]
 8004462:	2b03      	cmp	r3, #3
 8004464:	d147      	bne.n	80044f6 <LIS2MDL_MAG_GetAxes+0xa2>
  {
    /* Read raw data values. */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_OUTX_L_REG, buff, 6) != LIS2MDL_OK)
 8004466:	2318      	movs	r3, #24
 8004468:	18fa      	adds	r2, r7, r3
 800446a:	6878      	ldr	r0, [r7, #4]
 800446c:	2306      	movs	r3, #6
 800446e:	2168      	movs	r1, #104	; 0x68
 8004470:	f000 f965 	bl	800473e <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 8004474:	1e03      	subs	r3, r0, #0
 8004476:	d002      	beq.n	800447e <LIS2MDL_MAG_GetAxes+0x2a>
    {
      return LIS2MDL_ERROR;
 8004478:	2301      	movs	r3, #1
 800447a:	425b      	negs	r3, r3
 800447c:	e08a      	b.n	8004594 <LIS2MDL_MAG_GetAxes+0x140>
    }
    data_raw.i16bit[0] = (int16_t)buff[1];
 800447e:	2018      	movs	r0, #24
 8004480:	183b      	adds	r3, r7, r0
 8004482:	785b      	ldrb	r3, [r3, #1]
 8004484:	b21a      	sxth	r2, r3
 8004486:	2110      	movs	r1, #16
 8004488:	187b      	adds	r3, r7, r1
 800448a:	801a      	strh	r2, [r3, #0]
    data_raw.i16bit[0] = (data_raw.i16bit[0] * 256) + (int16_t)buff[0];
 800448c:	187b      	adds	r3, r7, r1
 800448e:	2200      	movs	r2, #0
 8004490:	5e9b      	ldrsh	r3, [r3, r2]
 8004492:	b29b      	uxth	r3, r3
 8004494:	021b      	lsls	r3, r3, #8
 8004496:	b29a      	uxth	r2, r3
 8004498:	183b      	adds	r3, r7, r0
 800449a:	781b      	ldrb	r3, [r3, #0]
 800449c:	b29b      	uxth	r3, r3
 800449e:	18d3      	adds	r3, r2, r3
 80044a0:	b29b      	uxth	r3, r3
 80044a2:	b21a      	sxth	r2, r3
 80044a4:	187b      	adds	r3, r7, r1
 80044a6:	801a      	strh	r2, [r3, #0]
    data_raw.i16bit[1] = (int16_t)buff[3];
 80044a8:	183b      	adds	r3, r7, r0
 80044aa:	78db      	ldrb	r3, [r3, #3]
 80044ac:	b21a      	sxth	r2, r3
 80044ae:	187b      	adds	r3, r7, r1
 80044b0:	805a      	strh	r2, [r3, #2]
    data_raw.i16bit[1] = (data_raw.i16bit[1] * 256) + (int16_t)buff[2];
 80044b2:	187b      	adds	r3, r7, r1
 80044b4:	2202      	movs	r2, #2
 80044b6:	5e9b      	ldrsh	r3, [r3, r2]
 80044b8:	b29b      	uxth	r3, r3
 80044ba:	021b      	lsls	r3, r3, #8
 80044bc:	b29a      	uxth	r2, r3
 80044be:	183b      	adds	r3, r7, r0
 80044c0:	789b      	ldrb	r3, [r3, #2]
 80044c2:	b29b      	uxth	r3, r3
 80044c4:	18d3      	adds	r3, r2, r3
 80044c6:	b29b      	uxth	r3, r3
 80044c8:	b21a      	sxth	r2, r3
 80044ca:	187b      	adds	r3, r7, r1
 80044cc:	805a      	strh	r2, [r3, #2]
    data_raw.i16bit[2] = (int16_t)buff[5];
 80044ce:	183b      	adds	r3, r7, r0
 80044d0:	795b      	ldrb	r3, [r3, #5]
 80044d2:	b21a      	sxth	r2, r3
 80044d4:	187b      	adds	r3, r7, r1
 80044d6:	809a      	strh	r2, [r3, #4]
    data_raw.i16bit[2] = (data_raw.i16bit[2] * 256) + (int16_t)buff[4];
 80044d8:	187b      	adds	r3, r7, r1
 80044da:	2204      	movs	r2, #4
 80044dc:	5e9b      	ldrsh	r3, [r3, r2]
 80044de:	b29b      	uxth	r3, r3
 80044e0:	021b      	lsls	r3, r3, #8
 80044e2:	b29a      	uxth	r2, r3
 80044e4:	183b      	adds	r3, r7, r0
 80044e6:	791b      	ldrb	r3, [r3, #4]
 80044e8:	b29b      	uxth	r3, r3
 80044ea:	18d3      	adds	r3, r2, r3
 80044ec:	b29b      	uxth	r3, r3
 80044ee:	b21a      	sxth	r2, r3
 80044f0:	187b      	adds	r3, r7, r1
 80044f2:	809a      	strh	r2, [r3, #4]
 80044f4:	e00c      	b.n	8004510 <LIS2MDL_MAG_GetAxes+0xbc>
  }
  else
  {
    /* Read raw data values. */
    if (lis2mdl_magnetic_raw_get(&(pObj->Ctx), data_raw.i16bit) != LIS2MDL_OK)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	331c      	adds	r3, #28
 80044fa:	2210      	movs	r2, #16
 80044fc:	18ba      	adds	r2, r7, r2
 80044fe:	0011      	movs	r1, r2
 8004500:	0018      	movs	r0, r3
 8004502:	f000 fcce 	bl	8004ea2 <lis2mdl_magnetic_raw_get>
 8004506:	1e03      	subs	r3, r0, #0
 8004508:	d002      	beq.n	8004510 <LIS2MDL_MAG_GetAxes+0xbc>
    {
      return LIS2MDL_ERROR;
 800450a:	2301      	movs	r3, #1
 800450c:	425b      	negs	r3, r3
 800450e:	e041      	b.n	8004594 <LIS2MDL_MAG_GetAxes+0x140>
    }
  }

  /* Get LIS2MDL actual sensitivity. */
  (void)LIS2MDL_MAG_GetSensitivity(pObj, &sensitivity);
 8004510:	230c      	movs	r3, #12
 8004512:	18fa      	adds	r2, r7, r3
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	0011      	movs	r1, r2
 8004518:	0018      	movs	r0, r3
 800451a:	f7ff fea2 	bl	8004262 <LIS2MDL_MAG_GetSensitivity>

  /* Calculate the data. */
  MagneticField->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 800451e:	2410      	movs	r4, #16
 8004520:	193b      	adds	r3, r7, r4
 8004522:	2200      	movs	r2, #0
 8004524:	5e9b      	ldrsh	r3, [r3, r2]
 8004526:	0018      	movs	r0, r3
 8004528:	f7fc ff4a 	bl	80013c0 <__aeabi_i2f>
 800452c:	1c02      	adds	r2, r0, #0
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	1c19      	adds	r1, r3, #0
 8004532:	1c10      	adds	r0, r2, #0
 8004534:	f7fc fc3a 	bl	8000dac <__aeabi_fmul>
 8004538:	1c03      	adds	r3, r0, #0
 800453a:	1c18      	adds	r0, r3, #0
 800453c:	f7fc ff20 	bl	8001380 <__aeabi_f2iz>
 8004540:	0002      	movs	r2, r0
 8004542:	683b      	ldr	r3, [r7, #0]
 8004544:	601a      	str	r2, [r3, #0]
  MagneticField->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8004546:	193b      	adds	r3, r7, r4
 8004548:	2202      	movs	r2, #2
 800454a:	5e9b      	ldrsh	r3, [r3, r2]
 800454c:	0018      	movs	r0, r3
 800454e:	f7fc ff37 	bl	80013c0 <__aeabi_i2f>
 8004552:	1c02      	adds	r2, r0, #0
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	1c19      	adds	r1, r3, #0
 8004558:	1c10      	adds	r0, r2, #0
 800455a:	f7fc fc27 	bl	8000dac <__aeabi_fmul>
 800455e:	1c03      	adds	r3, r0, #0
 8004560:	1c18      	adds	r0, r3, #0
 8004562:	f7fc ff0d 	bl	8001380 <__aeabi_f2iz>
 8004566:	0002      	movs	r2, r0
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	605a      	str	r2, [r3, #4]
  MagneticField->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 800456c:	193b      	adds	r3, r7, r4
 800456e:	2204      	movs	r2, #4
 8004570:	5e9b      	ldrsh	r3, [r3, r2]
 8004572:	0018      	movs	r0, r3
 8004574:	f7fc ff24 	bl	80013c0 <__aeabi_i2f>
 8004578:	1c02      	adds	r2, r0, #0
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	1c19      	adds	r1, r3, #0
 800457e:	1c10      	adds	r0, r2, #0
 8004580:	f7fc fc14 	bl	8000dac <__aeabi_fmul>
 8004584:	1c03      	adds	r3, r0, #0
 8004586:	1c18      	adds	r0, r3, #0
 8004588:	f7fc fefa 	bl	8001380 <__aeabi_f2iz>
 800458c:	0002      	movs	r2, r0
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	609a      	str	r2, [r3, #8]

  return LIS2MDL_OK;
 8004592:	2300      	movs	r3, #0
}
 8004594:	0018      	movs	r0, r3
 8004596:	46bd      	mov	sp, r7
 8004598:	b009      	add	sp, #36	; 0x24
 800459a:	bd90      	pop	{r4, r7, pc}

0800459c <LIS2MDL_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_Write_Reg(LIS2MDL_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 800459c:	b580      	push	{r7, lr}
 800459e:	b082      	sub	sp, #8
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]
 80045a4:	0008      	movs	r0, r1
 80045a6:	0011      	movs	r1, r2
 80045a8:	1cfb      	adds	r3, r7, #3
 80045aa:	1c02      	adds	r2, r0, #0
 80045ac:	701a      	strb	r2, [r3, #0]
 80045ae:	1cbb      	adds	r3, r7, #2
 80045b0:	1c0a      	adds	r2, r1, #0
 80045b2:	701a      	strb	r2, [r3, #0]
  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	689b      	ldr	r3, [r3, #8]
 80045b8:	2b03      	cmp	r3, #3
 80045ba:	d10b      	bne.n	80045d4 <LIS2MDL_Write_Reg+0x38>
  {
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, Reg, (uint8_t *)&Data, 1) != LIS2MDL_OK)
 80045bc:	1cba      	adds	r2, r7, #2
 80045be:	1cfb      	adds	r3, r7, #3
 80045c0:	7819      	ldrb	r1, [r3, #0]
 80045c2:	6878      	ldr	r0, [r7, #4]
 80045c4:	2301      	movs	r3, #1
 80045c6:	f000 fa21 	bl	8004a0c <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 80045ca:	1e03      	subs	r3, r0, #0
 80045cc:	d010      	beq.n	80045f0 <LIS2MDL_Write_Reg+0x54>
    {
      return LIS2MDL_ERROR;
 80045ce:	2301      	movs	r3, #1
 80045d0:	425b      	negs	r3, r3
 80045d2:	e00e      	b.n	80045f2 <LIS2MDL_Write_Reg+0x56>
    }
  }
  else
  {
    if (lis2mdl_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LIS2MDL_OK)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	331c      	adds	r3, #28
 80045d8:	0018      	movs	r0, r3
 80045da:	1cba      	adds	r2, r7, #2
 80045dc:	1cfb      	adds	r3, r7, #3
 80045de:	7819      	ldrb	r1, [r3, #0]
 80045e0:	2301      	movs	r3, #1
 80045e2:	f000 fb76 	bl	8004cd2 <lis2mdl_write_reg>
 80045e6:	1e03      	subs	r3, r0, #0
 80045e8:	d002      	beq.n	80045f0 <LIS2MDL_Write_Reg+0x54>
    {
      return LIS2MDL_ERROR;
 80045ea:	2301      	movs	r3, #1
 80045ec:	425b      	negs	r3, r3
 80045ee:	e000      	b.n	80045f2 <LIS2MDL_Write_Reg+0x56>
    }
  }

  return LIS2MDL_OK;
 80045f0:	2300      	movs	r3, #0
}
 80045f2:	0018      	movs	r0, r3
 80045f4:	46bd      	mov	sp, r7
 80045f6:	b002      	add	sp, #8
 80045f8:	bd80      	pop	{r7, pc}

080045fa <ReadMagRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80045fa:	b5f0      	push	{r4, r5, r6, r7, lr}
 80045fc:	b087      	sub	sp, #28
 80045fe:	af00      	add	r7, sp, #0
 8004600:	60f8      	str	r0, [r7, #12]
 8004602:	0008      	movs	r0, r1
 8004604:	607a      	str	r2, [r7, #4]
 8004606:	0019      	movs	r1, r3
 8004608:	250b      	movs	r5, #11
 800460a:	197b      	adds	r3, r7, r5
 800460c:	1c02      	adds	r2, r0, #0
 800460e:	701a      	strb	r2, [r3, #0]
 8004610:	2608      	movs	r6, #8
 8004612:	19bb      	adds	r3, r7, r6
 8004614:	1c0a      	adds	r2, r1, #0
 8004616:	801a      	strh	r2, [r3, #0]
  LIS2MDL_Object_t *pObj = (LIS2MDL_Object_t *)Handle;
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LIS2MDL_I2C_BUS) /* I2C */
 800461c:	697b      	ldr	r3, [r7, #20]
 800461e:	689b      	ldr	r3, [r3, #8]
 8004620:	2b00      	cmp	r3, #0
 8004622:	d111      	bne.n	8004648 <ReadMagRegWrap+0x4e>
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8004624:	697b      	ldr	r3, [r7, #20]
 8004626:	695c      	ldr	r4, [r3, #20]
 8004628:	697b      	ldr	r3, [r7, #20]
 800462a:	7b1b      	ldrb	r3, [r3, #12]
 800462c:	b298      	uxth	r0, r3
 800462e:	197b      	adds	r3, r7, r5
 8004630:	781b      	ldrb	r3, [r3, #0]
 8004632:	2280      	movs	r2, #128	; 0x80
 8004634:	4252      	negs	r2, r2
 8004636:	4313      	orrs	r3, r2
 8004638:	b2db      	uxtb	r3, r3
 800463a:	b299      	uxth	r1, r3
 800463c:	19bb      	adds	r3, r7, r6
 800463e:	881b      	ldrh	r3, [r3, #0]
 8004640:	687a      	ldr	r2, [r7, #4]
 8004642:	47a0      	blx	r4
 8004644:	0003      	movs	r3, r0
 8004646:	e025      	b.n	8004694 <ReadMagRegWrap+0x9a>
  }
  else if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8004648:	697b      	ldr	r3, [r7, #20]
 800464a:	689b      	ldr	r3, [r3, #8]
 800464c:	2b03      	cmp	r3, #3
 800464e:	d10f      	bne.n	8004670 <ReadMagRegWrap+0x76>
  {
    return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8004650:	697b      	ldr	r3, [r7, #20]
 8004652:	695c      	ldr	r4, [r3, #20]
 8004654:	697b      	ldr	r3, [r7, #20]
 8004656:	7b1b      	ldrb	r3, [r3, #12]
 8004658:	b298      	uxth	r0, r3
 800465a:	230b      	movs	r3, #11
 800465c:	18fb      	adds	r3, r7, r3
 800465e:	781b      	ldrb	r3, [r3, #0]
 8004660:	b299      	uxth	r1, r3
 8004662:	2308      	movs	r3, #8
 8004664:	18fb      	adds	r3, r7, r3
 8004666:	881b      	ldrh	r3, [r3, #0]
 8004668:	687a      	ldr	r2, [r7, #4]
 800466a:	47a0      	blx	r4
 800466c:	0003      	movs	r3, r0
 800466e:	e011      	b.n	8004694 <ReadMagRegWrap+0x9a>
  }
  else   /* SPI 3-Wires or SPI 4-Wires */
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8004670:	697b      	ldr	r3, [r7, #20]
 8004672:	695c      	ldr	r4, [r3, #20]
 8004674:	697b      	ldr	r3, [r7, #20]
 8004676:	7b1b      	ldrb	r3, [r3, #12]
 8004678:	b298      	uxth	r0, r3
 800467a:	230b      	movs	r3, #11
 800467c:	18fb      	adds	r3, r7, r3
 800467e:	781b      	ldrb	r3, [r3, #0]
 8004680:	2240      	movs	r2, #64	; 0x40
 8004682:	4313      	orrs	r3, r2
 8004684:	b2db      	uxtb	r3, r3
 8004686:	b299      	uxth	r1, r3
 8004688:	2308      	movs	r3, #8
 800468a:	18fb      	adds	r3, r7, r3
 800468c:	881b      	ldrh	r3, [r3, #0]
 800468e:	687a      	ldr	r2, [r7, #4]
 8004690:	47a0      	blx	r4
 8004692:	0003      	movs	r3, r0
  }
}
 8004694:	0018      	movs	r0, r3
 8004696:	46bd      	mov	sp, r7
 8004698:	b007      	add	sp, #28
 800469a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800469c <WriteMagRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 800469c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800469e:	b087      	sub	sp, #28
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	60f8      	str	r0, [r7, #12]
 80046a4:	0008      	movs	r0, r1
 80046a6:	607a      	str	r2, [r7, #4]
 80046a8:	0019      	movs	r1, r3
 80046aa:	250b      	movs	r5, #11
 80046ac:	197b      	adds	r3, r7, r5
 80046ae:	1c02      	adds	r2, r0, #0
 80046b0:	701a      	strb	r2, [r3, #0]
 80046b2:	2608      	movs	r6, #8
 80046b4:	19bb      	adds	r3, r7, r6
 80046b6:	1c0a      	adds	r2, r1, #0
 80046b8:	801a      	strh	r2, [r3, #0]
  LIS2MDL_Object_t *pObj = (LIS2MDL_Object_t *)Handle;
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LIS2MDL_I2C_BUS) /* I2C */
 80046be:	697b      	ldr	r3, [r7, #20]
 80046c0:	689b      	ldr	r3, [r3, #8]
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d111      	bne.n	80046ea <WriteMagRegWrap+0x4e>
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 80046c6:	697b      	ldr	r3, [r7, #20]
 80046c8:	691c      	ldr	r4, [r3, #16]
 80046ca:	697b      	ldr	r3, [r7, #20]
 80046cc:	7b1b      	ldrb	r3, [r3, #12]
 80046ce:	b298      	uxth	r0, r3
 80046d0:	197b      	adds	r3, r7, r5
 80046d2:	781b      	ldrb	r3, [r3, #0]
 80046d4:	2280      	movs	r2, #128	; 0x80
 80046d6:	4252      	negs	r2, r2
 80046d8:	4313      	orrs	r3, r2
 80046da:	b2db      	uxtb	r3, r3
 80046dc:	b299      	uxth	r1, r3
 80046de:	19bb      	adds	r3, r7, r6
 80046e0:	881b      	ldrh	r3, [r3, #0]
 80046e2:	687a      	ldr	r2, [r7, #4]
 80046e4:	47a0      	blx	r4
 80046e6:	0003      	movs	r3, r0
 80046e8:	e025      	b.n	8004736 <WriteMagRegWrap+0x9a>
  }
  else if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 80046ea:	697b      	ldr	r3, [r7, #20]
 80046ec:	689b      	ldr	r3, [r3, #8]
 80046ee:	2b03      	cmp	r3, #3
 80046f0:	d10f      	bne.n	8004712 <WriteMagRegWrap+0x76>
  {
    return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 80046f2:	697b      	ldr	r3, [r7, #20]
 80046f4:	691c      	ldr	r4, [r3, #16]
 80046f6:	697b      	ldr	r3, [r7, #20]
 80046f8:	7b1b      	ldrb	r3, [r3, #12]
 80046fa:	b298      	uxth	r0, r3
 80046fc:	230b      	movs	r3, #11
 80046fe:	18fb      	adds	r3, r7, r3
 8004700:	781b      	ldrb	r3, [r3, #0]
 8004702:	b299      	uxth	r1, r3
 8004704:	2308      	movs	r3, #8
 8004706:	18fb      	adds	r3, r7, r3
 8004708:	881b      	ldrh	r3, [r3, #0]
 800470a:	687a      	ldr	r2, [r7, #4]
 800470c:	47a0      	blx	r4
 800470e:	0003      	movs	r3, r0
 8004710:	e011      	b.n	8004736 <WriteMagRegWrap+0x9a>
  }
  else   /* SPI 3-Wires or SPI 4-Wires */
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8004712:	697b      	ldr	r3, [r7, #20]
 8004714:	691c      	ldr	r4, [r3, #16]
 8004716:	697b      	ldr	r3, [r7, #20]
 8004718:	7b1b      	ldrb	r3, [r3, #12]
 800471a:	b298      	uxth	r0, r3
 800471c:	230b      	movs	r3, #11
 800471e:	18fb      	adds	r3, r7, r3
 8004720:	781b      	ldrb	r3, [r3, #0]
 8004722:	2240      	movs	r2, #64	; 0x40
 8004724:	4313      	orrs	r3, r2
 8004726:	b2db      	uxtb	r3, r3
 8004728:	b299      	uxth	r1, r3
 800472a:	2308      	movs	r3, #8
 800472c:	18fb      	adds	r3, r7, r3
 800472e:	881b      	ldrh	r3, [r3, #0]
 8004730:	687a      	ldr	r2, [r7, #4]
 8004732:	47a0      	blx	r4
 8004734:	0003      	movs	r3, r0
  }
}
 8004736:	0018      	movs	r0, r3
 8004738:	46bd      	mov	sp, r7
 800473a:	b007      	add	sp, #28
 800473c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800473e <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>:
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(LIS2MDL_Object_t *pObj, uint8_t Reg, uint8_t *pData,
                                                     uint16_t Length)
{
 800473e:	b590      	push	{r4, r7, lr}
 8004740:	b08d      	sub	sp, #52	; 0x34
 8004742:	af00      	add	r7, sp, #0
 8004744:	60f8      	str	r0, [r7, #12]
 8004746:	0008      	movs	r0, r1
 8004748:	607a      	str	r2, [r7, #4]
 800474a:	0019      	movs	r1, r3
 800474c:	230b      	movs	r3, #11
 800474e:	18fb      	adds	r3, r7, r3
 8004750:	1c02      	adds	r2, r0, #0
 8004752:	701a      	strb	r2, [r3, #0]
 8004754:	2008      	movs	r0, #8
 8004756:	183b      	adds	r3, r7, r0
 8004758:	1c0a      	adds	r2, r1, #0
 800475a:	801a      	strh	r2, [r3, #0]
  uint8_t lsm6dsox_func_cfg_access = 0x01U;
 800475c:	212f      	movs	r1, #47	; 0x2f
 800475e:	187b      	adds	r3, r7, r1
 8004760:	2201      	movs	r2, #1
 8004762:	701a      	strb	r2, [r3, #0]
  uint8_t shub_reg_access_en = 0x40U;
 8004764:	2421      	movs	r4, #33	; 0x21
 8004766:	193b      	adds	r3, r7, r4
 8004768:	2240      	movs	r2, #64	; 0x40
 800476a:	701a      	strb	r2, [r3, #0]
  uint8_t shub_reg_access_dis = 0x00U;
 800476c:	2320      	movs	r3, #32
 800476e:	18fb      	adds	r3, r7, r3
 8004770:	2200      	movs	r2, #0
 8004772:	701a      	strb	r2, [r3, #0]
  uint8_t ext_sens_addr_read = LIS2MDL_I2C_ADD | 0x01U;
 8004774:	231f      	movs	r3, #31
 8004776:	18fb      	adds	r3, r7, r3
 8004778:	223d      	movs	r2, #61	; 0x3d
 800477a:	701a      	strb	r2, [r3, #0]
  uint8_t slv0_add = 0x15U;
 800477c:	232e      	movs	r3, #46	; 0x2e
 800477e:	18fb      	adds	r3, r7, r3
 8004780:	2215      	movs	r2, #21
 8004782:	701a      	strb	r2, [r3, #0]
  uint8_t slv0_subadd = 0x16U;
 8004784:	232d      	movs	r3, #45	; 0x2d
 8004786:	18fb      	adds	r3, r7, r3
 8004788:	2216      	movs	r2, #22
 800478a:	701a      	strb	r2, [r3, #0]
  uint8_t slave0_config = 0x17U;
 800478c:	232c      	movs	r3, #44	; 0x2c
 800478e:	18fb      	adds	r3, r7, r3
 8004790:	2217      	movs	r2, #23
 8004792:	701a      	strb	r2, [r3, #0]
  uint8_t master_config = 0x14U;
 8004794:	232b      	movs	r3, #43	; 0x2b
 8004796:	18fb      	adds	r3, r7, r3
 8004798:	2214      	movs	r2, #20
 800479a:	701a      	strb	r2, [r3, #0]
  uint8_t write_once_i2c_en = 0x44U;
 800479c:	231e      	movs	r3, #30
 800479e:	18fb      	adds	r3, r7, r3
 80047a0:	2244      	movs	r2, #68	; 0x44
 80047a2:	701a      	strb	r2, [r3, #0]
  uint8_t sensor_hub_1 = 0x02U;
 80047a4:	232a      	movs	r3, #42	; 0x2a
 80047a6:	18fb      	adds	r3, r7, r3
 80047a8:	2202      	movs	r2, #2
 80047aa:	701a      	strb	r2, [r3, #0]
  uint8_t status_master_mainpage = 0x39U;
 80047ac:	2329      	movs	r3, #41	; 0x29
 80047ae:	18fb      	adds	r3, r7, r3
 80047b0:	2239      	movs	r2, #57	; 0x39
 80047b2:	701a      	strb	r2, [r3, #0]
  uint8_t sens_hub_endop = 0x01U;
 80047b4:	2328      	movs	r3, #40	; 0x28
 80047b6:	18fb      	adds	r3, r7, r3
 80047b8:	2201      	movs	r2, #1
 80047ba:	701a      	strb	r2, [r3, #0]
  uint8_t lsm6dsox_outx_h_a = 0x29U;
 80047bc:	2327      	movs	r3, #39	; 0x27
 80047be:	18fb      	adds	r3, r7, r3
 80047c0:	2229      	movs	r2, #41	; 0x29
 80047c2:	701a      	strb	r2, [r3, #0]
  uint8_t lsm6dsox_status_reg = 0x1EU;
 80047c4:	2326      	movs	r3, #38	; 0x26
 80047c6:	18fb      	adds	r3, r7, r3
 80047c8:	221e      	movs	r2, #30
 80047ca:	701a      	strb	r2, [r3, #0]
  uint8_t xlda = 0x01U;
 80047cc:	2325      	movs	r3, #37	; 0x25
 80047ce:	18fb      	adds	r3, r7, r3
 80047d0:	2201      	movs	r2, #1
 80047d2:	701a      	strb	r2, [r3, #0]
  uint8_t len = (uint8_t)Length;
 80047d4:	183b      	adds	r3, r7, r0
 80047d6:	881b      	ldrh	r3, [r3, #0]
 80047d8:	b2da      	uxtb	r2, r3
 80047da:	231d      	movs	r3, #29
 80047dc:	18fb      	adds	r3, r7, r3
 80047de:	701a      	strb	r2, [r3, #0]
  uint8_t lsm6dsox_ctrl1_xl = 0x10U;
 80047e0:	2324      	movs	r3, #36	; 0x24
 80047e2:	18fb      	adds	r3, r7, r3
 80047e4:	2210      	movs	r2, #16
 80047e6:	701a      	strb	r2, [r3, #0]
  uint8_t lsm6dsox_xl_prev_odr;
  uint8_t lsm6dsox_xl_odr_off = 0x00U;
 80047e8:	2323      	movs	r3, #35	; 0x23
 80047ea:	18fb      	adds	r3, r7, r3
 80047ec:	2200      	movs	r2, #0
 80047ee:	701a      	strb	r2, [r3, #0]
  uint8_t lsm6dsox_xl_odr_104hz = 0x40U;
 80047f0:	2322      	movs	r3, #34	; 0x22
 80047f2:	18fb      	adds	r3, r7, r3
 80047f4:	2240      	movs	r2, #64	; 0x40
 80047f6:	701a      	strb	r2, [r3, #0]
  uint8_t data;
  uint8_t data_array[6];

  /* Enable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_en, 1) != LIS2MDL_OK)
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	331c      	adds	r3, #28
 80047fc:	0018      	movs	r0, r3
 80047fe:	193a      	adds	r2, r7, r4
 8004800:	187b      	adds	r3, r7, r1
 8004802:	7819      	ldrb	r1, [r3, #0]
 8004804:	2301      	movs	r3, #1
 8004806:	f000 fa64 	bl	8004cd2 <lis2mdl_write_reg>
 800480a:	1e03      	subs	r3, r0, #0
 800480c:	d002      	beq.n	8004814 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0xd6>
  {
    return LIS2MDL_ERROR;
 800480e:	2301      	movs	r3, #1
 8004810:	425b      	negs	r3, r3
 8004812:	e0f7      	b.n	8004a04 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x2c6>
  }

  /* Configure external device address, Enable read operation (rw_0 = 1) */
  if (lis2mdl_write_reg(&(pObj->Ctx), slv0_add, &ext_sens_addr_read, 1) != LIS2MDL_OK)
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	331c      	adds	r3, #28
 8004818:	0018      	movs	r0, r3
 800481a:	231f      	movs	r3, #31
 800481c:	18fa      	adds	r2, r7, r3
 800481e:	232e      	movs	r3, #46	; 0x2e
 8004820:	18fb      	adds	r3, r7, r3
 8004822:	7819      	ldrb	r1, [r3, #0]
 8004824:	2301      	movs	r3, #1
 8004826:	f000 fa54 	bl	8004cd2 <lis2mdl_write_reg>
 800482a:	1e03      	subs	r3, r0, #0
 800482c:	d002      	beq.n	8004834 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0xf6>
  {
    return LIS2MDL_ERROR;
 800482e:	2301      	movs	r3, #1
 8004830:	425b      	negs	r3, r3
 8004832:	e0e7      	b.n	8004a04 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x2c6>
  }

  /* Configure address of the LIS2MDL register to be read */
  if (lis2mdl_write_reg(&(pObj->Ctx), slv0_subadd, &Reg, 1) != LIS2MDL_OK)
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	331c      	adds	r3, #28
 8004838:	0018      	movs	r0, r3
 800483a:	230b      	movs	r3, #11
 800483c:	18fa      	adds	r2, r7, r3
 800483e:	232d      	movs	r3, #45	; 0x2d
 8004840:	18fb      	adds	r3, r7, r3
 8004842:	7819      	ldrb	r1, [r3, #0]
 8004844:	2301      	movs	r3, #1
 8004846:	f000 fa44 	bl	8004cd2 <lis2mdl_write_reg>
 800484a:	1e03      	subs	r3, r0, #0
 800484c:	d002      	beq.n	8004854 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x116>
  {
    return LIS2MDL_ERROR;
 800484e:	2301      	movs	r3, #1
 8004850:	425b      	negs	r3, r3
 8004852:	e0d7      	b.n	8004a04 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x2c6>
  }

  /* Read required number of bytes (up to 6), SHUB_ODR = 104 Hz */
  if (lis2mdl_write_reg(&(pObj->Ctx), slave0_config, &len, 1) != LIS2MDL_OK)
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	331c      	adds	r3, #28
 8004858:	0018      	movs	r0, r3
 800485a:	231d      	movs	r3, #29
 800485c:	18fa      	adds	r2, r7, r3
 800485e:	232c      	movs	r3, #44	; 0x2c
 8004860:	18fb      	adds	r3, r7, r3
 8004862:	7819      	ldrb	r1, [r3, #0]
 8004864:	2301      	movs	r3, #1
 8004866:	f000 fa34 	bl	8004cd2 <lis2mdl_write_reg>
 800486a:	1e03      	subs	r3, r0, #0
 800486c:	d002      	beq.n	8004874 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x136>
  {
    return LIS2MDL_ERROR;
 800486e:	2301      	movs	r3, #1
 8004870:	425b      	negs	r3, r3
 8004872:	e0c7      	b.n	8004a04 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x2c6>
  }

  /* WRITE_ONCE is mandatory for read, I2C master enabled using slave 0, I2C pull-ups disabled */
  if (lis2mdl_write_reg(&(pObj->Ctx), master_config, &write_once_i2c_en, 1) != LIS2MDL_OK)
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	331c      	adds	r3, #28
 8004878:	0018      	movs	r0, r3
 800487a:	231e      	movs	r3, #30
 800487c:	18fa      	adds	r2, r7, r3
 800487e:	232b      	movs	r3, #43	; 0x2b
 8004880:	18fb      	adds	r3, r7, r3
 8004882:	7819      	ldrb	r1, [r3, #0]
 8004884:	2301      	movs	r3, #1
 8004886:	f000 fa24 	bl	8004cd2 <lis2mdl_write_reg>
 800488a:	1e03      	subs	r3, r0, #0
 800488c:	d002      	beq.n	8004894 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x156>
  {
    return LIS2MDL_ERROR;
 800488e:	2301      	movs	r3, #1
 8004890:	425b      	negs	r3, r3
 8004892:	e0b7      	b.n	8004a04 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x2c6>
  }

  /* Disable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_dis, 1) != LIS2MDL_OK)
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	331c      	adds	r3, #28
 8004898:	0018      	movs	r0, r3
 800489a:	2320      	movs	r3, #32
 800489c:	18fa      	adds	r2, r7, r3
 800489e:	232f      	movs	r3, #47	; 0x2f
 80048a0:	18fb      	adds	r3, r7, r3
 80048a2:	7819      	ldrb	r1, [r3, #0]
 80048a4:	2301      	movs	r3, #1
 80048a6:	f000 fa14 	bl	8004cd2 <lis2mdl_write_reg>
 80048aa:	1e03      	subs	r3, r0, #0
 80048ac:	d002      	beq.n	80048b4 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x176>
  {
    return LIS2MDL_ERROR;
 80048ae:	2301      	movs	r3, #1
 80048b0:	425b      	negs	r3, r3
 80048b2:	e0a7      	b.n	8004a04 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x2c6>
  }

  /* Read LSM6DSOX ODR */
  if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_ctrl1_xl, &lsm6dsox_xl_prev_odr, 1) != LIS2MDL_OK)
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	331c      	adds	r3, #28
 80048b8:	0018      	movs	r0, r3
 80048ba:	231c      	movs	r3, #28
 80048bc:	18fa      	adds	r2, r7, r3
 80048be:	2324      	movs	r3, #36	; 0x24
 80048c0:	18fb      	adds	r3, r7, r3
 80048c2:	7819      	ldrb	r1, [r3, #0]
 80048c4:	2301      	movs	r3, #1
 80048c6:	f000 f9e3 	bl	8004c90 <lis2mdl_read_reg>
 80048ca:	1e03      	subs	r3, r0, #0
 80048cc:	d002      	beq.n	80048d4 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x196>
  {
    return LIS2MDL_ERROR;
 80048ce:	2301      	movs	r3, #1
 80048d0:	425b      	negs	r3, r3
 80048d2:	e097      	b.n	8004a04 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x2c6>
  }

  /* Set XL_ODR_104HZ if the accelerometer is disabled */
  if (lsm6dsox_xl_prev_odr == lsm6dsox_xl_odr_off)
 80048d4:	211c      	movs	r1, #28
 80048d6:	187b      	adds	r3, r7, r1
 80048d8:	781b      	ldrb	r3, [r3, #0]
 80048da:	2223      	movs	r2, #35	; 0x23
 80048dc:	18ba      	adds	r2, r7, r2
 80048de:	7812      	ldrb	r2, [r2, #0]
 80048e0:	429a      	cmp	r2, r3
 80048e2:	d104      	bne.n	80048ee <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x1b0>
  {
    lsm6dsox_xl_prev_odr = lsm6dsox_xl_odr_104hz;
 80048e4:	187b      	adds	r3, r7, r1
 80048e6:	2222      	movs	r2, #34	; 0x22
 80048e8:	18ba      	adds	r2, r7, r2
 80048ea:	7812      	ldrb	r2, [r2, #0]
 80048ec:	701a      	strb	r2, [r3, #0]
  }

  /* Enable accelerometer to trigger Sensor Hub operation */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_ctrl1_xl, &lsm6dsox_xl_prev_odr, 1) != LIS2MDL_OK)
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	331c      	adds	r3, #28
 80048f2:	0018      	movs	r0, r3
 80048f4:	231c      	movs	r3, #28
 80048f6:	18fa      	adds	r2, r7, r3
 80048f8:	2324      	movs	r3, #36	; 0x24
 80048fa:	18fb      	adds	r3, r7, r3
 80048fc:	7819      	ldrb	r1, [r3, #0]
 80048fe:	2301      	movs	r3, #1
 8004900:	f000 f9e7 	bl	8004cd2 <lis2mdl_write_reg>
 8004904:	1e03      	subs	r3, r0, #0
 8004906:	d002      	beq.n	800490e <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x1d0>
  {
    return LIS2MDL_ERROR;
 8004908:	2301      	movs	r3, #1
 800490a:	425b      	negs	r3, r3
 800490c:	e07a      	b.n	8004a04 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x2c6>
  }

  /* Read ACC data starting from LSM6DSOX OUTX_H_A register to clear accelerometer data-ready XLDA */
  if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_outx_h_a, data_array, 6) != LIS2MDL_OK)
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	331c      	adds	r3, #28
 8004912:	0018      	movs	r0, r3
 8004914:	2314      	movs	r3, #20
 8004916:	18fa      	adds	r2, r7, r3
 8004918:	2327      	movs	r3, #39	; 0x27
 800491a:	18fb      	adds	r3, r7, r3
 800491c:	7819      	ldrb	r1, [r3, #0]
 800491e:	2306      	movs	r3, #6
 8004920:	f000 f9b6 	bl	8004c90 <lis2mdl_read_reg>
 8004924:	1e03      	subs	r3, r0, #0
 8004926:	d002      	beq.n	800492e <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x1f0>
  {
    return LIS2MDL_ERROR;
 8004928:	2301      	movs	r3, #1
 800492a:	425b      	negs	r3, r3
 800492c:	e06a      	b.n	8004a04 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x2c6>
  }

  /* Poll LSM6DSOX LSM6DSOX_STATUS_REG until XLDA = 1 (Wait for sensor hub trigger) */
  do
  {
    if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_status_reg, &data, 1) != LIS2MDL_OK)
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	331c      	adds	r3, #28
 8004932:	0018      	movs	r0, r3
 8004934:	231b      	movs	r3, #27
 8004936:	18fa      	adds	r2, r7, r3
 8004938:	2326      	movs	r3, #38	; 0x26
 800493a:	18fb      	adds	r3, r7, r3
 800493c:	7819      	ldrb	r1, [r3, #0]
 800493e:	2301      	movs	r3, #1
 8004940:	f000 f9a6 	bl	8004c90 <lis2mdl_read_reg>
 8004944:	1e03      	subs	r3, r0, #0
 8004946:	d002      	beq.n	800494e <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x210>
    {
      return LIS2MDL_ERROR;
 8004948:	2301      	movs	r3, #1
 800494a:	425b      	negs	r3, r3
 800494c:	e05a      	b.n	8004a04 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x2c6>
    }
  } while ((data & xlda) != xlda);
 800494e:	231b      	movs	r3, #27
 8004950:	18fb      	adds	r3, r7, r3
 8004952:	781b      	ldrb	r3, [r3, #0]
 8004954:	2125      	movs	r1, #37	; 0x25
 8004956:	187a      	adds	r2, r7, r1
 8004958:	7812      	ldrb	r2, [r2, #0]
 800495a:	4013      	ands	r3, r2
 800495c:	b2db      	uxtb	r3, r3
 800495e:	187a      	adds	r2, r7, r1
 8004960:	7812      	ldrb	r2, [r2, #0]
 8004962:	429a      	cmp	r2, r3
 8004964:	d1e3      	bne.n	800492e <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x1f0>

  /* Poll LSM6DSOX SensorHub SENS_HUB_ENDOP bit in STATUS_MASTER_MAINPAGE reg until the end of SW write operations */
  do
  {
    if (lis2mdl_read_reg(&(pObj->Ctx), status_master_mainpage, &data, 1) != LIS2MDL_OK)
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	331c      	adds	r3, #28
 800496a:	0018      	movs	r0, r3
 800496c:	231b      	movs	r3, #27
 800496e:	18fa      	adds	r2, r7, r3
 8004970:	2329      	movs	r3, #41	; 0x29
 8004972:	18fb      	adds	r3, r7, r3
 8004974:	7819      	ldrb	r1, [r3, #0]
 8004976:	2301      	movs	r3, #1
 8004978:	f000 f98a 	bl	8004c90 <lis2mdl_read_reg>
 800497c:	1e03      	subs	r3, r0, #0
 800497e:	d002      	beq.n	8004986 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x248>
    {
      return LIS2MDL_ERROR;
 8004980:	2301      	movs	r3, #1
 8004982:	425b      	negs	r3, r3
 8004984:	e03e      	b.n	8004a04 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x2c6>
    }
  } while ((data & sens_hub_endop) != sens_hub_endop);
 8004986:	231b      	movs	r3, #27
 8004988:	18fb      	adds	r3, r7, r3
 800498a:	781b      	ldrb	r3, [r3, #0]
 800498c:	2128      	movs	r1, #40	; 0x28
 800498e:	187a      	adds	r2, r7, r1
 8004990:	7812      	ldrb	r2, [r2, #0]
 8004992:	4013      	ands	r3, r2
 8004994:	b2db      	uxtb	r3, r3
 8004996:	187a      	adds	r2, r7, r1
 8004998:	7812      	ldrb	r2, [r2, #0]
 800499a:	429a      	cmp	r2, r3
 800499c:	d1e3      	bne.n	8004966 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x228>

  /* Enable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_en, 1) != LIS2MDL_OK)
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	331c      	adds	r3, #28
 80049a2:	0018      	movs	r0, r3
 80049a4:	2321      	movs	r3, #33	; 0x21
 80049a6:	18fa      	adds	r2, r7, r3
 80049a8:	232f      	movs	r3, #47	; 0x2f
 80049aa:	18fb      	adds	r3, r7, r3
 80049ac:	7819      	ldrb	r1, [r3, #0]
 80049ae:	2301      	movs	r3, #1
 80049b0:	f000 f98f 	bl	8004cd2 <lis2mdl_write_reg>
 80049b4:	1e03      	subs	r3, r0, #0
 80049b6:	d002      	beq.n	80049be <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x280>
  {
    return LIS2MDL_ERROR;
 80049b8:	2301      	movs	r3, #1
 80049ba:	425b      	negs	r3, r3
 80049bc:	e022      	b.n	8004a04 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x2c6>
  }

  /* Read data from LSM6DSOX SensorHub regs containing values from required LIS2MDL regs */
  if (lis2mdl_read_reg(&(pObj->Ctx), sensor_hub_1, pData, Length) != LIS2MDL_OK)
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	331c      	adds	r3, #28
 80049c2:	0018      	movs	r0, r3
 80049c4:	2308      	movs	r3, #8
 80049c6:	18fb      	adds	r3, r7, r3
 80049c8:	881c      	ldrh	r4, [r3, #0]
 80049ca:	687a      	ldr	r2, [r7, #4]
 80049cc:	232a      	movs	r3, #42	; 0x2a
 80049ce:	18fb      	adds	r3, r7, r3
 80049d0:	7819      	ldrb	r1, [r3, #0]
 80049d2:	0023      	movs	r3, r4
 80049d4:	f000 f95c 	bl	8004c90 <lis2mdl_read_reg>
 80049d8:	1e03      	subs	r3, r0, #0
 80049da:	d002      	beq.n	80049e2 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x2a4>
  {
    return LIS2MDL_ERROR;
 80049dc:	2301      	movs	r3, #1
 80049de:	425b      	negs	r3, r3
 80049e0:	e010      	b.n	8004a04 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x2c6>
  }

  /* Disable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_dis, 1) != LIS2MDL_OK)
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	331c      	adds	r3, #28
 80049e6:	0018      	movs	r0, r3
 80049e8:	2320      	movs	r3, #32
 80049ea:	18fa      	adds	r2, r7, r3
 80049ec:	232f      	movs	r3, #47	; 0x2f
 80049ee:	18fb      	adds	r3, r7, r3
 80049f0:	7819      	ldrb	r1, [r3, #0]
 80049f2:	2301      	movs	r3, #1
 80049f4:	f000 f96d 	bl	8004cd2 <lis2mdl_write_reg>
 80049f8:	1e03      	subs	r3, r0, #0
 80049fa:	d002      	beq.n	8004a02 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x2c4>
  {
    return LIS2MDL_ERROR;
 80049fc:	2301      	movs	r3, #1
 80049fe:	425b      	negs	r3, r3
 8004a00:	e000      	b.n	8004a04 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x2c6>
  }

  return LIS2MDL_OK;
 8004a02:	2300      	movs	r3, #0
}
 8004a04:	0018      	movs	r0, r3
 8004a06:	46bd      	mov	sp, r7
 8004a08:	b00d      	add	sp, #52	; 0x34
 8004a0a:	bd90      	pop	{r4, r7, pc}

08004a0c <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>:
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(LIS2MDL_Object_t *pObj, uint8_t Reg, uint8_t *pData,
                                                      uint16_t Length)
{
 8004a0c:	b590      	push	{r4, r7, lr}
 8004a0e:	b08d      	sub	sp, #52	; 0x34
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	60f8      	str	r0, [r7, #12]
 8004a14:	0008      	movs	r0, r1
 8004a16:	607a      	str	r2, [r7, #4]
 8004a18:	0019      	movs	r1, r3
 8004a1a:	230b      	movs	r3, #11
 8004a1c:	18fb      	adds	r3, r7, r3
 8004a1e:	1c02      	adds	r2, r0, #0
 8004a20:	701a      	strb	r2, [r3, #0]
 8004a22:	2308      	movs	r3, #8
 8004a24:	18fb      	adds	r3, r7, r3
 8004a26:	1c0a      	adds	r2, r1, #0
 8004a28:	801a      	strh	r2, [r3, #0]
  uint8_t lsm6dsox_func_cfg_access = 0x01U;
 8004a2a:	212f      	movs	r1, #47	; 0x2f
 8004a2c:	187b      	adds	r3, r7, r1
 8004a2e:	2201      	movs	r2, #1
 8004a30:	701a      	strb	r2, [r3, #0]
  uint8_t shub_reg_access_en = 0x40U;
 8004a32:	2421      	movs	r4, #33	; 0x21
 8004a34:	193b      	adds	r3, r7, r4
 8004a36:	2240      	movs	r2, #64	; 0x40
 8004a38:	701a      	strb	r2, [r3, #0]
  uint8_t shub_reg_access_dis = 0x00U;
 8004a3a:	2320      	movs	r3, #32
 8004a3c:	18fb      	adds	r3, r7, r3
 8004a3e:	2200      	movs	r2, #0
 8004a40:	701a      	strb	r2, [r3, #0]
  uint8_t ext_sens_addr_write = LIS2MDL_I2C_ADD & 0xFEU;
 8004a42:	231f      	movs	r3, #31
 8004a44:	18fb      	adds	r3, r7, r3
 8004a46:	223c      	movs	r2, #60	; 0x3c
 8004a48:	701a      	strb	r2, [r3, #0]
  uint8_t slv0_add = 0x15U;
 8004a4a:	232e      	movs	r3, #46	; 0x2e
 8004a4c:	18fb      	adds	r3, r7, r3
 8004a4e:	2215      	movs	r2, #21
 8004a50:	701a      	strb	r2, [r3, #0]
  uint8_t slv0_subadd = 0x16U;
 8004a52:	232d      	movs	r3, #45	; 0x2d
 8004a54:	18fb      	adds	r3, r7, r3
 8004a56:	2216      	movs	r2, #22
 8004a58:	701a      	strb	r2, [r3, #0]
  uint8_t slave0_config = 0x17U;
 8004a5a:	232c      	movs	r3, #44	; 0x2c
 8004a5c:	18fb      	adds	r3, r7, r3
 8004a5e:	2217      	movs	r2, #23
 8004a60:	701a      	strb	r2, [r3, #0]
  uint8_t shub_odr_104 = 0x00U;
 8004a62:	231e      	movs	r3, #30
 8004a64:	18fb      	adds	r3, r7, r3
 8004a66:	2200      	movs	r2, #0
 8004a68:	701a      	strb	r2, [r3, #0]
  uint8_t master_config = 0x14U;
 8004a6a:	232b      	movs	r3, #43	; 0x2b
 8004a6c:	18fb      	adds	r3, r7, r3
 8004a6e:	2214      	movs	r2, #20
 8004a70:	701a      	strb	r2, [r3, #0]
  uint8_t write_once_i2c_en = 0x44U;
 8004a72:	231d      	movs	r3, #29
 8004a74:	18fb      	adds	r3, r7, r3
 8004a76:	2244      	movs	r2, #68	; 0x44
 8004a78:	701a      	strb	r2, [r3, #0]
  uint8_t status_master_mainpage = 0x39U;
 8004a7a:	232a      	movs	r3, #42	; 0x2a
 8004a7c:	18fb      	adds	r3, r7, r3
 8004a7e:	2239      	movs	r2, #57	; 0x39
 8004a80:	701a      	strb	r2, [r3, #0]
  uint8_t wr_once_done = 0x80U;
 8004a82:	2329      	movs	r3, #41	; 0x29
 8004a84:	18fb      	adds	r3, r7, r3
 8004a86:	2280      	movs	r2, #128	; 0x80
 8004a88:	701a      	strb	r2, [r3, #0]
  uint8_t lsm6dsox_outx_h_a = 0x29U;
 8004a8a:	2328      	movs	r3, #40	; 0x28
 8004a8c:	18fb      	adds	r3, r7, r3
 8004a8e:	2229      	movs	r2, #41	; 0x29
 8004a90:	701a      	strb	r2, [r3, #0]
  uint8_t lsm6dsox_status_reg = 0x1EU;
 8004a92:	2327      	movs	r3, #39	; 0x27
 8004a94:	18fb      	adds	r3, r7, r3
 8004a96:	221e      	movs	r2, #30
 8004a98:	701a      	strb	r2, [r3, #0]
  uint8_t xlda = 0x01U;
 8004a9a:	2326      	movs	r3, #38	; 0x26
 8004a9c:	18fb      	adds	r3, r7, r3
 8004a9e:	2201      	movs	r2, #1
 8004aa0:	701a      	strb	r2, [r3, #0]
  uint8_t lsm6dsox_ctrl1_xl = 0x10U;
 8004aa2:	2325      	movs	r3, #37	; 0x25
 8004aa4:	18fb      	adds	r3, r7, r3
 8004aa6:	2210      	movs	r2, #16
 8004aa8:	701a      	strb	r2, [r3, #0]
  uint8_t lsm6dsox_xl_prev_odr;
  uint8_t lsm6dsox_xl_odr_off = 0x00U;
 8004aaa:	2324      	movs	r3, #36	; 0x24
 8004aac:	18fb      	adds	r3, r7, r3
 8004aae:	2200      	movs	r2, #0
 8004ab0:	701a      	strb	r2, [r3, #0]
  uint8_t lsm6dsox_xl_odr_104hz = 0x40U;
 8004ab2:	2323      	movs	r3, #35	; 0x23
 8004ab4:	18fb      	adds	r3, r7, r3
 8004ab6:	2240      	movs	r2, #64	; 0x40
 8004ab8:	701a      	strb	r2, [r3, #0]
  uint8_t datawrite_slv0 = 0x0EU;
 8004aba:	2322      	movs	r3, #34	; 0x22
 8004abc:	18fb      	adds	r3, r7, r3
 8004abe:	220e      	movs	r2, #14
 8004ac0:	701a      	strb	r2, [r3, #0]
  uint8_t data;
  uint8_t data_array[6];

  /* Enable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_en, 1) != LIS2MDL_OK)
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	331c      	adds	r3, #28
 8004ac6:	0018      	movs	r0, r3
 8004ac8:	193a      	adds	r2, r7, r4
 8004aca:	187b      	adds	r3, r7, r1
 8004acc:	7819      	ldrb	r1, [r3, #0]
 8004ace:	2301      	movs	r3, #1
 8004ad0:	f000 f8ff 	bl	8004cd2 <lis2mdl_write_reg>
 8004ad4:	1e03      	subs	r3, r0, #0
 8004ad6:	d002      	beq.n	8004ade <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0xd2>
  {
    return LIS2MDL_ERROR;
 8004ad8:	2301      	movs	r3, #1
 8004ada:	425b      	negs	r3, r3
 8004adc:	e0d4      	b.n	8004c88 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x27c>
  }

  /* Configure external device address, Enable write operation (rw_0 = 0) */
  if (lis2mdl_write_reg(&(pObj->Ctx), slv0_add, &ext_sens_addr_write, 1) != LIS2MDL_OK)
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	331c      	adds	r3, #28
 8004ae2:	0018      	movs	r0, r3
 8004ae4:	231f      	movs	r3, #31
 8004ae6:	18fa      	adds	r2, r7, r3
 8004ae8:	232e      	movs	r3, #46	; 0x2e
 8004aea:	18fb      	adds	r3, r7, r3
 8004aec:	7819      	ldrb	r1, [r3, #0]
 8004aee:	2301      	movs	r3, #1
 8004af0:	f000 f8ef 	bl	8004cd2 <lis2mdl_write_reg>
 8004af4:	1e03      	subs	r3, r0, #0
 8004af6:	d002      	beq.n	8004afe <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0xf2>
  {
    return LIS2MDL_ERROR;
 8004af8:	2301      	movs	r3, #1
 8004afa:	425b      	negs	r3, r3
 8004afc:	e0c4      	b.n	8004c88 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x27c>
  }

  /* Configure address of the LIS2MDL register to be written to */
  if (lis2mdl_write_reg(&(pObj->Ctx), slv0_subadd, &Reg, 1) != LIS2MDL_OK)
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	331c      	adds	r3, #28
 8004b02:	0018      	movs	r0, r3
 8004b04:	230b      	movs	r3, #11
 8004b06:	18fa      	adds	r2, r7, r3
 8004b08:	232d      	movs	r3, #45	; 0x2d
 8004b0a:	18fb      	adds	r3, r7, r3
 8004b0c:	7819      	ldrb	r1, [r3, #0]
 8004b0e:	2301      	movs	r3, #1
 8004b10:	f000 f8df 	bl	8004cd2 <lis2mdl_write_reg>
 8004b14:	1e03      	subs	r3, r0, #0
 8004b16:	d002      	beq.n	8004b1e <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x112>
  {
    return LIS2MDL_ERROR;
 8004b18:	2301      	movs	r3, #1
 8004b1a:	425b      	negs	r3, r3
 8004b1c:	e0b4      	b.n	8004c88 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x27c>
  }

  /* Set SHUB_ODR = 104 Hz */
  if (lis2mdl_write_reg(&(pObj->Ctx), slave0_config, &shub_odr_104, 1) != LIS2MDL_OK)
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	331c      	adds	r3, #28
 8004b22:	0018      	movs	r0, r3
 8004b24:	231e      	movs	r3, #30
 8004b26:	18fa      	adds	r2, r7, r3
 8004b28:	232c      	movs	r3, #44	; 0x2c
 8004b2a:	18fb      	adds	r3, r7, r3
 8004b2c:	7819      	ldrb	r1, [r3, #0]
 8004b2e:	2301      	movs	r3, #1
 8004b30:	f000 f8cf 	bl	8004cd2 <lis2mdl_write_reg>
 8004b34:	1e03      	subs	r3, r0, #0
 8004b36:	d002      	beq.n	8004b3e <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x132>
  {
    return LIS2MDL_ERROR;
 8004b38:	2301      	movs	r3, #1
 8004b3a:	425b      	negs	r3, r3
 8004b3c:	e0a4      	b.n	8004c88 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x27c>
  }

  /* Store data to be written to LIS2MDL in LSM6DSOX SH reg */
  if (lis2mdl_write_reg(&(pObj->Ctx), datawrite_slv0, pData, 1) != LIS2MDL_OK)
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	331c      	adds	r3, #28
 8004b42:	0018      	movs	r0, r3
 8004b44:	687a      	ldr	r2, [r7, #4]
 8004b46:	2322      	movs	r3, #34	; 0x22
 8004b48:	18fb      	adds	r3, r7, r3
 8004b4a:	7819      	ldrb	r1, [r3, #0]
 8004b4c:	2301      	movs	r3, #1
 8004b4e:	f000 f8c0 	bl	8004cd2 <lis2mdl_write_reg>
 8004b52:	1e03      	subs	r3, r0, #0
 8004b54:	d002      	beq.n	8004b5c <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x150>
  {
    return LIS2MDL_ERROR;
 8004b56:	2301      	movs	r3, #1
 8004b58:	425b      	negs	r3, r3
 8004b5a:	e095      	b.n	8004c88 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x27c>
  }

  /* WRITE_ONCE enabled for single write, I2C master enabled using slave 0, I2C pull-ups disabled */
  if (lis2mdl_write_reg(&(pObj->Ctx), master_config, &write_once_i2c_en, 1) != LIS2MDL_OK)
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	331c      	adds	r3, #28
 8004b60:	0018      	movs	r0, r3
 8004b62:	231d      	movs	r3, #29
 8004b64:	18fa      	adds	r2, r7, r3
 8004b66:	232b      	movs	r3, #43	; 0x2b
 8004b68:	18fb      	adds	r3, r7, r3
 8004b6a:	7819      	ldrb	r1, [r3, #0]
 8004b6c:	2301      	movs	r3, #1
 8004b6e:	f000 f8b0 	bl	8004cd2 <lis2mdl_write_reg>
 8004b72:	1e03      	subs	r3, r0, #0
 8004b74:	d002      	beq.n	8004b7c <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x170>
  {
    return LIS2MDL_ERROR;
 8004b76:	2301      	movs	r3, #1
 8004b78:	425b      	negs	r3, r3
 8004b7a:	e085      	b.n	8004c88 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x27c>
  }

  /* Disable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_dis, 1) != LIS2MDL_OK)
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	331c      	adds	r3, #28
 8004b80:	0018      	movs	r0, r3
 8004b82:	2320      	movs	r3, #32
 8004b84:	18fa      	adds	r2, r7, r3
 8004b86:	232f      	movs	r3, #47	; 0x2f
 8004b88:	18fb      	adds	r3, r7, r3
 8004b8a:	7819      	ldrb	r1, [r3, #0]
 8004b8c:	2301      	movs	r3, #1
 8004b8e:	f000 f8a0 	bl	8004cd2 <lis2mdl_write_reg>
 8004b92:	1e03      	subs	r3, r0, #0
 8004b94:	d002      	beq.n	8004b9c <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x190>
  {
    return LIS2MDL_ERROR;
 8004b96:	2301      	movs	r3, #1
 8004b98:	425b      	negs	r3, r3
 8004b9a:	e075      	b.n	8004c88 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x27c>
  }

  /* Read LSM6DSOX ODR */
  if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_ctrl1_xl, &lsm6dsox_xl_prev_odr, 1) != LIS2MDL_OK)
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	331c      	adds	r3, #28
 8004ba0:	0018      	movs	r0, r3
 8004ba2:	231c      	movs	r3, #28
 8004ba4:	18fa      	adds	r2, r7, r3
 8004ba6:	2325      	movs	r3, #37	; 0x25
 8004ba8:	18fb      	adds	r3, r7, r3
 8004baa:	7819      	ldrb	r1, [r3, #0]
 8004bac:	2301      	movs	r3, #1
 8004bae:	f000 f86f 	bl	8004c90 <lis2mdl_read_reg>
 8004bb2:	1e03      	subs	r3, r0, #0
 8004bb4:	d002      	beq.n	8004bbc <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x1b0>
  {
    return LIS2MDL_ERROR;
 8004bb6:	2301      	movs	r3, #1
 8004bb8:	425b      	negs	r3, r3
 8004bba:	e065      	b.n	8004c88 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x27c>
  }

  /* Set XL_ODR_104HZ if the accelerometer is disabled */
  if (lsm6dsox_xl_prev_odr == lsm6dsox_xl_odr_off)
 8004bbc:	211c      	movs	r1, #28
 8004bbe:	187b      	adds	r3, r7, r1
 8004bc0:	781b      	ldrb	r3, [r3, #0]
 8004bc2:	2224      	movs	r2, #36	; 0x24
 8004bc4:	18ba      	adds	r2, r7, r2
 8004bc6:	7812      	ldrb	r2, [r2, #0]
 8004bc8:	429a      	cmp	r2, r3
 8004bca:	d104      	bne.n	8004bd6 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x1ca>
  {
    lsm6dsox_xl_prev_odr = lsm6dsox_xl_odr_104hz;
 8004bcc:	187b      	adds	r3, r7, r1
 8004bce:	2223      	movs	r2, #35	; 0x23
 8004bd0:	18ba      	adds	r2, r7, r2
 8004bd2:	7812      	ldrb	r2, [r2, #0]
 8004bd4:	701a      	strb	r2, [r3, #0]
  }

  /* Enable accelerometer to trigger Sensor Hub operation */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_ctrl1_xl, &lsm6dsox_xl_prev_odr, 1) != LIS2MDL_OK)
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	331c      	adds	r3, #28
 8004bda:	0018      	movs	r0, r3
 8004bdc:	231c      	movs	r3, #28
 8004bde:	18fa      	adds	r2, r7, r3
 8004be0:	2325      	movs	r3, #37	; 0x25
 8004be2:	18fb      	adds	r3, r7, r3
 8004be4:	7819      	ldrb	r1, [r3, #0]
 8004be6:	2301      	movs	r3, #1
 8004be8:	f000 f873 	bl	8004cd2 <lis2mdl_write_reg>
 8004bec:	1e03      	subs	r3, r0, #0
 8004bee:	d002      	beq.n	8004bf6 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x1ea>
  {
    return LIS2MDL_ERROR;
 8004bf0:	2301      	movs	r3, #1
 8004bf2:	425b      	negs	r3, r3
 8004bf4:	e048      	b.n	8004c88 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x27c>
  }

  /* Read ACC data starting from LSM6DSOX OUTX_H_A register to clear accelerometer data-ready XLDA */
  if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_outx_h_a, data_array, 6) != LIS2MDL_OK)
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	331c      	adds	r3, #28
 8004bfa:	0018      	movs	r0, r3
 8004bfc:	2314      	movs	r3, #20
 8004bfe:	18fa      	adds	r2, r7, r3
 8004c00:	2328      	movs	r3, #40	; 0x28
 8004c02:	18fb      	adds	r3, r7, r3
 8004c04:	7819      	ldrb	r1, [r3, #0]
 8004c06:	2306      	movs	r3, #6
 8004c08:	f000 f842 	bl	8004c90 <lis2mdl_read_reg>
 8004c0c:	1e03      	subs	r3, r0, #0
 8004c0e:	d002      	beq.n	8004c16 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x20a>
  {
    return LIS2MDL_ERROR;
 8004c10:	2301      	movs	r3, #1
 8004c12:	425b      	negs	r3, r3
 8004c14:	e038      	b.n	8004c88 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x27c>
  }

  /* Poll LSM6DSOX LSM6DSOX_STATUS_REG until XLDA = 1 (Wait for sensor hub trigger) */
  do
  {
    if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_status_reg, &data, 1) != LIS2MDL_OK)
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	331c      	adds	r3, #28
 8004c1a:	0018      	movs	r0, r3
 8004c1c:	231b      	movs	r3, #27
 8004c1e:	18fa      	adds	r2, r7, r3
 8004c20:	2327      	movs	r3, #39	; 0x27
 8004c22:	18fb      	adds	r3, r7, r3
 8004c24:	7819      	ldrb	r1, [r3, #0]
 8004c26:	2301      	movs	r3, #1
 8004c28:	f000 f832 	bl	8004c90 <lis2mdl_read_reg>
 8004c2c:	1e03      	subs	r3, r0, #0
 8004c2e:	d002      	beq.n	8004c36 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x22a>
    {
      return LIS2MDL_ERROR;
 8004c30:	2301      	movs	r3, #1
 8004c32:	425b      	negs	r3, r3
 8004c34:	e028      	b.n	8004c88 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x27c>
    }
  } while ((data & xlda) != xlda);
 8004c36:	231b      	movs	r3, #27
 8004c38:	18fb      	adds	r3, r7, r3
 8004c3a:	781b      	ldrb	r3, [r3, #0]
 8004c3c:	2126      	movs	r1, #38	; 0x26
 8004c3e:	187a      	adds	r2, r7, r1
 8004c40:	7812      	ldrb	r2, [r2, #0]
 8004c42:	4013      	ands	r3, r2
 8004c44:	b2db      	uxtb	r3, r3
 8004c46:	187a      	adds	r2, r7, r1
 8004c48:	7812      	ldrb	r2, [r2, #0]
 8004c4a:	429a      	cmp	r2, r3
 8004c4c:	d1e3      	bne.n	8004c16 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x20a>

  /* Poll LSM6DSOX SensorHub WR_ONCE_DONE bit in STATUS_MASTER_MAINPAGE reg until the end of SW write operations */
  do
  {
    if (lis2mdl_read_reg(&(pObj->Ctx), status_master_mainpage, &data, 1) != LIS2MDL_OK)
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	331c      	adds	r3, #28
 8004c52:	0018      	movs	r0, r3
 8004c54:	231b      	movs	r3, #27
 8004c56:	18fa      	adds	r2, r7, r3
 8004c58:	232a      	movs	r3, #42	; 0x2a
 8004c5a:	18fb      	adds	r3, r7, r3
 8004c5c:	7819      	ldrb	r1, [r3, #0]
 8004c5e:	2301      	movs	r3, #1
 8004c60:	f000 f816 	bl	8004c90 <lis2mdl_read_reg>
 8004c64:	1e03      	subs	r3, r0, #0
 8004c66:	d002      	beq.n	8004c6e <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x262>
    {
      return LIS2MDL_ERROR;
 8004c68:	2301      	movs	r3, #1
 8004c6a:	425b      	negs	r3, r3
 8004c6c:	e00c      	b.n	8004c88 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x27c>
    }
  } while ((data & wr_once_done) != wr_once_done);
 8004c6e:	231b      	movs	r3, #27
 8004c70:	18fb      	adds	r3, r7, r3
 8004c72:	781b      	ldrb	r3, [r3, #0]
 8004c74:	2129      	movs	r1, #41	; 0x29
 8004c76:	187a      	adds	r2, r7, r1
 8004c78:	7812      	ldrb	r2, [r2, #0]
 8004c7a:	4013      	ands	r3, r2
 8004c7c:	b2db      	uxtb	r3, r3
 8004c7e:	187a      	adds	r2, r7, r1
 8004c80:	7812      	ldrb	r2, [r2, #0]
 8004c82:	429a      	cmp	r2, r3
 8004c84:	d1e3      	bne.n	8004c4e <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x242>

  return LIS2MDL_OK;
 8004c86:	2300      	movs	r3, #0
}
 8004c88:	0018      	movs	r0, r3
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	b00d      	add	sp, #52	; 0x34
 8004c8e:	bd90      	pop	{r4, r7, pc}

08004c90 <lis2mdl_read_reg>:
  *
  */
int32_t lis2mdl_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 8004c90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004c92:	b087      	sub	sp, #28
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	60f8      	str	r0, [r7, #12]
 8004c98:	0008      	movs	r0, r1
 8004c9a:	607a      	str	r2, [r7, #4]
 8004c9c:	0019      	movs	r1, r3
 8004c9e:	260b      	movs	r6, #11
 8004ca0:	19bb      	adds	r3, r7, r6
 8004ca2:	1c02      	adds	r2, r0, #0
 8004ca4:	701a      	strb	r2, [r3, #0]
 8004ca6:	2508      	movs	r5, #8
 8004ca8:	197b      	adds	r3, r7, r5
 8004caa:	1c0a      	adds	r2, r1, #0
 8004cac:	801a      	strh	r2, [r3, #0]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	685c      	ldr	r4, [r3, #4]
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	6898      	ldr	r0, [r3, #8]
 8004cb6:	197b      	adds	r3, r7, r5
 8004cb8:	881d      	ldrh	r5, [r3, #0]
 8004cba:	687a      	ldr	r2, [r7, #4]
 8004cbc:	19bb      	adds	r3, r7, r6
 8004cbe:	7819      	ldrb	r1, [r3, #0]
 8004cc0:	002b      	movs	r3, r5
 8004cc2:	47a0      	blx	r4
 8004cc4:	0003      	movs	r3, r0
 8004cc6:	617b      	str	r3, [r7, #20]

  return ret;
 8004cc8:	697b      	ldr	r3, [r7, #20]
}
 8004cca:	0018      	movs	r0, r3
 8004ccc:	46bd      	mov	sp, r7
 8004cce:	b007      	add	sp, #28
 8004cd0:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004cd2 <lis2mdl_write_reg>:
  *
  */
int32_t lis2mdl_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 8004cd2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004cd4:	b087      	sub	sp, #28
 8004cd6:	af00      	add	r7, sp, #0
 8004cd8:	60f8      	str	r0, [r7, #12]
 8004cda:	0008      	movs	r0, r1
 8004cdc:	607a      	str	r2, [r7, #4]
 8004cde:	0019      	movs	r1, r3
 8004ce0:	260b      	movs	r6, #11
 8004ce2:	19bb      	adds	r3, r7, r6
 8004ce4:	1c02      	adds	r2, r0, #0
 8004ce6:	701a      	strb	r2, [r3, #0]
 8004ce8:	2508      	movs	r5, #8
 8004cea:	197b      	adds	r3, r7, r5
 8004cec:	1c0a      	adds	r2, r1, #0
 8004cee:	801a      	strh	r2, [r3, #0]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	681c      	ldr	r4, [r3, #0]
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	6898      	ldr	r0, [r3, #8]
 8004cf8:	197b      	adds	r3, r7, r5
 8004cfa:	881d      	ldrh	r5, [r3, #0]
 8004cfc:	687a      	ldr	r2, [r7, #4]
 8004cfe:	19bb      	adds	r3, r7, r6
 8004d00:	7819      	ldrb	r1, [r3, #0]
 8004d02:	002b      	movs	r3, r5
 8004d04:	47a0      	blx	r4
 8004d06:	0003      	movs	r3, r0
 8004d08:	617b      	str	r3, [r7, #20]

  return ret;
 8004d0a:	697b      	ldr	r3, [r7, #20]
}
 8004d0c:	0018      	movs	r0, r3
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	b007      	add	sp, #28
 8004d12:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004d14 <lis2mdl_operating_mode_set>:
  * @retval        interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_operating_mode_set(stmdev_ctx_t *ctx,
                                   lis2mdl_md_t val)
{
 8004d14:	b590      	push	{r4, r7, lr}
 8004d16:	b085      	sub	sp, #20
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	6078      	str	r0, [r7, #4]
 8004d1c:	000a      	movs	r2, r1
 8004d1e:	1cfb      	adds	r3, r7, #3
 8004d20:	701a      	strb	r2, [r3, #0]
  lis2mdl_cfg_reg_a_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 8004d22:	2408      	movs	r4, #8
 8004d24:	193a      	adds	r2, r7, r4
 8004d26:	6878      	ldr	r0, [r7, #4]
 8004d28:	2301      	movs	r3, #1
 8004d2a:	2160      	movs	r1, #96	; 0x60
 8004d2c:	f7ff ffb0 	bl	8004c90 <lis2mdl_read_reg>
 8004d30:	0003      	movs	r3, r0
 8004d32:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d117      	bne.n	8004d6a <lis2mdl_operating_mode_set+0x56>
  {
    reg.md = (uint8_t)val;
 8004d3a:	1cfb      	adds	r3, r7, #3
 8004d3c:	781b      	ldrb	r3, [r3, #0]
 8004d3e:	2203      	movs	r2, #3
 8004d40:	4013      	ands	r3, r2
 8004d42:	b2da      	uxtb	r2, r3
 8004d44:	193b      	adds	r3, r7, r4
 8004d46:	2103      	movs	r1, #3
 8004d48:	400a      	ands	r2, r1
 8004d4a:	0010      	movs	r0, r2
 8004d4c:	781a      	ldrb	r2, [r3, #0]
 8004d4e:	2103      	movs	r1, #3
 8004d50:	438a      	bics	r2, r1
 8004d52:	1c11      	adds	r1, r2, #0
 8004d54:	1c02      	adds	r2, r0, #0
 8004d56:	430a      	orrs	r2, r1
 8004d58:	701a      	strb	r2, [r3, #0]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 8004d5a:	193a      	adds	r2, r7, r4
 8004d5c:	6878      	ldr	r0, [r7, #4]
 8004d5e:	2301      	movs	r3, #1
 8004d60:	2160      	movs	r1, #96	; 0x60
 8004d62:	f7ff ffb6 	bl	8004cd2 <lis2mdl_write_reg>
 8004d66:	0003      	movs	r3, r0
 8004d68:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8004d6a:	68fb      	ldr	r3, [r7, #12]
}
 8004d6c:	0018      	movs	r0, r3
 8004d6e:	46bd      	mov	sp, r7
 8004d70:	b005      	add	sp, #20
 8004d72:	bd90      	pop	{r4, r7, pc}

08004d74 <lis2mdl_data_rate_set>:
  * @param  val   change the values of odr in reg CFG_REG_A
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_data_rate_set(stmdev_ctx_t *ctx, lis2mdl_odr_t val)
{
 8004d74:	b590      	push	{r4, r7, lr}
 8004d76:	b085      	sub	sp, #20
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	6078      	str	r0, [r7, #4]
 8004d7c:	000a      	movs	r2, r1
 8004d7e:	1cfb      	adds	r3, r7, #3
 8004d80:	701a      	strb	r2, [r3, #0]
  lis2mdl_cfg_reg_a_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 8004d82:	2408      	movs	r4, #8
 8004d84:	193a      	adds	r2, r7, r4
 8004d86:	6878      	ldr	r0, [r7, #4]
 8004d88:	2301      	movs	r3, #1
 8004d8a:	2160      	movs	r1, #96	; 0x60
 8004d8c:	f7ff ff80 	bl	8004c90 <lis2mdl_read_reg>
 8004d90:	0003      	movs	r3, r0
 8004d92:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d117      	bne.n	8004dca <lis2mdl_data_rate_set+0x56>
  {
    reg.odr = (uint8_t)val;
 8004d9a:	1cfb      	adds	r3, r7, #3
 8004d9c:	781b      	ldrb	r3, [r3, #0]
 8004d9e:	2203      	movs	r2, #3
 8004da0:	4013      	ands	r3, r2
 8004da2:	b2da      	uxtb	r2, r3
 8004da4:	193b      	adds	r3, r7, r4
 8004da6:	2103      	movs	r1, #3
 8004da8:	400a      	ands	r2, r1
 8004daa:	0090      	lsls	r0, r2, #2
 8004dac:	781a      	ldrb	r2, [r3, #0]
 8004dae:	210c      	movs	r1, #12
 8004db0:	438a      	bics	r2, r1
 8004db2:	1c11      	adds	r1, r2, #0
 8004db4:	1c02      	adds	r2, r0, #0
 8004db6:	430a      	orrs	r2, r1
 8004db8:	701a      	strb	r2, [r3, #0]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 8004dba:	193a      	adds	r2, r7, r4
 8004dbc:	6878      	ldr	r0, [r7, #4]
 8004dbe:	2301      	movs	r3, #1
 8004dc0:	2160      	movs	r1, #96	; 0x60
 8004dc2:	f7ff ff86 	bl	8004cd2 <lis2mdl_write_reg>
 8004dc6:	0003      	movs	r3, r0
 8004dc8:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8004dca:	68fb      	ldr	r3, [r7, #12]
}
 8004dcc:	0018      	movs	r0, r3
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	b005      	add	sp, #20
 8004dd2:	bd90      	pop	{r4, r7, pc}

08004dd4 <lis2mdl_data_rate_get>:
  * @param  val   Get the values of odr in reg CFG_REG_A.(ptr)
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_data_rate_get(stmdev_ctx_t *ctx, lis2mdl_odr_t *val)
{
 8004dd4:	b590      	push	{r4, r7, lr}
 8004dd6:	b085      	sub	sp, #20
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	6078      	str	r0, [r7, #4]
 8004ddc:	6039      	str	r1, [r7, #0]
  lis2mdl_cfg_reg_a_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 8004dde:	2408      	movs	r4, #8
 8004de0:	193a      	adds	r2, r7, r4
 8004de2:	6878      	ldr	r0, [r7, #4]
 8004de4:	2301      	movs	r3, #1
 8004de6:	2160      	movs	r1, #96	; 0x60
 8004de8:	f7ff ff52 	bl	8004c90 <lis2mdl_read_reg>
 8004dec:	0003      	movs	r3, r0
 8004dee:	60fb      	str	r3, [r7, #12]

  switch (reg.odr)
 8004df0:	193b      	adds	r3, r7, r4
 8004df2:	781b      	ldrb	r3, [r3, #0]
 8004df4:	071b      	lsls	r3, r3, #28
 8004df6:	0f9b      	lsrs	r3, r3, #30
 8004df8:	b2db      	uxtb	r3, r3
 8004dfa:	2b03      	cmp	r3, #3
 8004dfc:	d014      	beq.n	8004e28 <lis2mdl_data_rate_get+0x54>
 8004dfe:	dc17      	bgt.n	8004e30 <lis2mdl_data_rate_get+0x5c>
 8004e00:	2b02      	cmp	r3, #2
 8004e02:	d00d      	beq.n	8004e20 <lis2mdl_data_rate_get+0x4c>
 8004e04:	dc14      	bgt.n	8004e30 <lis2mdl_data_rate_get+0x5c>
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d002      	beq.n	8004e10 <lis2mdl_data_rate_get+0x3c>
 8004e0a:	2b01      	cmp	r3, #1
 8004e0c:	d004      	beq.n	8004e18 <lis2mdl_data_rate_get+0x44>
 8004e0e:	e00f      	b.n	8004e30 <lis2mdl_data_rate_get+0x5c>
  {
    case LIS2MDL_ODR_10Hz:
      *val = LIS2MDL_ODR_10Hz;
 8004e10:	683b      	ldr	r3, [r7, #0]
 8004e12:	2200      	movs	r2, #0
 8004e14:	701a      	strb	r2, [r3, #0]
      break;
 8004e16:	e00f      	b.n	8004e38 <lis2mdl_data_rate_get+0x64>

    case LIS2MDL_ODR_20Hz:
      *val = LIS2MDL_ODR_20Hz;
 8004e18:	683b      	ldr	r3, [r7, #0]
 8004e1a:	2201      	movs	r2, #1
 8004e1c:	701a      	strb	r2, [r3, #0]
      break;
 8004e1e:	e00b      	b.n	8004e38 <lis2mdl_data_rate_get+0x64>

    case LIS2MDL_ODR_50Hz:
      *val = LIS2MDL_ODR_50Hz;
 8004e20:	683b      	ldr	r3, [r7, #0]
 8004e22:	2202      	movs	r2, #2
 8004e24:	701a      	strb	r2, [r3, #0]
      break;
 8004e26:	e007      	b.n	8004e38 <lis2mdl_data_rate_get+0x64>

    case LIS2MDL_ODR_100Hz:
      *val = LIS2MDL_ODR_100Hz;
 8004e28:	683b      	ldr	r3, [r7, #0]
 8004e2a:	2203      	movs	r2, #3
 8004e2c:	701a      	strb	r2, [r3, #0]
      break;
 8004e2e:	e003      	b.n	8004e38 <lis2mdl_data_rate_get+0x64>

    default:
      *val = LIS2MDL_ODR_10Hz;
 8004e30:	683b      	ldr	r3, [r7, #0]
 8004e32:	2200      	movs	r2, #0
 8004e34:	701a      	strb	r2, [r3, #0]
      break;
 8004e36:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 8004e38:	68fb      	ldr	r3, [r7, #12]
}
 8004e3a:	0018      	movs	r0, r3
 8004e3c:	46bd      	mov	sp, r7
 8004e3e:	b005      	add	sp, #20
 8004e40:	bd90      	pop	{r4, r7, pc}

08004e42 <lis2mdl_block_data_update_set>:
  * @param  val   change the values of bdu in reg CFG_REG_C
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8004e42:	b590      	push	{r4, r7, lr}
 8004e44:	b085      	sub	sp, #20
 8004e46:	af00      	add	r7, sp, #0
 8004e48:	6078      	str	r0, [r7, #4]
 8004e4a:	000a      	movs	r2, r1
 8004e4c:	1cfb      	adds	r3, r7, #3
 8004e4e:	701a      	strb	r2, [r3, #0]
  lis2mdl_cfg_reg_c_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 8004e50:	2408      	movs	r4, #8
 8004e52:	193a      	adds	r2, r7, r4
 8004e54:	6878      	ldr	r0, [r7, #4]
 8004e56:	2301      	movs	r3, #1
 8004e58:	2162      	movs	r1, #98	; 0x62
 8004e5a:	f7ff ff19 	bl	8004c90 <lis2mdl_read_reg>
 8004e5e:	0003      	movs	r3, r0
 8004e60:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d117      	bne.n	8004e98 <lis2mdl_block_data_update_set+0x56>
  {
    reg.bdu = val;
 8004e68:	1cfb      	adds	r3, r7, #3
 8004e6a:	781b      	ldrb	r3, [r3, #0]
 8004e6c:	2201      	movs	r2, #1
 8004e6e:	4013      	ands	r3, r2
 8004e70:	b2da      	uxtb	r2, r3
 8004e72:	193b      	adds	r3, r7, r4
 8004e74:	2101      	movs	r1, #1
 8004e76:	400a      	ands	r2, r1
 8004e78:	0110      	lsls	r0, r2, #4
 8004e7a:	781a      	ldrb	r2, [r3, #0]
 8004e7c:	2110      	movs	r1, #16
 8004e7e:	438a      	bics	r2, r1
 8004e80:	1c11      	adds	r1, r2, #0
 8004e82:	1c02      	adds	r2, r0, #0
 8004e84:	430a      	orrs	r2, r1
 8004e86:	701a      	strb	r2, [r3, #0]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 8004e88:	193a      	adds	r2, r7, r4
 8004e8a:	6878      	ldr	r0, [r7, #4]
 8004e8c:	2301      	movs	r3, #1
 8004e8e:	2162      	movs	r1, #98	; 0x62
 8004e90:	f7ff ff1f 	bl	8004cd2 <lis2mdl_write_reg>
 8004e94:	0003      	movs	r3, r0
 8004e96:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8004e98:	68fb      	ldr	r3, [r7, #12]
}
 8004e9a:	0018      	movs	r0, r3
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	b005      	add	sp, #20
 8004ea0:	bd90      	pop	{r4, r7, pc}

08004ea2 <lis2mdl_magnetic_raw_get>:
  * @param  buff  that stores data read
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_magnetic_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8004ea2:	b590      	push	{r4, r7, lr}
 8004ea4:	b087      	sub	sp, #28
 8004ea6:	af00      	add	r7, sp, #0
 8004ea8:	6078      	str	r0, [r7, #4]
 8004eaa:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_OUTX_L_REG, buff, 6);
 8004eac:	240c      	movs	r4, #12
 8004eae:	193a      	adds	r2, r7, r4
 8004eb0:	6878      	ldr	r0, [r7, #4]
 8004eb2:	2306      	movs	r3, #6
 8004eb4:	2168      	movs	r1, #104	; 0x68
 8004eb6:	f7ff feeb 	bl	8004c90 <lis2mdl_read_reg>
 8004eba:	0003      	movs	r3, r0
 8004ebc:	617b      	str	r3, [r7, #20]
  val[0] = (int16_t)buff[1];
 8004ebe:	0021      	movs	r1, r4
 8004ec0:	187b      	adds	r3, r7, r1
 8004ec2:	785b      	ldrb	r3, [r3, #1]
 8004ec4:	b21a      	sxth	r2, r3
 8004ec6:	683b      	ldr	r3, [r7, #0]
 8004ec8:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8004eca:	683b      	ldr	r3, [r7, #0]
 8004ecc:	2200      	movs	r2, #0
 8004ece:	5e9b      	ldrsh	r3, [r3, r2]
 8004ed0:	b29b      	uxth	r3, r3
 8004ed2:	021b      	lsls	r3, r3, #8
 8004ed4:	b29a      	uxth	r2, r3
 8004ed6:	187b      	adds	r3, r7, r1
 8004ed8:	781b      	ldrb	r3, [r3, #0]
 8004eda:	b29b      	uxth	r3, r3
 8004edc:	18d3      	adds	r3, r2, r3
 8004ede:	b29b      	uxth	r3, r3
 8004ee0:	b21a      	sxth	r2, r3
 8004ee2:	683b      	ldr	r3, [r7, #0]
 8004ee4:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8004ee6:	187b      	adds	r3, r7, r1
 8004ee8:	78da      	ldrb	r2, [r3, #3]
 8004eea:	683b      	ldr	r3, [r7, #0]
 8004eec:	3302      	adds	r3, #2
 8004eee:	b212      	sxth	r2, r2
 8004ef0:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8004ef2:	683b      	ldr	r3, [r7, #0]
 8004ef4:	3302      	adds	r3, #2
 8004ef6:	2200      	movs	r2, #0
 8004ef8:	5e9b      	ldrsh	r3, [r3, r2]
 8004efa:	b29b      	uxth	r3, r3
 8004efc:	021b      	lsls	r3, r3, #8
 8004efe:	b29a      	uxth	r2, r3
 8004f00:	187b      	adds	r3, r7, r1
 8004f02:	789b      	ldrb	r3, [r3, #2]
 8004f04:	b29b      	uxth	r3, r3
 8004f06:	18d3      	adds	r3, r2, r3
 8004f08:	b29a      	uxth	r2, r3
 8004f0a:	683b      	ldr	r3, [r7, #0]
 8004f0c:	3302      	adds	r3, #2
 8004f0e:	b212      	sxth	r2, r2
 8004f10:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8004f12:	187b      	adds	r3, r7, r1
 8004f14:	795a      	ldrb	r2, [r3, #5]
 8004f16:	683b      	ldr	r3, [r7, #0]
 8004f18:	3304      	adds	r3, #4
 8004f1a:	b212      	sxth	r2, r2
 8004f1c:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8004f1e:	683b      	ldr	r3, [r7, #0]
 8004f20:	3304      	adds	r3, #4
 8004f22:	2200      	movs	r2, #0
 8004f24:	5e9b      	ldrsh	r3, [r3, r2]
 8004f26:	b29b      	uxth	r3, r3
 8004f28:	021b      	lsls	r3, r3, #8
 8004f2a:	b29a      	uxth	r2, r3
 8004f2c:	187b      	adds	r3, r7, r1
 8004f2e:	791b      	ldrb	r3, [r3, #4]
 8004f30:	b29b      	uxth	r3, r3
 8004f32:	18d3      	adds	r3, r2, r3
 8004f34:	b29a      	uxth	r2, r3
 8004f36:	683b      	ldr	r3, [r7, #0]
 8004f38:	3304      	adds	r3, #4
 8004f3a:	b212      	sxth	r2, r2
 8004f3c:	801a      	strh	r2, [r3, #0]

  return ret;
 8004f3e:	697b      	ldr	r3, [r7, #20]
}
 8004f40:	0018      	movs	r0, r3
 8004f42:	46bd      	mov	sp, r7
 8004f44:	b007      	add	sp, #28
 8004f46:	bd90      	pop	{r4, r7, pc}

08004f48 <lis2mdl_device_id_get>:
  * @param  buff  that stores data read
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8004f48:	b580      	push	{r7, lr}
 8004f4a:	b084      	sub	sp, #16
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	6078      	str	r0, [r7, #4]
 8004f50:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_WHO_AM_I, buff, 1);
 8004f52:	683a      	ldr	r2, [r7, #0]
 8004f54:	6878      	ldr	r0, [r7, #4]
 8004f56:	2301      	movs	r3, #1
 8004f58:	214f      	movs	r1, #79	; 0x4f
 8004f5a:	f7ff fe99 	bl	8004c90 <lis2mdl_read_reg>
 8004f5e:	0003      	movs	r3, r0
 8004f60:	60fb      	str	r3, [r7, #12]

  return ret;
 8004f62:	68fb      	ldr	r3, [r7, #12]
}
 8004f64:	0018      	movs	r0, r3
 8004f66:	46bd      	mov	sp, r7
 8004f68:	b004      	add	sp, #16
 8004f6a:	bd80      	pop	{r7, pc}

08004f6c <lis2mdl_self_test_set>:
  * @param  val   change the values of self_test in reg CFG_REG_C
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_self_test_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8004f6c:	b590      	push	{r4, r7, lr}
 8004f6e:	b085      	sub	sp, #20
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
 8004f74:	000a      	movs	r2, r1
 8004f76:	1cfb      	adds	r3, r7, #3
 8004f78:	701a      	strb	r2, [r3, #0]
  lis2mdl_cfg_reg_c_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 8004f7a:	2408      	movs	r4, #8
 8004f7c:	193a      	adds	r2, r7, r4
 8004f7e:	6878      	ldr	r0, [r7, #4]
 8004f80:	2301      	movs	r3, #1
 8004f82:	2162      	movs	r1, #98	; 0x62
 8004f84:	f7ff fe84 	bl	8004c90 <lis2mdl_read_reg>
 8004f88:	0003      	movs	r3, r0
 8004f8a:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d117      	bne.n	8004fc2 <lis2mdl_self_test_set+0x56>
  {
    reg.self_test = val;
 8004f92:	1cfb      	adds	r3, r7, #3
 8004f94:	781b      	ldrb	r3, [r3, #0]
 8004f96:	2201      	movs	r2, #1
 8004f98:	4013      	ands	r3, r2
 8004f9a:	b2da      	uxtb	r2, r3
 8004f9c:	193b      	adds	r3, r7, r4
 8004f9e:	2101      	movs	r1, #1
 8004fa0:	400a      	ands	r2, r1
 8004fa2:	1890      	adds	r0, r2, r2
 8004fa4:	781a      	ldrb	r2, [r3, #0]
 8004fa6:	2102      	movs	r1, #2
 8004fa8:	438a      	bics	r2, r1
 8004faa:	1c11      	adds	r1, r2, #0
 8004fac:	1c02      	adds	r2, r0, #0
 8004fae:	430a      	orrs	r2, r1
 8004fb0:	701a      	strb	r2, [r3, #0]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 8004fb2:	193a      	adds	r2, r7, r4
 8004fb4:	6878      	ldr	r0, [r7, #4]
 8004fb6:	2301      	movs	r3, #1
 8004fb8:	2162      	movs	r1, #98	; 0x62
 8004fba:	f7ff fe8a 	bl	8004cd2 <lis2mdl_write_reg>
 8004fbe:	0003      	movs	r3, r0
 8004fc0:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8004fc2:	68fb      	ldr	r3, [r7, #12]
}
 8004fc4:	0018      	movs	r0, r3
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	b005      	add	sp, #20
 8004fca:	bd90      	pop	{r4, r7, pc}

08004fcc <lis2mdl_i2c_interface_set>:
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_i2c_interface_set(stmdev_ctx_t *ctx,
                                  lis2mdl_i2c_dis_t val)
{
 8004fcc:	b590      	push	{r4, r7, lr}
 8004fce:	b085      	sub	sp, #20
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]
 8004fd4:	000a      	movs	r2, r1
 8004fd6:	1cfb      	adds	r3, r7, #3
 8004fd8:	701a      	strb	r2, [r3, #0]
  lis2mdl_cfg_reg_c_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 8004fda:	2408      	movs	r4, #8
 8004fdc:	193a      	adds	r2, r7, r4
 8004fde:	6878      	ldr	r0, [r7, #4]
 8004fe0:	2301      	movs	r3, #1
 8004fe2:	2162      	movs	r1, #98	; 0x62
 8004fe4:	f7ff fe54 	bl	8004c90 <lis2mdl_read_reg>
 8004fe8:	0003      	movs	r3, r0
 8004fea:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d117      	bne.n	8005022 <lis2mdl_i2c_interface_set+0x56>
  {
    reg.i2c_dis = (uint8_t)val;
 8004ff2:	1cfb      	adds	r3, r7, #3
 8004ff4:	781b      	ldrb	r3, [r3, #0]
 8004ff6:	2201      	movs	r2, #1
 8004ff8:	4013      	ands	r3, r2
 8004ffa:	b2da      	uxtb	r2, r3
 8004ffc:	193b      	adds	r3, r7, r4
 8004ffe:	2101      	movs	r1, #1
 8005000:	400a      	ands	r2, r1
 8005002:	0150      	lsls	r0, r2, #5
 8005004:	781a      	ldrb	r2, [r3, #0]
 8005006:	2120      	movs	r1, #32
 8005008:	438a      	bics	r2, r1
 800500a:	1c11      	adds	r1, r2, #0
 800500c:	1c02      	adds	r2, r0, #0
 800500e:	430a      	orrs	r2, r1
 8005010:	701a      	strb	r2, [r3, #0]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 8005012:	193a      	adds	r2, r7, r4
 8005014:	6878      	ldr	r0, [r7, #4]
 8005016:	2301      	movs	r3, #1
 8005018:	2162      	movs	r1, #98	; 0x62
 800501a:	f7ff fe5a 	bl	8004cd2 <lis2mdl_write_reg>
 800501e:	0003      	movs	r3, r0
 8005020:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8005022:	68fb      	ldr	r3, [r7, #12]
}
 8005024:	0018      	movs	r0, r3
 8005026:	46bd      	mov	sp, r7
 8005028:	b005      	add	sp, #20
 800502a:	bd90      	pop	{r4, r7, pc}

0800502c <LPS22HH_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_RegisterBusIO(LPS22HH_Object_t *pObj, LPS22HH_IO_t *pIO)
{
 800502c:	b580      	push	{r7, lr}
 800502e:	b084      	sub	sp, #16
 8005030:	af00      	add	r7, sp, #0
 8005032:	6078      	str	r0, [r7, #4]
 8005034:	6039      	str	r1, [r7, #0]
  int32_t ret = LPS22HH_OK;
 8005036:	2300      	movs	r3, #0
 8005038:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	2b00      	cmp	r3, #0
 800503e:	d103      	bne.n	8005048 <LPS22HH_RegisterBusIO+0x1c>
  {
    ret = LPS22HH_ERROR;
 8005040:	2301      	movs	r3, #1
 8005042:	425b      	negs	r3, r3
 8005044:	60fb      	str	r3, [r7, #12]
 8005046:	e04e      	b.n	80050e6 <LPS22HH_RegisterBusIO+0xba>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8005048:	683b      	ldr	r3, [r7, #0]
 800504a:	681a      	ldr	r2, [r3, #0]
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8005050:	683b      	ldr	r3, [r7, #0]
 8005052:	685a      	ldr	r2, [r3, #4]
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8005058:	683b      	ldr	r3, [r7, #0]
 800505a:	689a      	ldr	r2, [r3, #8]
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8005060:	683b      	ldr	r3, [r7, #0]
 8005062:	7b1a      	ldrb	r2, [r3, #12]
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8005068:	683b      	ldr	r3, [r7, #0]
 800506a:	691a      	ldr	r2, [r3, #16]
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8005070:	683b      	ldr	r3, [r7, #0]
 8005072:	695a      	ldr	r2, [r3, #20]
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8005078:	683b      	ldr	r3, [r7, #0]
 800507a:	699a      	ldr	r2, [r3, #24]
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	4a1b      	ldr	r2, [pc, #108]	; (80050f0 <LPS22HH_RegisterBusIO+0xc4>)
 8005084:	621a      	str	r2, [r3, #32]
    pObj->Ctx.write_reg = WriteRegWrap;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	4a1a      	ldr	r2, [pc, #104]	; (80050f4 <LPS22HH_RegisterBusIO+0xc8>)
 800508a:	61da      	str	r2, [r3, #28]
    pObj->Ctx.handle   = pObj;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	687a      	ldr	r2, [r7, #4]
 8005090:	625a      	str	r2, [r3, #36]	; 0x24

    if (pObj->IO.Init == NULL)
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	2b00      	cmp	r3, #0
 8005098:	d103      	bne.n	80050a2 <LPS22HH_RegisterBusIO+0x76>
    {
      ret = LPS22HH_ERROR;
 800509a:	2301      	movs	r3, #1
 800509c:	425b      	negs	r3, r3
 800509e:	60fb      	str	r3, [r7, #12]
 80050a0:	e021      	b.n	80050e6 <LPS22HH_RegisterBusIO+0xba>
    }
    else if (pObj->IO.Init() != LPS22HH_OK)
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	4798      	blx	r3
 80050a8:	1e03      	subs	r3, r0, #0
 80050aa:	d003      	beq.n	80050b4 <LPS22HH_RegisterBusIO+0x88>
    {
      ret = LPS22HH_ERROR;
 80050ac:	2301      	movs	r3, #1
 80050ae:	425b      	negs	r3, r3
 80050b0:	60fb      	str	r3, [r7, #12]
 80050b2:	e018      	b.n	80050e6 <LPS22HH_RegisterBusIO+0xba>
    }
    else
    {
      if (pObj->IO.BusType == LPS22HH_SPI_3WIRES_BUS) /* SPI 3-Wires */
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	689b      	ldr	r3, [r3, #8]
 80050b8:	2b02      	cmp	r3, #2
 80050ba:	d114      	bne.n	80050e6 <LPS22HH_RegisterBusIO+0xba>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	2228      	movs	r2, #40	; 0x28
 80050c0:	5c9b      	ldrb	r3, [r3, r2]
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d10f      	bne.n	80050e6 <LPS22HH_RegisterBusIO+0xba>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x01;
 80050c6:	210b      	movs	r1, #11
 80050c8:	187b      	adds	r3, r7, r1
 80050ca:	2201      	movs	r2, #1
 80050cc:	701a      	strb	r2, [r3, #0]

          if (LPS22HH_Write_Reg(pObj, LPS22HH_CTRL_REG1, data) != LPS22HH_OK)
 80050ce:	187b      	adds	r3, r7, r1
 80050d0:	781a      	ldrb	r2, [r3, #0]
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	2110      	movs	r1, #16
 80050d6:	0018      	movs	r0, r3
 80050d8:	f000 f9d5 	bl	8005486 <LPS22HH_Write_Reg>
 80050dc:	1e03      	subs	r3, r0, #0
 80050de:	d002      	beq.n	80050e6 <LPS22HH_RegisterBusIO+0xba>
          {
            ret = LPS22HH_ERROR;
 80050e0:	2301      	movs	r3, #1
 80050e2:	425b      	negs	r3, r3
 80050e4:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 80050e6:	68fb      	ldr	r3, [r7, #12]
}
 80050e8:	0018      	movs	r0, r3
 80050ea:	46bd      	mov	sp, r7
 80050ec:	b004      	add	sp, #16
 80050ee:	bd80      	pop	{r7, pc}
 80050f0:	08005759 	.word	0x08005759
 80050f4:	0800579d 	.word	0x0800579d

080050f8 <LPS22HH_Init>:
  * @brief  Initialize the LPS22HH sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_Init(LPS22HH_Object_t *pObj)
{
 80050f8:	b580      	push	{r7, lr}
 80050fa:	b082      	sub	sp, #8
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 0U)
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2228      	movs	r2, #40	; 0x28
 8005104:	5c9b      	ldrb	r3, [r3, r2]
 8005106:	2b00      	cmp	r3, #0
 8005108:	d108      	bne.n	800511c <LPS22HH_Init+0x24>
  {
    if (LPS22HH_Initialize(pObj) != LPS22HH_OK)
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	0018      	movs	r0, r3
 800510e:	f000 fadf 	bl	80056d0 <LPS22HH_Initialize>
 8005112:	1e03      	subs	r3, r0, #0
 8005114:	d002      	beq.n	800511c <LPS22HH_Init+0x24>
    {
      return LPS22HH_ERROR;
 8005116:	2301      	movs	r3, #1
 8005118:	425b      	negs	r3, r3
 800511a:	e004      	b.n	8005126 <LPS22HH_Init+0x2e>
    }
  }

  pObj->is_initialized = 1U;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2228      	movs	r2, #40	; 0x28
 8005120:	2101      	movs	r1, #1
 8005122:	5499      	strb	r1, [r3, r2]

  return LPS22HH_OK;
 8005124:	2300      	movs	r3, #0
}
 8005126:	0018      	movs	r0, r3
 8005128:	46bd      	mov	sp, r7
 800512a:	b002      	add	sp, #8
 800512c:	bd80      	pop	{r7, pc}

0800512e <LPS22HH_DeInit>:
  * @brief  Deinitialize the LPS22HH sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_DeInit(LPS22HH_Object_t *pObj)
{
 800512e:	b580      	push	{r7, lr}
 8005130:	b082      	sub	sp, #8
 8005132:	af00      	add	r7, sp, #0
 8005134:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 1U)
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	2228      	movs	r2, #40	; 0x28
 800513a:	5c9b      	ldrb	r3, [r3, r2]
 800513c:	2b01      	cmp	r3, #1
 800513e:	d111      	bne.n	8005164 <LPS22HH_DeInit+0x36>
  {
    if (LPS22HH_PRESS_Disable(pObj) != LPS22HH_OK)
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	0018      	movs	r0, r3
 8005144:	f000 f873 	bl	800522e <LPS22HH_PRESS_Disable>
 8005148:	1e03      	subs	r3, r0, #0
 800514a:	d002      	beq.n	8005152 <LPS22HH_DeInit+0x24>
    {
      return LPS22HH_ERROR;
 800514c:	2301      	movs	r3, #1
 800514e:	425b      	negs	r3, r3
 8005150:	e00d      	b.n	800516e <LPS22HH_DeInit+0x40>
    }

    if (LPS22HH_TEMP_Disable(pObj) != LPS22HH_OK)
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	0018      	movs	r0, r3
 8005156:	f000 f910 	bl	800537a <LPS22HH_TEMP_Disable>
 800515a:	1e03      	subs	r3, r0, #0
 800515c:	d002      	beq.n	8005164 <LPS22HH_DeInit+0x36>
    {
      return LPS22HH_ERROR;
 800515e:	2301      	movs	r3, #1
 8005160:	425b      	negs	r3, r3
 8005162:	e004      	b.n	800516e <LPS22HH_DeInit+0x40>
    }
  }

  pObj->is_initialized = 0;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2228      	movs	r2, #40	; 0x28
 8005168:	2100      	movs	r1, #0
 800516a:	5499      	strb	r1, [r3, r2]

  return LPS22HH_OK;
 800516c:	2300      	movs	r3, #0
}
 800516e:	0018      	movs	r0, r3
 8005170:	46bd      	mov	sp, r7
 8005172:	b002      	add	sp, #8
 8005174:	bd80      	pop	{r7, pc}

08005176 <LPS22HH_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_ReadID(LPS22HH_Object_t *pObj, uint8_t *Id)
{
 8005176:	b580      	push	{r7, lr}
 8005178:	b082      	sub	sp, #8
 800517a:	af00      	add	r7, sp, #0
 800517c:	6078      	str	r0, [r7, #4]
 800517e:	6039      	str	r1, [r7, #0]
  if (lps22hh_device_id_get(&(pObj->Ctx), Id) != LPS22HH_OK)
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	331c      	adds	r3, #28
 8005184:	683a      	ldr	r2, [r7, #0]
 8005186:	0011      	movs	r1, r2
 8005188:	0018      	movs	r0, r3
 800518a:	f000 fd0e 	bl	8005baa <lps22hh_device_id_get>
 800518e:	1e03      	subs	r3, r0, #0
 8005190:	d002      	beq.n	8005198 <LPS22HH_ReadID+0x22>
  {
    return LPS22HH_ERROR;
 8005192:	2301      	movs	r3, #1
 8005194:	425b      	negs	r3, r3
 8005196:	e000      	b.n	800519a <LPS22HH_ReadID+0x24>
  }

  return LPS22HH_OK;
 8005198:	2300      	movs	r3, #0
}
 800519a:	0018      	movs	r0, r3
 800519c:	46bd      	mov	sp, r7
 800519e:	b002      	add	sp, #8
 80051a0:	bd80      	pop	{r7, pc}
	...

080051a4 <LPS22HH_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to LPS22HH sensor capabilities
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_GetCapabilities(LPS22HH_Object_t *pObj, LPS22HH_Capabilities_t *Capabilities)
{
 80051a4:	b580      	push	{r7, lr}
 80051a6:	b082      	sub	sp, #8
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	6078      	str	r0, [r7, #4]
 80051ac:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Humidity    = 0;
 80051ae:	683b      	ldr	r3, [r7, #0]
 80051b0:	2200      	movs	r2, #0
 80051b2:	709a      	strb	r2, [r3, #2]
  Capabilities->Pressure    = 1;
 80051b4:	683b      	ldr	r3, [r7, #0]
 80051b6:	2201      	movs	r2, #1
 80051b8:	705a      	strb	r2, [r3, #1]
  Capabilities->Temperature = 1;
 80051ba:	683b      	ldr	r3, [r7, #0]
 80051bc:	2201      	movs	r2, #1
 80051be:	701a      	strb	r2, [r3, #0]
  Capabilities->LowPower    = 0;
 80051c0:	683b      	ldr	r3, [r7, #0]
 80051c2:	2200      	movs	r2, #0
 80051c4:	70da      	strb	r2, [r3, #3]
  Capabilities->HumMaxOdr   = 0.0f;
 80051c6:	683b      	ldr	r3, [r7, #0]
 80051c8:	2200      	movs	r2, #0
 80051ca:	605a      	str	r2, [r3, #4]
  Capabilities->TempMaxOdr  = 200.0f;
 80051cc:	683b      	ldr	r3, [r7, #0]
 80051ce:	4a05      	ldr	r2, [pc, #20]	; (80051e4 <LPS22HH_GetCapabilities+0x40>)
 80051d0:	609a      	str	r2, [r3, #8]
  Capabilities->PressMaxOdr = 200.0f;
 80051d2:	683b      	ldr	r3, [r7, #0]
 80051d4:	4a03      	ldr	r2, [pc, #12]	; (80051e4 <LPS22HH_GetCapabilities+0x40>)
 80051d6:	60da      	str	r2, [r3, #12]
  return LPS22HH_OK;
 80051d8:	2300      	movs	r3, #0
}
 80051da:	0018      	movs	r0, r3
 80051dc:	46bd      	mov	sp, r7
 80051de:	b002      	add	sp, #8
 80051e0:	bd80      	pop	{r7, pc}
 80051e2:	46c0      	nop			; (mov r8, r8)
 80051e4:	43480000 	.word	0x43480000

080051e8 <LPS22HH_PRESS_Enable>:
  * @brief  Enable the LPS22HH pressure sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_PRESS_Enable(LPS22HH_Object_t *pObj)
{
 80051e8:	b580      	push	{r7, lr}
 80051ea:	b082      	sub	sp, #8
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->press_is_enabled == 1U)
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2229      	movs	r2, #41	; 0x29
 80051f4:	5c9b      	ldrb	r3, [r3, r2]
 80051f6:	2b01      	cmp	r3, #1
 80051f8:	d101      	bne.n	80051fe <LPS22HH_PRESS_Enable+0x16>
  {
    return LPS22HH_OK;
 80051fa:	2300      	movs	r3, #0
 80051fc:	e013      	b.n	8005226 <LPS22HH_PRESS_Enable+0x3e>
  }

  /* Output data rate selection. */
  if (lps22hh_data_rate_set(&(pObj->Ctx), pObj->last_odr) != LPS22HH_OK)
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	331c      	adds	r3, #28
 8005202:	001a      	movs	r2, r3
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	212b      	movs	r1, #43	; 0x2b
 8005208:	5c5b      	ldrb	r3, [r3, r1]
 800520a:	0019      	movs	r1, r3
 800520c:	0010      	movs	r0, r2
 800520e:	f000 fb83 	bl	8005918 <lps22hh_data_rate_set>
 8005212:	1e03      	subs	r3, r0, #0
 8005214:	d002      	beq.n	800521c <LPS22HH_PRESS_Enable+0x34>
  {
    return LPS22HH_ERROR;
 8005216:	2301      	movs	r3, #1
 8005218:	425b      	negs	r3, r3
 800521a:	e004      	b.n	8005226 <LPS22HH_PRESS_Enable+0x3e>
  }

  pObj->press_is_enabled = 1;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2229      	movs	r2, #41	; 0x29
 8005220:	2101      	movs	r1, #1
 8005222:	5499      	strb	r1, [r3, r2]

  return LPS22HH_OK;
 8005224:	2300      	movs	r3, #0
}
 8005226:	0018      	movs	r0, r3
 8005228:	46bd      	mov	sp, r7
 800522a:	b002      	add	sp, #8
 800522c:	bd80      	pop	{r7, pc}

0800522e <LPS22HH_PRESS_Disable>:
  * @brief  Disable the LPS22HH pressure sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_PRESS_Disable(LPS22HH_Object_t *pObj)
{
 800522e:	b580      	push	{r7, lr}
 8005230:	b082      	sub	sp, #8
 8005232:	af00      	add	r7, sp, #0
 8005234:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->press_is_enabled == 0U)
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	2229      	movs	r2, #41	; 0x29
 800523a:	5c9b      	ldrb	r3, [r3, r2]
 800523c:	2b00      	cmp	r3, #0
 800523e:	d101      	bne.n	8005244 <LPS22HH_PRESS_Disable+0x16>
  {
    return LPS22HH_OK;
 8005240:	2300      	movs	r3, #0
 8005242:	e022      	b.n	800528a <LPS22HH_PRESS_Disable+0x5c>
  }

  /* Check if the LPS22HH temperature sensor is still enable. */
  /* If yes, skip the disable function, if not call disable function */
  if (pObj->temp_is_enabled == 0U)
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	222a      	movs	r2, #42	; 0x2a
 8005248:	5c9b      	ldrb	r3, [r3, r2]
 800524a:	2b00      	cmp	r3, #0
 800524c:	d118      	bne.n	8005280 <LPS22HH_PRESS_Disable+0x52>
  {
    /* Get current output data rate. */
    if (lps22hh_data_rate_get(&(pObj->Ctx), &pObj->last_odr) != LPS22HH_OK)
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	331c      	adds	r3, #28
 8005252:	001a      	movs	r2, r3
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	332b      	adds	r3, #43	; 0x2b
 8005258:	0019      	movs	r1, r3
 800525a:	0010      	movs	r0, r2
 800525c:	f000 fbca 	bl	80059f4 <lps22hh_data_rate_get>
 8005260:	1e03      	subs	r3, r0, #0
 8005262:	d002      	beq.n	800526a <LPS22HH_PRESS_Disable+0x3c>
    {
      return LPS22HH_ERROR;
 8005264:	2301      	movs	r3, #1
 8005266:	425b      	negs	r3, r3
 8005268:	e00f      	b.n	800528a <LPS22HH_PRESS_Disable+0x5c>
    }

    /* Output data rate selection - power down. */
    if (lps22hh_data_rate_set(&(pObj->Ctx), LPS22HH_POWER_DOWN) != LPS22HH_OK)
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	331c      	adds	r3, #28
 800526e:	2100      	movs	r1, #0
 8005270:	0018      	movs	r0, r3
 8005272:	f000 fb51 	bl	8005918 <lps22hh_data_rate_set>
 8005276:	1e03      	subs	r3, r0, #0
 8005278:	d002      	beq.n	8005280 <LPS22HH_PRESS_Disable+0x52>
    {
      return LPS22HH_ERROR;
 800527a:	2301      	movs	r3, #1
 800527c:	425b      	negs	r3, r3
 800527e:	e004      	b.n	800528a <LPS22HH_PRESS_Disable+0x5c>
    }
  }

  pObj->press_is_enabled = 0;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	2229      	movs	r2, #41	; 0x29
 8005284:	2100      	movs	r1, #0
 8005286:	5499      	strb	r1, [r3, r2]

  return LPS22HH_OK;
 8005288:	2300      	movs	r3, #0
}
 800528a:	0018      	movs	r0, r3
 800528c:	46bd      	mov	sp, r7
 800528e:	b002      	add	sp, #8
 8005290:	bd80      	pop	{r7, pc}

08005292 <LPS22HH_PRESS_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_PRESS_GetOutputDataRate(LPS22HH_Object_t *pObj, float *Odr)
{
 8005292:	b580      	push	{r7, lr}
 8005294:	b082      	sub	sp, #8
 8005296:	af00      	add	r7, sp, #0
 8005298:	6078      	str	r0, [r7, #4]
 800529a:	6039      	str	r1, [r7, #0]
  return LPS22HH_GetOutputDataRate(pObj, Odr);
 800529c:	683a      	ldr	r2, [r7, #0]
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	0011      	movs	r1, r2
 80052a2:	0018      	movs	r0, r3
 80052a4:	f000 f90e 	bl	80054c4 <LPS22HH_GetOutputDataRate>
 80052a8:	0003      	movs	r3, r0
}
 80052aa:	0018      	movs	r0, r3
 80052ac:	46bd      	mov	sp, r7
 80052ae:	b002      	add	sp, #8
 80052b0:	bd80      	pop	{r7, pc}

080052b2 <LPS22HH_PRESS_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_PRESS_SetOutputDataRate(LPS22HH_Object_t *pObj, float Odr)
{
 80052b2:	b580      	push	{r7, lr}
 80052b4:	b082      	sub	sp, #8
 80052b6:	af00      	add	r7, sp, #0
 80052b8:	6078      	str	r0, [r7, #4]
 80052ba:	6039      	str	r1, [r7, #0]
  /* Check if the component is enabled */
  if (pObj->press_is_enabled == 1U)
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2229      	movs	r2, #41	; 0x29
 80052c0:	5c9b      	ldrb	r3, [r3, r2]
 80052c2:	2b01      	cmp	r3, #1
 80052c4:	d107      	bne.n	80052d6 <LPS22HH_PRESS_SetOutputDataRate+0x24>
  {
    return LPS22HH_SetOutputDataRate_When_Enabled(pObj, Odr);
 80052c6:	683a      	ldr	r2, [r7, #0]
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	1c11      	adds	r1, r2, #0
 80052cc:	0018      	movs	r0, r3
 80052ce:	f000 f94f 	bl	8005570 <LPS22HH_SetOutputDataRate_When_Enabled>
 80052d2:	0003      	movs	r3, r0
 80052d4:	e006      	b.n	80052e4 <LPS22HH_PRESS_SetOutputDataRate+0x32>
  }
  else
  {
    return LPS22HH_SetOutputDataRate_When_Disabled(pObj, Odr);
 80052d6:	683a      	ldr	r2, [r7, #0]
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	1c11      	adds	r1, r2, #0
 80052dc:	0018      	movs	r0, r3
 80052de:	f000 f9ad 	bl	800563c <LPS22HH_SetOutputDataRate_When_Disabled>
 80052e2:	0003      	movs	r3, r0
  }
}
 80052e4:	0018      	movs	r0, r3
 80052e6:	46bd      	mov	sp, r7
 80052e8:	b002      	add	sp, #8
 80052ea:	bd80      	pop	{r7, pc}

080052ec <LPS22HH_PRESS_GetPressure>:
  * @param  pObj the device pObj
  * @param  Value pointer where the pressure value is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_PRESS_GetPressure(LPS22HH_Object_t *pObj, float *Value)
{
 80052ec:	b590      	push	{r4, r7, lr}
 80052ee:	b085      	sub	sp, #20
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	6078      	str	r0, [r7, #4]
 80052f4:	6039      	str	r1, [r7, #0]
  lps22hh_axis1bit32_t data_raw_pressure;

  (void)memset(data_raw_pressure.u8bit, 0x00, sizeof(int32_t));
 80052f6:	240c      	movs	r4, #12
 80052f8:	193b      	adds	r3, r7, r4
 80052fa:	2204      	movs	r2, #4
 80052fc:	2100      	movs	r1, #0
 80052fe:	0018      	movs	r0, r3
 8005300:	f00e fbb1 	bl	8013a66 <memset>
  if (lps22hh_pressure_raw_get(&(pObj->Ctx), (uint32_t *)&data_raw_pressure.i32bit) != LPS22HH_OK)
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	331c      	adds	r3, #28
 8005308:	193a      	adds	r2, r7, r4
 800530a:	0011      	movs	r1, r2
 800530c:	0018      	movs	r0, r3
 800530e:	f000 fbf7 	bl	8005b00 <lps22hh_pressure_raw_get>
 8005312:	1e03      	subs	r3, r0, #0
 8005314:	d002      	beq.n	800531c <LPS22HH_PRESS_GetPressure+0x30>
  {
    return LPS22HH_ERROR;
 8005316:	2301      	movs	r3, #1
 8005318:	425b      	negs	r3, r3
 800531a:	e007      	b.n	800532c <LPS22HH_PRESS_GetPressure+0x40>
  }

  *Value = lps22hh_from_lsb_to_hpa((uint32_t)data_raw_pressure.i32bit);
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	0018      	movs	r0, r3
 8005320:	f000 faa0 	bl	8005864 <lps22hh_from_lsb_to_hpa>
 8005324:	1c02      	adds	r2, r0, #0
 8005326:	683b      	ldr	r3, [r7, #0]
 8005328:	601a      	str	r2, [r3, #0]

  return LPS22HH_OK;
 800532a:	2300      	movs	r3, #0
}
 800532c:	0018      	movs	r0, r3
 800532e:	46bd      	mov	sp, r7
 8005330:	b005      	add	sp, #20
 8005332:	bd90      	pop	{r4, r7, pc}

08005334 <LPS22HH_TEMP_Enable>:
  * @brief  Enable the LPS22HH temperature sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_TEMP_Enable(LPS22HH_Object_t *pObj)
{
 8005334:	b580      	push	{r7, lr}
 8005336:	b082      	sub	sp, #8
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->temp_is_enabled == 1U)
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	222a      	movs	r2, #42	; 0x2a
 8005340:	5c9b      	ldrb	r3, [r3, r2]
 8005342:	2b01      	cmp	r3, #1
 8005344:	d101      	bne.n	800534a <LPS22HH_TEMP_Enable+0x16>
  {
    return LPS22HH_OK;
 8005346:	2300      	movs	r3, #0
 8005348:	e013      	b.n	8005372 <LPS22HH_TEMP_Enable+0x3e>
  }

  /* Output data rate selection. */
  if (lps22hh_data_rate_set(&(pObj->Ctx), pObj->last_odr) != LPS22HH_OK)
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	331c      	adds	r3, #28
 800534e:	001a      	movs	r2, r3
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	212b      	movs	r1, #43	; 0x2b
 8005354:	5c5b      	ldrb	r3, [r3, r1]
 8005356:	0019      	movs	r1, r3
 8005358:	0010      	movs	r0, r2
 800535a:	f000 fadd 	bl	8005918 <lps22hh_data_rate_set>
 800535e:	1e03      	subs	r3, r0, #0
 8005360:	d002      	beq.n	8005368 <LPS22HH_TEMP_Enable+0x34>
  {
    return LPS22HH_ERROR;
 8005362:	2301      	movs	r3, #1
 8005364:	425b      	negs	r3, r3
 8005366:	e004      	b.n	8005372 <LPS22HH_TEMP_Enable+0x3e>
  }

  pObj->temp_is_enabled = 1;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	222a      	movs	r2, #42	; 0x2a
 800536c:	2101      	movs	r1, #1
 800536e:	5499      	strb	r1, [r3, r2]

  return LPS22HH_OK;
 8005370:	2300      	movs	r3, #0
}
 8005372:	0018      	movs	r0, r3
 8005374:	46bd      	mov	sp, r7
 8005376:	b002      	add	sp, #8
 8005378:	bd80      	pop	{r7, pc}

0800537a <LPS22HH_TEMP_Disable>:
  * @brief  Disable the LPS22HH temperature sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_TEMP_Disable(LPS22HH_Object_t *pObj)
{
 800537a:	b580      	push	{r7, lr}
 800537c:	b082      	sub	sp, #8
 800537e:	af00      	add	r7, sp, #0
 8005380:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->temp_is_enabled == 0U)
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	222a      	movs	r2, #42	; 0x2a
 8005386:	5c9b      	ldrb	r3, [r3, r2]
 8005388:	2b00      	cmp	r3, #0
 800538a:	d101      	bne.n	8005390 <LPS22HH_TEMP_Disable+0x16>
  {
    return LPS22HH_OK;
 800538c:	2300      	movs	r3, #0
 800538e:	e022      	b.n	80053d6 <LPS22HH_TEMP_Disable+0x5c>
  }

  /* Check if the LPS22HH pressure sensor is still enable. */
  /* If yes, skip the disable function, if not call disable function */
  if (pObj->press_is_enabled == 0U)
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2229      	movs	r2, #41	; 0x29
 8005394:	5c9b      	ldrb	r3, [r3, r2]
 8005396:	2b00      	cmp	r3, #0
 8005398:	d118      	bne.n	80053cc <LPS22HH_TEMP_Disable+0x52>
  {
    /* Get current output data rate. */
    if (lps22hh_data_rate_get(&(pObj->Ctx), &pObj->last_odr) != LPS22HH_OK)
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	331c      	adds	r3, #28
 800539e:	001a      	movs	r2, r3
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	332b      	adds	r3, #43	; 0x2b
 80053a4:	0019      	movs	r1, r3
 80053a6:	0010      	movs	r0, r2
 80053a8:	f000 fb24 	bl	80059f4 <lps22hh_data_rate_get>
 80053ac:	1e03      	subs	r3, r0, #0
 80053ae:	d002      	beq.n	80053b6 <LPS22HH_TEMP_Disable+0x3c>
    {
      return LPS22HH_ERROR;
 80053b0:	2301      	movs	r3, #1
 80053b2:	425b      	negs	r3, r3
 80053b4:	e00f      	b.n	80053d6 <LPS22HH_TEMP_Disable+0x5c>
    }

    /* Output data rate selection - power down. */
    if (lps22hh_data_rate_set(&(pObj->Ctx), LPS22HH_POWER_DOWN) != LPS22HH_OK)
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	331c      	adds	r3, #28
 80053ba:	2100      	movs	r1, #0
 80053bc:	0018      	movs	r0, r3
 80053be:	f000 faab 	bl	8005918 <lps22hh_data_rate_set>
 80053c2:	1e03      	subs	r3, r0, #0
 80053c4:	d002      	beq.n	80053cc <LPS22HH_TEMP_Disable+0x52>
    {
      return LPS22HH_ERROR;
 80053c6:	2301      	movs	r3, #1
 80053c8:	425b      	negs	r3, r3
 80053ca:	e004      	b.n	80053d6 <LPS22HH_TEMP_Disable+0x5c>
    }
  }

  pObj->temp_is_enabled = 0;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	222a      	movs	r2, #42	; 0x2a
 80053d0:	2100      	movs	r1, #0
 80053d2:	5499      	strb	r1, [r3, r2]

  return LPS22HH_OK;
 80053d4:	2300      	movs	r3, #0
}
 80053d6:	0018      	movs	r0, r3
 80053d8:	46bd      	mov	sp, r7
 80053da:	b002      	add	sp, #8
 80053dc:	bd80      	pop	{r7, pc}

080053de <LPS22HH_TEMP_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_TEMP_GetOutputDataRate(LPS22HH_Object_t *pObj, float *Odr)
{
 80053de:	b580      	push	{r7, lr}
 80053e0:	b082      	sub	sp, #8
 80053e2:	af00      	add	r7, sp, #0
 80053e4:	6078      	str	r0, [r7, #4]
 80053e6:	6039      	str	r1, [r7, #0]
  return LPS22HH_GetOutputDataRate(pObj, Odr);
 80053e8:	683a      	ldr	r2, [r7, #0]
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	0011      	movs	r1, r2
 80053ee:	0018      	movs	r0, r3
 80053f0:	f000 f868 	bl	80054c4 <LPS22HH_GetOutputDataRate>
 80053f4:	0003      	movs	r3, r0
}
 80053f6:	0018      	movs	r0, r3
 80053f8:	46bd      	mov	sp, r7
 80053fa:	b002      	add	sp, #8
 80053fc:	bd80      	pop	{r7, pc}

080053fe <LPS22HH_TEMP_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_TEMP_SetOutputDataRate(LPS22HH_Object_t *pObj, float Odr)
{
 80053fe:	b580      	push	{r7, lr}
 8005400:	b082      	sub	sp, #8
 8005402:	af00      	add	r7, sp, #0
 8005404:	6078      	str	r0, [r7, #4]
 8005406:	6039      	str	r1, [r7, #0]
  /* Check if the component is enabled */
  if (pObj->temp_is_enabled == 1U)
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	222a      	movs	r2, #42	; 0x2a
 800540c:	5c9b      	ldrb	r3, [r3, r2]
 800540e:	2b01      	cmp	r3, #1
 8005410:	d107      	bne.n	8005422 <LPS22HH_TEMP_SetOutputDataRate+0x24>
  {
    return LPS22HH_SetOutputDataRate_When_Enabled(pObj, Odr);
 8005412:	683a      	ldr	r2, [r7, #0]
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	1c11      	adds	r1, r2, #0
 8005418:	0018      	movs	r0, r3
 800541a:	f000 f8a9 	bl	8005570 <LPS22HH_SetOutputDataRate_When_Enabled>
 800541e:	0003      	movs	r3, r0
 8005420:	e006      	b.n	8005430 <LPS22HH_TEMP_SetOutputDataRate+0x32>
  }
  else
  {
    return LPS22HH_SetOutputDataRate_When_Disabled(pObj, Odr);
 8005422:	683a      	ldr	r2, [r7, #0]
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	1c11      	adds	r1, r2, #0
 8005428:	0018      	movs	r0, r3
 800542a:	f000 f907 	bl	800563c <LPS22HH_SetOutputDataRate_When_Disabled>
 800542e:	0003      	movs	r3, r0
  }
}
 8005430:	0018      	movs	r0, r3
 8005432:	46bd      	mov	sp, r7
 8005434:	b002      	add	sp, #8
 8005436:	bd80      	pop	{r7, pc}

08005438 <LPS22HH_TEMP_GetTemperature>:
  * @param  pObj the device pObj
  * @param  Value pointer where the temperature value is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_TEMP_GetTemperature(LPS22HH_Object_t *pObj, float *Value)
{
 8005438:	b590      	push	{r4, r7, lr}
 800543a:	b085      	sub	sp, #20
 800543c:	af00      	add	r7, sp, #0
 800543e:	6078      	str	r0, [r7, #4]
 8005440:	6039      	str	r1, [r7, #0]
  lps22hh_axis1bit16_t data_raw_temperature;

  (void)memset(data_raw_temperature.u8bit, 0x00, sizeof(int16_t));
 8005442:	240c      	movs	r4, #12
 8005444:	193b      	adds	r3, r7, r4
 8005446:	2202      	movs	r2, #2
 8005448:	2100      	movs	r1, #0
 800544a:	0018      	movs	r0, r3
 800544c:	f00e fb0b 	bl	8013a66 <memset>
  if (lps22hh_temperature_raw_get(&(pObj->Ctx), &data_raw_temperature.i16bit) != LPS22HH_OK)
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	331c      	adds	r3, #28
 8005454:	193a      	adds	r2, r7, r4
 8005456:	0011      	movs	r1, r2
 8005458:	0018      	movs	r0, r3
 800545a:	f000 fb7f 	bl	8005b5c <lps22hh_temperature_raw_get>
 800545e:	1e03      	subs	r3, r0, #0
 8005460:	d002      	beq.n	8005468 <LPS22HH_TEMP_GetTemperature+0x30>
  {
    return LPS22HH_ERROR;
 8005462:	2301      	movs	r3, #1
 8005464:	425b      	negs	r3, r3
 8005466:	e00a      	b.n	800547e <LPS22HH_TEMP_GetTemperature+0x46>
  }

  *Value = lps22hh_from_lsb_to_celsius(data_raw_temperature.i16bit);
 8005468:	230c      	movs	r3, #12
 800546a:	18fb      	adds	r3, r7, r3
 800546c:	2200      	movs	r2, #0
 800546e:	5e9b      	ldrsh	r3, [r3, r2]
 8005470:	0018      	movs	r0, r3
 8005472:	f000 fa09 	bl	8005888 <lps22hh_from_lsb_to_celsius>
 8005476:	1c02      	adds	r2, r0, #0
 8005478:	683b      	ldr	r3, [r7, #0]
 800547a:	601a      	str	r2, [r3, #0]

  return LPS22HH_OK;
 800547c:	2300      	movs	r3, #0
}
 800547e:	0018      	movs	r0, r3
 8005480:	46bd      	mov	sp, r7
 8005482:	b005      	add	sp, #20
 8005484:	bd90      	pop	{r4, r7, pc}

08005486 <LPS22HH_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LPS22HH_Write_Reg(LPS22HH_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 8005486:	b580      	push	{r7, lr}
 8005488:	b082      	sub	sp, #8
 800548a:	af00      	add	r7, sp, #0
 800548c:	6078      	str	r0, [r7, #4]
 800548e:	0008      	movs	r0, r1
 8005490:	0011      	movs	r1, r2
 8005492:	1cfb      	adds	r3, r7, #3
 8005494:	1c02      	adds	r2, r0, #0
 8005496:	701a      	strb	r2, [r3, #0]
 8005498:	1cbb      	adds	r3, r7, #2
 800549a:	1c0a      	adds	r2, r1, #0
 800549c:	701a      	strb	r2, [r3, #0]
  if (lps22hh_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LPS22HH_OK)
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	331c      	adds	r3, #28
 80054a2:	0018      	movs	r0, r3
 80054a4:	1cba      	adds	r2, r7, #2
 80054a6:	1cfb      	adds	r3, r7, #3
 80054a8:	7819      	ldrb	r1, [r3, #0]
 80054aa:	2301      	movs	r3, #1
 80054ac:	f000 f9b9 	bl	8005822 <lps22hh_write_reg>
 80054b0:	1e03      	subs	r3, r0, #0
 80054b2:	d002      	beq.n	80054ba <LPS22HH_Write_Reg+0x34>
  {
    return LPS22HH_ERROR;
 80054b4:	2301      	movs	r3, #1
 80054b6:	425b      	negs	r3, r3
 80054b8:	e000      	b.n	80054bc <LPS22HH_Write_Reg+0x36>
  }

  return LPS22HH_OK;
 80054ba:	2300      	movs	r3, #0
}
 80054bc:	0018      	movs	r0, r3
 80054be:	46bd      	mov	sp, r7
 80054c0:	b002      	add	sp, #8
 80054c2:	bd80      	pop	{r7, pc}

080054c4 <LPS22HH_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LPS22HH_GetOutputDataRate(LPS22HH_Object_t *pObj, float *Odr)
{
 80054c4:	b580      	push	{r7, lr}
 80054c6:	b084      	sub	sp, #16
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	6078      	str	r0, [r7, #4]
 80054cc:	6039      	str	r1, [r7, #0]
  int32_t ret = LPS22HH_OK;
 80054ce:	2300      	movs	r3, #0
 80054d0:	60fb      	str	r3, [r7, #12]
  lps22hh_odr_t odr_low_level;

  if (lps22hh_data_rate_get(&(pObj->Ctx), &odr_low_level) != LPS22HH_OK)
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	331c      	adds	r3, #28
 80054d6:	220b      	movs	r2, #11
 80054d8:	18ba      	adds	r2, r7, r2
 80054da:	0011      	movs	r1, r2
 80054dc:	0018      	movs	r0, r3
 80054de:	f000 fa89 	bl	80059f4 <lps22hh_data_rate_get>
 80054e2:	1e03      	subs	r3, r0, #0
 80054e4:	d002      	beq.n	80054ec <LPS22HH_GetOutputDataRate+0x28>
  {
    return LPS22HH_ERROR;
 80054e6:	2301      	movs	r3, #1
 80054e8:	425b      	negs	r3, r3
 80054ea:	e02f      	b.n	800554c <LPS22HH_GetOutputDataRate+0x88>
  }

  switch (odr_low_level)
 80054ec:	230b      	movs	r3, #11
 80054ee:	18fb      	adds	r3, r7, r3
 80054f0:	781b      	ldrb	r3, [r3, #0]
 80054f2:	2b07      	cmp	r3, #7
 80054f4:	d825      	bhi.n	8005542 <LPS22HH_GetOutputDataRate+0x7e>
 80054f6:	009a      	lsls	r2, r3, #2
 80054f8:	4b16      	ldr	r3, [pc, #88]	; (8005554 <LPS22HH_GetOutputDataRate+0x90>)
 80054fa:	18d3      	adds	r3, r2, r3
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	469f      	mov	pc, r3
  {
    case LPS22HH_POWER_DOWN:
      *Odr = 0.0f;
 8005500:	683b      	ldr	r3, [r7, #0]
 8005502:	2200      	movs	r2, #0
 8005504:	601a      	str	r2, [r3, #0]
      break;
 8005506:	e020      	b.n	800554a <LPS22HH_GetOutputDataRate+0x86>

    case LPS22HH_1_Hz:
      *Odr = 1.0f;
 8005508:	683b      	ldr	r3, [r7, #0]
 800550a:	22fe      	movs	r2, #254	; 0xfe
 800550c:	0592      	lsls	r2, r2, #22
 800550e:	601a      	str	r2, [r3, #0]
      break;
 8005510:	e01b      	b.n	800554a <LPS22HH_GetOutputDataRate+0x86>

    case LPS22HH_10_Hz:
      *Odr = 10.0f;
 8005512:	683b      	ldr	r3, [r7, #0]
 8005514:	4a10      	ldr	r2, [pc, #64]	; (8005558 <LPS22HH_GetOutputDataRate+0x94>)
 8005516:	601a      	str	r2, [r3, #0]
      break;
 8005518:	e017      	b.n	800554a <LPS22HH_GetOutputDataRate+0x86>

    case LPS22HH_25_Hz:
      *Odr = 25.0f;
 800551a:	683b      	ldr	r3, [r7, #0]
 800551c:	4a0f      	ldr	r2, [pc, #60]	; (800555c <LPS22HH_GetOutputDataRate+0x98>)
 800551e:	601a      	str	r2, [r3, #0]
      break;
 8005520:	e013      	b.n	800554a <LPS22HH_GetOutputDataRate+0x86>

    case LPS22HH_50_Hz:
      *Odr = 50.0f;
 8005522:	683b      	ldr	r3, [r7, #0]
 8005524:	4a0e      	ldr	r2, [pc, #56]	; (8005560 <LPS22HH_GetOutputDataRate+0x9c>)
 8005526:	601a      	str	r2, [r3, #0]
      break;
 8005528:	e00f      	b.n	800554a <LPS22HH_GetOutputDataRate+0x86>

    case LPS22HH_75_Hz:
      *Odr = 75.0f;
 800552a:	683b      	ldr	r3, [r7, #0]
 800552c:	4a0d      	ldr	r2, [pc, #52]	; (8005564 <LPS22HH_GetOutputDataRate+0xa0>)
 800552e:	601a      	str	r2, [r3, #0]
      break;
 8005530:	e00b      	b.n	800554a <LPS22HH_GetOutputDataRate+0x86>

    case LPS22HH_100_Hz:
      *Odr = 100.0f;
 8005532:	683b      	ldr	r3, [r7, #0]
 8005534:	4a0c      	ldr	r2, [pc, #48]	; (8005568 <LPS22HH_GetOutputDataRate+0xa4>)
 8005536:	601a      	str	r2, [r3, #0]
      break;
 8005538:	e007      	b.n	800554a <LPS22HH_GetOutputDataRate+0x86>

    case LPS22HH_200_Hz:
      *Odr = 200.0f;
 800553a:	683b      	ldr	r3, [r7, #0]
 800553c:	4a0b      	ldr	r2, [pc, #44]	; (800556c <LPS22HH_GetOutputDataRate+0xa8>)
 800553e:	601a      	str	r2, [r3, #0]
      break;
 8005540:	e003      	b.n	800554a <LPS22HH_GetOutputDataRate+0x86>

    default:
      ret = LPS22HH_ERROR;
 8005542:	2301      	movs	r3, #1
 8005544:	425b      	negs	r3, r3
 8005546:	60fb      	str	r3, [r7, #12]
      break;
 8005548:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 800554a:	68fb      	ldr	r3, [r7, #12]
}
 800554c:	0018      	movs	r0, r3
 800554e:	46bd      	mov	sp, r7
 8005550:	b004      	add	sp, #16
 8005552:	bd80      	pop	{r7, pc}
 8005554:	080160d8 	.word	0x080160d8
 8005558:	41200000 	.word	0x41200000
 800555c:	41c80000 	.word	0x41c80000
 8005560:	42480000 	.word	0x42480000
 8005564:	42960000 	.word	0x42960000
 8005568:	42c80000 	.word	0x42c80000
 800556c:	43480000 	.word	0x43480000

08005570 <LPS22HH_SetOutputDataRate_When_Enabled>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LPS22HH_SetOutputDataRate_When_Enabled(LPS22HH_Object_t *pObj, float Odr)
{
 8005570:	b580      	push	{r7, lr}
 8005572:	b084      	sub	sp, #16
 8005574:	af00      	add	r7, sp, #0
 8005576:	6078      	str	r0, [r7, #4]
 8005578:	6039      	str	r1, [r7, #0]
  lps22hh_odr_t new_odr;

  new_odr = (Odr <=   1.0f) ? LPS22HH_1_Hz
            : (Odr <=  10.0f) ? LPS22HH_10_Hz
 800557a:	21fe      	movs	r1, #254	; 0xfe
 800557c:	0589      	lsls	r1, r1, #22
 800557e:	6838      	ldr	r0, [r7, #0]
 8005580:	f7fa ff5e 	bl	8000440 <__aeabi_fcmple>
 8005584:	1e03      	subs	r3, r0, #0
 8005586:	d001      	beq.n	800558c <LPS22HH_SetOutputDataRate_When_Enabled+0x1c>
 8005588:	2301      	movs	r3, #1
 800558a:	e028      	b.n	80055de <LPS22HH_SetOutputDataRate_When_Enabled+0x6e>
 800558c:	4926      	ldr	r1, [pc, #152]	; (8005628 <LPS22HH_SetOutputDataRate_When_Enabled+0xb8>)
 800558e:	6838      	ldr	r0, [r7, #0]
 8005590:	f7fa ff56 	bl	8000440 <__aeabi_fcmple>
 8005594:	1e03      	subs	r3, r0, #0
 8005596:	d001      	beq.n	800559c <LPS22HH_SetOutputDataRate_When_Enabled+0x2c>
 8005598:	2302      	movs	r3, #2
 800559a:	e020      	b.n	80055de <LPS22HH_SetOutputDataRate_When_Enabled+0x6e>
 800559c:	4923      	ldr	r1, [pc, #140]	; (800562c <LPS22HH_SetOutputDataRate_When_Enabled+0xbc>)
 800559e:	6838      	ldr	r0, [r7, #0]
 80055a0:	f7fa ff4e 	bl	8000440 <__aeabi_fcmple>
 80055a4:	1e03      	subs	r3, r0, #0
 80055a6:	d001      	beq.n	80055ac <LPS22HH_SetOutputDataRate_When_Enabled+0x3c>
 80055a8:	2303      	movs	r3, #3
 80055aa:	e018      	b.n	80055de <LPS22HH_SetOutputDataRate_When_Enabled+0x6e>
 80055ac:	4920      	ldr	r1, [pc, #128]	; (8005630 <LPS22HH_SetOutputDataRate_When_Enabled+0xc0>)
 80055ae:	6838      	ldr	r0, [r7, #0]
 80055b0:	f7fa ff46 	bl	8000440 <__aeabi_fcmple>
 80055b4:	1e03      	subs	r3, r0, #0
 80055b6:	d001      	beq.n	80055bc <LPS22HH_SetOutputDataRate_When_Enabled+0x4c>
 80055b8:	2304      	movs	r3, #4
 80055ba:	e010      	b.n	80055de <LPS22HH_SetOutputDataRate_When_Enabled+0x6e>
 80055bc:	491d      	ldr	r1, [pc, #116]	; (8005634 <LPS22HH_SetOutputDataRate_When_Enabled+0xc4>)
 80055be:	6838      	ldr	r0, [r7, #0]
 80055c0:	f7fa ff3e 	bl	8000440 <__aeabi_fcmple>
 80055c4:	1e03      	subs	r3, r0, #0
 80055c6:	d001      	beq.n	80055cc <LPS22HH_SetOutputDataRate_When_Enabled+0x5c>
 80055c8:	2305      	movs	r3, #5
 80055ca:	e008      	b.n	80055de <LPS22HH_SetOutputDataRate_When_Enabled+0x6e>
 80055cc:	491a      	ldr	r1, [pc, #104]	; (8005638 <LPS22HH_SetOutputDataRate_When_Enabled+0xc8>)
 80055ce:	6838      	ldr	r0, [r7, #0]
 80055d0:	f7fa ff36 	bl	8000440 <__aeabi_fcmple>
 80055d4:	1e03      	subs	r3, r0, #0
 80055d6:	d001      	beq.n	80055dc <LPS22HH_SetOutputDataRate_When_Enabled+0x6c>
 80055d8:	2306      	movs	r3, #6
 80055da:	e000      	b.n	80055de <LPS22HH_SetOutputDataRate_When_Enabled+0x6e>
 80055dc:	2307      	movs	r3, #7
  new_odr = (Odr <=   1.0f) ? LPS22HH_1_Hz
 80055de:	210f      	movs	r1, #15
 80055e0:	187a      	adds	r2, r7, r1
 80055e2:	7013      	strb	r3, [r2, #0]
            : (Odr <=  50.0f) ? LPS22HH_50_Hz
            : (Odr <=  75.0f) ? LPS22HH_75_Hz
            : (Odr <= 100.0f) ? LPS22HH_100_Hz
            :                   LPS22HH_200_Hz;

  if (lps22hh_data_rate_set(&(pObj->Ctx), new_odr) != LPS22HH_OK)
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	331c      	adds	r3, #28
 80055e8:	001a      	movs	r2, r3
 80055ea:	187b      	adds	r3, r7, r1
 80055ec:	781b      	ldrb	r3, [r3, #0]
 80055ee:	0019      	movs	r1, r3
 80055f0:	0010      	movs	r0, r2
 80055f2:	f000 f991 	bl	8005918 <lps22hh_data_rate_set>
 80055f6:	1e03      	subs	r3, r0, #0
 80055f8:	d002      	beq.n	8005600 <LPS22HH_SetOutputDataRate_When_Enabled+0x90>
  {
    return LPS22HH_ERROR;
 80055fa:	2301      	movs	r3, #1
 80055fc:	425b      	negs	r3, r3
 80055fe:	e00e      	b.n	800561e <LPS22HH_SetOutputDataRate_When_Enabled+0xae>
  }

  if (lps22hh_data_rate_get(&(pObj->Ctx), &pObj->last_odr) != LPS22HH_OK)
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	331c      	adds	r3, #28
 8005604:	001a      	movs	r2, r3
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	332b      	adds	r3, #43	; 0x2b
 800560a:	0019      	movs	r1, r3
 800560c:	0010      	movs	r0, r2
 800560e:	f000 f9f1 	bl	80059f4 <lps22hh_data_rate_get>
 8005612:	1e03      	subs	r3, r0, #0
 8005614:	d002      	beq.n	800561c <LPS22HH_SetOutputDataRate_When_Enabled+0xac>
  {
    return LPS22HH_ERROR;
 8005616:	2301      	movs	r3, #1
 8005618:	425b      	negs	r3, r3
 800561a:	e000      	b.n	800561e <LPS22HH_SetOutputDataRate_When_Enabled+0xae>
  }

  return LPS22HH_OK;
 800561c:	2300      	movs	r3, #0
}
 800561e:	0018      	movs	r0, r3
 8005620:	46bd      	mov	sp, r7
 8005622:	b004      	add	sp, #16
 8005624:	bd80      	pop	{r7, pc}
 8005626:	46c0      	nop			; (mov r8, r8)
 8005628:	41200000 	.word	0x41200000
 800562c:	41c80000 	.word	0x41c80000
 8005630:	42480000 	.word	0x42480000
 8005634:	42960000 	.word	0x42960000
 8005638:	42c80000 	.word	0x42c80000

0800563c <LPS22HH_SetOutputDataRate_When_Disabled>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LPS22HH_SetOutputDataRate_When_Disabled(LPS22HH_Object_t *pObj, float Odr)
{
 800563c:	b580      	push	{r7, lr}
 800563e:	b082      	sub	sp, #8
 8005640:	af00      	add	r7, sp, #0
 8005642:	6078      	str	r0, [r7, #4]
 8005644:	6039      	str	r1, [r7, #0]
  pObj->last_odr = (Odr <=   1.0f) ? LPS22HH_1_Hz
                   : (Odr <=  10.0f) ? LPS22HH_10_Hz
 8005646:	21fe      	movs	r1, #254	; 0xfe
 8005648:	0589      	lsls	r1, r1, #22
 800564a:	6838      	ldr	r0, [r7, #0]
 800564c:	f7fa fef8 	bl	8000440 <__aeabi_fcmple>
 8005650:	1e03      	subs	r3, r0, #0
 8005652:	d001      	beq.n	8005658 <LPS22HH_SetOutputDataRate_When_Disabled+0x1c>
 8005654:	2301      	movs	r3, #1
 8005656:	e028      	b.n	80056aa <LPS22HH_SetOutputDataRate_When_Disabled+0x6e>
 8005658:	4918      	ldr	r1, [pc, #96]	; (80056bc <LPS22HH_SetOutputDataRate_When_Disabled+0x80>)
 800565a:	6838      	ldr	r0, [r7, #0]
 800565c:	f7fa fef0 	bl	8000440 <__aeabi_fcmple>
 8005660:	1e03      	subs	r3, r0, #0
 8005662:	d001      	beq.n	8005668 <LPS22HH_SetOutputDataRate_When_Disabled+0x2c>
 8005664:	2302      	movs	r3, #2
 8005666:	e020      	b.n	80056aa <LPS22HH_SetOutputDataRate_When_Disabled+0x6e>
 8005668:	4915      	ldr	r1, [pc, #84]	; (80056c0 <LPS22HH_SetOutputDataRate_When_Disabled+0x84>)
 800566a:	6838      	ldr	r0, [r7, #0]
 800566c:	f7fa fee8 	bl	8000440 <__aeabi_fcmple>
 8005670:	1e03      	subs	r3, r0, #0
 8005672:	d001      	beq.n	8005678 <LPS22HH_SetOutputDataRate_When_Disabled+0x3c>
 8005674:	2303      	movs	r3, #3
 8005676:	e018      	b.n	80056aa <LPS22HH_SetOutputDataRate_When_Disabled+0x6e>
 8005678:	4912      	ldr	r1, [pc, #72]	; (80056c4 <LPS22HH_SetOutputDataRate_When_Disabled+0x88>)
 800567a:	6838      	ldr	r0, [r7, #0]
 800567c:	f7fa fee0 	bl	8000440 <__aeabi_fcmple>
 8005680:	1e03      	subs	r3, r0, #0
 8005682:	d001      	beq.n	8005688 <LPS22HH_SetOutputDataRate_When_Disabled+0x4c>
 8005684:	2304      	movs	r3, #4
 8005686:	e010      	b.n	80056aa <LPS22HH_SetOutputDataRate_When_Disabled+0x6e>
 8005688:	490f      	ldr	r1, [pc, #60]	; (80056c8 <LPS22HH_SetOutputDataRate_When_Disabled+0x8c>)
 800568a:	6838      	ldr	r0, [r7, #0]
 800568c:	f7fa fed8 	bl	8000440 <__aeabi_fcmple>
 8005690:	1e03      	subs	r3, r0, #0
 8005692:	d001      	beq.n	8005698 <LPS22HH_SetOutputDataRate_When_Disabled+0x5c>
 8005694:	2305      	movs	r3, #5
 8005696:	e008      	b.n	80056aa <LPS22HH_SetOutputDataRate_When_Disabled+0x6e>
 8005698:	490c      	ldr	r1, [pc, #48]	; (80056cc <LPS22HH_SetOutputDataRate_When_Disabled+0x90>)
 800569a:	6838      	ldr	r0, [r7, #0]
 800569c:	f7fa fed0 	bl	8000440 <__aeabi_fcmple>
 80056a0:	1e03      	subs	r3, r0, #0
 80056a2:	d001      	beq.n	80056a8 <LPS22HH_SetOutputDataRate_When_Disabled+0x6c>
 80056a4:	2306      	movs	r3, #6
 80056a6:	e000      	b.n	80056aa <LPS22HH_SetOutputDataRate_When_Disabled+0x6e>
 80056a8:	2307      	movs	r3, #7
  pObj->last_odr = (Odr <=   1.0f) ? LPS22HH_1_Hz
 80056aa:	687a      	ldr	r2, [r7, #4]
 80056ac:	212b      	movs	r1, #43	; 0x2b
 80056ae:	5453      	strb	r3, [r2, r1]
                   : (Odr <=  50.0f) ? LPS22HH_50_Hz
                   : (Odr <=  75.0f) ? LPS22HH_75_Hz
                   : (Odr <= 100.0f) ? LPS22HH_100_Hz
                   :                   LPS22HH_200_Hz;

  return LPS22HH_OK;
 80056b0:	2300      	movs	r3, #0
}
 80056b2:	0018      	movs	r0, r3
 80056b4:	46bd      	mov	sp, r7
 80056b6:	b002      	add	sp, #8
 80056b8:	bd80      	pop	{r7, pc}
 80056ba:	46c0      	nop			; (mov r8, r8)
 80056bc:	41200000 	.word	0x41200000
 80056c0:	41c80000 	.word	0x41c80000
 80056c4:	42480000 	.word	0x42480000
 80056c8:	42960000 	.word	0x42960000
 80056cc:	42c80000 	.word	0x42c80000

080056d0 <LPS22HH_Initialize>:
  * @brief  Initialize the LPS22HH sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LPS22HH_Initialize(LPS22HH_Object_t *pObj)
{
 80056d0:	b580      	push	{r7, lr}
 80056d2:	b082      	sub	sp, #8
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	6078      	str	r0, [r7, #4]
  /* Disable MIPI I3C(SM) interface */
  if (lps22hh_i3c_interface_set(&(pObj->Ctx), LPS22HH_I3C_DISABLE) != LPS22HH_OK)
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	331c      	adds	r3, #28
 80056dc:	2111      	movs	r1, #17
 80056de:	0018      	movs	r0, r3
 80056e0:	f000 fad5 	bl	8005c8e <lps22hh_i3c_interface_set>
 80056e4:	1e03      	subs	r3, r0, #0
 80056e6:	d002      	beq.n	80056ee <LPS22HH_Initialize+0x1e>
  {
    return LPS22HH_ERROR;
 80056e8:	2301      	movs	r3, #1
 80056ea:	425b      	negs	r3, r3
 80056ec:	e030      	b.n	8005750 <LPS22HH_Initialize+0x80>
  }

  /* Power down the device, set Low Noise Enable (bit 5), clear One Shot (bit 4) */
  if (lps22hh_data_rate_set(&(pObj->Ctx), (lps22hh_odr_t)(LPS22HH_POWER_DOWN | 0x10)) != LPS22HH_OK)
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	331c      	adds	r3, #28
 80056f2:	2110      	movs	r1, #16
 80056f4:	0018      	movs	r0, r3
 80056f6:	f000 f90f 	bl	8005918 <lps22hh_data_rate_set>
 80056fa:	1e03      	subs	r3, r0, #0
 80056fc:	d002      	beq.n	8005704 <LPS22HH_Initialize+0x34>
  {
    return LPS22HH_ERROR;
 80056fe:	2301      	movs	r3, #1
 8005700:	425b      	negs	r3, r3
 8005702:	e025      	b.n	8005750 <LPS22HH_Initialize+0x80>
  }

  /* Disable low-pass filter on LPS22HH pressure data */
  if (lps22hh_lp_bandwidth_set(&(pObj->Ctx), LPS22HH_LPF_ODR_DIV_2) != LPS22HH_OK)
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	331c      	adds	r3, #28
 8005708:	2100      	movs	r1, #0
 800570a:	0018      	movs	r0, r3
 800570c:	f000 fa8f 	bl	8005c2e <lps22hh_lp_bandwidth_set>
 8005710:	1e03      	subs	r3, r0, #0
 8005712:	d002      	beq.n	800571a <LPS22HH_Initialize+0x4a>
  {
    return LPS22HH_ERROR;
 8005714:	2301      	movs	r3, #1
 8005716:	425b      	negs	r3, r3
 8005718:	e01a      	b.n	8005750 <LPS22HH_Initialize+0x80>
  }

  /* Set block data update mode */
  if (lps22hh_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LPS22HH_OK)
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	331c      	adds	r3, #28
 800571e:	2101      	movs	r1, #1
 8005720:	0018      	movs	r0, r3
 8005722:	f000 f8c9 	bl	80058b8 <lps22hh_block_data_update_set>
 8005726:	1e03      	subs	r3, r0, #0
 8005728:	d002      	beq.n	8005730 <LPS22HH_Initialize+0x60>
  {
    return LPS22HH_ERROR;
 800572a:	2301      	movs	r3, #1
 800572c:	425b      	negs	r3, r3
 800572e:	e00f      	b.n	8005750 <LPS22HH_Initialize+0x80>
  }

  /* Set autoincrement for multi-byte read/write */
  if (lps22hh_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LPS22HH_OK)
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	331c      	adds	r3, #28
 8005734:	2101      	movs	r1, #1
 8005736:	0018      	movs	r0, r3
 8005738:	f000 fa49 	bl	8005bce <lps22hh_auto_increment_set>
 800573c:	1e03      	subs	r3, r0, #0
 800573e:	d002      	beq.n	8005746 <LPS22HH_Initialize+0x76>
  {
    return LPS22HH_ERROR;
 8005740:	2301      	movs	r3, #1
 8005742:	425b      	negs	r3, r3
 8005744:	e004      	b.n	8005750 <LPS22HH_Initialize+0x80>
  }

  pObj->last_odr = LPS22HH_25_Hz;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	222b      	movs	r2, #43	; 0x2b
 800574a:	2103      	movs	r1, #3
 800574c:	5499      	strb	r1, [r3, r2]

  return LPS22HH_OK;
 800574e:	2300      	movs	r3, #0
}
 8005750:	0018      	movs	r0, r3
 8005752:	46bd      	mov	sp, r7
 8005754:	b002      	add	sp, #8
 8005756:	bd80      	pop	{r7, pc}

08005758 <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8005758:	b5f0      	push	{r4, r5, r6, r7, lr}
 800575a:	b087      	sub	sp, #28
 800575c:	af00      	add	r7, sp, #0
 800575e:	60f8      	str	r0, [r7, #12]
 8005760:	0008      	movs	r0, r1
 8005762:	607a      	str	r2, [r7, #4]
 8005764:	0019      	movs	r1, r3
 8005766:	250b      	movs	r5, #11
 8005768:	197b      	adds	r3, r7, r5
 800576a:	1c02      	adds	r2, r0, #0
 800576c:	701a      	strb	r2, [r3, #0]
 800576e:	2608      	movs	r6, #8
 8005770:	19bb      	adds	r3, r7, r6
 8005772:	1c0a      	adds	r2, r1, #0
 8005774:	801a      	strh	r2, [r3, #0]
  LPS22HH_Object_t *pObj = (LPS22HH_Object_t *)Handle;
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 800577a:	697b      	ldr	r3, [r7, #20]
 800577c:	695c      	ldr	r4, [r3, #20]
 800577e:	697b      	ldr	r3, [r7, #20]
 8005780:	7b1b      	ldrb	r3, [r3, #12]
 8005782:	b298      	uxth	r0, r3
 8005784:	197b      	adds	r3, r7, r5
 8005786:	781b      	ldrb	r3, [r3, #0]
 8005788:	b299      	uxth	r1, r3
 800578a:	19bb      	adds	r3, r7, r6
 800578c:	881b      	ldrh	r3, [r3, #0]
 800578e:	687a      	ldr	r2, [r7, #4]
 8005790:	47a0      	blx	r4
 8005792:	0003      	movs	r3, r0
}
 8005794:	0018      	movs	r0, r3
 8005796:	46bd      	mov	sp, r7
 8005798:	b007      	add	sp, #28
 800579a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800579c <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 800579c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800579e:	b087      	sub	sp, #28
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	60f8      	str	r0, [r7, #12]
 80057a4:	0008      	movs	r0, r1
 80057a6:	607a      	str	r2, [r7, #4]
 80057a8:	0019      	movs	r1, r3
 80057aa:	250b      	movs	r5, #11
 80057ac:	197b      	adds	r3, r7, r5
 80057ae:	1c02      	adds	r2, r0, #0
 80057b0:	701a      	strb	r2, [r3, #0]
 80057b2:	2608      	movs	r6, #8
 80057b4:	19bb      	adds	r3, r7, r6
 80057b6:	1c0a      	adds	r2, r1, #0
 80057b8:	801a      	strh	r2, [r3, #0]
  LPS22HH_Object_t *pObj = (LPS22HH_Object_t *)Handle;
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 80057be:	697b      	ldr	r3, [r7, #20]
 80057c0:	691c      	ldr	r4, [r3, #16]
 80057c2:	697b      	ldr	r3, [r7, #20]
 80057c4:	7b1b      	ldrb	r3, [r3, #12]
 80057c6:	b298      	uxth	r0, r3
 80057c8:	197b      	adds	r3, r7, r5
 80057ca:	781b      	ldrb	r3, [r3, #0]
 80057cc:	b299      	uxth	r1, r3
 80057ce:	19bb      	adds	r3, r7, r6
 80057d0:	881b      	ldrh	r3, [r3, #0]
 80057d2:	687a      	ldr	r2, [r7, #4]
 80057d4:	47a0      	blx	r4
 80057d6:	0003      	movs	r3, r0
}
 80057d8:	0018      	movs	r0, r3
 80057da:	46bd      	mov	sp, r7
 80057dc:	b007      	add	sp, #28
 80057de:	bdf0      	pop	{r4, r5, r6, r7, pc}

080057e0 <lps22hh_read_reg>:
  *
  */
int32_t lps22hh_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 80057e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80057e2:	b087      	sub	sp, #28
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	60f8      	str	r0, [r7, #12]
 80057e8:	0008      	movs	r0, r1
 80057ea:	607a      	str	r2, [r7, #4]
 80057ec:	0019      	movs	r1, r3
 80057ee:	260b      	movs	r6, #11
 80057f0:	19bb      	adds	r3, r7, r6
 80057f2:	1c02      	adds	r2, r0, #0
 80057f4:	701a      	strb	r2, [r3, #0]
 80057f6:	2508      	movs	r5, #8
 80057f8:	197b      	adds	r3, r7, r5
 80057fa:	1c0a      	adds	r2, r1, #0
 80057fc:	801a      	strh	r2, [r3, #0]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	685c      	ldr	r4, [r3, #4]
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	6898      	ldr	r0, [r3, #8]
 8005806:	197b      	adds	r3, r7, r5
 8005808:	881d      	ldrh	r5, [r3, #0]
 800580a:	687a      	ldr	r2, [r7, #4]
 800580c:	19bb      	adds	r3, r7, r6
 800580e:	7819      	ldrb	r1, [r3, #0]
 8005810:	002b      	movs	r3, r5
 8005812:	47a0      	blx	r4
 8005814:	0003      	movs	r3, r0
 8005816:	617b      	str	r3, [r7, #20]

  return ret;
 8005818:	697b      	ldr	r3, [r7, #20]
}
 800581a:	0018      	movs	r0, r3
 800581c:	46bd      	mov	sp, r7
 800581e:	b007      	add	sp, #28
 8005820:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005822 <lps22hh_write_reg>:
  *
  */
int32_t lps22hh_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 8005822:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005824:	b087      	sub	sp, #28
 8005826:	af00      	add	r7, sp, #0
 8005828:	60f8      	str	r0, [r7, #12]
 800582a:	0008      	movs	r0, r1
 800582c:	607a      	str	r2, [r7, #4]
 800582e:	0019      	movs	r1, r3
 8005830:	260b      	movs	r6, #11
 8005832:	19bb      	adds	r3, r7, r6
 8005834:	1c02      	adds	r2, r0, #0
 8005836:	701a      	strb	r2, [r3, #0]
 8005838:	2508      	movs	r5, #8
 800583a:	197b      	adds	r3, r7, r5
 800583c:	1c0a      	adds	r2, r1, #0
 800583e:	801a      	strh	r2, [r3, #0]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	681c      	ldr	r4, [r3, #0]
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	6898      	ldr	r0, [r3, #8]
 8005848:	197b      	adds	r3, r7, r5
 800584a:	881d      	ldrh	r5, [r3, #0]
 800584c:	687a      	ldr	r2, [r7, #4]
 800584e:	19bb      	adds	r3, r7, r6
 8005850:	7819      	ldrb	r1, [r3, #0]
 8005852:	002b      	movs	r3, r5
 8005854:	47a0      	blx	r4
 8005856:	0003      	movs	r3, r0
 8005858:	617b      	str	r3, [r7, #20]

  return ret;
 800585a:	697b      	ldr	r3, [r7, #20]
}
 800585c:	0018      	movs	r0, r3
 800585e:	46bd      	mov	sp, r7
 8005860:	b007      	add	sp, #28
 8005862:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005864 <lps22hh_from_lsb_to_hpa>:
  * @brief       These functions convert raw-data into engineering units.
  * @{
  *
  */
float_t lps22hh_from_lsb_to_hpa(uint32_t lsb)
{
 8005864:	b580      	push	{r7, lr}
 8005866:	b082      	sub	sp, #8
 8005868:	af00      	add	r7, sp, #0
 800586a:	6078      	str	r0, [r7, #4]
  return ((float_t) lsb / 1048576.0f);
 800586c:	6878      	ldr	r0, [r7, #4]
 800586e:	f7fb fdf5 	bl	800145c <__aeabi_ui2f>
 8005872:	1c03      	adds	r3, r0, #0
 8005874:	2193      	movs	r1, #147	; 0x93
 8005876:	05c9      	lsls	r1, r1, #23
 8005878:	1c18      	adds	r0, r3, #0
 800587a:	f7fb f8cf 	bl	8000a1c <__aeabi_fdiv>
 800587e:	1c03      	adds	r3, r0, #0
}
 8005880:	1c18      	adds	r0, r3, #0
 8005882:	46bd      	mov	sp, r7
 8005884:	b002      	add	sp, #8
 8005886:	bd80      	pop	{r7, pc}

08005888 <lps22hh_from_lsb_to_celsius>:

float_t lps22hh_from_lsb_to_celsius(int16_t lsb)
{
 8005888:	b580      	push	{r7, lr}
 800588a:	b082      	sub	sp, #8
 800588c:	af00      	add	r7, sp, #0
 800588e:	0002      	movs	r2, r0
 8005890:	1dbb      	adds	r3, r7, #6
 8005892:	801a      	strh	r2, [r3, #0]
  return ((float_t) lsb / 100.0f);
 8005894:	1dbb      	adds	r3, r7, #6
 8005896:	2200      	movs	r2, #0
 8005898:	5e9b      	ldrsh	r3, [r3, r2]
 800589a:	0018      	movs	r0, r3
 800589c:	f7fb fd90 	bl	80013c0 <__aeabi_i2f>
 80058a0:	1c03      	adds	r3, r0, #0
 80058a2:	4904      	ldr	r1, [pc, #16]	; (80058b4 <lps22hh_from_lsb_to_celsius+0x2c>)
 80058a4:	1c18      	adds	r0, r3, #0
 80058a6:	f7fb f8b9 	bl	8000a1c <__aeabi_fdiv>
 80058aa:	1c03      	adds	r3, r0, #0
}
 80058ac:	1c18      	adds	r0, r3, #0
 80058ae:	46bd      	mov	sp, r7
 80058b0:	b002      	add	sp, #8
 80058b2:	bd80      	pop	{r7, pc}
 80058b4:	42c80000 	.word	0x42c80000

080058b8 <lps22hh_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80058b8:	b590      	push	{r4, r7, lr}
 80058ba:	b085      	sub	sp, #20
 80058bc:	af00      	add	r7, sp, #0
 80058be:	6078      	str	r0, [r7, #4]
 80058c0:	000a      	movs	r2, r1
 80058c2:	1cfb      	adds	r3, r7, #3
 80058c4:	701a      	strb	r2, [r3, #0]
  lps22hh_ctrl_reg1_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
 80058c6:	2408      	movs	r4, #8
 80058c8:	193a      	adds	r2, r7, r4
 80058ca:	6878      	ldr	r0, [r7, #4]
 80058cc:	2301      	movs	r3, #1
 80058ce:	2110      	movs	r1, #16
 80058d0:	f7ff ff86 	bl	80057e0 <lps22hh_read_reg>
 80058d4:	0003      	movs	r3, r0
 80058d6:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d117      	bne.n	800590e <lps22hh_block_data_update_set+0x56>
  {
    reg.bdu = val;
 80058de:	1cfb      	adds	r3, r7, #3
 80058e0:	781b      	ldrb	r3, [r3, #0]
 80058e2:	2201      	movs	r2, #1
 80058e4:	4013      	ands	r3, r2
 80058e6:	b2da      	uxtb	r2, r3
 80058e8:	193b      	adds	r3, r7, r4
 80058ea:	2101      	movs	r1, #1
 80058ec:	400a      	ands	r2, r1
 80058ee:	1890      	adds	r0, r2, r2
 80058f0:	781a      	ldrb	r2, [r3, #0]
 80058f2:	2102      	movs	r1, #2
 80058f4:	438a      	bics	r2, r1
 80058f6:	1c11      	adds	r1, r2, #0
 80058f8:	1c02      	adds	r2, r0, #0
 80058fa:	430a      	orrs	r2, r1
 80058fc:	701a      	strb	r2, [r3, #0]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
 80058fe:	193a      	adds	r2, r7, r4
 8005900:	6878      	ldr	r0, [r7, #4]
 8005902:	2301      	movs	r3, #1
 8005904:	2110      	movs	r1, #16
 8005906:	f7ff ff8c 	bl	8005822 <lps22hh_write_reg>
 800590a:	0003      	movs	r3, r0
 800590c:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800590e:	68fb      	ldr	r3, [r7, #12]
}
 8005910:	0018      	movs	r0, r3
 8005912:	46bd      	mov	sp, r7
 8005914:	b005      	add	sp, #20
 8005916:	bd90      	pop	{r4, r7, pc}

08005918 <lps22hh_data_rate_set>:
  * @param  val      change the values of odr in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_data_rate_set(stmdev_ctx_t *ctx, lps22hh_odr_t val)
{
 8005918:	b590      	push	{r4, r7, lr}
 800591a:	b087      	sub	sp, #28
 800591c:	af00      	add	r7, sp, #0
 800591e:	6078      	str	r0, [r7, #4]
 8005920:	000a      	movs	r2, r1
 8005922:	1cfb      	adds	r3, r7, #3
 8005924:	701a      	strb	r2, [r3, #0]
  lps22hh_ctrl_reg1_t ctrl_reg1;
  lps22hh_ctrl_reg2_t ctrl_reg2;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 8005926:	2310      	movs	r3, #16
 8005928:	18fa      	adds	r2, r7, r3
 800592a:	6878      	ldr	r0, [r7, #4]
 800592c:	2301      	movs	r3, #1
 800592e:	2110      	movs	r1, #16
 8005930:	f7ff ff56 	bl	80057e0 <lps22hh_read_reg>
 8005934:	0003      	movs	r3, r0
 8005936:	617b      	str	r3, [r7, #20]

  if (ret == 0)
 8005938:	697b      	ldr	r3, [r7, #20]
 800593a:	2b00      	cmp	r3, #0
 800593c:	d108      	bne.n	8005950 <lps22hh_data_rate_set+0x38>
  {
    ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 800593e:	230c      	movs	r3, #12
 8005940:	18fa      	adds	r2, r7, r3
 8005942:	6878      	ldr	r0, [r7, #4]
 8005944:	2301      	movs	r3, #1
 8005946:	2111      	movs	r1, #17
 8005948:	f7ff ff4a 	bl	80057e0 <lps22hh_read_reg>
 800594c:	0003      	movs	r3, r0
 800594e:	617b      	str	r3, [r7, #20]
  }

  if (ret == 0)
 8005950:	697b      	ldr	r3, [r7, #20]
 8005952:	2b00      	cmp	r3, #0
 8005954:	d118      	bne.n	8005988 <lps22hh_data_rate_set+0x70>
  {
    ctrl_reg1.odr = (uint8_t)val & 0x07U;
 8005956:	1cfb      	adds	r3, r7, #3
 8005958:	781b      	ldrb	r3, [r3, #0]
 800595a:	2207      	movs	r2, #7
 800595c:	4013      	ands	r3, r2
 800595e:	b2da      	uxtb	r2, r3
 8005960:	2410      	movs	r4, #16
 8005962:	193b      	adds	r3, r7, r4
 8005964:	2107      	movs	r1, #7
 8005966:	400a      	ands	r2, r1
 8005968:	0110      	lsls	r0, r2, #4
 800596a:	781a      	ldrb	r2, [r3, #0]
 800596c:	2170      	movs	r1, #112	; 0x70
 800596e:	438a      	bics	r2, r1
 8005970:	1c11      	adds	r1, r2, #0
 8005972:	1c02      	adds	r2, r0, #0
 8005974:	430a      	orrs	r2, r1
 8005976:	701a      	strb	r2, [r3, #0]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 8005978:	193a      	adds	r2, r7, r4
 800597a:	6878      	ldr	r0, [r7, #4]
 800597c:	2301      	movs	r3, #1
 800597e:	2110      	movs	r1, #16
 8005980:	f7ff ff4f 	bl	8005822 <lps22hh_write_reg>
 8005984:	0003      	movs	r3, r0
 8005986:	617b      	str	r3, [r7, #20]
  }

  if (ret == 0)
 8005988:	697b      	ldr	r3, [r7, #20]
 800598a:	2b00      	cmp	r3, #0
 800598c:	d12c      	bne.n	80059e8 <lps22hh_data_rate_set+0xd0>
  {
    ctrl_reg2.low_noise_en = ((uint8_t)val & 0x10U) >> 4;
 800598e:	1cfb      	adds	r3, r7, #3
 8005990:	781b      	ldrb	r3, [r3, #0]
 8005992:	091b      	lsrs	r3, r3, #4
 8005994:	1c1a      	adds	r2, r3, #0
 8005996:	2301      	movs	r3, #1
 8005998:	4013      	ands	r3, r2
 800599a:	b2da      	uxtb	r2, r3
 800599c:	240c      	movs	r4, #12
 800599e:	193b      	adds	r3, r7, r4
 80059a0:	2101      	movs	r1, #1
 80059a2:	400a      	ands	r2, r1
 80059a4:	1890      	adds	r0, r2, r2
 80059a6:	781a      	ldrb	r2, [r3, #0]
 80059a8:	2102      	movs	r1, #2
 80059aa:	438a      	bics	r2, r1
 80059ac:	1c11      	adds	r1, r2, #0
 80059ae:	1c02      	adds	r2, r0, #0
 80059b0:	430a      	orrs	r2, r1
 80059b2:	701a      	strb	r2, [r3, #0]
    ctrl_reg2.one_shot = ((uint8_t)val & 0x08U) >> 3;
 80059b4:	1cfb      	adds	r3, r7, #3
 80059b6:	781b      	ldrb	r3, [r3, #0]
 80059b8:	08db      	lsrs	r3, r3, #3
 80059ba:	1c1a      	adds	r2, r3, #0
 80059bc:	2301      	movs	r3, #1
 80059be:	4013      	ands	r3, r2
 80059c0:	b2da      	uxtb	r2, r3
 80059c2:	193b      	adds	r3, r7, r4
 80059c4:	2101      	movs	r1, #1
 80059c6:	400a      	ands	r2, r1
 80059c8:	0010      	movs	r0, r2
 80059ca:	781a      	ldrb	r2, [r3, #0]
 80059cc:	2101      	movs	r1, #1
 80059ce:	438a      	bics	r2, r1
 80059d0:	1c11      	adds	r1, r2, #0
 80059d2:	1c02      	adds	r2, r0, #0
 80059d4:	430a      	orrs	r2, r1
 80059d6:	701a      	strb	r2, [r3, #0]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 80059d8:	193a      	adds	r2, r7, r4
 80059da:	6878      	ldr	r0, [r7, #4]
 80059dc:	2301      	movs	r3, #1
 80059de:	2111      	movs	r1, #17
 80059e0:	f7ff ff1f 	bl	8005822 <lps22hh_write_reg>
 80059e4:	0003      	movs	r3, r0
 80059e6:	617b      	str	r3, [r7, #20]
  }

  return ret;
 80059e8:	697b      	ldr	r3, [r7, #20]
}
 80059ea:	0018      	movs	r0, r3
 80059ec:	46bd      	mov	sp, r7
 80059ee:	b007      	add	sp, #28
 80059f0:	bd90      	pop	{r4, r7, pc}
	...

080059f4 <lps22hh_data_rate_get>:
  * @param  val      Get the values of odr in reg CTRL_REG1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_data_rate_get(stmdev_ctx_t *ctx, lps22hh_odr_t *val)
{
 80059f4:	b590      	push	{r4, r7, lr}
 80059f6:	b087      	sub	sp, #28
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	6078      	str	r0, [r7, #4]
 80059fc:	6039      	str	r1, [r7, #0]
  lps22hh_ctrl_reg1_t ctrl_reg1;
  lps22hh_ctrl_reg2_t ctrl_reg2;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *)&ctrl_reg1, 1);
 80059fe:	2310      	movs	r3, #16
 8005a00:	18fa      	adds	r2, r7, r3
 8005a02:	6878      	ldr	r0, [r7, #4]
 8005a04:	2301      	movs	r3, #1
 8005a06:	2110      	movs	r1, #16
 8005a08:	f7ff feea 	bl	80057e0 <lps22hh_read_reg>
 8005a0c:	0003      	movs	r3, r0
 8005a0e:	617b      	str	r3, [r7, #20]

  if (ret == 0)
 8005a10:	697b      	ldr	r3, [r7, #20]
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d108      	bne.n	8005a28 <lps22hh_data_rate_get+0x34>
  {
    ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 8005a16:	230c      	movs	r3, #12
 8005a18:	18fa      	adds	r2, r7, r3
 8005a1a:	6878      	ldr	r0, [r7, #4]
 8005a1c:	2301      	movs	r3, #1
 8005a1e:	2111      	movs	r1, #17
 8005a20:	f7ff fede 	bl	80057e0 <lps22hh_read_reg>
 8005a24:	0003      	movs	r3, r0
 8005a26:	617b      	str	r3, [r7, #20]
  }

  if (ret == 0)
 8005a28:	697b      	ldr	r3, [r7, #20]
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d160      	bne.n	8005af0 <lps22hh_data_rate_get+0xfc>
  {
    ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *)&ctrl_reg2, 1);
 8005a2e:	240c      	movs	r4, #12
 8005a30:	193a      	adds	r2, r7, r4
 8005a32:	6878      	ldr	r0, [r7, #4]
 8005a34:	2301      	movs	r3, #1
 8005a36:	2111      	movs	r1, #17
 8005a38:	f7ff fed2 	bl	80057e0 <lps22hh_read_reg>
 8005a3c:	0003      	movs	r3, r0
 8005a3e:	617b      	str	r3, [r7, #20]

    switch (((ctrl_reg2.low_noise_en << 4) + (ctrl_reg2.one_shot << 3) +
 8005a40:	0021      	movs	r1, r4
 8005a42:	187b      	adds	r3, r7, r1
 8005a44:	781b      	ldrb	r3, [r3, #0]
 8005a46:	079b      	lsls	r3, r3, #30
 8005a48:	0fdb      	lsrs	r3, r3, #31
 8005a4a:	b2db      	uxtb	r3, r3
 8005a4c:	011a      	lsls	r2, r3, #4
 8005a4e:	187b      	adds	r3, r7, r1
 8005a50:	781b      	ldrb	r3, [r3, #0]
 8005a52:	07db      	lsls	r3, r3, #31
 8005a54:	0fdb      	lsrs	r3, r3, #31
 8005a56:	b2db      	uxtb	r3, r3
 8005a58:	00db      	lsls	r3, r3, #3
 8005a5a:	18d3      	adds	r3, r2, r3
             ctrl_reg1.odr))
 8005a5c:	2210      	movs	r2, #16
 8005a5e:	18ba      	adds	r2, r7, r2
 8005a60:	7812      	ldrb	r2, [r2, #0]
 8005a62:	0652      	lsls	r2, r2, #25
 8005a64:	0f52      	lsrs	r2, r2, #29
 8005a66:	b2d2      	uxtb	r2, r2
    switch (((ctrl_reg2.low_noise_en << 4) + (ctrl_reg2.one_shot << 3) +
 8005a68:	189b      	adds	r3, r3, r2
 8005a6a:	2b15      	cmp	r3, #21
 8005a6c:	d83c      	bhi.n	8005ae8 <lps22hh_data_rate_get+0xf4>
 8005a6e:	009a      	lsls	r2, r3, #2
 8005a70:	4b22      	ldr	r3, [pc, #136]	; (8005afc <lps22hh_data_rate_get+0x108>)
 8005a72:	18d3      	adds	r3, r2, r3
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	469f      	mov	pc, r3
    {
      case LPS22HH_POWER_DOWN:
        *val = LPS22HH_POWER_DOWN;
 8005a78:	683b      	ldr	r3, [r7, #0]
 8005a7a:	2200      	movs	r2, #0
 8005a7c:	701a      	strb	r2, [r3, #0]
        break;
 8005a7e:	e038      	b.n	8005af2 <lps22hh_data_rate_get+0xfe>

      case LPS22HH_ONE_SHOOT:
        *val = LPS22HH_ONE_SHOOT;
 8005a80:	683b      	ldr	r3, [r7, #0]
 8005a82:	2208      	movs	r2, #8
 8005a84:	701a      	strb	r2, [r3, #0]
        break;
 8005a86:	e034      	b.n	8005af2 <lps22hh_data_rate_get+0xfe>

      case LPS22HH_1_Hz:
        *val = LPS22HH_1_Hz;
 8005a88:	683b      	ldr	r3, [r7, #0]
 8005a8a:	2201      	movs	r2, #1
 8005a8c:	701a      	strb	r2, [r3, #0]
        break;
 8005a8e:	e030      	b.n	8005af2 <lps22hh_data_rate_get+0xfe>

      case LPS22HH_10_Hz:
        *val = LPS22HH_10_Hz;
 8005a90:	683b      	ldr	r3, [r7, #0]
 8005a92:	2202      	movs	r2, #2
 8005a94:	701a      	strb	r2, [r3, #0]
        break;
 8005a96:	e02c      	b.n	8005af2 <lps22hh_data_rate_get+0xfe>

      case LPS22HH_25_Hz:
        *val = LPS22HH_25_Hz;
 8005a98:	683b      	ldr	r3, [r7, #0]
 8005a9a:	2203      	movs	r2, #3
 8005a9c:	701a      	strb	r2, [r3, #0]
        break;
 8005a9e:	e028      	b.n	8005af2 <lps22hh_data_rate_get+0xfe>

      case LPS22HH_50_Hz:
        *val = LPS22HH_50_Hz;
 8005aa0:	683b      	ldr	r3, [r7, #0]
 8005aa2:	2204      	movs	r2, #4
 8005aa4:	701a      	strb	r2, [r3, #0]
        break;
 8005aa6:	e024      	b.n	8005af2 <lps22hh_data_rate_get+0xfe>

      case LPS22HH_75_Hz:
        *val = LPS22HH_75_Hz;
 8005aa8:	683b      	ldr	r3, [r7, #0]
 8005aaa:	2205      	movs	r2, #5
 8005aac:	701a      	strb	r2, [r3, #0]
        break;
 8005aae:	e020      	b.n	8005af2 <lps22hh_data_rate_get+0xfe>

      case LPS22HH_1_Hz_LOW_NOISE:
        *val = LPS22HH_1_Hz_LOW_NOISE;
 8005ab0:	683b      	ldr	r3, [r7, #0]
 8005ab2:	2211      	movs	r2, #17
 8005ab4:	701a      	strb	r2, [r3, #0]
        break;
 8005ab6:	e01c      	b.n	8005af2 <lps22hh_data_rate_get+0xfe>

      case LPS22HH_10_Hz_LOW_NOISE:
        *val = LPS22HH_10_Hz_LOW_NOISE;
 8005ab8:	683b      	ldr	r3, [r7, #0]
 8005aba:	2212      	movs	r2, #18
 8005abc:	701a      	strb	r2, [r3, #0]
        break;
 8005abe:	e018      	b.n	8005af2 <lps22hh_data_rate_get+0xfe>

      case LPS22HH_25_Hz_LOW_NOISE:
        *val = LPS22HH_25_Hz_LOW_NOISE;
 8005ac0:	683b      	ldr	r3, [r7, #0]
 8005ac2:	2213      	movs	r2, #19
 8005ac4:	701a      	strb	r2, [r3, #0]
        break;
 8005ac6:	e014      	b.n	8005af2 <lps22hh_data_rate_get+0xfe>

      case LPS22HH_50_Hz_LOW_NOISE:
        *val = LPS22HH_50_Hz_LOW_NOISE;
 8005ac8:	683b      	ldr	r3, [r7, #0]
 8005aca:	2214      	movs	r2, #20
 8005acc:	701a      	strb	r2, [r3, #0]
        break;
 8005ace:	e010      	b.n	8005af2 <lps22hh_data_rate_get+0xfe>

      case LPS22HH_75_Hz_LOW_NOISE:
        *val = LPS22HH_75_Hz_LOW_NOISE;
 8005ad0:	683b      	ldr	r3, [r7, #0]
 8005ad2:	2215      	movs	r2, #21
 8005ad4:	701a      	strb	r2, [r3, #0]
        break;
 8005ad6:	e00c      	b.n	8005af2 <lps22hh_data_rate_get+0xfe>

      case LPS22HH_100_Hz:
        *val = LPS22HH_100_Hz;
 8005ad8:	683b      	ldr	r3, [r7, #0]
 8005ada:	2206      	movs	r2, #6
 8005adc:	701a      	strb	r2, [r3, #0]
        break;
 8005ade:	e008      	b.n	8005af2 <lps22hh_data_rate_get+0xfe>

      case LPS22HH_200_Hz:
        *val = LPS22HH_200_Hz;
 8005ae0:	683b      	ldr	r3, [r7, #0]
 8005ae2:	2207      	movs	r2, #7
 8005ae4:	701a      	strb	r2, [r3, #0]
        break;
 8005ae6:	e004      	b.n	8005af2 <lps22hh_data_rate_get+0xfe>

      default:
        *val = LPS22HH_POWER_DOWN;
 8005ae8:	683b      	ldr	r3, [r7, #0]
 8005aea:	2200      	movs	r2, #0
 8005aec:	701a      	strb	r2, [r3, #0]
        break;
 8005aee:	e000      	b.n	8005af2 <lps22hh_data_rate_get+0xfe>
    }
  }
 8005af0:	46c0      	nop			; (mov r8, r8)

  return ret;
 8005af2:	697b      	ldr	r3, [r7, #20]
}
 8005af4:	0018      	movs	r0, r3
 8005af6:	46bd      	mov	sp, r7
 8005af8:	b007      	add	sp, #28
 8005afa:	bd90      	pop	{r4, r7, pc}
 8005afc:	080160f8 	.word	0x080160f8

08005b00 <lps22hh_pressure_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_pressure_raw_get(stmdev_ctx_t *ctx, uint32_t *buff)
{
 8005b00:	b590      	push	{r4, r7, lr}
 8005b02:	b085      	sub	sp, #20
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	6078      	str	r0, [r7, #4]
 8005b08:	6039      	str	r1, [r7, #0]
  int32_t ret;

  uint8_t reg[3];
  ret =  lps22hh_read_reg(ctx, LPS22HH_PRESS_OUT_XL, reg, 3);
 8005b0a:	2408      	movs	r4, #8
 8005b0c:	193a      	adds	r2, r7, r4
 8005b0e:	6878      	ldr	r0, [r7, #4]
 8005b10:	2303      	movs	r3, #3
 8005b12:	2128      	movs	r1, #40	; 0x28
 8005b14:	f7ff fe64 	bl	80057e0 <lps22hh_read_reg>
 8005b18:	0003      	movs	r3, r0
 8005b1a:	60fb      	str	r3, [r7, #12]
  *buff = reg[2];
 8005b1c:	0021      	movs	r1, r4
 8005b1e:	187b      	adds	r3, r7, r1
 8005b20:	789b      	ldrb	r3, [r3, #2]
 8005b22:	001a      	movs	r2, r3
 8005b24:	683b      	ldr	r3, [r7, #0]
 8005b26:	601a      	str	r2, [r3, #0]
  *buff = (*buff * 256) + reg[1];
 8005b28:	683b      	ldr	r3, [r7, #0]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	021b      	lsls	r3, r3, #8
 8005b2e:	187a      	adds	r2, r7, r1
 8005b30:	7852      	ldrb	r2, [r2, #1]
 8005b32:	189a      	adds	r2, r3, r2
 8005b34:	683b      	ldr	r3, [r7, #0]
 8005b36:	601a      	str	r2, [r3, #0]
  *buff = (*buff * 256) + reg[0];
 8005b38:	683b      	ldr	r3, [r7, #0]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	021b      	lsls	r3, r3, #8
 8005b3e:	187a      	adds	r2, r7, r1
 8005b40:	7812      	ldrb	r2, [r2, #0]
 8005b42:	189a      	adds	r2, r3, r2
 8005b44:	683b      	ldr	r3, [r7, #0]
 8005b46:	601a      	str	r2, [r3, #0]
  *buff *= 256;
 8005b48:	683b      	ldr	r3, [r7, #0]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	021a      	lsls	r2, r3, #8
 8005b4e:	683b      	ldr	r3, [r7, #0]
 8005b50:	601a      	str	r2, [r3, #0]

  return ret;
 8005b52:	68fb      	ldr	r3, [r7, #12]
}
 8005b54:	0018      	movs	r0, r3
 8005b56:	46bd      	mov	sp, r7
 8005b58:	b005      	add	sp, #20
 8005b5a:	bd90      	pop	{r4, r7, pc}

08005b5c <lps22hh_temperature_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_temperature_raw_get(stmdev_ctx_t *ctx, int16_t *buff)
{
 8005b5c:	b590      	push	{r4, r7, lr}
 8005b5e:	b085      	sub	sp, #20
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	6078      	str	r0, [r7, #4]
 8005b64:	6039      	str	r1, [r7, #0]
  int32_t ret;

  uint8_t reg[2];
  ret =  lps22hh_read_reg(ctx, LPS22HH_TEMP_OUT_L, reg, 2);
 8005b66:	2408      	movs	r4, #8
 8005b68:	193a      	adds	r2, r7, r4
 8005b6a:	6878      	ldr	r0, [r7, #4]
 8005b6c:	2302      	movs	r3, #2
 8005b6e:	212b      	movs	r1, #43	; 0x2b
 8005b70:	f7ff fe36 	bl	80057e0 <lps22hh_read_reg>
 8005b74:	0003      	movs	r3, r0
 8005b76:	60fb      	str	r3, [r7, #12]
  *buff = reg[1];
 8005b78:	0021      	movs	r1, r4
 8005b7a:	187b      	adds	r3, r7, r1
 8005b7c:	785b      	ldrb	r3, [r3, #1]
 8005b7e:	b21a      	sxth	r2, r3
 8005b80:	683b      	ldr	r3, [r7, #0]
 8005b82:	801a      	strh	r2, [r3, #0]
  *buff = (*buff * 256) + reg[0];
 8005b84:	683b      	ldr	r3, [r7, #0]
 8005b86:	2200      	movs	r2, #0
 8005b88:	5e9b      	ldrsh	r3, [r3, r2]
 8005b8a:	b29b      	uxth	r3, r3
 8005b8c:	021b      	lsls	r3, r3, #8
 8005b8e:	b29a      	uxth	r2, r3
 8005b90:	187b      	adds	r3, r7, r1
 8005b92:	781b      	ldrb	r3, [r3, #0]
 8005b94:	b29b      	uxth	r3, r3
 8005b96:	18d3      	adds	r3, r2, r3
 8005b98:	b29b      	uxth	r3, r3
 8005b9a:	b21a      	sxth	r2, r3
 8005b9c:	683b      	ldr	r3, [r7, #0]
 8005b9e:	801a      	strh	r2, [r3, #0]

  return ret;
 8005ba0:	68fb      	ldr	r3, [r7, #12]
}
 8005ba2:	0018      	movs	r0, r3
 8005ba4:	46bd      	mov	sp, r7
 8005ba6:	b005      	add	sp, #20
 8005ba8:	bd90      	pop	{r4, r7, pc}

08005baa <lps22hh_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8005baa:	b580      	push	{r7, lr}
 8005bac:	b084      	sub	sp, #16
 8005bae:	af00      	add	r7, sp, #0
 8005bb0:	6078      	str	r0, [r7, #4]
 8005bb2:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret =  lps22hh_read_reg(ctx, LPS22HH_WHO_AM_I, buff, 1);
 8005bb4:	683a      	ldr	r2, [r7, #0]
 8005bb6:	6878      	ldr	r0, [r7, #4]
 8005bb8:	2301      	movs	r3, #1
 8005bba:	210f      	movs	r1, #15
 8005bbc:	f7ff fe10 	bl	80057e0 <lps22hh_read_reg>
 8005bc0:	0003      	movs	r3, r0
 8005bc2:	60fb      	str	r3, [r7, #12]

  return ret;
 8005bc4:	68fb      	ldr	r3, [r7, #12]
}
 8005bc6:	0018      	movs	r0, r3
 8005bc8:	46bd      	mov	sp, r7
 8005bca:	b004      	add	sp, #16
 8005bcc:	bd80      	pop	{r7, pc}

08005bce <lps22hh_auto_increment_set>:
  * @param  val      change the values of if_add_inc in reg CTRL_REG2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8005bce:	b590      	push	{r4, r7, lr}
 8005bd0:	b085      	sub	sp, #20
 8005bd2:	af00      	add	r7, sp, #0
 8005bd4:	6078      	str	r0, [r7, #4]
 8005bd6:	000a      	movs	r2, r1
 8005bd8:	1cfb      	adds	r3, r7, #3
 8005bda:	701a      	strb	r2, [r3, #0]
  lps22hh_ctrl_reg2_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *) &reg, 1);
 8005bdc:	2408      	movs	r4, #8
 8005bde:	193a      	adds	r2, r7, r4
 8005be0:	6878      	ldr	r0, [r7, #4]
 8005be2:	2301      	movs	r3, #1
 8005be4:	2111      	movs	r1, #17
 8005be6:	f7ff fdfb 	bl	80057e0 <lps22hh_read_reg>
 8005bea:	0003      	movs	r3, r0
 8005bec:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d117      	bne.n	8005c24 <lps22hh_auto_increment_set+0x56>
  {
    reg.if_add_inc = val;
 8005bf4:	1cfb      	adds	r3, r7, #3
 8005bf6:	781b      	ldrb	r3, [r3, #0]
 8005bf8:	2201      	movs	r2, #1
 8005bfa:	4013      	ands	r3, r2
 8005bfc:	b2da      	uxtb	r2, r3
 8005bfe:	193b      	adds	r3, r7, r4
 8005c00:	2101      	movs	r1, #1
 8005c02:	400a      	ands	r2, r1
 8005c04:	0110      	lsls	r0, r2, #4
 8005c06:	781a      	ldrb	r2, [r3, #0]
 8005c08:	2110      	movs	r1, #16
 8005c0a:	438a      	bics	r2, r1
 8005c0c:	1c11      	adds	r1, r2, #0
 8005c0e:	1c02      	adds	r2, r0, #0
 8005c10:	430a      	orrs	r2, r1
 8005c12:	701a      	strb	r2, [r3, #0]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG2, (uint8_t *) &reg, 1);
 8005c14:	193a      	adds	r2, r7, r4
 8005c16:	6878      	ldr	r0, [r7, #4]
 8005c18:	2301      	movs	r3, #1
 8005c1a:	2111      	movs	r1, #17
 8005c1c:	f7ff fe01 	bl	8005822 <lps22hh_write_reg>
 8005c20:	0003      	movs	r3, r0
 8005c22:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8005c24:	68fb      	ldr	r3, [r7, #12]
}
 8005c26:	0018      	movs	r0, r3
 8005c28:	46bd      	mov	sp, r7
 8005c2a:	b005      	add	sp, #20
 8005c2c:	bd90      	pop	{r4, r7, pc}

08005c2e <lps22hh_lp_bandwidth_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_lp_bandwidth_set(stmdev_ctx_t *ctx,
                                 lps22hh_lpfp_cfg_t val)
{
 8005c2e:	b590      	push	{r4, r7, lr}
 8005c30:	b085      	sub	sp, #20
 8005c32:	af00      	add	r7, sp, #0
 8005c34:	6078      	str	r0, [r7, #4]
 8005c36:	000a      	movs	r2, r1
 8005c38:	1cfb      	adds	r3, r7, #3
 8005c3a:	701a      	strb	r2, [r3, #0]
  lps22hh_ctrl_reg1_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
 8005c3c:	2408      	movs	r4, #8
 8005c3e:	193a      	adds	r2, r7, r4
 8005c40:	6878      	ldr	r0, [r7, #4]
 8005c42:	2301      	movs	r3, #1
 8005c44:	2110      	movs	r1, #16
 8005c46:	f7ff fdcb 	bl	80057e0 <lps22hh_read_reg>
 8005c4a:	0003      	movs	r3, r0
 8005c4c:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d117      	bne.n	8005c84 <lps22hh_lp_bandwidth_set+0x56>
  {
    reg.lpfp_cfg = (uint8_t)val;
 8005c54:	1cfb      	adds	r3, r7, #3
 8005c56:	781b      	ldrb	r3, [r3, #0]
 8005c58:	2203      	movs	r2, #3
 8005c5a:	4013      	ands	r3, r2
 8005c5c:	b2da      	uxtb	r2, r3
 8005c5e:	193b      	adds	r3, r7, r4
 8005c60:	2103      	movs	r1, #3
 8005c62:	400a      	ands	r2, r1
 8005c64:	0090      	lsls	r0, r2, #2
 8005c66:	781a      	ldrb	r2, [r3, #0]
 8005c68:	210c      	movs	r1, #12
 8005c6a:	438a      	bics	r2, r1
 8005c6c:	1c11      	adds	r1, r2, #0
 8005c6e:	1c02      	adds	r2, r0, #0
 8005c70:	430a      	orrs	r2, r1
 8005c72:	701a      	strb	r2, [r3, #0]
    ret = lps22hh_write_reg(ctx, LPS22HH_CTRL_REG1, (uint8_t *) &reg, 1);
 8005c74:	193a      	adds	r2, r7, r4
 8005c76:	6878      	ldr	r0, [r7, #4]
 8005c78:	2301      	movs	r3, #1
 8005c7a:	2110      	movs	r1, #16
 8005c7c:	f7ff fdd1 	bl	8005822 <lps22hh_write_reg>
 8005c80:	0003      	movs	r3, r0
 8005c82:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8005c84:	68fb      	ldr	r3, [r7, #12]
}
 8005c86:	0018      	movs	r0, r3
 8005c88:	46bd      	mov	sp, r7
 8005c8a:	b005      	add	sp, #20
 8005c8c:	bd90      	pop	{r4, r7, pc}

08005c8e <lps22hh_i3c_interface_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lps22hh_i3c_interface_set(stmdev_ctx_t *ctx,
                                  lps22hh_i3c_disable_t val)
{
 8005c8e:	b590      	push	{r4, r7, lr}
 8005c90:	b085      	sub	sp, #20
 8005c92:	af00      	add	r7, sp, #0
 8005c94:	6078      	str	r0, [r7, #4]
 8005c96:	000a      	movs	r2, r1
 8005c98:	1cfb      	adds	r3, r7, #3
 8005c9a:	701a      	strb	r2, [r3, #0]
  lps22hh_if_ctrl_t reg;
  int32_t ret;

  ret = lps22hh_read_reg(ctx, LPS22HH_IF_CTRL, (uint8_t *) &reg, 1);
 8005c9c:	2408      	movs	r4, #8
 8005c9e:	193a      	adds	r2, r7, r4
 8005ca0:	6878      	ldr	r0, [r7, #4]
 8005ca2:	2301      	movs	r3, #1
 8005ca4:	210e      	movs	r1, #14
 8005ca6:	f7ff fd9b 	bl	80057e0 <lps22hh_read_reg>
 8005caa:	0003      	movs	r3, r0
 8005cac:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d127      	bne.n	8005d04 <lps22hh_i3c_interface_set+0x76>
  {
    reg.i3c_disable = ((uint8_t)val & 0x01u);
 8005cb4:	1cfb      	adds	r3, r7, #3
 8005cb6:	781b      	ldrb	r3, [r3, #0]
 8005cb8:	2201      	movs	r2, #1
 8005cba:	4013      	ands	r3, r2
 8005cbc:	b2da      	uxtb	r2, r3
 8005cbe:	193b      	adds	r3, r7, r4
 8005cc0:	2101      	movs	r1, #1
 8005cc2:	400a      	ands	r2, r1
 8005cc4:	1890      	adds	r0, r2, r2
 8005cc6:	781a      	ldrb	r2, [r3, #0]
 8005cc8:	2102      	movs	r1, #2
 8005cca:	438a      	bics	r2, r1
 8005ccc:	1c11      	adds	r1, r2, #0
 8005cce:	1c02      	adds	r2, r0, #0
 8005cd0:	430a      	orrs	r2, r1
 8005cd2:	701a      	strb	r2, [r3, #0]
    reg.int_en_i3c = ((uint8_t)val & 0x10U) >> 4;
 8005cd4:	1cfb      	adds	r3, r7, #3
 8005cd6:	781b      	ldrb	r3, [r3, #0]
 8005cd8:	091b      	lsrs	r3, r3, #4
 8005cda:	1c1a      	adds	r2, r3, #0
 8005cdc:	2301      	movs	r3, #1
 8005cde:	4013      	ands	r3, r2
 8005ce0:	b2da      	uxtb	r2, r3
 8005ce2:	193b      	adds	r3, r7, r4
 8005ce4:	01d0      	lsls	r0, r2, #7
 8005ce6:	781a      	ldrb	r2, [r3, #0]
 8005ce8:	217f      	movs	r1, #127	; 0x7f
 8005cea:	400a      	ands	r2, r1
 8005cec:	1c11      	adds	r1, r2, #0
 8005cee:	1c02      	adds	r2, r0, #0
 8005cf0:	430a      	orrs	r2, r1
 8005cf2:	701a      	strb	r2, [r3, #0]
    ret = lps22hh_write_reg(ctx, LPS22HH_IF_CTRL, (uint8_t *) &reg, 1);
 8005cf4:	193a      	adds	r2, r7, r4
 8005cf6:	6878      	ldr	r0, [r7, #4]
 8005cf8:	2301      	movs	r3, #1
 8005cfa:	210e      	movs	r1, #14
 8005cfc:	f7ff fd91 	bl	8005822 <lps22hh_write_reg>
 8005d00:	0003      	movs	r3, r0
 8005d02:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8005d04:	68fb      	ldr	r3, [r7, #12]
}
 8005d06:	0018      	movs	r0, r3
 8005d08:	46bd      	mov	sp, r7
 8005d0a:	b005      	add	sp, #20
 8005d0c:	bd90      	pop	{r4, r7, pc}
	...

08005d10 <LSM6DSO_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_RegisterBusIO(LSM6DSO_Object_t *pObj, LSM6DSO_IO_t *pIO)
{
 8005d10:	b580      	push	{r7, lr}
 8005d12:	b084      	sub	sp, #16
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	6078      	str	r0, [r7, #4]
 8005d18:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 8005d1a:	2300      	movs	r3, #0
 8005d1c:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d103      	bne.n	8005d2c <LSM6DSO_RegisterBusIO+0x1c>
  {
    ret = LSM6DSO_ERROR;
 8005d24:	2301      	movs	r3, #1
 8005d26:	425b      	negs	r3, r3
 8005d28:	60fb      	str	r3, [r7, #12]
 8005d2a:	e04e      	b.n	8005dca <LSM6DSO_RegisterBusIO+0xba>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8005d2c:	683b      	ldr	r3, [r7, #0]
 8005d2e:	681a      	ldr	r2, [r3, #0]
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8005d34:	683b      	ldr	r3, [r7, #0]
 8005d36:	685a      	ldr	r2, [r3, #4]
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8005d3c:	683b      	ldr	r3, [r7, #0]
 8005d3e:	689a      	ldr	r2, [r3, #8]
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8005d44:	683b      	ldr	r3, [r7, #0]
 8005d46:	7b1a      	ldrb	r2, [r3, #12]
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8005d4c:	683b      	ldr	r3, [r7, #0]
 8005d4e:	691a      	ldr	r2, [r3, #16]
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8005d54:	683b      	ldr	r3, [r7, #0]
 8005d56:	695a      	ldr	r2, [r3, #20]
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8005d5c:	683b      	ldr	r3, [r7, #0]
 8005d5e:	699a      	ldr	r2, [r3, #24]
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	4a1b      	ldr	r2, [pc, #108]	; (8005dd4 <LSM6DSO_RegisterBusIO+0xc4>)
 8005d68:	621a      	str	r2, [r3, #32]
    pObj->Ctx.write_reg = WriteRegWrap;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	4a1a      	ldr	r2, [pc, #104]	; (8005dd8 <LSM6DSO_RegisterBusIO+0xc8>)
 8005d6e:	61da      	str	r2, [r3, #28]
    pObj->Ctx.handle   = pObj;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	687a      	ldr	r2, [r7, #4]
 8005d74:	625a      	str	r2, [r3, #36]	; 0x24

    if (pObj->IO.Init == NULL)
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d103      	bne.n	8005d86 <LSM6DSO_RegisterBusIO+0x76>
    {
      ret = LSM6DSO_ERROR;
 8005d7e:	2301      	movs	r3, #1
 8005d80:	425b      	negs	r3, r3
 8005d82:	60fb      	str	r3, [r7, #12]
 8005d84:	e021      	b.n	8005dca <LSM6DSO_RegisterBusIO+0xba>
    }
    else if (pObj->IO.Init() != LSM6DSO_OK)
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	4798      	blx	r3
 8005d8c:	1e03      	subs	r3, r0, #0
 8005d8e:	d003      	beq.n	8005d98 <LSM6DSO_RegisterBusIO+0x88>
    {
      ret = LSM6DSO_ERROR;
 8005d90:	2301      	movs	r3, #1
 8005d92:	425b      	negs	r3, r3
 8005d94:	60fb      	str	r3, [r7, #12]
 8005d96:	e018      	b.n	8005dca <LSM6DSO_RegisterBusIO+0xba>
    }
    else
    {
      if (pObj->IO.BusType == LSM6DSO_SPI_3WIRES_BUS) /* SPI 3-Wires */
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	689b      	ldr	r3, [r3, #8]
 8005d9c:	2b02      	cmp	r3, #2
 8005d9e:	d114      	bne.n	8005dca <LSM6DSO_RegisterBusIO+0xba>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	2228      	movs	r2, #40	; 0x28
 8005da4:	5c9b      	ldrb	r3, [r3, r2]
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d10f      	bne.n	8005dca <LSM6DSO_RegisterBusIO+0xba>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x0C;
 8005daa:	210b      	movs	r1, #11
 8005dac:	187b      	adds	r3, r7, r1
 8005dae:	220c      	movs	r2, #12
 8005db0:	701a      	strb	r2, [r3, #0]

          if (LSM6DSO_Write_Reg(pObj, LSM6DSO_CTRL3_C, data) != LSM6DSO_OK)
 8005db2:	187b      	adds	r3, r7, r1
 8005db4:	781a      	ldrb	r2, [r3, #0]
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	2112      	movs	r1, #18
 8005dba:	0018      	movs	r0, r3
 8005dbc:	f000 ff16 	bl	8006bec <LSM6DSO_Write_Reg>
 8005dc0:	1e03      	subs	r3, r0, #0
 8005dc2:	d002      	beq.n	8005dca <LSM6DSO_RegisterBusIO+0xba>
          {
            ret = LSM6DSO_ERROR;
 8005dc4:	2301      	movs	r3, #1
 8005dc6:	425b      	negs	r3, r3
 8005dc8:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 8005dca:	68fb      	ldr	r3, [r7, #12]
}
 8005dcc:	0018      	movs	r0, r3
 8005dce:	46bd      	mov	sp, r7
 8005dd0:	b004      	add	sp, #16
 8005dd2:	bd80      	pop	{r7, pc}
 8005dd4:	08006fcd 	.word	0x08006fcd
 8005dd8:	08007011 	.word	0x08007011

08005ddc <LSM6DSO_Init>:
  * @brief  Initialize the LSM6DSO sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_Init(LSM6DSO_Object_t *pObj)
{
 8005ddc:	b580      	push	{r7, lr}
 8005dde:	b082      	sub	sp, #8
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	6078      	str	r0, [r7, #4]
  /* Disable I3C */
  if (lsm6dso_i3c_disable_set(&(pObj->Ctx), LSM6DSO_I3C_DISABLE) != LSM6DSO_OK)
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	331c      	adds	r3, #28
 8005de8:	2180      	movs	r1, #128	; 0x80
 8005dea:	0018      	movs	r0, r3
 8005dec:	f001 fecc 	bl	8007b88 <lsm6dso_i3c_disable_set>
 8005df0:	1e03      	subs	r3, r0, #0
 8005df2:	d002      	beq.n	8005dfa <LSM6DSO_Init+0x1e>
  {
    return LSM6DSO_ERROR;
 8005df4:	2301      	movs	r3, #1
 8005df6:	425b      	negs	r3, r3
 8005df8:	e059      	b.n	8005eae <LSM6DSO_Init+0xd2>
  }

  /* Enable register address automatically incremented during a multiple byte
  access with a serial interface. */
  if (lsm6dso_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSO_OK)
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	331c      	adds	r3, #28
 8005dfe:	2101      	movs	r1, #1
 8005e00:	0018      	movs	r0, r3
 8005e02:	f001 fe91 	bl	8007b28 <lsm6dso_auto_increment_set>
 8005e06:	1e03      	subs	r3, r0, #0
 8005e08:	d002      	beq.n	8005e10 <LSM6DSO_Init+0x34>
  {
    return LSM6DSO_ERROR;
 8005e0a:	2301      	movs	r3, #1
 8005e0c:	425b      	negs	r3, r3
 8005e0e:	e04e      	b.n	8005eae <LSM6DSO_Init+0xd2>
  }

  /* Enable BDU */
  if (lsm6dso_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSO_OK)
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	331c      	adds	r3, #28
 8005e14:	2101      	movs	r1, #1
 8005e16:	0018      	movs	r0, r3
 8005e18:	f001 fd70 	bl	80078fc <lsm6dso_block_data_update_set>
 8005e1c:	1e03      	subs	r3, r0, #0
 8005e1e:	d002      	beq.n	8005e26 <LSM6DSO_Init+0x4a>
  {
    return LSM6DSO_ERROR;
 8005e20:	2301      	movs	r3, #1
 8005e22:	425b      	negs	r3, r3
 8005e24:	e043      	b.n	8005eae <LSM6DSO_Init+0xd2>
  }

  /* FIFO mode selection */
  if (lsm6dso_fifo_mode_set(&(pObj->Ctx), LSM6DSO_BYPASS_MODE) != LSM6DSO_OK)
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	331c      	adds	r3, #28
 8005e2a:	2100      	movs	r1, #0
 8005e2c:	0018      	movs	r0, r3
 8005e2e:	f001 ff06 	bl	8007c3e <lsm6dso_fifo_mode_set>
 8005e32:	1e03      	subs	r3, r0, #0
 8005e34:	d002      	beq.n	8005e3c <LSM6DSO_Init+0x60>
  {
    return LSM6DSO_ERROR;
 8005e36:	2301      	movs	r3, #1
 8005e38:	425b      	negs	r3, r3
 8005e3a:	e038      	b.n	8005eae <LSM6DSO_Init+0xd2>
  }

  /* Select default output data rate. */
  pObj->acc_odr = LSM6DSO_XL_ODR_104Hz;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	222b      	movs	r2, #43	; 0x2b
 8005e40:	2104      	movs	r1, #4
 8005e42:	5499      	strb	r1, [r3, r2]

  /* Output data rate selection - power down. */
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	331c      	adds	r3, #28
 8005e48:	2100      	movs	r1, #0
 8005e4a:	0018      	movs	r0, r3
 8005e4c:	f001 f9ab 	bl	80071a6 <lsm6dso_xl_data_rate_set>
 8005e50:	1e03      	subs	r3, r0, #0
 8005e52:	d002      	beq.n	8005e5a <LSM6DSO_Init+0x7e>
  {
    return LSM6DSO_ERROR;
 8005e54:	2301      	movs	r3, #1
 8005e56:	425b      	negs	r3, r3
 8005e58:	e029      	b.n	8005eae <LSM6DSO_Init+0xd2>
  }

  /* Full scale selection. */
  if (lsm6dso_xl_full_scale_set(&(pObj->Ctx), LSM6DSO_2g) != LSM6DSO_OK)
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	331c      	adds	r3, #28
 8005e5e:	2100      	movs	r1, #0
 8005e60:	0018      	movs	r0, r3
 8005e62:	f001 f939 	bl	80070d8 <lsm6dso_xl_full_scale_set>
 8005e66:	1e03      	subs	r3, r0, #0
 8005e68:	d002      	beq.n	8005e70 <LSM6DSO_Init+0x94>
  {
    return LSM6DSO_ERROR;
 8005e6a:	2301      	movs	r3, #1
 8005e6c:	425b      	negs	r3, r3
 8005e6e:	e01e      	b.n	8005eae <LSM6DSO_Init+0xd2>
  }

  /* Select default output data rate. */
  pObj->gyro_odr = LSM6DSO_GY_ODR_104Hz;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	222c      	movs	r2, #44	; 0x2c
 8005e74:	2104      	movs	r1, #4
 8005e76:	5499      	strb	r1, [r3, r2]

  /* Output data rate selection - power down. */
  if (lsm6dso_gy_data_rate_set(&(pObj->Ctx), LSM6DSO_GY_ODR_OFF) != LSM6DSO_OK)
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	331c      	adds	r3, #28
 8005e7c:	2100      	movs	r1, #0
 8005e7e:	0018      	movs	r0, r3
 8005e80:	f001 fb9e 	bl	80075c0 <lsm6dso_gy_data_rate_set>
 8005e84:	1e03      	subs	r3, r0, #0
 8005e86:	d002      	beq.n	8005e8e <LSM6DSO_Init+0xb2>
  {
    return LSM6DSO_ERROR;
 8005e88:	2301      	movs	r3, #1
 8005e8a:	425b      	negs	r3, r3
 8005e8c:	e00f      	b.n	8005eae <LSM6DSO_Init+0xd2>
  }

  /* Full scale selection. */
  if (lsm6dso_gy_full_scale_set(&(pObj->Ctx), LSM6DSO_2000dps) != LSM6DSO_OK)
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	331c      	adds	r3, #28
 8005e92:	2106      	movs	r1, #6
 8005e94:	0018      	movs	r0, r3
 8005e96:	f001 fb29 	bl	80074ec <lsm6dso_gy_full_scale_set>
 8005e9a:	1e03      	subs	r3, r0, #0
 8005e9c:	d002      	beq.n	8005ea4 <LSM6DSO_Init+0xc8>
  {
    return LSM6DSO_ERROR;
 8005e9e:	2301      	movs	r3, #1
 8005ea0:	425b      	negs	r3, r3
 8005ea2:	e004      	b.n	8005eae <LSM6DSO_Init+0xd2>
  }

  pObj->is_initialized = 1;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	2228      	movs	r2, #40	; 0x28
 8005ea8:	2101      	movs	r1, #1
 8005eaa:	5499      	strb	r1, [r3, r2]

  return LSM6DSO_OK;
 8005eac:	2300      	movs	r3, #0
}
 8005eae:	0018      	movs	r0, r3
 8005eb0:	46bd      	mov	sp, r7
 8005eb2:	b002      	add	sp, #8
 8005eb4:	bd80      	pop	{r7, pc}

08005eb6 <LSM6DSO_DeInit>:
  * @brief  Deinitialize the LSM6DSO sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_DeInit(LSM6DSO_Object_t *pObj)
{
 8005eb6:	b580      	push	{r7, lr}
 8005eb8:	b082      	sub	sp, #8
 8005eba:	af00      	add	r7, sp, #0
 8005ebc:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LSM6DSO_ACC_Disable(pObj) != LSM6DSO_OK)
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	0018      	movs	r0, r3
 8005ec2:	f000 f884 	bl	8005fce <LSM6DSO_ACC_Disable>
 8005ec6:	1e03      	subs	r3, r0, #0
 8005ec8:	d002      	beq.n	8005ed0 <LSM6DSO_DeInit+0x1a>
  {
    return LSM6DSO_ERROR;
 8005eca:	2301      	movs	r3, #1
 8005ecc:	425b      	negs	r3, r3
 8005ece:	e015      	b.n	8005efc <LSM6DSO_DeInit+0x46>
  }

  if (LSM6DSO_GYRO_Disable(pObj) != LSM6DSO_OK)
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	0018      	movs	r0, r3
 8005ed4:	f000 fc0d 	bl	80066f2 <LSM6DSO_GYRO_Disable>
 8005ed8:	1e03      	subs	r3, r0, #0
 8005eda:	d002      	beq.n	8005ee2 <LSM6DSO_DeInit+0x2c>
  {
    return LSM6DSO_ERROR;
 8005edc:	2301      	movs	r3, #1
 8005ede:	425b      	negs	r3, r3
 8005ee0:	e00c      	b.n	8005efc <LSM6DSO_DeInit+0x46>
  }

  /* Reset output data rate. */
  pObj->acc_odr = LSM6DSO_XL_ODR_OFF;
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	222b      	movs	r2, #43	; 0x2b
 8005ee6:	2100      	movs	r1, #0
 8005ee8:	5499      	strb	r1, [r3, r2]
  pObj->gyro_odr = LSM6DSO_GY_ODR_OFF;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	222c      	movs	r2, #44	; 0x2c
 8005eee:	2100      	movs	r1, #0
 8005ef0:	5499      	strb	r1, [r3, r2]

  pObj->is_initialized = 0;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	2228      	movs	r2, #40	; 0x28
 8005ef6:	2100      	movs	r1, #0
 8005ef8:	5499      	strb	r1, [r3, r2]

  return LSM6DSO_OK;
 8005efa:	2300      	movs	r3, #0
}
 8005efc:	0018      	movs	r0, r3
 8005efe:	46bd      	mov	sp, r7
 8005f00:	b002      	add	sp, #8
 8005f02:	bd80      	pop	{r7, pc}

08005f04 <LSM6DSO_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ReadID(LSM6DSO_Object_t *pObj, uint8_t *Id)
{
 8005f04:	b580      	push	{r7, lr}
 8005f06:	b082      	sub	sp, #8
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	6078      	str	r0, [r7, #4]
 8005f0c:	6039      	str	r1, [r7, #0]
  if (lsm6dso_device_id_get(&(pObj->Ctx), Id) != LSM6DSO_OK)
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	331c      	adds	r3, #28
 8005f12:	683a      	ldr	r2, [r7, #0]
 8005f14:	0011      	movs	r1, r2
 8005f16:	0018      	movs	r0, r3
 8005f18:	f001 fdf4 	bl	8007b04 <lsm6dso_device_id_get>
 8005f1c:	1e03      	subs	r3, r0, #0
 8005f1e:	d002      	beq.n	8005f26 <LSM6DSO_ReadID+0x22>
  {
    return LSM6DSO_ERROR;
 8005f20:	2301      	movs	r3, #1
 8005f22:	425b      	negs	r3, r3
 8005f24:	e000      	b.n	8005f28 <LSM6DSO_ReadID+0x24>
  }

  return LSM6DSO_OK;
 8005f26:	2300      	movs	r3, #0
}
 8005f28:	0018      	movs	r0, r3
 8005f2a:	46bd      	mov	sp, r7
 8005f2c:	b002      	add	sp, #8
 8005f2e:	bd80      	pop	{r7, pc}

08005f30 <LSM6DSO_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to LSM6DSO sensor capabilities
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GetCapabilities(LSM6DSO_Object_t *pObj, LSM6DSO_Capabilities_t *Capabilities)
{
 8005f30:	b580      	push	{r7, lr}
 8005f32:	b082      	sub	sp, #8
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	6078      	str	r0, [r7, #4]
 8005f38:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 1;
 8005f3a:	683b      	ldr	r3, [r7, #0]
 8005f3c:	2201      	movs	r2, #1
 8005f3e:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 1;
 8005f40:	683b      	ldr	r3, [r7, #0]
 8005f42:	2201      	movs	r2, #1
 8005f44:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 0;
 8005f46:	683b      	ldr	r3, [r7, #0]
 8005f48:	2200      	movs	r2, #0
 8005f4a:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 8005f4c:	683b      	ldr	r3, [r7, #0]
 8005f4e:	2200      	movs	r2, #0
 8005f50:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 2000;
 8005f52:	683b      	ldr	r3, [r7, #0]
 8005f54:	22fa      	movs	r2, #250	; 0xfa
 8005f56:	00d2      	lsls	r2, r2, #3
 8005f58:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 16;
 8005f5a:	683b      	ldr	r3, [r7, #0]
 8005f5c:	2210      	movs	r2, #16
 8005f5e:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 0;
 8005f60:	683b      	ldr	r3, [r7, #0]
 8005f62:	2200      	movs	r2, #0
 8005f64:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 6660.0f;
 8005f66:	683b      	ldr	r3, [r7, #0]
 8005f68:	4a06      	ldr	r2, [pc, #24]	; (8005f84 <LSM6DSO_GetCapabilities+0x54>)
 8005f6a:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 6660.0f;
 8005f6c:	683b      	ldr	r3, [r7, #0]
 8005f6e:	4a05      	ldr	r2, [pc, #20]	; (8005f84 <LSM6DSO_GetCapabilities+0x54>)
 8005f70:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 0.0f;
 8005f72:	683b      	ldr	r3, [r7, #0]
 8005f74:	2200      	movs	r2, #0
 8005f76:	619a      	str	r2, [r3, #24]
  return LSM6DSO_OK;
 8005f78:	2300      	movs	r3, #0
}
 8005f7a:	0018      	movs	r0, r3
 8005f7c:	46bd      	mov	sp, r7
 8005f7e:	b002      	add	sp, #8
 8005f80:	bd80      	pop	{r7, pc}
 8005f82:	46c0      	nop			; (mov r8, r8)
 8005f84:	45d02000 	.word	0x45d02000

08005f88 <LSM6DSO_ACC_Enable>:
  * @brief  Enable the LSM6DSO accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_Enable(LSM6DSO_Object_t *pObj)
{
 8005f88:	b580      	push	{r7, lr}
 8005f8a:	b082      	sub	sp, #8
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	2229      	movs	r2, #41	; 0x29
 8005f94:	5c9b      	ldrb	r3, [r3, r2]
 8005f96:	2b01      	cmp	r3, #1
 8005f98:	d101      	bne.n	8005f9e <LSM6DSO_ACC_Enable+0x16>
  {
    return LSM6DSO_OK;
 8005f9a:	2300      	movs	r3, #0
 8005f9c:	e013      	b.n	8005fc6 <LSM6DSO_ACC_Enable+0x3e>
  }

  /* Output data rate selection. */
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), pObj->acc_odr) != LSM6DSO_OK)
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	331c      	adds	r3, #28
 8005fa2:	001a      	movs	r2, r3
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	212b      	movs	r1, #43	; 0x2b
 8005fa8:	5c5b      	ldrb	r3, [r3, r1]
 8005faa:	0019      	movs	r1, r3
 8005fac:	0010      	movs	r0, r2
 8005fae:	f001 f8fa 	bl	80071a6 <lsm6dso_xl_data_rate_set>
 8005fb2:	1e03      	subs	r3, r0, #0
 8005fb4:	d002      	beq.n	8005fbc <LSM6DSO_ACC_Enable+0x34>
  {
    return LSM6DSO_ERROR;
 8005fb6:	2301      	movs	r3, #1
 8005fb8:	425b      	negs	r3, r3
 8005fba:	e004      	b.n	8005fc6 <LSM6DSO_ACC_Enable+0x3e>
  }

  pObj->acc_is_enabled = 1;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	2229      	movs	r2, #41	; 0x29
 8005fc0:	2101      	movs	r1, #1
 8005fc2:	5499      	strb	r1, [r3, r2]

  return LSM6DSO_OK;
 8005fc4:	2300      	movs	r3, #0
}
 8005fc6:	0018      	movs	r0, r3
 8005fc8:	46bd      	mov	sp, r7
 8005fca:	b002      	add	sp, #8
 8005fcc:	bd80      	pop	{r7, pc}

08005fce <LSM6DSO_ACC_Disable>:
  * @brief  Disable the LSM6DSO accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_Disable(LSM6DSO_Object_t *pObj)
{
 8005fce:	b580      	push	{r7, lr}
 8005fd0:	b082      	sub	sp, #8
 8005fd2:	af00      	add	r7, sp, #0
 8005fd4:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->acc_is_enabled == 0U)
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	2229      	movs	r2, #41	; 0x29
 8005fda:	5c9b      	ldrb	r3, [r3, r2]
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d101      	bne.n	8005fe4 <LSM6DSO_ACC_Disable+0x16>
  {
    return LSM6DSO_OK;
 8005fe0:	2300      	movs	r3, #0
 8005fe2:	e01d      	b.n	8006020 <LSM6DSO_ACC_Disable+0x52>
  }

  /* Get current output data rate. */
  if (lsm6dso_xl_data_rate_get(&(pObj->Ctx), &pObj->acc_odr) != LSM6DSO_OK)
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	331c      	adds	r3, #28
 8005fe8:	001a      	movs	r2, r3
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	332b      	adds	r3, #43	; 0x2b
 8005fee:	0019      	movs	r1, r3
 8005ff0:	0010      	movs	r0, r2
 8005ff2:	f001 fa25 	bl	8007440 <lsm6dso_xl_data_rate_get>
 8005ff6:	1e03      	subs	r3, r0, #0
 8005ff8:	d002      	beq.n	8006000 <LSM6DSO_ACC_Disable+0x32>
  {
    return LSM6DSO_ERROR;
 8005ffa:	2301      	movs	r3, #1
 8005ffc:	425b      	negs	r3, r3
 8005ffe:	e00f      	b.n	8006020 <LSM6DSO_ACC_Disable+0x52>
  }

  /* Output data rate selection - power down. */
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	331c      	adds	r3, #28
 8006004:	2100      	movs	r1, #0
 8006006:	0018      	movs	r0, r3
 8006008:	f001 f8cd 	bl	80071a6 <lsm6dso_xl_data_rate_set>
 800600c:	1e03      	subs	r3, r0, #0
 800600e:	d002      	beq.n	8006016 <LSM6DSO_ACC_Disable+0x48>
  {
    return LSM6DSO_ERROR;
 8006010:	2301      	movs	r3, #1
 8006012:	425b      	negs	r3, r3
 8006014:	e004      	b.n	8006020 <LSM6DSO_ACC_Disable+0x52>
  }

  pObj->acc_is_enabled = 0;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	2229      	movs	r2, #41	; 0x29
 800601a:	2100      	movs	r1, #0
 800601c:	5499      	strb	r1, [r3, r2]

  return LSM6DSO_OK;
 800601e:	2300      	movs	r3, #0
}
 8006020:	0018      	movs	r0, r3
 8006022:	46bd      	mov	sp, r7
 8006024:	b002      	add	sp, #8
 8006026:	bd80      	pop	{r7, pc}

08006028 <LSM6DSO_ACC_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_GetSensitivity(LSM6DSO_Object_t *pObj, float_t *Sensitivity)
{
 8006028:	b580      	push	{r7, lr}
 800602a:	b084      	sub	sp, #16
 800602c:	af00      	add	r7, sp, #0
 800602e:	6078      	str	r0, [r7, #4]
 8006030:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 8006032:	2300      	movs	r3, #0
 8006034:	60fb      	str	r3, [r7, #12]
  lsm6dso_fs_xl_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lsm6dso_xl_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSO_OK)
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	331c      	adds	r3, #28
 800603a:	220b      	movs	r2, #11
 800603c:	18ba      	adds	r2, r7, r2
 800603e:	0011      	movs	r1, r2
 8006040:	0018      	movs	r0, r3
 8006042:	f001 f879 	bl	8007138 <lsm6dso_xl_full_scale_get>
 8006046:	1e03      	subs	r3, r0, #0
 8006048:	d002      	beq.n	8006050 <LSM6DSO_ACC_GetSensitivity+0x28>
  {
    return LSM6DSO_ERROR;
 800604a:	2301      	movs	r3, #1
 800604c:	425b      	negs	r3, r3
 800604e:	e022      	b.n	8006096 <LSM6DSO_ACC_GetSensitivity+0x6e>
  }

  /* Store the Sensitivity based on actual full scale. */
  switch (full_scale)
 8006050:	230b      	movs	r3, #11
 8006052:	18fb      	adds	r3, r7, r3
 8006054:	781b      	ldrb	r3, [r3, #0]
 8006056:	2b03      	cmp	r3, #3
 8006058:	d010      	beq.n	800607c <LSM6DSO_ACC_GetSensitivity+0x54>
 800605a:	dc17      	bgt.n	800608c <LSM6DSO_ACC_GetSensitivity+0x64>
 800605c:	2b02      	cmp	r3, #2
 800605e:	d009      	beq.n	8006074 <LSM6DSO_ACC_GetSensitivity+0x4c>
 8006060:	dc14      	bgt.n	800608c <LSM6DSO_ACC_GetSensitivity+0x64>
 8006062:	2b00      	cmp	r3, #0
 8006064:	d002      	beq.n	800606c <LSM6DSO_ACC_GetSensitivity+0x44>
 8006066:	2b01      	cmp	r3, #1
 8006068:	d00c      	beq.n	8006084 <LSM6DSO_ACC_GetSensitivity+0x5c>
 800606a:	e00f      	b.n	800608c <LSM6DSO_ACC_GetSensitivity+0x64>
  {
    case LSM6DSO_2g:
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_2G;
 800606c:	683b      	ldr	r3, [r7, #0]
 800606e:	4a0c      	ldr	r2, [pc, #48]	; (80060a0 <LSM6DSO_ACC_GetSensitivity+0x78>)
 8006070:	601a      	str	r2, [r3, #0]
      break;
 8006072:	e00f      	b.n	8006094 <LSM6DSO_ACC_GetSensitivity+0x6c>

    case LSM6DSO_4g:
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_4G;
 8006074:	683b      	ldr	r3, [r7, #0]
 8006076:	4a0b      	ldr	r2, [pc, #44]	; (80060a4 <LSM6DSO_ACC_GetSensitivity+0x7c>)
 8006078:	601a      	str	r2, [r3, #0]
      break;
 800607a:	e00b      	b.n	8006094 <LSM6DSO_ACC_GetSensitivity+0x6c>

    case LSM6DSO_8g:
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_8G;
 800607c:	683b      	ldr	r3, [r7, #0]
 800607e:	4a0a      	ldr	r2, [pc, #40]	; (80060a8 <LSM6DSO_ACC_GetSensitivity+0x80>)
 8006080:	601a      	str	r2, [r3, #0]
      break;
 8006082:	e007      	b.n	8006094 <LSM6DSO_ACC_GetSensitivity+0x6c>

    case LSM6DSO_16g:
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_16G;
 8006084:	683b      	ldr	r3, [r7, #0]
 8006086:	4a09      	ldr	r2, [pc, #36]	; (80060ac <LSM6DSO_ACC_GetSensitivity+0x84>)
 8006088:	601a      	str	r2, [r3, #0]
      break;
 800608a:	e003      	b.n	8006094 <LSM6DSO_ACC_GetSensitivity+0x6c>

    default:
      ret = LSM6DSO_ERROR;
 800608c:	2301      	movs	r3, #1
 800608e:	425b      	negs	r3, r3
 8006090:	60fb      	str	r3, [r7, #12]
      break;
 8006092:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 8006094:	68fb      	ldr	r3, [r7, #12]
}
 8006096:	0018      	movs	r0, r3
 8006098:	46bd      	mov	sp, r7
 800609a:	b004      	add	sp, #16
 800609c:	bd80      	pop	{r7, pc}
 800609e:	46c0      	nop			; (mov r8, r8)
 80060a0:	3d79db23 	.word	0x3d79db23
 80060a4:	3df9db23 	.word	0x3df9db23
 80060a8:	3e79db23 	.word	0x3e79db23
 80060ac:	3ef9db23 	.word	0x3ef9db23

080060b0 <LSM6DSO_ACC_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_GetOutputDataRate(LSM6DSO_Object_t *pObj, float_t *Odr)
{
 80060b0:	b580      	push	{r7, lr}
 80060b2:	b084      	sub	sp, #16
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	6078      	str	r0, [r7, #4]
 80060b8:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 80060ba:	2300      	movs	r3, #0
 80060bc:	60fb      	str	r3, [r7, #12]
  lsm6dso_odr_xl_t odr_low_level;

  /* Get current output data rate. */
  if (lsm6dso_xl_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM6DSO_OK)
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	331c      	adds	r3, #28
 80060c2:	220b      	movs	r2, #11
 80060c4:	18ba      	adds	r2, r7, r2
 80060c6:	0011      	movs	r1, r2
 80060c8:	0018      	movs	r0, r3
 80060ca:	f001 f9b9 	bl	8007440 <lsm6dso_xl_data_rate_get>
 80060ce:	1e03      	subs	r3, r0, #0
 80060d0:	d002      	beq.n	80060d8 <LSM6DSO_ACC_GetOutputDataRate+0x28>
  {
    return LSM6DSO_ERROR;
 80060d2:	2301      	movs	r3, #1
 80060d4:	425b      	negs	r3, r3
 80060d6:	e03e      	b.n	8006156 <LSM6DSO_ACC_GetOutputDataRate+0xa6>
  }

  switch (odr_low_level)
 80060d8:	230b      	movs	r3, #11
 80060da:	18fb      	adds	r3, r7, r3
 80060dc:	781b      	ldrb	r3, [r3, #0]
 80060de:	2b0b      	cmp	r3, #11
 80060e0:	d834      	bhi.n	800614c <LSM6DSO_ACC_GetOutputDataRate+0x9c>
 80060e2:	009a      	lsls	r2, r3, #2
 80060e4:	4b1e      	ldr	r3, [pc, #120]	; (8006160 <LSM6DSO_ACC_GetOutputDataRate+0xb0>)
 80060e6:	18d3      	adds	r3, r2, r3
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	469f      	mov	pc, r3
  {
    case LSM6DSO_XL_ODR_OFF:
      *Odr = 0.0f;
 80060ec:	683b      	ldr	r3, [r7, #0]
 80060ee:	2200      	movs	r2, #0
 80060f0:	601a      	str	r2, [r3, #0]
      break;
 80060f2:	e02f      	b.n	8006154 <LSM6DSO_ACC_GetOutputDataRate+0xa4>

    case LSM6DSO_XL_ODR_1Hz6:
      *Odr = 1.6f;
 80060f4:	683b      	ldr	r3, [r7, #0]
 80060f6:	4a1b      	ldr	r2, [pc, #108]	; (8006164 <LSM6DSO_ACC_GetOutputDataRate+0xb4>)
 80060f8:	601a      	str	r2, [r3, #0]
      break;
 80060fa:	e02b      	b.n	8006154 <LSM6DSO_ACC_GetOutputDataRate+0xa4>

    case LSM6DSO_XL_ODR_12Hz5:
      *Odr = 12.5f;
 80060fc:	683b      	ldr	r3, [r7, #0]
 80060fe:	4a1a      	ldr	r2, [pc, #104]	; (8006168 <LSM6DSO_ACC_GetOutputDataRate+0xb8>)
 8006100:	601a      	str	r2, [r3, #0]
      break;
 8006102:	e027      	b.n	8006154 <LSM6DSO_ACC_GetOutputDataRate+0xa4>

    case LSM6DSO_XL_ODR_26Hz:
      *Odr = 26.0f;
 8006104:	683b      	ldr	r3, [r7, #0]
 8006106:	4a19      	ldr	r2, [pc, #100]	; (800616c <LSM6DSO_ACC_GetOutputDataRate+0xbc>)
 8006108:	601a      	str	r2, [r3, #0]
      break;
 800610a:	e023      	b.n	8006154 <LSM6DSO_ACC_GetOutputDataRate+0xa4>

    case LSM6DSO_XL_ODR_52Hz:
      *Odr = 52.0f;
 800610c:	683b      	ldr	r3, [r7, #0]
 800610e:	4a18      	ldr	r2, [pc, #96]	; (8006170 <LSM6DSO_ACC_GetOutputDataRate+0xc0>)
 8006110:	601a      	str	r2, [r3, #0]
      break;
 8006112:	e01f      	b.n	8006154 <LSM6DSO_ACC_GetOutputDataRate+0xa4>

    case LSM6DSO_XL_ODR_104Hz:
      *Odr = 104.0f;
 8006114:	683b      	ldr	r3, [r7, #0]
 8006116:	4a17      	ldr	r2, [pc, #92]	; (8006174 <LSM6DSO_ACC_GetOutputDataRate+0xc4>)
 8006118:	601a      	str	r2, [r3, #0]
      break;
 800611a:	e01b      	b.n	8006154 <LSM6DSO_ACC_GetOutputDataRate+0xa4>

    case LSM6DSO_XL_ODR_208Hz:
      *Odr = 208.0f;
 800611c:	683b      	ldr	r3, [r7, #0]
 800611e:	4a16      	ldr	r2, [pc, #88]	; (8006178 <LSM6DSO_ACC_GetOutputDataRate+0xc8>)
 8006120:	601a      	str	r2, [r3, #0]
      break;
 8006122:	e017      	b.n	8006154 <LSM6DSO_ACC_GetOutputDataRate+0xa4>

    case LSM6DSO_XL_ODR_417Hz:
      *Odr = 417.0f;
 8006124:	683b      	ldr	r3, [r7, #0]
 8006126:	4a15      	ldr	r2, [pc, #84]	; (800617c <LSM6DSO_ACC_GetOutputDataRate+0xcc>)
 8006128:	601a      	str	r2, [r3, #0]
      break;
 800612a:	e013      	b.n	8006154 <LSM6DSO_ACC_GetOutputDataRate+0xa4>

    case LSM6DSO_XL_ODR_833Hz:
      *Odr = 833.0f;
 800612c:	683b      	ldr	r3, [r7, #0]
 800612e:	4a14      	ldr	r2, [pc, #80]	; (8006180 <LSM6DSO_ACC_GetOutputDataRate+0xd0>)
 8006130:	601a      	str	r2, [r3, #0]
      break;
 8006132:	e00f      	b.n	8006154 <LSM6DSO_ACC_GetOutputDataRate+0xa4>

    case LSM6DSO_XL_ODR_1667Hz:
      *Odr = 1667.0f;
 8006134:	683b      	ldr	r3, [r7, #0]
 8006136:	4a13      	ldr	r2, [pc, #76]	; (8006184 <LSM6DSO_ACC_GetOutputDataRate+0xd4>)
 8006138:	601a      	str	r2, [r3, #0]
      break;
 800613a:	e00b      	b.n	8006154 <LSM6DSO_ACC_GetOutputDataRate+0xa4>

    case LSM6DSO_XL_ODR_3333Hz:
      *Odr = 3333.0f;
 800613c:	683b      	ldr	r3, [r7, #0]
 800613e:	4a12      	ldr	r2, [pc, #72]	; (8006188 <LSM6DSO_ACC_GetOutputDataRate+0xd8>)
 8006140:	601a      	str	r2, [r3, #0]
      break;
 8006142:	e007      	b.n	8006154 <LSM6DSO_ACC_GetOutputDataRate+0xa4>

    case LSM6DSO_XL_ODR_6667Hz:
      *Odr = 6667.0f;
 8006144:	683b      	ldr	r3, [r7, #0]
 8006146:	4a11      	ldr	r2, [pc, #68]	; (800618c <LSM6DSO_ACC_GetOutputDataRate+0xdc>)
 8006148:	601a      	str	r2, [r3, #0]
      break;
 800614a:	e003      	b.n	8006154 <LSM6DSO_ACC_GetOutputDataRate+0xa4>

    default:
      ret = LSM6DSO_ERROR;
 800614c:	2301      	movs	r3, #1
 800614e:	425b      	negs	r3, r3
 8006150:	60fb      	str	r3, [r7, #12]
      break;
 8006152:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 8006154:	68fb      	ldr	r3, [r7, #12]
}
 8006156:	0018      	movs	r0, r3
 8006158:	46bd      	mov	sp, r7
 800615a:	b004      	add	sp, #16
 800615c:	bd80      	pop	{r7, pc}
 800615e:	46c0      	nop			; (mov r8, r8)
 8006160:	08016150 	.word	0x08016150
 8006164:	3fcccccd 	.word	0x3fcccccd
 8006168:	41480000 	.word	0x41480000
 800616c:	41d00000 	.word	0x41d00000
 8006170:	42500000 	.word	0x42500000
 8006174:	42d00000 	.word	0x42d00000
 8006178:	43500000 	.word	0x43500000
 800617c:	43d08000 	.word	0x43d08000
 8006180:	44504000 	.word	0x44504000
 8006184:	44d06000 	.word	0x44d06000
 8006188:	45505000 	.word	0x45505000
 800618c:	45d05800 	.word	0x45d05800

08006190 <LSM6DSO_ACC_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_SetOutputDataRate(LSM6DSO_Object_t *pObj, float_t Odr)
{
 8006190:	b580      	push	{r7, lr}
 8006192:	b082      	sub	sp, #8
 8006194:	af00      	add	r7, sp, #0
 8006196:	6078      	str	r0, [r7, #4]
 8006198:	6039      	str	r1, [r7, #0]
  return LSM6DSO_ACC_SetOutputDataRate_With_Mode(pObj, Odr, LSM6DSO_ACC_HIGH_PERFORMANCE_MODE);
 800619a:	6839      	ldr	r1, [r7, #0]
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	2200      	movs	r2, #0
 80061a0:	0018      	movs	r0, r3
 80061a2:	f000 f805 	bl	80061b0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode>
 80061a6:	0003      	movs	r3, r0
}
 80061a8:	0018      	movs	r0, r3
 80061aa:	46bd      	mov	sp, r7
 80061ac:	b002      	add	sp, #8
 80061ae:	bd80      	pop	{r7, pc}

080061b0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode>:
  * @param  Mode the accelerometer operating mode
  * @note   This function switches off the gyroscope if Ultra Low Power Mode is set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_SetOutputDataRate_With_Mode(LSM6DSO_Object_t *pObj, float_t Odr, LSM6DSO_ACC_Operating_Mode_t Mode)
{
 80061b0:	b590      	push	{r4, r7, lr}
 80061b2:	b08d      	sub	sp, #52	; 0x34
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	60f8      	str	r0, [r7, #12]
 80061b8:	60b9      	str	r1, [r7, #8]
 80061ba:	1dfb      	adds	r3, r7, #7
 80061bc:	701a      	strb	r2, [r3, #0]
  int32_t ret = LSM6DSO_OK;
 80061be:	2300      	movs	r3, #0
 80061c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  float_t newOdr = Odr;
 80061c2:	68bb      	ldr	r3, [r7, #8]
 80061c4:	62bb      	str	r3, [r7, #40]	; 0x28

  switch (Mode)
 80061c6:	1dfb      	adds	r3, r7, #7
 80061c8:	781b      	ldrb	r3, [r3, #0]
 80061ca:	2b02      	cmp	r3, #2
 80061cc:	d100      	bne.n	80061d0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x20>
 80061ce:	e0dd      	b.n	800638c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1dc>
 80061d0:	dd00      	ble.n	80061d4 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x24>
 80061d2:	e155      	b.n	8006480 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2d0>
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d003      	beq.n	80061e0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x30>
 80061d8:	2b01      	cmp	r3, #1
 80061da:	d100      	bne.n	80061de <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2e>
 80061dc:	e06b      	b.n	80062b6 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x106>
 80061de:	e14f      	b.n	8006480 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2d0>
    {
      /* We must uncheck Low Power and Ultra Low Power bits if they are enabled */
      lsm6dso_ctrl5_c_t val1;
      lsm6dso_ctrl6_c_t val2;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	331c      	adds	r3, #28
 80061e4:	0018      	movs	r0, r3
 80061e6:	2324      	movs	r3, #36	; 0x24
 80061e8:	18fa      	adds	r2, r7, r3
 80061ea:	2301      	movs	r3, #1
 80061ec:	2114      	movs	r1, #20
 80061ee:	f000 ff31 	bl	8007054 <lsm6dso_read_reg>
 80061f2:	1e03      	subs	r3, r0, #0
 80061f4:	d002      	beq.n	80061fc <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x4c>
      {
        return LSM6DSO_ERROR;
 80061f6:	2301      	movs	r3, #1
 80061f8:	425b      	negs	r3, r3
 80061fa:	e162      	b.n	80064c2 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x312>
      }

      if (val1.xl_ulp_en != 0U)
 80061fc:	2324      	movs	r3, #36	; 0x24
 80061fe:	18fb      	adds	r3, r7, r3
 8006200:	781b      	ldrb	r3, [r3, #0]
 8006202:	227f      	movs	r2, #127	; 0x7f
 8006204:	4393      	bics	r3, r2
 8006206:	b2db      	uxtb	r3, r3
 8006208:	2b00      	cmp	r3, #0
 800620a:	d022      	beq.n	8006252 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xa2>
      {
        /* Power off the accelerometer */
        if (pObj->acc_is_enabled == 1U)
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	2229      	movs	r2, #41	; 0x29
 8006210:	5c9b      	ldrb	r3, [r3, r2]
 8006212:	2b01      	cmp	r3, #1
 8006214:	d10a      	bne.n	800622c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x7c>
        {
          if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	331c      	adds	r3, #28
 800621a:	2100      	movs	r1, #0
 800621c:	0018      	movs	r0, r3
 800621e:	f000 ffc2 	bl	80071a6 <lsm6dso_xl_data_rate_set>
 8006222:	1e03      	subs	r3, r0, #0
 8006224:	d002      	beq.n	800622c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x7c>
          {
            return LSM6DSO_ERROR;
 8006226:	2301      	movs	r3, #1
 8006228:	425b      	negs	r3, r3
 800622a:	e14a      	b.n	80064c2 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x312>
          }
        }

        val1.xl_ulp_en = 0;
 800622c:	2424      	movs	r4, #36	; 0x24
 800622e:	193b      	adds	r3, r7, r4
 8006230:	781a      	ldrb	r2, [r3, #0]
 8006232:	217f      	movs	r1, #127	; 0x7f
 8006234:	400a      	ands	r2, r1
 8006236:	701a      	strb	r2, [r3, #0]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	331c      	adds	r3, #28
 800623c:	0018      	movs	r0, r3
 800623e:	193a      	adds	r2, r7, r4
 8006240:	2301      	movs	r3, #1
 8006242:	2114      	movs	r1, #20
 8006244:	f000 ff27 	bl	8007096 <lsm6dso_write_reg>
 8006248:	1e03      	subs	r3, r0, #0
 800624a:	d002      	beq.n	8006252 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xa2>
        {
          return LSM6DSO_ERROR;
 800624c:	2301      	movs	r3, #1
 800624e:	425b      	negs	r3, r3
 8006250:	e137      	b.n	80064c2 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x312>
        }
      }

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	331c      	adds	r3, #28
 8006256:	0018      	movs	r0, r3
 8006258:	2320      	movs	r3, #32
 800625a:	18fa      	adds	r2, r7, r3
 800625c:	2301      	movs	r3, #1
 800625e:	2115      	movs	r1, #21
 8006260:	f000 fef8 	bl	8007054 <lsm6dso_read_reg>
 8006264:	1e03      	subs	r3, r0, #0
 8006266:	d002      	beq.n	800626e <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xbe>
      {
        return LSM6DSO_ERROR;
 8006268:	2301      	movs	r3, #1
 800626a:	425b      	negs	r3, r3
 800626c:	e129      	b.n	80064c2 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x312>
      }

      if (val2.xl_hm_mode != 0U)
 800626e:	2420      	movs	r4, #32
 8006270:	193b      	adds	r3, r7, r4
 8006272:	781b      	ldrb	r3, [r3, #0]
 8006274:	2210      	movs	r2, #16
 8006276:	4013      	ands	r3, r2
 8006278:	b2db      	uxtb	r3, r3
 800627a:	2b00      	cmp	r3, #0
 800627c:	d011      	beq.n	80062a2 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xf2>
      {
        val2.xl_hm_mode = 0U;
 800627e:	193b      	adds	r3, r7, r4
 8006280:	781a      	ldrb	r2, [r3, #0]
 8006282:	2110      	movs	r1, #16
 8006284:	438a      	bics	r2, r1
 8006286:	701a      	strb	r2, [r3, #0]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	331c      	adds	r3, #28
 800628c:	0018      	movs	r0, r3
 800628e:	193a      	adds	r2, r7, r4
 8006290:	2301      	movs	r3, #1
 8006292:	2115      	movs	r1, #21
 8006294:	f000 feff 	bl	8007096 <lsm6dso_write_reg>
 8006298:	1e03      	subs	r3, r0, #0
 800629a:	d002      	beq.n	80062a2 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xf2>
        {
          return LSM6DSO_ERROR;
 800629c:	2301      	movs	r3, #1
 800629e:	425b      	negs	r3, r3
 80062a0:	e10f      	b.n	80064c2 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x312>
        }
      }

      /* ODR should be at least 12.5Hz */
      if (newOdr < 12.5f)
 80062a2:	498a      	ldr	r1, [pc, #552]	; (80064cc <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x31c>)
 80062a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80062a6:	f7fa f8c1 	bl	800042c <__aeabi_fcmplt>
 80062aa:	1e03      	subs	r3, r0, #0
 80062ac:	d100      	bne.n	80062b0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x100>
      {
        newOdr = 12.5f;
      }
      break;
 80062ae:	e0eb      	b.n	8006488 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2d8>
        newOdr = 12.5f;
 80062b0:	4b86      	ldr	r3, [pc, #536]	; (80064cc <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x31c>)
 80062b2:	62bb      	str	r3, [r7, #40]	; 0x28
 80062b4:	e0e8      	b.n	8006488 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2d8>
      /* We must uncheck Ultra Low Power bit if it is enabled */
      /* and check the Low Power bit if it is unchecked       */
      lsm6dso_ctrl5_c_t val1;
      lsm6dso_ctrl6_c_t val2;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	331c      	adds	r3, #28
 80062ba:	0018      	movs	r0, r3
 80062bc:	231c      	movs	r3, #28
 80062be:	18fa      	adds	r2, r7, r3
 80062c0:	2301      	movs	r3, #1
 80062c2:	2114      	movs	r1, #20
 80062c4:	f000 fec6 	bl	8007054 <lsm6dso_read_reg>
 80062c8:	1e03      	subs	r3, r0, #0
 80062ca:	d002      	beq.n	80062d2 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x122>
      {
        return LSM6DSO_ERROR;
 80062cc:	2301      	movs	r3, #1
 80062ce:	425b      	negs	r3, r3
 80062d0:	e0f7      	b.n	80064c2 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x312>
      }

      if (val1.xl_ulp_en != 0U)
 80062d2:	231c      	movs	r3, #28
 80062d4:	18fb      	adds	r3, r7, r3
 80062d6:	781b      	ldrb	r3, [r3, #0]
 80062d8:	227f      	movs	r2, #127	; 0x7f
 80062da:	4393      	bics	r3, r2
 80062dc:	b2db      	uxtb	r3, r3
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d022      	beq.n	8006328 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x178>
      {
        /* Power off the accelerometer */
        if (pObj->acc_is_enabled == 1U)
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	2229      	movs	r2, #41	; 0x29
 80062e6:	5c9b      	ldrb	r3, [r3, r2]
 80062e8:	2b01      	cmp	r3, #1
 80062ea:	d10a      	bne.n	8006302 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x152>
        {
          if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	331c      	adds	r3, #28
 80062f0:	2100      	movs	r1, #0
 80062f2:	0018      	movs	r0, r3
 80062f4:	f000 ff57 	bl	80071a6 <lsm6dso_xl_data_rate_set>
 80062f8:	1e03      	subs	r3, r0, #0
 80062fa:	d002      	beq.n	8006302 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x152>
          {
            return LSM6DSO_ERROR;
 80062fc:	2301      	movs	r3, #1
 80062fe:	425b      	negs	r3, r3
 8006300:	e0df      	b.n	80064c2 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x312>
          }
        }

        val1.xl_ulp_en = 0;
 8006302:	241c      	movs	r4, #28
 8006304:	193b      	adds	r3, r7, r4
 8006306:	781a      	ldrb	r2, [r3, #0]
 8006308:	217f      	movs	r1, #127	; 0x7f
 800630a:	400a      	ands	r2, r1
 800630c:	701a      	strb	r2, [r3, #0]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	331c      	adds	r3, #28
 8006312:	0018      	movs	r0, r3
 8006314:	193a      	adds	r2, r7, r4
 8006316:	2301      	movs	r3, #1
 8006318:	2114      	movs	r1, #20
 800631a:	f000 febc 	bl	8007096 <lsm6dso_write_reg>
 800631e:	1e03      	subs	r3, r0, #0
 8006320:	d002      	beq.n	8006328 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x178>
        {
          return LSM6DSO_ERROR;
 8006322:	2301      	movs	r3, #1
 8006324:	425b      	negs	r3, r3
 8006326:	e0cc      	b.n	80064c2 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x312>
        }
      }

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	331c      	adds	r3, #28
 800632c:	0018      	movs	r0, r3
 800632e:	2318      	movs	r3, #24
 8006330:	18fa      	adds	r2, r7, r3
 8006332:	2301      	movs	r3, #1
 8006334:	2115      	movs	r1, #21
 8006336:	f000 fe8d 	bl	8007054 <lsm6dso_read_reg>
 800633a:	1e03      	subs	r3, r0, #0
 800633c:	d002      	beq.n	8006344 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x194>
      {
        return LSM6DSO_ERROR;
 800633e:	2301      	movs	r3, #1
 8006340:	425b      	negs	r3, r3
 8006342:	e0be      	b.n	80064c2 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x312>
      }

      if (val2.xl_hm_mode == 0U)
 8006344:	2418      	movs	r4, #24
 8006346:	193b      	adds	r3, r7, r4
 8006348:	781b      	ldrb	r3, [r3, #0]
 800634a:	2210      	movs	r2, #16
 800634c:	4013      	ands	r3, r2
 800634e:	b2db      	uxtb	r3, r3
 8006350:	2b00      	cmp	r3, #0
 8006352:	d111      	bne.n	8006378 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1c8>
      {
        val2.xl_hm_mode = 1U;
 8006354:	193b      	adds	r3, r7, r4
 8006356:	781a      	ldrb	r2, [r3, #0]
 8006358:	2110      	movs	r1, #16
 800635a:	430a      	orrs	r2, r1
 800635c:	701a      	strb	r2, [r3, #0]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	331c      	adds	r3, #28
 8006362:	0018      	movs	r0, r3
 8006364:	193a      	adds	r2, r7, r4
 8006366:	2301      	movs	r3, #1
 8006368:	2115      	movs	r1, #21
 800636a:	f000 fe94 	bl	8007096 <lsm6dso_write_reg>
 800636e:	1e03      	subs	r3, r0, #0
 8006370:	d002      	beq.n	8006378 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1c8>
        {
          return LSM6DSO_ERROR;
 8006372:	2301      	movs	r3, #1
 8006374:	425b      	negs	r3, r3
 8006376:	e0a4      	b.n	80064c2 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x312>
        }
      }

      /* Now we need to limit the ODR to 208 Hz if it is higher */
      if (newOdr > 208.0f)
 8006378:	4955      	ldr	r1, [pc, #340]	; (80064d0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x320>)
 800637a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800637c:	f7fa f86a 	bl	8000454 <__aeabi_fcmpgt>
 8006380:	1e03      	subs	r3, r0, #0
 8006382:	d100      	bne.n	8006386 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1d6>
      {
        newOdr = 208.0f;
      }
      break;
 8006384:	e080      	b.n	8006488 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2d8>
        newOdr = 208.0f;
 8006386:	4b52      	ldr	r3, [pc, #328]	; (80064d0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x320>)
 8006388:	62bb      	str	r3, [r7, #40]	; 0x28
 800638a:	e07d      	b.n	8006488 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2d8>
      /* and check the Ultra Low Power bit if it is unchecked             */
      /* We must switch off gyro otherwise Ultra Low Power does not work  */
      lsm6dso_ctrl5_c_t val1;
      lsm6dso_ctrl6_c_t val2;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	331c      	adds	r3, #28
 8006390:	0018      	movs	r0, r3
 8006392:	2310      	movs	r3, #16
 8006394:	18fa      	adds	r2, r7, r3
 8006396:	2301      	movs	r3, #1
 8006398:	2115      	movs	r1, #21
 800639a:	f000 fe5b 	bl	8007054 <lsm6dso_read_reg>
 800639e:	1e03      	subs	r3, r0, #0
 80063a0:	d002      	beq.n	80063a8 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1f8>
      {
        return LSM6DSO_ERROR;
 80063a2:	2301      	movs	r3, #1
 80063a4:	425b      	negs	r3, r3
 80063a6:	e08c      	b.n	80064c2 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x312>
      }

      if (val2.xl_hm_mode != 0U)
 80063a8:	2410      	movs	r4, #16
 80063aa:	193b      	adds	r3, r7, r4
 80063ac:	781b      	ldrb	r3, [r3, #0]
 80063ae:	2210      	movs	r2, #16
 80063b0:	4013      	ands	r3, r2
 80063b2:	b2db      	uxtb	r3, r3
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d011      	beq.n	80063dc <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x22c>
      {
        val2.xl_hm_mode = 0U;
 80063b8:	193b      	adds	r3, r7, r4
 80063ba:	781a      	ldrb	r2, [r3, #0]
 80063bc:	2110      	movs	r1, #16
 80063be:	438a      	bics	r2, r1
 80063c0:	701a      	strb	r2, [r3, #0]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	331c      	adds	r3, #28
 80063c6:	0018      	movs	r0, r3
 80063c8:	193a      	adds	r2, r7, r4
 80063ca:	2301      	movs	r3, #1
 80063cc:	2115      	movs	r1, #21
 80063ce:	f000 fe62 	bl	8007096 <lsm6dso_write_reg>
 80063d2:	1e03      	subs	r3, r0, #0
 80063d4:	d002      	beq.n	80063dc <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x22c>
        {
          return LSM6DSO_ERROR;
 80063d6:	2301      	movs	r3, #1
 80063d8:	425b      	negs	r3, r3
 80063da:	e072      	b.n	80064c2 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x312>
        }
      }

      /* Disable Gyro */
      if (pObj->gyro_is_enabled == 1U)
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	222a      	movs	r2, #42	; 0x2a
 80063e0:	5c9b      	ldrb	r3, [r3, r2]
 80063e2:	2b01      	cmp	r3, #1
 80063e4:	d108      	bne.n	80063f8 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x248>
      {
        if (LSM6DSO_GYRO_Disable(pObj) != LSM6DSO_OK)
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	0018      	movs	r0, r3
 80063ea:	f000 f982 	bl	80066f2 <LSM6DSO_GYRO_Disable>
 80063ee:	1e03      	subs	r3, r0, #0
 80063f0:	d002      	beq.n	80063f8 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x248>
        {
          return LSM6DSO_ERROR;
 80063f2:	2301      	movs	r3, #1
 80063f4:	425b      	negs	r3, r3
 80063f6:	e064      	b.n	80064c2 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x312>
        }
      }

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	331c      	adds	r3, #28
 80063fc:	0018      	movs	r0, r3
 80063fe:	2314      	movs	r3, #20
 8006400:	18fa      	adds	r2, r7, r3
 8006402:	2301      	movs	r3, #1
 8006404:	2114      	movs	r1, #20
 8006406:	f000 fe25 	bl	8007054 <lsm6dso_read_reg>
 800640a:	1e03      	subs	r3, r0, #0
 800640c:	d002      	beq.n	8006414 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x264>
      {
        return LSM6DSO_ERROR;
 800640e:	2301      	movs	r3, #1
 8006410:	425b      	negs	r3, r3
 8006412:	e056      	b.n	80064c2 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x312>
      }

      if (val1.xl_ulp_en == 0U)
 8006414:	2314      	movs	r3, #20
 8006416:	18fb      	adds	r3, r7, r3
 8006418:	781b      	ldrb	r3, [r3, #0]
 800641a:	227f      	movs	r2, #127	; 0x7f
 800641c:	4393      	bics	r3, r2
 800641e:	b2db      	uxtb	r3, r3
 8006420:	2b00      	cmp	r3, #0
 8006422:	d123      	bne.n	800646c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2bc>
      {
        /* Power off the accelerometer */
        if (pObj->acc_is_enabled == 1U)
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	2229      	movs	r2, #41	; 0x29
 8006428:	5c9b      	ldrb	r3, [r3, r2]
 800642a:	2b01      	cmp	r3, #1
 800642c:	d10a      	bne.n	8006444 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x294>
        {
          if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	331c      	adds	r3, #28
 8006432:	2100      	movs	r1, #0
 8006434:	0018      	movs	r0, r3
 8006436:	f000 feb6 	bl	80071a6 <lsm6dso_xl_data_rate_set>
 800643a:	1e03      	subs	r3, r0, #0
 800643c:	d002      	beq.n	8006444 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x294>
          {
            return LSM6DSO_ERROR;
 800643e:	2301      	movs	r3, #1
 8006440:	425b      	negs	r3, r3
 8006442:	e03e      	b.n	80064c2 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x312>
          }
        }

        val1.xl_ulp_en = 1U;
 8006444:	2414      	movs	r4, #20
 8006446:	193b      	adds	r3, r7, r4
 8006448:	781a      	ldrb	r2, [r3, #0]
 800644a:	2180      	movs	r1, #128	; 0x80
 800644c:	4249      	negs	r1, r1
 800644e:	430a      	orrs	r2, r1
 8006450:	701a      	strb	r2, [r3, #0]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	331c      	adds	r3, #28
 8006456:	0018      	movs	r0, r3
 8006458:	193a      	adds	r2, r7, r4
 800645a:	2301      	movs	r3, #1
 800645c:	2114      	movs	r1, #20
 800645e:	f000 fe1a 	bl	8007096 <lsm6dso_write_reg>
 8006462:	1e03      	subs	r3, r0, #0
 8006464:	d002      	beq.n	800646c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2bc>
        {
          return LSM6DSO_ERROR;
 8006466:	2301      	movs	r3, #1
 8006468:	425b      	negs	r3, r3
 800646a:	e02a      	b.n	80064c2 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x312>
        }
      }

      /* Now we need to limit the ODR to 208 Hz if it is higher */
      if (newOdr > 208.0f)
 800646c:	4918      	ldr	r1, [pc, #96]	; (80064d0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x320>)
 800646e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006470:	f7f9 fff0 	bl	8000454 <__aeabi_fcmpgt>
 8006474:	1e03      	subs	r3, r0, #0
 8006476:	d100      	bne.n	800647a <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2ca>
      {
        newOdr = 208.0f;
      }
      break;
 8006478:	e006      	b.n	8006488 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2d8>
        newOdr = 208.0f;
 800647a:	4b15      	ldr	r3, [pc, #84]	; (80064d0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x320>)
 800647c:	62bb      	str	r3, [r7, #40]	; 0x28
 800647e:	e003      	b.n	8006488 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2d8>
    }
    default:
      ret = LSM6DSO_ERROR;
 8006480:	2301      	movs	r3, #1
 8006482:	425b      	negs	r3, r3
 8006484:	62fb      	str	r3, [r7, #44]	; 0x2c
      break;
 8006486:	46c0      	nop			; (mov r8, r8)
  }

  if (ret == LSM6DSO_ERROR)
 8006488:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800648a:	3301      	adds	r3, #1
 800648c:	d102      	bne.n	8006494 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2e4>
  {
    return LSM6DSO_ERROR;
 800648e:	2301      	movs	r3, #1
 8006490:	425b      	negs	r3, r3
 8006492:	e016      	b.n	80064c2 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x312>
  }

  if (pObj->acc_is_enabled == 1U)
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	2229      	movs	r2, #41	; 0x29
 8006498:	5c9b      	ldrb	r3, [r3, r2]
 800649a:	2b01      	cmp	r3, #1
 800649c:	d108      	bne.n	80064b0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x300>
  {
    ret = LSM6DSO_ACC_SetOutputDataRate_When_Enabled(pObj, newOdr);
 800649e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	1c11      	adds	r1, r2, #0
 80064a4:	0018      	movs	r0, r3
 80064a6:	f000 fbc1 	bl	8006c2c <LSM6DSO_ACC_SetOutputDataRate_When_Enabled>
 80064aa:	0003      	movs	r3, r0
 80064ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80064ae:	e007      	b.n	80064c0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x310>
  }
  else
  {
    ret = LSM6DSO_ACC_SetOutputDataRate_When_Disabled(pObj, newOdr);
 80064b0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	1c11      	adds	r1, r2, #0
 80064b6:	0018      	movs	r0, r3
 80064b8:	f000 fc38 	bl	8006d2c <LSM6DSO_ACC_SetOutputDataRate_When_Disabled>
 80064bc:	0003      	movs	r3, r0
 80064be:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  return ret;
 80064c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80064c2:	0018      	movs	r0, r3
 80064c4:	46bd      	mov	sp, r7
 80064c6:	b00d      	add	sp, #52	; 0x34
 80064c8:	bd90      	pop	{r4, r7, pc}
 80064ca:	46c0      	nop			; (mov r8, r8)
 80064cc:	41480000 	.word	0x41480000
 80064d0:	43500000 	.word	0x43500000

080064d4 <LSM6DSO_ACC_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_GetFullScale(LSM6DSO_Object_t *pObj, int32_t *FullScale)
{
 80064d4:	b580      	push	{r7, lr}
 80064d6:	b084      	sub	sp, #16
 80064d8:	af00      	add	r7, sp, #0
 80064da:	6078      	str	r0, [r7, #4]
 80064dc:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 80064de:	2300      	movs	r3, #0
 80064e0:	60fb      	str	r3, [r7, #12]
  lsm6dso_fs_xl_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lsm6dso_xl_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM6DSO_OK)
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	331c      	adds	r3, #28
 80064e6:	220b      	movs	r2, #11
 80064e8:	18ba      	adds	r2, r7, r2
 80064ea:	0011      	movs	r1, r2
 80064ec:	0018      	movs	r0, r3
 80064ee:	f000 fe23 	bl	8007138 <lsm6dso_xl_full_scale_get>
 80064f2:	1e03      	subs	r3, r0, #0
 80064f4:	d002      	beq.n	80064fc <LSM6DSO_ACC_GetFullScale+0x28>
  {
    return LSM6DSO_ERROR;
 80064f6:	2301      	movs	r3, #1
 80064f8:	425b      	negs	r3, r3
 80064fa:	e022      	b.n	8006542 <LSM6DSO_ACC_GetFullScale+0x6e>
  }

  switch (fs_low_level)
 80064fc:	230b      	movs	r3, #11
 80064fe:	18fb      	adds	r3, r7, r3
 8006500:	781b      	ldrb	r3, [r3, #0]
 8006502:	2b03      	cmp	r3, #3
 8006504:	d010      	beq.n	8006528 <LSM6DSO_ACC_GetFullScale+0x54>
 8006506:	dc17      	bgt.n	8006538 <LSM6DSO_ACC_GetFullScale+0x64>
 8006508:	2b02      	cmp	r3, #2
 800650a:	d009      	beq.n	8006520 <LSM6DSO_ACC_GetFullScale+0x4c>
 800650c:	dc14      	bgt.n	8006538 <LSM6DSO_ACC_GetFullScale+0x64>
 800650e:	2b00      	cmp	r3, #0
 8006510:	d002      	beq.n	8006518 <LSM6DSO_ACC_GetFullScale+0x44>
 8006512:	2b01      	cmp	r3, #1
 8006514:	d00c      	beq.n	8006530 <LSM6DSO_ACC_GetFullScale+0x5c>
 8006516:	e00f      	b.n	8006538 <LSM6DSO_ACC_GetFullScale+0x64>
  {
    case LSM6DSO_2g:
      *FullScale =  2;
 8006518:	683b      	ldr	r3, [r7, #0]
 800651a:	2202      	movs	r2, #2
 800651c:	601a      	str	r2, [r3, #0]
      break;
 800651e:	e00f      	b.n	8006540 <LSM6DSO_ACC_GetFullScale+0x6c>

    case LSM6DSO_4g:
      *FullScale =  4;
 8006520:	683b      	ldr	r3, [r7, #0]
 8006522:	2204      	movs	r2, #4
 8006524:	601a      	str	r2, [r3, #0]
      break;
 8006526:	e00b      	b.n	8006540 <LSM6DSO_ACC_GetFullScale+0x6c>

    case LSM6DSO_8g:
      *FullScale =  8;
 8006528:	683b      	ldr	r3, [r7, #0]
 800652a:	2208      	movs	r2, #8
 800652c:	601a      	str	r2, [r3, #0]
      break;
 800652e:	e007      	b.n	8006540 <LSM6DSO_ACC_GetFullScale+0x6c>

    case LSM6DSO_16g:
      *FullScale = 16;
 8006530:	683b      	ldr	r3, [r7, #0]
 8006532:	2210      	movs	r2, #16
 8006534:	601a      	str	r2, [r3, #0]
      break;
 8006536:	e003      	b.n	8006540 <LSM6DSO_ACC_GetFullScale+0x6c>

    default:
      ret = LSM6DSO_ERROR;
 8006538:	2301      	movs	r3, #1
 800653a:	425b      	negs	r3, r3
 800653c:	60fb      	str	r3, [r7, #12]
      break;
 800653e:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 8006540:	68fb      	ldr	r3, [r7, #12]
}
 8006542:	0018      	movs	r0, r3
 8006544:	46bd      	mov	sp, r7
 8006546:	b004      	add	sp, #16
 8006548:	bd80      	pop	{r7, pc}

0800654a <LSM6DSO_ACC_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_SetFullScale(LSM6DSO_Object_t *pObj, int32_t FullScale)
{
 800654a:	b580      	push	{r7, lr}
 800654c:	b084      	sub	sp, #16
 800654e:	af00      	add	r7, sp, #0
 8006550:	6078      	str	r0, [r7, #4]
 8006552:	6039      	str	r1, [r7, #0]
  lsm6dso_fs_xl_t new_fs;

  /* Seems like MISRA C-2012 rule 14.3a violation but only from single file statical analysis point of view because
     the parameter passed to the function is not known at the moment of analysis */
  new_fs = (FullScale <= 2) ? LSM6DSO_2g
           : (FullScale <= 4) ? LSM6DSO_4g
 8006554:	683b      	ldr	r3, [r7, #0]
 8006556:	2b02      	cmp	r3, #2
 8006558:	dd0b      	ble.n	8006572 <LSM6DSO_ACC_SetFullScale+0x28>
 800655a:	683b      	ldr	r3, [r7, #0]
 800655c:	2b04      	cmp	r3, #4
 800655e:	dd06      	ble.n	800656e <LSM6DSO_ACC_SetFullScale+0x24>
 8006560:	683b      	ldr	r3, [r7, #0]
 8006562:	2b08      	cmp	r3, #8
 8006564:	dc01      	bgt.n	800656a <LSM6DSO_ACC_SetFullScale+0x20>
 8006566:	2303      	movs	r3, #3
 8006568:	e004      	b.n	8006574 <LSM6DSO_ACC_SetFullScale+0x2a>
 800656a:	2301      	movs	r3, #1
 800656c:	e002      	b.n	8006574 <LSM6DSO_ACC_SetFullScale+0x2a>
 800656e:	2302      	movs	r3, #2
 8006570:	e000      	b.n	8006574 <LSM6DSO_ACC_SetFullScale+0x2a>
 8006572:	2300      	movs	r3, #0
  new_fs = (FullScale <= 2) ? LSM6DSO_2g
 8006574:	210f      	movs	r1, #15
 8006576:	187a      	adds	r2, r7, r1
 8006578:	7013      	strb	r3, [r2, #0]
           : (FullScale <= 8) ? LSM6DSO_8g
           :                    LSM6DSO_16g;

  if (lsm6dso_xl_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSO_OK)
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	331c      	adds	r3, #28
 800657e:	001a      	movs	r2, r3
 8006580:	187b      	adds	r3, r7, r1
 8006582:	781b      	ldrb	r3, [r3, #0]
 8006584:	0019      	movs	r1, r3
 8006586:	0010      	movs	r0, r2
 8006588:	f000 fda6 	bl	80070d8 <lsm6dso_xl_full_scale_set>
 800658c:	1e03      	subs	r3, r0, #0
 800658e:	d002      	beq.n	8006596 <LSM6DSO_ACC_SetFullScale+0x4c>
  {
    return LSM6DSO_ERROR;
 8006590:	2301      	movs	r3, #1
 8006592:	425b      	negs	r3, r3
 8006594:	e000      	b.n	8006598 <LSM6DSO_ACC_SetFullScale+0x4e>
  }

  return LSM6DSO_OK;
 8006596:	2300      	movs	r3, #0
}
 8006598:	0018      	movs	r0, r3
 800659a:	46bd      	mov	sp, r7
 800659c:	b004      	add	sp, #16
 800659e:	bd80      	pop	{r7, pc}

080065a0 <LSM6DSO_ACC_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_GetAxesRaw(LSM6DSO_Object_t *pObj, LSM6DSO_AxesRaw_t *Value)
{
 80065a0:	b580      	push	{r7, lr}
 80065a2:	b084      	sub	sp, #16
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	6078      	str	r0, [r7, #4]
 80065a8:	6039      	str	r1, [r7, #0]
  lsm6dso_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lsm6dso_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSO_OK)
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	331c      	adds	r3, #28
 80065ae:	2208      	movs	r2, #8
 80065b0:	18ba      	adds	r2, r7, r2
 80065b2:	0011      	movs	r1, r2
 80065b4:	0018      	movs	r0, r3
 80065b6:	f001 fa24 	bl	8007a02 <lsm6dso_acceleration_raw_get>
 80065ba:	1e03      	subs	r3, r0, #0
 80065bc:	d002      	beq.n	80065c4 <LSM6DSO_ACC_GetAxesRaw+0x24>
  {
    return LSM6DSO_ERROR;
 80065be:	2301      	movs	r3, #1
 80065c0:	425b      	negs	r3, r3
 80065c2:	e010      	b.n	80065e6 <LSM6DSO_ACC_GetAxesRaw+0x46>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 80065c4:	2108      	movs	r1, #8
 80065c6:	187b      	adds	r3, r7, r1
 80065c8:	2200      	movs	r2, #0
 80065ca:	5e9a      	ldrsh	r2, [r3, r2]
 80065cc:	683b      	ldr	r3, [r7, #0]
 80065ce:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 80065d0:	187b      	adds	r3, r7, r1
 80065d2:	2202      	movs	r2, #2
 80065d4:	5e9a      	ldrsh	r2, [r3, r2]
 80065d6:	683b      	ldr	r3, [r7, #0]
 80065d8:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 80065da:	187b      	adds	r3, r7, r1
 80065dc:	2204      	movs	r2, #4
 80065de:	5e9a      	ldrsh	r2, [r3, r2]
 80065e0:	683b      	ldr	r3, [r7, #0]
 80065e2:	809a      	strh	r2, [r3, #4]

  return LSM6DSO_OK;
 80065e4:	2300      	movs	r3, #0
}
 80065e6:	0018      	movs	r0, r3
 80065e8:	46bd      	mov	sp, r7
 80065ea:	b004      	add	sp, #16
 80065ec:	bd80      	pop	{r7, pc}

080065ee <LSM6DSO_ACC_GetAxes>:
  * @param  pObj the device pObj
  * @param  Acceleration pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_GetAxes(LSM6DSO_Object_t *pObj, LSM6DSO_Axes_t *Acceleration)
{
 80065ee:	b590      	push	{r4, r7, lr}
 80065f0:	b087      	sub	sp, #28
 80065f2:	af00      	add	r7, sp, #0
 80065f4:	6078      	str	r0, [r7, #4]
 80065f6:	6039      	str	r1, [r7, #0]
  lsm6dso_axis3bit16_t data_raw;
  float_t sensitivity = 0.0f;
 80065f8:	2300      	movs	r3, #0
 80065fa:	60fb      	str	r3, [r7, #12]

  /* Read raw data values. */
  if (lsm6dso_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSO_OK)
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	331c      	adds	r3, #28
 8006600:	2210      	movs	r2, #16
 8006602:	18ba      	adds	r2, r7, r2
 8006604:	0011      	movs	r1, r2
 8006606:	0018      	movs	r0, r3
 8006608:	f001 f9fb 	bl	8007a02 <lsm6dso_acceleration_raw_get>
 800660c:	1e03      	subs	r3, r0, #0
 800660e:	d002      	beq.n	8006616 <LSM6DSO_ACC_GetAxes+0x28>
  {
    return LSM6DSO_ERROR;
 8006610:	2301      	movs	r3, #1
 8006612:	425b      	negs	r3, r3
 8006614:	e046      	b.n	80066a4 <LSM6DSO_ACC_GetAxes+0xb6>
  }

  /* Get LSM6DSO actual sensitivity. */
  if (LSM6DSO_ACC_GetSensitivity(pObj, &sensitivity) != LSM6DSO_OK)
 8006616:	230c      	movs	r3, #12
 8006618:	18fa      	adds	r2, r7, r3
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	0011      	movs	r1, r2
 800661e:	0018      	movs	r0, r3
 8006620:	f7ff fd02 	bl	8006028 <LSM6DSO_ACC_GetSensitivity>
 8006624:	1e03      	subs	r3, r0, #0
 8006626:	d002      	beq.n	800662e <LSM6DSO_ACC_GetAxes+0x40>
  {
    return LSM6DSO_ERROR;
 8006628:	2301      	movs	r3, #1
 800662a:	425b      	negs	r3, r3
 800662c:	e03a      	b.n	80066a4 <LSM6DSO_ACC_GetAxes+0xb6>
  }

  /* Calculate the data. */
  Acceleration->x = (int32_t)((float_t)((float_t)data_raw.i16bit[0] * sensitivity));
 800662e:	2410      	movs	r4, #16
 8006630:	193b      	adds	r3, r7, r4
 8006632:	2200      	movs	r2, #0
 8006634:	5e9b      	ldrsh	r3, [r3, r2]
 8006636:	0018      	movs	r0, r3
 8006638:	f7fa fec2 	bl	80013c0 <__aeabi_i2f>
 800663c:	1c02      	adds	r2, r0, #0
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	1c19      	adds	r1, r3, #0
 8006642:	1c10      	adds	r0, r2, #0
 8006644:	f7fa fbb2 	bl	8000dac <__aeabi_fmul>
 8006648:	1c03      	adds	r3, r0, #0
 800664a:	1c18      	adds	r0, r3, #0
 800664c:	f7fa fe98 	bl	8001380 <__aeabi_f2iz>
 8006650:	0002      	movs	r2, r0
 8006652:	683b      	ldr	r3, [r7, #0]
 8006654:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float_t)((float_t)data_raw.i16bit[1] * sensitivity));
 8006656:	193b      	adds	r3, r7, r4
 8006658:	2202      	movs	r2, #2
 800665a:	5e9b      	ldrsh	r3, [r3, r2]
 800665c:	0018      	movs	r0, r3
 800665e:	f7fa feaf 	bl	80013c0 <__aeabi_i2f>
 8006662:	1c02      	adds	r2, r0, #0
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	1c19      	adds	r1, r3, #0
 8006668:	1c10      	adds	r0, r2, #0
 800666a:	f7fa fb9f 	bl	8000dac <__aeabi_fmul>
 800666e:	1c03      	adds	r3, r0, #0
 8006670:	1c18      	adds	r0, r3, #0
 8006672:	f7fa fe85 	bl	8001380 <__aeabi_f2iz>
 8006676:	0002      	movs	r2, r0
 8006678:	683b      	ldr	r3, [r7, #0]
 800667a:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float_t)((float_t)data_raw.i16bit[2] * sensitivity));
 800667c:	193b      	adds	r3, r7, r4
 800667e:	2204      	movs	r2, #4
 8006680:	5e9b      	ldrsh	r3, [r3, r2]
 8006682:	0018      	movs	r0, r3
 8006684:	f7fa fe9c 	bl	80013c0 <__aeabi_i2f>
 8006688:	1c02      	adds	r2, r0, #0
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	1c19      	adds	r1, r3, #0
 800668e:	1c10      	adds	r0, r2, #0
 8006690:	f7fa fb8c 	bl	8000dac <__aeabi_fmul>
 8006694:	1c03      	adds	r3, r0, #0
 8006696:	1c18      	adds	r0, r3, #0
 8006698:	f7fa fe72 	bl	8001380 <__aeabi_f2iz>
 800669c:	0002      	movs	r2, r0
 800669e:	683b      	ldr	r3, [r7, #0]
 80066a0:	609a      	str	r2, [r3, #8]

  return LSM6DSO_OK;
 80066a2:	2300      	movs	r3, #0
}
 80066a4:	0018      	movs	r0, r3
 80066a6:	46bd      	mov	sp, r7
 80066a8:	b007      	add	sp, #28
 80066aa:	bd90      	pop	{r4, r7, pc}

080066ac <LSM6DSO_GYRO_Enable>:
  * @brief  Enable the LSM6DSO gyroscope sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_Enable(LSM6DSO_Object_t *pObj)
{
 80066ac:	b580      	push	{r7, lr}
 80066ae:	b082      	sub	sp, #8
 80066b0:	af00      	add	r7, sp, #0
 80066b2:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->gyro_is_enabled == 1U)
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	222a      	movs	r2, #42	; 0x2a
 80066b8:	5c9b      	ldrb	r3, [r3, r2]
 80066ba:	2b01      	cmp	r3, #1
 80066bc:	d101      	bne.n	80066c2 <LSM6DSO_GYRO_Enable+0x16>
  {
    return LSM6DSO_OK;
 80066be:	2300      	movs	r3, #0
 80066c0:	e013      	b.n	80066ea <LSM6DSO_GYRO_Enable+0x3e>
  }

  /* Output data rate selection. */
  if (lsm6dso_gy_data_rate_set(&(pObj->Ctx), pObj->gyro_odr) != LSM6DSO_OK)
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	331c      	adds	r3, #28
 80066c6:	001a      	movs	r2, r3
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	212c      	movs	r1, #44	; 0x2c
 80066cc:	5c5b      	ldrb	r3, [r3, r1]
 80066ce:	0019      	movs	r1, r3
 80066d0:	0010      	movs	r0, r2
 80066d2:	f000 ff75 	bl	80075c0 <lsm6dso_gy_data_rate_set>
 80066d6:	1e03      	subs	r3, r0, #0
 80066d8:	d002      	beq.n	80066e0 <LSM6DSO_GYRO_Enable+0x34>
  {
    return LSM6DSO_ERROR;
 80066da:	2301      	movs	r3, #1
 80066dc:	425b      	negs	r3, r3
 80066de:	e004      	b.n	80066ea <LSM6DSO_GYRO_Enable+0x3e>
  }

  pObj->gyro_is_enabled = 1;
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	222a      	movs	r2, #42	; 0x2a
 80066e4:	2101      	movs	r1, #1
 80066e6:	5499      	strb	r1, [r3, r2]

  return LSM6DSO_OK;
 80066e8:	2300      	movs	r3, #0
}
 80066ea:	0018      	movs	r0, r3
 80066ec:	46bd      	mov	sp, r7
 80066ee:	b002      	add	sp, #8
 80066f0:	bd80      	pop	{r7, pc}

080066f2 <LSM6DSO_GYRO_Disable>:
  * @brief  Disable the LSM6DSO gyroscope sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_Disable(LSM6DSO_Object_t *pObj)
{
 80066f2:	b580      	push	{r7, lr}
 80066f4:	b082      	sub	sp, #8
 80066f6:	af00      	add	r7, sp, #0
 80066f8:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->gyro_is_enabled == 0U)
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	222a      	movs	r2, #42	; 0x2a
 80066fe:	5c9b      	ldrb	r3, [r3, r2]
 8006700:	2b00      	cmp	r3, #0
 8006702:	d101      	bne.n	8006708 <LSM6DSO_GYRO_Disable+0x16>
  {
    return LSM6DSO_OK;
 8006704:	2300      	movs	r3, #0
 8006706:	e01d      	b.n	8006744 <LSM6DSO_GYRO_Disable+0x52>
  }

  /* Get current output data rate. */
  if (lsm6dso_gy_data_rate_get(&(pObj->Ctx), &pObj->gyro_odr) != LSM6DSO_OK)
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	331c      	adds	r3, #28
 800670c:	001a      	movs	r2, r3
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	332c      	adds	r3, #44	; 0x2c
 8006712:	0019      	movs	r1, r3
 8006714:	0010      	movs	r0, r2
 8006716:	f001 f89f 	bl	8007858 <lsm6dso_gy_data_rate_get>
 800671a:	1e03      	subs	r3, r0, #0
 800671c:	d002      	beq.n	8006724 <LSM6DSO_GYRO_Disable+0x32>
  {
    return LSM6DSO_ERROR;
 800671e:	2301      	movs	r3, #1
 8006720:	425b      	negs	r3, r3
 8006722:	e00f      	b.n	8006744 <LSM6DSO_GYRO_Disable+0x52>
  }

  /* Output data rate selection - power down. */
  if (lsm6dso_gy_data_rate_set(&(pObj->Ctx), LSM6DSO_GY_ODR_OFF) != LSM6DSO_OK)
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	331c      	adds	r3, #28
 8006728:	2100      	movs	r1, #0
 800672a:	0018      	movs	r0, r3
 800672c:	f000 ff48 	bl	80075c0 <lsm6dso_gy_data_rate_set>
 8006730:	1e03      	subs	r3, r0, #0
 8006732:	d002      	beq.n	800673a <LSM6DSO_GYRO_Disable+0x48>
  {
    return LSM6DSO_ERROR;
 8006734:	2301      	movs	r3, #1
 8006736:	425b      	negs	r3, r3
 8006738:	e004      	b.n	8006744 <LSM6DSO_GYRO_Disable+0x52>
  }

  pObj->gyro_is_enabled = 0;
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	222a      	movs	r2, #42	; 0x2a
 800673e:	2100      	movs	r1, #0
 8006740:	5499      	strb	r1, [r3, r2]

  return LSM6DSO_OK;
 8006742:	2300      	movs	r3, #0
}
 8006744:	0018      	movs	r0, r3
 8006746:	46bd      	mov	sp, r7
 8006748:	b002      	add	sp, #8
 800674a:	bd80      	pop	{r7, pc}

0800674c <LSM6DSO_GYRO_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_GetSensitivity(LSM6DSO_Object_t *pObj, float_t *Sensitivity)
{
 800674c:	b580      	push	{r7, lr}
 800674e:	b084      	sub	sp, #16
 8006750:	af00      	add	r7, sp, #0
 8006752:	6078      	str	r0, [r7, #4]
 8006754:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 8006756:	2300      	movs	r3, #0
 8006758:	60fb      	str	r3, [r7, #12]
  lsm6dso_fs_g_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lsm6dso_gy_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSO_OK)
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	331c      	adds	r3, #28
 800675e:	220b      	movs	r2, #11
 8006760:	18ba      	adds	r2, r7, r2
 8006762:	0011      	movs	r1, r2
 8006764:	0018      	movs	r0, r3
 8006766:	f000 fef1 	bl	800754c <lsm6dso_gy_full_scale_get>
 800676a:	1e03      	subs	r3, r0, #0
 800676c:	d002      	beq.n	8006774 <LSM6DSO_GYRO_GetSensitivity+0x28>
  {
    return LSM6DSO_ERROR;
 800676e:	2301      	movs	r3, #1
 8006770:	425b      	negs	r3, r3
 8006772:	e022      	b.n	80067ba <LSM6DSO_GYRO_GetSensitivity+0x6e>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (full_scale)
 8006774:	230b      	movs	r3, #11
 8006776:	18fb      	adds	r3, r7, r3
 8006778:	781b      	ldrb	r3, [r3, #0]
 800677a:	2b06      	cmp	r3, #6
 800677c:	d818      	bhi.n	80067b0 <LSM6DSO_GYRO_GetSensitivity+0x64>
 800677e:	009a      	lsls	r2, r3, #2
 8006780:	4b10      	ldr	r3, [pc, #64]	; (80067c4 <LSM6DSO_GYRO_GetSensitivity+0x78>)
 8006782:	18d3      	adds	r3, r2, r3
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	469f      	mov	pc, r3
  {
    case LSM6DSO_125dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_125DPS;
 8006788:	683b      	ldr	r3, [r7, #0]
 800678a:	4a0f      	ldr	r2, [pc, #60]	; (80067c8 <LSM6DSO_GYRO_GetSensitivity+0x7c>)
 800678c:	601a      	str	r2, [r3, #0]
      break;
 800678e:	e013      	b.n	80067b8 <LSM6DSO_GYRO_GetSensitivity+0x6c>

    case LSM6DSO_250dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_250DPS;
 8006790:	683b      	ldr	r3, [r7, #0]
 8006792:	4a0e      	ldr	r2, [pc, #56]	; (80067cc <LSM6DSO_GYRO_GetSensitivity+0x80>)
 8006794:	601a      	str	r2, [r3, #0]
      break;
 8006796:	e00f      	b.n	80067b8 <LSM6DSO_GYRO_GetSensitivity+0x6c>

    case LSM6DSO_500dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_500DPS;
 8006798:	683b      	ldr	r3, [r7, #0]
 800679a:	4a0d      	ldr	r2, [pc, #52]	; (80067d0 <LSM6DSO_GYRO_GetSensitivity+0x84>)
 800679c:	601a      	str	r2, [r3, #0]
      break;
 800679e:	e00b      	b.n	80067b8 <LSM6DSO_GYRO_GetSensitivity+0x6c>

    case LSM6DSO_1000dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_1000DPS;
 80067a0:	683b      	ldr	r3, [r7, #0]
 80067a2:	4a0c      	ldr	r2, [pc, #48]	; (80067d4 <LSM6DSO_GYRO_GetSensitivity+0x88>)
 80067a4:	601a      	str	r2, [r3, #0]
      break;
 80067a6:	e007      	b.n	80067b8 <LSM6DSO_GYRO_GetSensitivity+0x6c>

    case LSM6DSO_2000dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_2000DPS;
 80067a8:	683b      	ldr	r3, [r7, #0]
 80067aa:	4a0b      	ldr	r2, [pc, #44]	; (80067d8 <LSM6DSO_GYRO_GetSensitivity+0x8c>)
 80067ac:	601a      	str	r2, [r3, #0]
      break;
 80067ae:	e003      	b.n	80067b8 <LSM6DSO_GYRO_GetSensitivity+0x6c>

    default:
      ret = LSM6DSO_ERROR;
 80067b0:	2301      	movs	r3, #1
 80067b2:	425b      	negs	r3, r3
 80067b4:	60fb      	str	r3, [r7, #12]
      break;
 80067b6:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 80067b8:	68fb      	ldr	r3, [r7, #12]
}
 80067ba:	0018      	movs	r0, r3
 80067bc:	46bd      	mov	sp, r7
 80067be:	b004      	add	sp, #16
 80067c0:	bd80      	pop	{r7, pc}
 80067c2:	46c0      	nop			; (mov r8, r8)
 80067c4:	08016180 	.word	0x08016180
 80067c8:	408c0000 	.word	0x408c0000
 80067cc:	410c0000 	.word	0x410c0000
 80067d0:	418c0000 	.word	0x418c0000
 80067d4:	420c0000 	.word	0x420c0000
 80067d8:	428c0000 	.word	0x428c0000

080067dc <LSM6DSO_GYRO_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_GetOutputDataRate(LSM6DSO_Object_t *pObj, float_t *Odr)
{
 80067dc:	b580      	push	{r7, lr}
 80067de:	b084      	sub	sp, #16
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	6078      	str	r0, [r7, #4]
 80067e4:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 80067e6:	2300      	movs	r3, #0
 80067e8:	60fb      	str	r3, [r7, #12]
  lsm6dso_odr_g_t odr_low_level;

  /* Get current output data rate. */
  if (lsm6dso_gy_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM6DSO_OK)
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	331c      	adds	r3, #28
 80067ee:	220b      	movs	r2, #11
 80067f0:	18ba      	adds	r2, r7, r2
 80067f2:	0011      	movs	r1, r2
 80067f4:	0018      	movs	r0, r3
 80067f6:	f001 f82f 	bl	8007858 <lsm6dso_gy_data_rate_get>
 80067fa:	1e03      	subs	r3, r0, #0
 80067fc:	d002      	beq.n	8006804 <LSM6DSO_GYRO_GetOutputDataRate+0x28>
  {
    return LSM6DSO_ERROR;
 80067fe:	2301      	movs	r3, #1
 8006800:	425b      	negs	r3, r3
 8006802:	e03a      	b.n	800687a <LSM6DSO_GYRO_GetOutputDataRate+0x9e>
  }

  switch (odr_low_level)
 8006804:	230b      	movs	r3, #11
 8006806:	18fb      	adds	r3, r7, r3
 8006808:	781b      	ldrb	r3, [r3, #0]
 800680a:	2b0a      	cmp	r3, #10
 800680c:	d830      	bhi.n	8006870 <LSM6DSO_GYRO_GetOutputDataRate+0x94>
 800680e:	009a      	lsls	r2, r3, #2
 8006810:	4b1c      	ldr	r3, [pc, #112]	; (8006884 <LSM6DSO_GYRO_GetOutputDataRate+0xa8>)
 8006812:	18d3      	adds	r3, r2, r3
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	469f      	mov	pc, r3
  {
    case LSM6DSO_GY_ODR_OFF:
      *Odr = 0.0f;
 8006818:	683b      	ldr	r3, [r7, #0]
 800681a:	2200      	movs	r2, #0
 800681c:	601a      	str	r2, [r3, #0]
      break;
 800681e:	e02b      	b.n	8006878 <LSM6DSO_GYRO_GetOutputDataRate+0x9c>

    case LSM6DSO_GY_ODR_12Hz5:
      *Odr = 12.5f;
 8006820:	683b      	ldr	r3, [r7, #0]
 8006822:	4a19      	ldr	r2, [pc, #100]	; (8006888 <LSM6DSO_GYRO_GetOutputDataRate+0xac>)
 8006824:	601a      	str	r2, [r3, #0]
      break;
 8006826:	e027      	b.n	8006878 <LSM6DSO_GYRO_GetOutputDataRate+0x9c>

    case LSM6DSO_GY_ODR_26Hz:
      *Odr = 26.0f;
 8006828:	683b      	ldr	r3, [r7, #0]
 800682a:	4a18      	ldr	r2, [pc, #96]	; (800688c <LSM6DSO_GYRO_GetOutputDataRate+0xb0>)
 800682c:	601a      	str	r2, [r3, #0]
      break;
 800682e:	e023      	b.n	8006878 <LSM6DSO_GYRO_GetOutputDataRate+0x9c>

    case LSM6DSO_GY_ODR_52Hz:
      *Odr = 52.0f;
 8006830:	683b      	ldr	r3, [r7, #0]
 8006832:	4a17      	ldr	r2, [pc, #92]	; (8006890 <LSM6DSO_GYRO_GetOutputDataRate+0xb4>)
 8006834:	601a      	str	r2, [r3, #0]
      break;
 8006836:	e01f      	b.n	8006878 <LSM6DSO_GYRO_GetOutputDataRate+0x9c>

    case LSM6DSO_GY_ODR_104Hz:
      *Odr = 104.0f;
 8006838:	683b      	ldr	r3, [r7, #0]
 800683a:	4a16      	ldr	r2, [pc, #88]	; (8006894 <LSM6DSO_GYRO_GetOutputDataRate+0xb8>)
 800683c:	601a      	str	r2, [r3, #0]
      break;
 800683e:	e01b      	b.n	8006878 <LSM6DSO_GYRO_GetOutputDataRate+0x9c>

    case LSM6DSO_GY_ODR_208Hz:
      *Odr = 208.0f;
 8006840:	683b      	ldr	r3, [r7, #0]
 8006842:	4a15      	ldr	r2, [pc, #84]	; (8006898 <LSM6DSO_GYRO_GetOutputDataRate+0xbc>)
 8006844:	601a      	str	r2, [r3, #0]
      break;
 8006846:	e017      	b.n	8006878 <LSM6DSO_GYRO_GetOutputDataRate+0x9c>

    case LSM6DSO_GY_ODR_417Hz:
      *Odr = 417.0f;
 8006848:	683b      	ldr	r3, [r7, #0]
 800684a:	4a14      	ldr	r2, [pc, #80]	; (800689c <LSM6DSO_GYRO_GetOutputDataRate+0xc0>)
 800684c:	601a      	str	r2, [r3, #0]
      break;
 800684e:	e013      	b.n	8006878 <LSM6DSO_GYRO_GetOutputDataRate+0x9c>

    case LSM6DSO_GY_ODR_833Hz:
      *Odr = 833.0f;
 8006850:	683b      	ldr	r3, [r7, #0]
 8006852:	4a13      	ldr	r2, [pc, #76]	; (80068a0 <LSM6DSO_GYRO_GetOutputDataRate+0xc4>)
 8006854:	601a      	str	r2, [r3, #0]
      break;
 8006856:	e00f      	b.n	8006878 <LSM6DSO_GYRO_GetOutputDataRate+0x9c>

    case LSM6DSO_GY_ODR_1667Hz:
      *Odr = 1667.0f;
 8006858:	683b      	ldr	r3, [r7, #0]
 800685a:	4a12      	ldr	r2, [pc, #72]	; (80068a4 <LSM6DSO_GYRO_GetOutputDataRate+0xc8>)
 800685c:	601a      	str	r2, [r3, #0]
      break;
 800685e:	e00b      	b.n	8006878 <LSM6DSO_GYRO_GetOutputDataRate+0x9c>

    case LSM6DSO_GY_ODR_3333Hz:
      *Odr = 3333.0f;
 8006860:	683b      	ldr	r3, [r7, #0]
 8006862:	4a11      	ldr	r2, [pc, #68]	; (80068a8 <LSM6DSO_GYRO_GetOutputDataRate+0xcc>)
 8006864:	601a      	str	r2, [r3, #0]
      break;
 8006866:	e007      	b.n	8006878 <LSM6DSO_GYRO_GetOutputDataRate+0x9c>

    case LSM6DSO_GY_ODR_6667Hz:
      *Odr = 6667.0f;
 8006868:	683b      	ldr	r3, [r7, #0]
 800686a:	4a10      	ldr	r2, [pc, #64]	; (80068ac <LSM6DSO_GYRO_GetOutputDataRate+0xd0>)
 800686c:	601a      	str	r2, [r3, #0]
      break;
 800686e:	e003      	b.n	8006878 <LSM6DSO_GYRO_GetOutputDataRate+0x9c>

    default:
      ret = LSM6DSO_ERROR;
 8006870:	2301      	movs	r3, #1
 8006872:	425b      	negs	r3, r3
 8006874:	60fb      	str	r3, [r7, #12]
      break;
 8006876:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 8006878:	68fb      	ldr	r3, [r7, #12]
}
 800687a:	0018      	movs	r0, r3
 800687c:	46bd      	mov	sp, r7
 800687e:	b004      	add	sp, #16
 8006880:	bd80      	pop	{r7, pc}
 8006882:	46c0      	nop			; (mov r8, r8)
 8006884:	0801619c 	.word	0x0801619c
 8006888:	41480000 	.word	0x41480000
 800688c:	41d00000 	.word	0x41d00000
 8006890:	42500000 	.word	0x42500000
 8006894:	42d00000 	.word	0x42d00000
 8006898:	43500000 	.word	0x43500000
 800689c:	43d08000 	.word	0x43d08000
 80068a0:	44504000 	.word	0x44504000
 80068a4:	44d06000 	.word	0x44d06000
 80068a8:	45505000 	.word	0x45505000
 80068ac:	45d05800 	.word	0x45d05800

080068b0 <LSM6DSO_GYRO_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_SetOutputDataRate(LSM6DSO_Object_t *pObj, float_t Odr)
{
 80068b0:	b580      	push	{r7, lr}
 80068b2:	b082      	sub	sp, #8
 80068b4:	af00      	add	r7, sp, #0
 80068b6:	6078      	str	r0, [r7, #4]
 80068b8:	6039      	str	r1, [r7, #0]
  return LSM6DSO_GYRO_SetOutputDataRate_With_Mode(pObj, Odr, LSM6DSO_GYRO_HIGH_PERFORMANCE_MODE);
 80068ba:	6839      	ldr	r1, [r7, #0]
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	2200      	movs	r2, #0
 80068c0:	0018      	movs	r0, r3
 80068c2:	f000 f805 	bl	80068d0 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode>
 80068c6:	0003      	movs	r3, r0
}
 80068c8:	0018      	movs	r0, r3
 80068ca:	46bd      	mov	sp, r7
 80068cc:	b002      	add	sp, #8
 80068ce:	bd80      	pop	{r7, pc}

080068d0 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode>:
  * @param  Mode the gyroscope operating mode
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_SetOutputDataRate_With_Mode(LSM6DSO_Object_t *pObj, float_t Odr,
                                                 LSM6DSO_GYRO_Operating_Mode_t Mode)
{
 80068d0:	b590      	push	{r4, r7, lr}
 80068d2:	b089      	sub	sp, #36	; 0x24
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	60f8      	str	r0, [r7, #12]
 80068d8:	60b9      	str	r1, [r7, #8]
 80068da:	1dfb      	adds	r3, r7, #7
 80068dc:	701a      	strb	r2, [r3, #0]
  int32_t ret = LSM6DSO_OK;
 80068de:	2300      	movs	r3, #0
 80068e0:	61fb      	str	r3, [r7, #28]
  float_t newOdr = Odr;
 80068e2:	68bb      	ldr	r3, [r7, #8]
 80068e4:	61bb      	str	r3, [r7, #24]

  switch (Mode)
 80068e6:	1dfb      	adds	r3, r7, #7
 80068e8:	781b      	ldrb	r3, [r3, #0]
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d002      	beq.n	80068f4 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x24>
 80068ee:	2b01      	cmp	r3, #1
 80068f0:	d028      	beq.n	8006944 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x74>
 80068f2:	e05a      	b.n	80069aa <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xda>
    case LSM6DSO_GYRO_HIGH_PERFORMANCE_MODE:
    {
      /* We must uncheck Low Power bit if it is enabled */
      lsm6dso_ctrl7_g_t val1;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL7_G, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	331c      	adds	r3, #28
 80068f8:	0018      	movs	r0, r3
 80068fa:	2314      	movs	r3, #20
 80068fc:	18fa      	adds	r2, r7, r3
 80068fe:	2301      	movs	r3, #1
 8006900:	2116      	movs	r1, #22
 8006902:	f000 fba7 	bl	8007054 <lsm6dso_read_reg>
 8006906:	1e03      	subs	r3, r0, #0
 8006908:	d002      	beq.n	8006910 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x40>
      {
        return LSM6DSO_ERROR;
 800690a:	2301      	movs	r3, #1
 800690c:	425b      	negs	r3, r3
 800690e:	e06e      	b.n	80069ee <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11e>
      }

      if (val1.g_hm_mode != 0U)
 8006910:	2414      	movs	r4, #20
 8006912:	193b      	adds	r3, r7, r4
 8006914:	781b      	ldrb	r3, [r3, #0]
 8006916:	227f      	movs	r2, #127	; 0x7f
 8006918:	4393      	bics	r3, r2
 800691a:	b2db      	uxtb	r3, r3
 800691c:	2b00      	cmp	r3, #0
 800691e:	d048      	beq.n	80069b2 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe2>
      {
        val1.g_hm_mode = 0U;
 8006920:	193b      	adds	r3, r7, r4
 8006922:	781a      	ldrb	r2, [r3, #0]
 8006924:	217f      	movs	r1, #127	; 0x7f
 8006926:	400a      	ands	r2, r1
 8006928:	701a      	strb	r2, [r3, #0]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL7_G, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	331c      	adds	r3, #28
 800692e:	0018      	movs	r0, r3
 8006930:	193a      	adds	r2, r7, r4
 8006932:	2301      	movs	r3, #1
 8006934:	2116      	movs	r1, #22
 8006936:	f000 fbae 	bl	8007096 <lsm6dso_write_reg>
 800693a:	1e03      	subs	r3, r0, #0
 800693c:	d039      	beq.n	80069b2 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe2>
        {
          return LSM6DSO_ERROR;
 800693e:	2301      	movs	r3, #1
 8006940:	425b      	negs	r3, r3
 8006942:	e054      	b.n	80069ee <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11e>
    case LSM6DSO_GYRO_LOW_POWER_NORMAL_MODE:
    {
      /* We must check the Low Power bit if it is unchecked */
      lsm6dso_ctrl7_g_t val1;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL7_G, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	331c      	adds	r3, #28
 8006948:	0018      	movs	r0, r3
 800694a:	2310      	movs	r3, #16
 800694c:	18fa      	adds	r2, r7, r3
 800694e:	2301      	movs	r3, #1
 8006950:	2116      	movs	r1, #22
 8006952:	f000 fb7f 	bl	8007054 <lsm6dso_read_reg>
 8006956:	1e03      	subs	r3, r0, #0
 8006958:	d002      	beq.n	8006960 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x90>
      {
        return LSM6DSO_ERROR;
 800695a:	2301      	movs	r3, #1
 800695c:	425b      	negs	r3, r3
 800695e:	e046      	b.n	80069ee <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11e>
      }

      if (val1.g_hm_mode == 0U)
 8006960:	2410      	movs	r4, #16
 8006962:	193b      	adds	r3, r7, r4
 8006964:	781b      	ldrb	r3, [r3, #0]
 8006966:	227f      	movs	r2, #127	; 0x7f
 8006968:	4393      	bics	r3, r2
 800696a:	b2db      	uxtb	r3, r3
 800696c:	2b00      	cmp	r3, #0
 800696e:	d112      	bne.n	8006996 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xc6>
      {
        val1.g_hm_mode = 1U;
 8006970:	193b      	adds	r3, r7, r4
 8006972:	781a      	ldrb	r2, [r3, #0]
 8006974:	2180      	movs	r1, #128	; 0x80
 8006976:	4249      	negs	r1, r1
 8006978:	430a      	orrs	r2, r1
 800697a:	701a      	strb	r2, [r3, #0]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL7_G, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	331c      	adds	r3, #28
 8006980:	0018      	movs	r0, r3
 8006982:	193a      	adds	r2, r7, r4
 8006984:	2301      	movs	r3, #1
 8006986:	2116      	movs	r1, #22
 8006988:	f000 fb85 	bl	8007096 <lsm6dso_write_reg>
 800698c:	1e03      	subs	r3, r0, #0
 800698e:	d002      	beq.n	8006996 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xc6>
        {
          return LSM6DSO_ERROR;
 8006990:	2301      	movs	r3, #1
 8006992:	425b      	negs	r3, r3
 8006994:	e02b      	b.n	80069ee <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11e>
        }
      }

      /* Now we need to limit the ODR to 208 Hz if it is higher */
      if (newOdr > 208.0f)
 8006996:	4918      	ldr	r1, [pc, #96]	; (80069f8 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x128>)
 8006998:	69b8      	ldr	r0, [r7, #24]
 800699a:	f7f9 fd5b 	bl	8000454 <__aeabi_fcmpgt>
 800699e:	1e03      	subs	r3, r0, #0
 80069a0:	d100      	bne.n	80069a4 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xd4>
      {
        newOdr = 208.0f;
      }
      break;
 80069a2:	e007      	b.n	80069b4 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe4>
        newOdr = 208.0f;
 80069a4:	4b14      	ldr	r3, [pc, #80]	; (80069f8 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x128>)
 80069a6:	61bb      	str	r3, [r7, #24]
 80069a8:	e004      	b.n	80069b4 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe4>
    }
    default:
      ret = LSM6DSO_ERROR;
 80069aa:	2301      	movs	r3, #1
 80069ac:	425b      	negs	r3, r3
 80069ae:	61fb      	str	r3, [r7, #28]
      break;
 80069b0:	e000      	b.n	80069b4 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe4>
      break;
 80069b2:	46c0      	nop			; (mov r8, r8)
  }

  if (ret == LSM6DSO_ERROR)
 80069b4:	69fb      	ldr	r3, [r7, #28]
 80069b6:	3301      	adds	r3, #1
 80069b8:	d102      	bne.n	80069c0 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xf0>
  {
    return LSM6DSO_ERROR;
 80069ba:	2301      	movs	r3, #1
 80069bc:	425b      	negs	r3, r3
 80069be:	e016      	b.n	80069ee <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11e>
  }

  if (pObj->gyro_is_enabled == 1U)
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	222a      	movs	r2, #42	; 0x2a
 80069c4:	5c9b      	ldrb	r3, [r3, r2]
 80069c6:	2b01      	cmp	r3, #1
 80069c8:	d108      	bne.n	80069dc <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x10c>
  {
    ret = LSM6DSO_GYRO_SetOutputDataRate_When_Enabled(pObj, newOdr);
 80069ca:	69ba      	ldr	r2, [r7, #24]
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	1c11      	adds	r1, r2, #0
 80069d0:	0018      	movs	r0, r3
 80069d2:	f000 fa1d 	bl	8006e10 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled>
 80069d6:	0003      	movs	r3, r0
 80069d8:	61fb      	str	r3, [r7, #28]
 80069da:	e007      	b.n	80069ec <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11c>
  }
  else
  {
    ret = LSM6DSO_GYRO_SetOutputDataRate_When_Disabled(pObj, newOdr);
 80069dc:	69ba      	ldr	r2, [r7, #24]
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	1c11      	adds	r1, r2, #0
 80069e2:	0018      	movs	r0, r3
 80069e4:	f000 fa8a 	bl	8006efc <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled>
 80069e8:	0003      	movs	r3, r0
 80069ea:	61fb      	str	r3, [r7, #28]
  }

  return ret;
 80069ec:	69fb      	ldr	r3, [r7, #28]
}
 80069ee:	0018      	movs	r0, r3
 80069f0:	46bd      	mov	sp, r7
 80069f2:	b009      	add	sp, #36	; 0x24
 80069f4:	bd90      	pop	{r4, r7, pc}
 80069f6:	46c0      	nop			; (mov r8, r8)
 80069f8:	43500000 	.word	0x43500000

080069fc <LSM6DSO_GYRO_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_GetFullScale(LSM6DSO_Object_t *pObj, int32_t  *FullScale)
{
 80069fc:	b580      	push	{r7, lr}
 80069fe:	b084      	sub	sp, #16
 8006a00:	af00      	add	r7, sp, #0
 8006a02:	6078      	str	r0, [r7, #4]
 8006a04:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 8006a06:	2300      	movs	r3, #0
 8006a08:	60fb      	str	r3, [r7, #12]
  lsm6dso_fs_g_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lsm6dso_gy_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM6DSO_OK)
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	331c      	adds	r3, #28
 8006a0e:	220b      	movs	r2, #11
 8006a10:	18ba      	adds	r2, r7, r2
 8006a12:	0011      	movs	r1, r2
 8006a14:	0018      	movs	r0, r3
 8006a16:	f000 fd99 	bl	800754c <lsm6dso_gy_full_scale_get>
 8006a1a:	1e03      	subs	r3, r0, #0
 8006a1c:	d002      	beq.n	8006a24 <LSM6DSO_GYRO_GetFullScale+0x28>
  {
    return LSM6DSO_ERROR;
 8006a1e:	2301      	movs	r3, #1
 8006a20:	425b      	negs	r3, r3
 8006a22:	e025      	b.n	8006a70 <LSM6DSO_GYRO_GetFullScale+0x74>
  }

  switch (fs_low_level)
 8006a24:	230b      	movs	r3, #11
 8006a26:	18fb      	adds	r3, r7, r3
 8006a28:	781b      	ldrb	r3, [r3, #0]
 8006a2a:	2b06      	cmp	r3, #6
 8006a2c:	d81b      	bhi.n	8006a66 <LSM6DSO_GYRO_GetFullScale+0x6a>
 8006a2e:	009a      	lsls	r2, r3, #2
 8006a30:	4b11      	ldr	r3, [pc, #68]	; (8006a78 <LSM6DSO_GYRO_GetFullScale+0x7c>)
 8006a32:	18d3      	adds	r3, r2, r3
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	469f      	mov	pc, r3
  {
    case LSM6DSO_125dps:
      *FullScale =  125;
 8006a38:	683b      	ldr	r3, [r7, #0]
 8006a3a:	227d      	movs	r2, #125	; 0x7d
 8006a3c:	601a      	str	r2, [r3, #0]
      break;
 8006a3e:	e016      	b.n	8006a6e <LSM6DSO_GYRO_GetFullScale+0x72>

    case LSM6DSO_250dps:
      *FullScale =  250;
 8006a40:	683b      	ldr	r3, [r7, #0]
 8006a42:	22fa      	movs	r2, #250	; 0xfa
 8006a44:	601a      	str	r2, [r3, #0]
      break;
 8006a46:	e012      	b.n	8006a6e <LSM6DSO_GYRO_GetFullScale+0x72>

    case LSM6DSO_500dps:
      *FullScale =  500;
 8006a48:	683b      	ldr	r3, [r7, #0]
 8006a4a:	22fa      	movs	r2, #250	; 0xfa
 8006a4c:	0052      	lsls	r2, r2, #1
 8006a4e:	601a      	str	r2, [r3, #0]
      break;
 8006a50:	e00d      	b.n	8006a6e <LSM6DSO_GYRO_GetFullScale+0x72>

    case LSM6DSO_1000dps:
      *FullScale = 1000;
 8006a52:	683b      	ldr	r3, [r7, #0]
 8006a54:	22fa      	movs	r2, #250	; 0xfa
 8006a56:	0092      	lsls	r2, r2, #2
 8006a58:	601a      	str	r2, [r3, #0]
      break;
 8006a5a:	e008      	b.n	8006a6e <LSM6DSO_GYRO_GetFullScale+0x72>

    case LSM6DSO_2000dps:
      *FullScale = 2000;
 8006a5c:	683b      	ldr	r3, [r7, #0]
 8006a5e:	22fa      	movs	r2, #250	; 0xfa
 8006a60:	00d2      	lsls	r2, r2, #3
 8006a62:	601a      	str	r2, [r3, #0]
      break;
 8006a64:	e003      	b.n	8006a6e <LSM6DSO_GYRO_GetFullScale+0x72>

    default:
      ret = LSM6DSO_ERROR;
 8006a66:	2301      	movs	r3, #1
 8006a68:	425b      	negs	r3, r3
 8006a6a:	60fb      	str	r3, [r7, #12]
      break;
 8006a6c:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 8006a6e:	68fb      	ldr	r3, [r7, #12]
}
 8006a70:	0018      	movs	r0, r3
 8006a72:	46bd      	mov	sp, r7
 8006a74:	b004      	add	sp, #16
 8006a76:	bd80      	pop	{r7, pc}
 8006a78:	080161c8 	.word	0x080161c8

08006a7c <LSM6DSO_GYRO_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_SetFullScale(LSM6DSO_Object_t *pObj, int32_t FullScale)
{
 8006a7c:	b580      	push	{r7, lr}
 8006a7e:	b084      	sub	sp, #16
 8006a80:	af00      	add	r7, sp, #0
 8006a82:	6078      	str	r0, [r7, #4]
 8006a84:	6039      	str	r1, [r7, #0]
  lsm6dso_fs_g_t new_fs;

  new_fs = (FullScale <= 125)  ? LSM6DSO_125dps
           : (FullScale <= 250)  ? LSM6DSO_250dps
 8006a86:	683b      	ldr	r3, [r7, #0]
 8006a88:	2b7d      	cmp	r3, #125	; 0x7d
 8006a8a:	dd14      	ble.n	8006ab6 <LSM6DSO_GYRO_SetFullScale+0x3a>
 8006a8c:	683b      	ldr	r3, [r7, #0]
 8006a8e:	2bfa      	cmp	r3, #250	; 0xfa
 8006a90:	dd0f      	ble.n	8006ab2 <LSM6DSO_GYRO_SetFullScale+0x36>
 8006a92:	683a      	ldr	r2, [r7, #0]
 8006a94:	23fa      	movs	r3, #250	; 0xfa
 8006a96:	005b      	lsls	r3, r3, #1
 8006a98:	429a      	cmp	r2, r3
 8006a9a:	dd08      	ble.n	8006aae <LSM6DSO_GYRO_SetFullScale+0x32>
 8006a9c:	683a      	ldr	r2, [r7, #0]
 8006a9e:	23fa      	movs	r3, #250	; 0xfa
 8006aa0:	009b      	lsls	r3, r3, #2
 8006aa2:	429a      	cmp	r2, r3
 8006aa4:	dc01      	bgt.n	8006aaa <LSM6DSO_GYRO_SetFullScale+0x2e>
 8006aa6:	2304      	movs	r3, #4
 8006aa8:	e006      	b.n	8006ab8 <LSM6DSO_GYRO_SetFullScale+0x3c>
 8006aaa:	2306      	movs	r3, #6
 8006aac:	e004      	b.n	8006ab8 <LSM6DSO_GYRO_SetFullScale+0x3c>
 8006aae:	2302      	movs	r3, #2
 8006ab0:	e002      	b.n	8006ab8 <LSM6DSO_GYRO_SetFullScale+0x3c>
 8006ab2:	2300      	movs	r3, #0
 8006ab4:	e000      	b.n	8006ab8 <LSM6DSO_GYRO_SetFullScale+0x3c>
 8006ab6:	2301      	movs	r3, #1
  new_fs = (FullScale <= 125)  ? LSM6DSO_125dps
 8006ab8:	210f      	movs	r1, #15
 8006aba:	187a      	adds	r2, r7, r1
 8006abc:	7013      	strb	r3, [r2, #0]
           : (FullScale <= 500)  ? LSM6DSO_500dps
           : (FullScale <= 1000) ? LSM6DSO_1000dps
           :                       LSM6DSO_2000dps;

  if (lsm6dso_gy_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSO_OK)
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	331c      	adds	r3, #28
 8006ac2:	001a      	movs	r2, r3
 8006ac4:	187b      	adds	r3, r7, r1
 8006ac6:	781b      	ldrb	r3, [r3, #0]
 8006ac8:	0019      	movs	r1, r3
 8006aca:	0010      	movs	r0, r2
 8006acc:	f000 fd0e 	bl	80074ec <lsm6dso_gy_full_scale_set>
 8006ad0:	1e03      	subs	r3, r0, #0
 8006ad2:	d002      	beq.n	8006ada <LSM6DSO_GYRO_SetFullScale+0x5e>
  {
    return LSM6DSO_ERROR;
 8006ad4:	2301      	movs	r3, #1
 8006ad6:	425b      	negs	r3, r3
 8006ad8:	e000      	b.n	8006adc <LSM6DSO_GYRO_SetFullScale+0x60>
  }

  return LSM6DSO_OK;
 8006ada:	2300      	movs	r3, #0
}
 8006adc:	0018      	movs	r0, r3
 8006ade:	46bd      	mov	sp, r7
 8006ae0:	b004      	add	sp, #16
 8006ae2:	bd80      	pop	{r7, pc}

08006ae4 <LSM6DSO_GYRO_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_GetAxesRaw(LSM6DSO_Object_t *pObj, LSM6DSO_AxesRaw_t *Value)
{
 8006ae4:	b580      	push	{r7, lr}
 8006ae6:	b084      	sub	sp, #16
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	6078      	str	r0, [r7, #4]
 8006aec:	6039      	str	r1, [r7, #0]
  lsm6dso_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lsm6dso_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSO_OK)
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	331c      	adds	r3, #28
 8006af2:	2208      	movs	r2, #8
 8006af4:	18ba      	adds	r2, r7, r2
 8006af6:	0011      	movs	r1, r2
 8006af8:	0018      	movs	r0, r3
 8006afa:	f000 ff2f 	bl	800795c <lsm6dso_angular_rate_raw_get>
 8006afe:	1e03      	subs	r3, r0, #0
 8006b00:	d002      	beq.n	8006b08 <LSM6DSO_GYRO_GetAxesRaw+0x24>
  {
    return LSM6DSO_ERROR;
 8006b02:	2301      	movs	r3, #1
 8006b04:	425b      	negs	r3, r3
 8006b06:	e010      	b.n	8006b2a <LSM6DSO_GYRO_GetAxesRaw+0x46>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 8006b08:	2108      	movs	r1, #8
 8006b0a:	187b      	adds	r3, r7, r1
 8006b0c:	2200      	movs	r2, #0
 8006b0e:	5e9a      	ldrsh	r2, [r3, r2]
 8006b10:	683b      	ldr	r3, [r7, #0]
 8006b12:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 8006b14:	187b      	adds	r3, r7, r1
 8006b16:	2202      	movs	r2, #2
 8006b18:	5e9a      	ldrsh	r2, [r3, r2]
 8006b1a:	683b      	ldr	r3, [r7, #0]
 8006b1c:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 8006b1e:	187b      	adds	r3, r7, r1
 8006b20:	2204      	movs	r2, #4
 8006b22:	5e9a      	ldrsh	r2, [r3, r2]
 8006b24:	683b      	ldr	r3, [r7, #0]
 8006b26:	809a      	strh	r2, [r3, #4]

  return LSM6DSO_OK;
 8006b28:	2300      	movs	r3, #0
}
 8006b2a:	0018      	movs	r0, r3
 8006b2c:	46bd      	mov	sp, r7
 8006b2e:	b004      	add	sp, #16
 8006b30:	bd80      	pop	{r7, pc}

08006b32 <LSM6DSO_GYRO_GetAxes>:
  * @param  pObj the device pObj
  * @param  AngularRate pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_GetAxes(LSM6DSO_Object_t *pObj, LSM6DSO_Axes_t *AngularRate)
{
 8006b32:	b590      	push	{r4, r7, lr}
 8006b34:	b087      	sub	sp, #28
 8006b36:	af00      	add	r7, sp, #0
 8006b38:	6078      	str	r0, [r7, #4]
 8006b3a:	6039      	str	r1, [r7, #0]
  lsm6dso_axis3bit16_t data_raw;
  float_t sensitivity;

  /* Read raw data values. */
  if (lsm6dso_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSO_OK)
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	331c      	adds	r3, #28
 8006b40:	2210      	movs	r2, #16
 8006b42:	18ba      	adds	r2, r7, r2
 8006b44:	0011      	movs	r1, r2
 8006b46:	0018      	movs	r0, r3
 8006b48:	f000 ff08 	bl	800795c <lsm6dso_angular_rate_raw_get>
 8006b4c:	1e03      	subs	r3, r0, #0
 8006b4e:	d002      	beq.n	8006b56 <LSM6DSO_GYRO_GetAxes+0x24>
  {
    return LSM6DSO_ERROR;
 8006b50:	2301      	movs	r3, #1
 8006b52:	425b      	negs	r3, r3
 8006b54:	e046      	b.n	8006be4 <LSM6DSO_GYRO_GetAxes+0xb2>
  }

  /* Get LSM6DSO actual sensitivity. */
  if (LSM6DSO_GYRO_GetSensitivity(pObj, &sensitivity) != LSM6DSO_OK)
 8006b56:	230c      	movs	r3, #12
 8006b58:	18fa      	adds	r2, r7, r3
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	0011      	movs	r1, r2
 8006b5e:	0018      	movs	r0, r3
 8006b60:	f7ff fdf4 	bl	800674c <LSM6DSO_GYRO_GetSensitivity>
 8006b64:	1e03      	subs	r3, r0, #0
 8006b66:	d002      	beq.n	8006b6e <LSM6DSO_GYRO_GetAxes+0x3c>
  {
    return LSM6DSO_ERROR;
 8006b68:	2301      	movs	r3, #1
 8006b6a:	425b      	negs	r3, r3
 8006b6c:	e03a      	b.n	8006be4 <LSM6DSO_GYRO_GetAxes+0xb2>
  }

  /* Calculate the data. */
  AngularRate->x = (int32_t)((float_t)((float_t)data_raw.i16bit[0] * sensitivity));
 8006b6e:	2410      	movs	r4, #16
 8006b70:	193b      	adds	r3, r7, r4
 8006b72:	2200      	movs	r2, #0
 8006b74:	5e9b      	ldrsh	r3, [r3, r2]
 8006b76:	0018      	movs	r0, r3
 8006b78:	f7fa fc22 	bl	80013c0 <__aeabi_i2f>
 8006b7c:	1c02      	adds	r2, r0, #0
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	1c19      	adds	r1, r3, #0
 8006b82:	1c10      	adds	r0, r2, #0
 8006b84:	f7fa f912 	bl	8000dac <__aeabi_fmul>
 8006b88:	1c03      	adds	r3, r0, #0
 8006b8a:	1c18      	adds	r0, r3, #0
 8006b8c:	f7fa fbf8 	bl	8001380 <__aeabi_f2iz>
 8006b90:	0002      	movs	r2, r0
 8006b92:	683b      	ldr	r3, [r7, #0]
 8006b94:	601a      	str	r2, [r3, #0]
  AngularRate->y = (int32_t)((float_t)((float_t)data_raw.i16bit[1] * sensitivity));
 8006b96:	193b      	adds	r3, r7, r4
 8006b98:	2202      	movs	r2, #2
 8006b9a:	5e9b      	ldrsh	r3, [r3, r2]
 8006b9c:	0018      	movs	r0, r3
 8006b9e:	f7fa fc0f 	bl	80013c0 <__aeabi_i2f>
 8006ba2:	1c02      	adds	r2, r0, #0
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	1c19      	adds	r1, r3, #0
 8006ba8:	1c10      	adds	r0, r2, #0
 8006baa:	f7fa f8ff 	bl	8000dac <__aeabi_fmul>
 8006bae:	1c03      	adds	r3, r0, #0
 8006bb0:	1c18      	adds	r0, r3, #0
 8006bb2:	f7fa fbe5 	bl	8001380 <__aeabi_f2iz>
 8006bb6:	0002      	movs	r2, r0
 8006bb8:	683b      	ldr	r3, [r7, #0]
 8006bba:	605a      	str	r2, [r3, #4]
  AngularRate->z = (int32_t)((float_t)((float_t)data_raw.i16bit[2] * sensitivity));
 8006bbc:	193b      	adds	r3, r7, r4
 8006bbe:	2204      	movs	r2, #4
 8006bc0:	5e9b      	ldrsh	r3, [r3, r2]
 8006bc2:	0018      	movs	r0, r3
 8006bc4:	f7fa fbfc 	bl	80013c0 <__aeabi_i2f>
 8006bc8:	1c02      	adds	r2, r0, #0
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	1c19      	adds	r1, r3, #0
 8006bce:	1c10      	adds	r0, r2, #0
 8006bd0:	f7fa f8ec 	bl	8000dac <__aeabi_fmul>
 8006bd4:	1c03      	adds	r3, r0, #0
 8006bd6:	1c18      	adds	r0, r3, #0
 8006bd8:	f7fa fbd2 	bl	8001380 <__aeabi_f2iz>
 8006bdc:	0002      	movs	r2, r0
 8006bde:	683b      	ldr	r3, [r7, #0]
 8006be0:	609a      	str	r2, [r3, #8]

  return LSM6DSO_OK;
 8006be2:	2300      	movs	r3, #0
}
 8006be4:	0018      	movs	r0, r3
 8006be6:	46bd      	mov	sp, r7
 8006be8:	b007      	add	sp, #28
 8006bea:	bd90      	pop	{r4, r7, pc}

08006bec <LSM6DSO_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_Write_Reg(LSM6DSO_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 8006bec:	b580      	push	{r7, lr}
 8006bee:	b082      	sub	sp, #8
 8006bf0:	af00      	add	r7, sp, #0
 8006bf2:	6078      	str	r0, [r7, #4]
 8006bf4:	0008      	movs	r0, r1
 8006bf6:	0011      	movs	r1, r2
 8006bf8:	1cfb      	adds	r3, r7, #3
 8006bfa:	1c02      	adds	r2, r0, #0
 8006bfc:	701a      	strb	r2, [r3, #0]
 8006bfe:	1cbb      	adds	r3, r7, #2
 8006c00:	1c0a      	adds	r2, r1, #0
 8006c02:	701a      	strb	r2, [r3, #0]
  if (lsm6dso_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LSM6DSO_OK)
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	331c      	adds	r3, #28
 8006c08:	0018      	movs	r0, r3
 8006c0a:	1cba      	adds	r2, r7, #2
 8006c0c:	1cfb      	adds	r3, r7, #3
 8006c0e:	7819      	ldrb	r1, [r3, #0]
 8006c10:	2301      	movs	r3, #1
 8006c12:	f000 fa40 	bl	8007096 <lsm6dso_write_reg>
 8006c16:	1e03      	subs	r3, r0, #0
 8006c18:	d002      	beq.n	8006c20 <LSM6DSO_Write_Reg+0x34>
  {
    return LSM6DSO_ERROR;
 8006c1a:	2301      	movs	r3, #1
 8006c1c:	425b      	negs	r3, r3
 8006c1e:	e000      	b.n	8006c22 <LSM6DSO_Write_Reg+0x36>
  }

  return LSM6DSO_OK;
 8006c20:	2300      	movs	r3, #0
}
 8006c22:	0018      	movs	r0, r3
 8006c24:	46bd      	mov	sp, r7
 8006c26:	b002      	add	sp, #8
 8006c28:	bd80      	pop	{r7, pc}
	...

08006c2c <LSM6DSO_ACC_SetOutputDataRate_When_Enabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSO_ACC_SetOutputDataRate_When_Enabled(LSM6DSO_Object_t *pObj, float_t Odr)
{
 8006c2c:	b580      	push	{r7, lr}
 8006c2e:	b084      	sub	sp, #16
 8006c30:	af00      	add	r7, sp, #0
 8006c32:	6078      	str	r0, [r7, #4]
 8006c34:	6039      	str	r1, [r7, #0]
  lsm6dso_odr_xl_t new_odr;

  new_odr = (Odr <=    1.6f) ? LSM6DSO_XL_ODR_1Hz6
            : (Odr <=   12.5f) ? LSM6DSO_XL_ODR_12Hz5
 8006c36:	4933      	ldr	r1, [pc, #204]	; (8006d04 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xd8>)
 8006c38:	6838      	ldr	r0, [r7, #0]
 8006c3a:	f7f9 fc01 	bl	8000440 <__aeabi_fcmple>
 8006c3e:	1e03      	subs	r3, r0, #0
 8006c40:	d001      	beq.n	8006c46 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x1a>
 8006c42:	230b      	movs	r3, #11
 8006c44:	e048      	b.n	8006cd8 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xac>
 8006c46:	4930      	ldr	r1, [pc, #192]	; (8006d08 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xdc>)
 8006c48:	6838      	ldr	r0, [r7, #0]
 8006c4a:	f7f9 fbf9 	bl	8000440 <__aeabi_fcmple>
 8006c4e:	1e03      	subs	r3, r0, #0
 8006c50:	d001      	beq.n	8006c56 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x2a>
 8006c52:	2301      	movs	r3, #1
 8006c54:	e040      	b.n	8006cd8 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xac>
 8006c56:	492d      	ldr	r1, [pc, #180]	; (8006d0c <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xe0>)
 8006c58:	6838      	ldr	r0, [r7, #0]
 8006c5a:	f7f9 fbf1 	bl	8000440 <__aeabi_fcmple>
 8006c5e:	1e03      	subs	r3, r0, #0
 8006c60:	d001      	beq.n	8006c66 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x3a>
 8006c62:	2302      	movs	r3, #2
 8006c64:	e038      	b.n	8006cd8 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xac>
 8006c66:	492a      	ldr	r1, [pc, #168]	; (8006d10 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xe4>)
 8006c68:	6838      	ldr	r0, [r7, #0]
 8006c6a:	f7f9 fbe9 	bl	8000440 <__aeabi_fcmple>
 8006c6e:	1e03      	subs	r3, r0, #0
 8006c70:	d001      	beq.n	8006c76 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x4a>
 8006c72:	2303      	movs	r3, #3
 8006c74:	e030      	b.n	8006cd8 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xac>
 8006c76:	4927      	ldr	r1, [pc, #156]	; (8006d14 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xe8>)
 8006c78:	6838      	ldr	r0, [r7, #0]
 8006c7a:	f7f9 fbe1 	bl	8000440 <__aeabi_fcmple>
 8006c7e:	1e03      	subs	r3, r0, #0
 8006c80:	d001      	beq.n	8006c86 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x5a>
 8006c82:	2304      	movs	r3, #4
 8006c84:	e028      	b.n	8006cd8 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xac>
 8006c86:	4924      	ldr	r1, [pc, #144]	; (8006d18 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xec>)
 8006c88:	6838      	ldr	r0, [r7, #0]
 8006c8a:	f7f9 fbd9 	bl	8000440 <__aeabi_fcmple>
 8006c8e:	1e03      	subs	r3, r0, #0
 8006c90:	d001      	beq.n	8006c96 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x6a>
 8006c92:	2305      	movs	r3, #5
 8006c94:	e020      	b.n	8006cd8 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xac>
 8006c96:	4921      	ldr	r1, [pc, #132]	; (8006d1c <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xf0>)
 8006c98:	6838      	ldr	r0, [r7, #0]
 8006c9a:	f7f9 fbd1 	bl	8000440 <__aeabi_fcmple>
 8006c9e:	1e03      	subs	r3, r0, #0
 8006ca0:	d001      	beq.n	8006ca6 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x7a>
 8006ca2:	2306      	movs	r3, #6
 8006ca4:	e018      	b.n	8006cd8 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xac>
 8006ca6:	491e      	ldr	r1, [pc, #120]	; (8006d20 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xf4>)
 8006ca8:	6838      	ldr	r0, [r7, #0]
 8006caa:	f7f9 fbc9 	bl	8000440 <__aeabi_fcmple>
 8006cae:	1e03      	subs	r3, r0, #0
 8006cb0:	d001      	beq.n	8006cb6 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x8a>
 8006cb2:	2307      	movs	r3, #7
 8006cb4:	e010      	b.n	8006cd8 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xac>
 8006cb6:	491b      	ldr	r1, [pc, #108]	; (8006d24 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xf8>)
 8006cb8:	6838      	ldr	r0, [r7, #0]
 8006cba:	f7f9 fbc1 	bl	8000440 <__aeabi_fcmple>
 8006cbe:	1e03      	subs	r3, r0, #0
 8006cc0:	d001      	beq.n	8006cc6 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x9a>
 8006cc2:	2308      	movs	r3, #8
 8006cc4:	e008      	b.n	8006cd8 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xac>
 8006cc6:	4918      	ldr	r1, [pc, #96]	; (8006d28 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xfc>)
 8006cc8:	6838      	ldr	r0, [r7, #0]
 8006cca:	f7f9 fbb9 	bl	8000440 <__aeabi_fcmple>
 8006cce:	1e03      	subs	r3, r0, #0
 8006cd0:	d001      	beq.n	8006cd6 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xaa>
 8006cd2:	2309      	movs	r3, #9
 8006cd4:	e000      	b.n	8006cd8 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xac>
 8006cd6:	230a      	movs	r3, #10
  new_odr = (Odr <=    1.6f) ? LSM6DSO_XL_ODR_1Hz6
 8006cd8:	210f      	movs	r1, #15
 8006cda:	187a      	adds	r2, r7, r1
 8006cdc:	7013      	strb	r3, [r2, #0]
            : (Odr <= 1667.0f) ? LSM6DSO_XL_ODR_1667Hz
            : (Odr <= 3333.0f) ? LSM6DSO_XL_ODR_3333Hz
            :                    LSM6DSO_XL_ODR_6667Hz;

  /* Output data rate selection. */
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSO_OK)
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	331c      	adds	r3, #28
 8006ce2:	001a      	movs	r2, r3
 8006ce4:	187b      	adds	r3, r7, r1
 8006ce6:	781b      	ldrb	r3, [r3, #0]
 8006ce8:	0019      	movs	r1, r3
 8006cea:	0010      	movs	r0, r2
 8006cec:	f000 fa5b 	bl	80071a6 <lsm6dso_xl_data_rate_set>
 8006cf0:	1e03      	subs	r3, r0, #0
 8006cf2:	d002      	beq.n	8006cfa <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xce>
  {
    return LSM6DSO_ERROR;
 8006cf4:	2301      	movs	r3, #1
 8006cf6:	425b      	negs	r3, r3
 8006cf8:	e000      	b.n	8006cfc <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xd0>
  }

  return LSM6DSO_OK;
 8006cfa:	2300      	movs	r3, #0
}
 8006cfc:	0018      	movs	r0, r3
 8006cfe:	46bd      	mov	sp, r7
 8006d00:	b004      	add	sp, #16
 8006d02:	bd80      	pop	{r7, pc}
 8006d04:	3fcccccd 	.word	0x3fcccccd
 8006d08:	41480000 	.word	0x41480000
 8006d0c:	41d00000 	.word	0x41d00000
 8006d10:	42500000 	.word	0x42500000
 8006d14:	42d00000 	.word	0x42d00000
 8006d18:	43500000 	.word	0x43500000
 8006d1c:	43d08000 	.word	0x43d08000
 8006d20:	44504000 	.word	0x44504000
 8006d24:	44d06000 	.word	0x44d06000
 8006d28:	45505000 	.word	0x45505000

08006d2c <LSM6DSO_ACC_SetOutputDataRate_When_Disabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSO_ACC_SetOutputDataRate_When_Disabled(LSM6DSO_Object_t *pObj, float_t Odr)
{
 8006d2c:	b580      	push	{r7, lr}
 8006d2e:	b082      	sub	sp, #8
 8006d30:	af00      	add	r7, sp, #0
 8006d32:	6078      	str	r0, [r7, #4]
 8006d34:	6039      	str	r1, [r7, #0]
  pObj->acc_odr = (Odr <=    1.6f) ? LSM6DSO_XL_ODR_1Hz6
                  : (Odr <=   12.5f) ? LSM6DSO_XL_ODR_12Hz5
 8006d36:	492c      	ldr	r1, [pc, #176]	; (8006de8 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xbc>)
 8006d38:	6838      	ldr	r0, [r7, #0]
 8006d3a:	f7f9 fb81 	bl	8000440 <__aeabi_fcmple>
 8006d3e:	1e03      	subs	r3, r0, #0
 8006d40:	d001      	beq.n	8006d46 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x1a>
 8006d42:	230b      	movs	r3, #11
 8006d44:	e048      	b.n	8006dd8 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xac>
 8006d46:	4929      	ldr	r1, [pc, #164]	; (8006dec <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xc0>)
 8006d48:	6838      	ldr	r0, [r7, #0]
 8006d4a:	f7f9 fb79 	bl	8000440 <__aeabi_fcmple>
 8006d4e:	1e03      	subs	r3, r0, #0
 8006d50:	d001      	beq.n	8006d56 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x2a>
 8006d52:	2301      	movs	r3, #1
 8006d54:	e040      	b.n	8006dd8 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xac>
 8006d56:	4926      	ldr	r1, [pc, #152]	; (8006df0 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xc4>)
 8006d58:	6838      	ldr	r0, [r7, #0]
 8006d5a:	f7f9 fb71 	bl	8000440 <__aeabi_fcmple>
 8006d5e:	1e03      	subs	r3, r0, #0
 8006d60:	d001      	beq.n	8006d66 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x3a>
 8006d62:	2302      	movs	r3, #2
 8006d64:	e038      	b.n	8006dd8 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xac>
 8006d66:	4923      	ldr	r1, [pc, #140]	; (8006df4 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xc8>)
 8006d68:	6838      	ldr	r0, [r7, #0]
 8006d6a:	f7f9 fb69 	bl	8000440 <__aeabi_fcmple>
 8006d6e:	1e03      	subs	r3, r0, #0
 8006d70:	d001      	beq.n	8006d76 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x4a>
 8006d72:	2303      	movs	r3, #3
 8006d74:	e030      	b.n	8006dd8 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xac>
 8006d76:	4920      	ldr	r1, [pc, #128]	; (8006df8 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xcc>)
 8006d78:	6838      	ldr	r0, [r7, #0]
 8006d7a:	f7f9 fb61 	bl	8000440 <__aeabi_fcmple>
 8006d7e:	1e03      	subs	r3, r0, #0
 8006d80:	d001      	beq.n	8006d86 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x5a>
 8006d82:	2304      	movs	r3, #4
 8006d84:	e028      	b.n	8006dd8 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xac>
 8006d86:	491d      	ldr	r1, [pc, #116]	; (8006dfc <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xd0>)
 8006d88:	6838      	ldr	r0, [r7, #0]
 8006d8a:	f7f9 fb59 	bl	8000440 <__aeabi_fcmple>
 8006d8e:	1e03      	subs	r3, r0, #0
 8006d90:	d001      	beq.n	8006d96 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x6a>
 8006d92:	2305      	movs	r3, #5
 8006d94:	e020      	b.n	8006dd8 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xac>
 8006d96:	491a      	ldr	r1, [pc, #104]	; (8006e00 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xd4>)
 8006d98:	6838      	ldr	r0, [r7, #0]
 8006d9a:	f7f9 fb51 	bl	8000440 <__aeabi_fcmple>
 8006d9e:	1e03      	subs	r3, r0, #0
 8006da0:	d001      	beq.n	8006da6 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x7a>
 8006da2:	2306      	movs	r3, #6
 8006da4:	e018      	b.n	8006dd8 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xac>
 8006da6:	4917      	ldr	r1, [pc, #92]	; (8006e04 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xd8>)
 8006da8:	6838      	ldr	r0, [r7, #0]
 8006daa:	f7f9 fb49 	bl	8000440 <__aeabi_fcmple>
 8006dae:	1e03      	subs	r3, r0, #0
 8006db0:	d001      	beq.n	8006db6 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x8a>
 8006db2:	2307      	movs	r3, #7
 8006db4:	e010      	b.n	8006dd8 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xac>
 8006db6:	4914      	ldr	r1, [pc, #80]	; (8006e08 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xdc>)
 8006db8:	6838      	ldr	r0, [r7, #0]
 8006dba:	f7f9 fb41 	bl	8000440 <__aeabi_fcmple>
 8006dbe:	1e03      	subs	r3, r0, #0
 8006dc0:	d001      	beq.n	8006dc6 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x9a>
 8006dc2:	2308      	movs	r3, #8
 8006dc4:	e008      	b.n	8006dd8 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xac>
 8006dc6:	4911      	ldr	r1, [pc, #68]	; (8006e0c <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xe0>)
 8006dc8:	6838      	ldr	r0, [r7, #0]
 8006dca:	f7f9 fb39 	bl	8000440 <__aeabi_fcmple>
 8006dce:	1e03      	subs	r3, r0, #0
 8006dd0:	d001      	beq.n	8006dd6 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xaa>
 8006dd2:	2309      	movs	r3, #9
 8006dd4:	e000      	b.n	8006dd8 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xac>
 8006dd6:	230a      	movs	r3, #10
  pObj->acc_odr = (Odr <=    1.6f) ? LSM6DSO_XL_ODR_1Hz6
 8006dd8:	687a      	ldr	r2, [r7, #4]
 8006dda:	212b      	movs	r1, #43	; 0x2b
 8006ddc:	5453      	strb	r3, [r2, r1]
                  : (Odr <=  833.0f) ? LSM6DSO_XL_ODR_833Hz
                  : (Odr <= 1667.0f) ? LSM6DSO_XL_ODR_1667Hz
                  : (Odr <= 3333.0f) ? LSM6DSO_XL_ODR_3333Hz
                  :                    LSM6DSO_XL_ODR_6667Hz;

  return LSM6DSO_OK;
 8006dde:	2300      	movs	r3, #0
}
 8006de0:	0018      	movs	r0, r3
 8006de2:	46bd      	mov	sp, r7
 8006de4:	b002      	add	sp, #8
 8006de6:	bd80      	pop	{r7, pc}
 8006de8:	3fcccccd 	.word	0x3fcccccd
 8006dec:	41480000 	.word	0x41480000
 8006df0:	41d00000 	.word	0x41d00000
 8006df4:	42500000 	.word	0x42500000
 8006df8:	42d00000 	.word	0x42d00000
 8006dfc:	43500000 	.word	0x43500000
 8006e00:	43d08000 	.word	0x43d08000
 8006e04:	44504000 	.word	0x44504000
 8006e08:	44d06000 	.word	0x44d06000
 8006e0c:	45505000 	.word	0x45505000

08006e10 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSO_GYRO_SetOutputDataRate_When_Enabled(LSM6DSO_Object_t *pObj, float_t Odr)
{
 8006e10:	b580      	push	{r7, lr}
 8006e12:	b084      	sub	sp, #16
 8006e14:	af00      	add	r7, sp, #0
 8006e16:	6078      	str	r0, [r7, #4]
 8006e18:	6039      	str	r1, [r7, #0]
  lsm6dso_odr_g_t new_odr;

  new_odr = (Odr <=   12.5f) ? LSM6DSO_GY_ODR_12Hz5
            : (Odr <=   26.0f) ? LSM6DSO_GY_ODR_26Hz
 8006e1a:	492f      	ldr	r1, [pc, #188]	; (8006ed8 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xc8>)
 8006e1c:	6838      	ldr	r0, [r7, #0]
 8006e1e:	f7f9 fb0f 	bl	8000440 <__aeabi_fcmple>
 8006e22:	1e03      	subs	r3, r0, #0
 8006e24:	d001      	beq.n	8006e2a <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x1a>
 8006e26:	2301      	movs	r3, #1
 8006e28:	e040      	b.n	8006eac <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x9c>
 8006e2a:	492c      	ldr	r1, [pc, #176]	; (8006edc <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xcc>)
 8006e2c:	6838      	ldr	r0, [r7, #0]
 8006e2e:	f7f9 fb07 	bl	8000440 <__aeabi_fcmple>
 8006e32:	1e03      	subs	r3, r0, #0
 8006e34:	d001      	beq.n	8006e3a <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x2a>
 8006e36:	2302      	movs	r3, #2
 8006e38:	e038      	b.n	8006eac <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x9c>
 8006e3a:	4929      	ldr	r1, [pc, #164]	; (8006ee0 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd0>)
 8006e3c:	6838      	ldr	r0, [r7, #0]
 8006e3e:	f7f9 faff 	bl	8000440 <__aeabi_fcmple>
 8006e42:	1e03      	subs	r3, r0, #0
 8006e44:	d001      	beq.n	8006e4a <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x3a>
 8006e46:	2303      	movs	r3, #3
 8006e48:	e030      	b.n	8006eac <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x9c>
 8006e4a:	4926      	ldr	r1, [pc, #152]	; (8006ee4 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>)
 8006e4c:	6838      	ldr	r0, [r7, #0]
 8006e4e:	f7f9 faf7 	bl	8000440 <__aeabi_fcmple>
 8006e52:	1e03      	subs	r3, r0, #0
 8006e54:	d001      	beq.n	8006e5a <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x4a>
 8006e56:	2304      	movs	r3, #4
 8006e58:	e028      	b.n	8006eac <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x9c>
 8006e5a:	4923      	ldr	r1, [pc, #140]	; (8006ee8 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd8>)
 8006e5c:	6838      	ldr	r0, [r7, #0]
 8006e5e:	f7f9 faef 	bl	8000440 <__aeabi_fcmple>
 8006e62:	1e03      	subs	r3, r0, #0
 8006e64:	d001      	beq.n	8006e6a <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x5a>
 8006e66:	2305      	movs	r3, #5
 8006e68:	e020      	b.n	8006eac <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x9c>
 8006e6a:	4920      	ldr	r1, [pc, #128]	; (8006eec <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xdc>)
 8006e6c:	6838      	ldr	r0, [r7, #0]
 8006e6e:	f7f9 fae7 	bl	8000440 <__aeabi_fcmple>
 8006e72:	1e03      	subs	r3, r0, #0
 8006e74:	d001      	beq.n	8006e7a <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x6a>
 8006e76:	2306      	movs	r3, #6
 8006e78:	e018      	b.n	8006eac <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x9c>
 8006e7a:	491d      	ldr	r1, [pc, #116]	; (8006ef0 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xe0>)
 8006e7c:	6838      	ldr	r0, [r7, #0]
 8006e7e:	f7f9 fadf 	bl	8000440 <__aeabi_fcmple>
 8006e82:	1e03      	subs	r3, r0, #0
 8006e84:	d001      	beq.n	8006e8a <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x7a>
 8006e86:	2307      	movs	r3, #7
 8006e88:	e010      	b.n	8006eac <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x9c>
 8006e8a:	491a      	ldr	r1, [pc, #104]	; (8006ef4 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xe4>)
 8006e8c:	6838      	ldr	r0, [r7, #0]
 8006e8e:	f7f9 fad7 	bl	8000440 <__aeabi_fcmple>
 8006e92:	1e03      	subs	r3, r0, #0
 8006e94:	d001      	beq.n	8006e9a <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x8a>
 8006e96:	2308      	movs	r3, #8
 8006e98:	e008      	b.n	8006eac <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x9c>
 8006e9a:	4917      	ldr	r1, [pc, #92]	; (8006ef8 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xe8>)
 8006e9c:	6838      	ldr	r0, [r7, #0]
 8006e9e:	f7f9 facf 	bl	8000440 <__aeabi_fcmple>
 8006ea2:	1e03      	subs	r3, r0, #0
 8006ea4:	d001      	beq.n	8006eaa <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x9a>
 8006ea6:	2309      	movs	r3, #9
 8006ea8:	e000      	b.n	8006eac <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x9c>
 8006eaa:	230a      	movs	r3, #10
  new_odr = (Odr <=   12.5f) ? LSM6DSO_GY_ODR_12Hz5
 8006eac:	210f      	movs	r1, #15
 8006eae:	187a      	adds	r2, r7, r1
 8006eb0:	7013      	strb	r3, [r2, #0]
            : (Odr <= 1667.0f) ? LSM6DSO_GY_ODR_1667Hz
            : (Odr <= 3333.0f) ? LSM6DSO_GY_ODR_3333Hz
            :                    LSM6DSO_GY_ODR_6667Hz;

  /* Output data rate selection. */
  if (lsm6dso_gy_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSO_OK)
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	331c      	adds	r3, #28
 8006eb6:	001a      	movs	r2, r3
 8006eb8:	187b      	adds	r3, r7, r1
 8006eba:	781b      	ldrb	r3, [r3, #0]
 8006ebc:	0019      	movs	r1, r3
 8006ebe:	0010      	movs	r0, r2
 8006ec0:	f000 fb7e 	bl	80075c0 <lsm6dso_gy_data_rate_set>
 8006ec4:	1e03      	subs	r3, r0, #0
 8006ec6:	d002      	beq.n	8006ece <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xbe>
  {
    return LSM6DSO_ERROR;
 8006ec8:	2301      	movs	r3, #1
 8006eca:	425b      	negs	r3, r3
 8006ecc:	e000      	b.n	8006ed0 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xc0>
  }

  return LSM6DSO_OK;
 8006ece:	2300      	movs	r3, #0
}
 8006ed0:	0018      	movs	r0, r3
 8006ed2:	46bd      	mov	sp, r7
 8006ed4:	b004      	add	sp, #16
 8006ed6:	bd80      	pop	{r7, pc}
 8006ed8:	41480000 	.word	0x41480000
 8006edc:	41d00000 	.word	0x41d00000
 8006ee0:	42500000 	.word	0x42500000
 8006ee4:	42d00000 	.word	0x42d00000
 8006ee8:	43500000 	.word	0x43500000
 8006eec:	43d08000 	.word	0x43d08000
 8006ef0:	44504000 	.word	0x44504000
 8006ef4:	44d06000 	.word	0x44d06000
 8006ef8:	45505000 	.word	0x45505000

08006efc <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSO_GYRO_SetOutputDataRate_When_Disabled(LSM6DSO_Object_t *pObj, float_t Odr)
{
 8006efc:	b580      	push	{r7, lr}
 8006efe:	b082      	sub	sp, #8
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	6078      	str	r0, [r7, #4]
 8006f04:	6039      	str	r1, [r7, #0]
  pObj->gyro_odr = (Odr <=   12.5f) ? LSM6DSO_GY_ODR_12Hz5
                   : (Odr <=   26.0f) ? LSM6DSO_GY_ODR_26Hz
 8006f06:	4928      	ldr	r1, [pc, #160]	; (8006fa8 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xac>)
 8006f08:	6838      	ldr	r0, [r7, #0]
 8006f0a:	f7f9 fa99 	bl	8000440 <__aeabi_fcmple>
 8006f0e:	1e03      	subs	r3, r0, #0
 8006f10:	d001      	beq.n	8006f16 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x1a>
 8006f12:	2301      	movs	r3, #1
 8006f14:	e040      	b.n	8006f98 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x9c>
 8006f16:	4925      	ldr	r1, [pc, #148]	; (8006fac <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xb0>)
 8006f18:	6838      	ldr	r0, [r7, #0]
 8006f1a:	f7f9 fa91 	bl	8000440 <__aeabi_fcmple>
 8006f1e:	1e03      	subs	r3, r0, #0
 8006f20:	d001      	beq.n	8006f26 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x2a>
 8006f22:	2302      	movs	r3, #2
 8006f24:	e038      	b.n	8006f98 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x9c>
 8006f26:	4922      	ldr	r1, [pc, #136]	; (8006fb0 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xb4>)
 8006f28:	6838      	ldr	r0, [r7, #0]
 8006f2a:	f7f9 fa89 	bl	8000440 <__aeabi_fcmple>
 8006f2e:	1e03      	subs	r3, r0, #0
 8006f30:	d001      	beq.n	8006f36 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x3a>
 8006f32:	2303      	movs	r3, #3
 8006f34:	e030      	b.n	8006f98 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x9c>
 8006f36:	491f      	ldr	r1, [pc, #124]	; (8006fb4 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xb8>)
 8006f38:	6838      	ldr	r0, [r7, #0]
 8006f3a:	f7f9 fa81 	bl	8000440 <__aeabi_fcmple>
 8006f3e:	1e03      	subs	r3, r0, #0
 8006f40:	d001      	beq.n	8006f46 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x4a>
 8006f42:	2304      	movs	r3, #4
 8006f44:	e028      	b.n	8006f98 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x9c>
 8006f46:	491c      	ldr	r1, [pc, #112]	; (8006fb8 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xbc>)
 8006f48:	6838      	ldr	r0, [r7, #0]
 8006f4a:	f7f9 fa79 	bl	8000440 <__aeabi_fcmple>
 8006f4e:	1e03      	subs	r3, r0, #0
 8006f50:	d001      	beq.n	8006f56 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x5a>
 8006f52:	2305      	movs	r3, #5
 8006f54:	e020      	b.n	8006f98 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x9c>
 8006f56:	4919      	ldr	r1, [pc, #100]	; (8006fbc <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xc0>)
 8006f58:	6838      	ldr	r0, [r7, #0]
 8006f5a:	f7f9 fa71 	bl	8000440 <__aeabi_fcmple>
 8006f5e:	1e03      	subs	r3, r0, #0
 8006f60:	d001      	beq.n	8006f66 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x6a>
 8006f62:	2306      	movs	r3, #6
 8006f64:	e018      	b.n	8006f98 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x9c>
 8006f66:	4916      	ldr	r1, [pc, #88]	; (8006fc0 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xc4>)
 8006f68:	6838      	ldr	r0, [r7, #0]
 8006f6a:	f7f9 fa69 	bl	8000440 <__aeabi_fcmple>
 8006f6e:	1e03      	subs	r3, r0, #0
 8006f70:	d001      	beq.n	8006f76 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x7a>
 8006f72:	2307      	movs	r3, #7
 8006f74:	e010      	b.n	8006f98 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x9c>
 8006f76:	4913      	ldr	r1, [pc, #76]	; (8006fc4 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xc8>)
 8006f78:	6838      	ldr	r0, [r7, #0]
 8006f7a:	f7f9 fa61 	bl	8000440 <__aeabi_fcmple>
 8006f7e:	1e03      	subs	r3, r0, #0
 8006f80:	d001      	beq.n	8006f86 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x8a>
 8006f82:	2308      	movs	r3, #8
 8006f84:	e008      	b.n	8006f98 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x9c>
 8006f86:	4910      	ldr	r1, [pc, #64]	; (8006fc8 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xcc>)
 8006f88:	6838      	ldr	r0, [r7, #0]
 8006f8a:	f7f9 fa59 	bl	8000440 <__aeabi_fcmple>
 8006f8e:	1e03      	subs	r3, r0, #0
 8006f90:	d001      	beq.n	8006f96 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x9a>
 8006f92:	2309      	movs	r3, #9
 8006f94:	e000      	b.n	8006f98 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x9c>
 8006f96:	230a      	movs	r3, #10
  pObj->gyro_odr = (Odr <=   12.5f) ? LSM6DSO_GY_ODR_12Hz5
 8006f98:	687a      	ldr	r2, [r7, #4]
 8006f9a:	212c      	movs	r1, #44	; 0x2c
 8006f9c:	5453      	strb	r3, [r2, r1]
                   : (Odr <=  833.0f) ? LSM6DSO_GY_ODR_833Hz
                   : (Odr <= 1667.0f) ? LSM6DSO_GY_ODR_1667Hz
                   : (Odr <= 3333.0f) ? LSM6DSO_GY_ODR_3333Hz
                   :                    LSM6DSO_GY_ODR_6667Hz;

  return LSM6DSO_OK;
 8006f9e:	2300      	movs	r3, #0
}
 8006fa0:	0018      	movs	r0, r3
 8006fa2:	46bd      	mov	sp, r7
 8006fa4:	b002      	add	sp, #8
 8006fa6:	bd80      	pop	{r7, pc}
 8006fa8:	41480000 	.word	0x41480000
 8006fac:	41d00000 	.word	0x41d00000
 8006fb0:	42500000 	.word	0x42500000
 8006fb4:	42d00000 	.word	0x42d00000
 8006fb8:	43500000 	.word	0x43500000
 8006fbc:	43d08000 	.word	0x43d08000
 8006fc0:	44504000 	.word	0x44504000
 8006fc4:	44d06000 	.word	0x44d06000
 8006fc8:	45505000 	.word	0x45505000

08006fcc <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8006fcc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006fce:	b087      	sub	sp, #28
 8006fd0:	af00      	add	r7, sp, #0
 8006fd2:	60f8      	str	r0, [r7, #12]
 8006fd4:	0008      	movs	r0, r1
 8006fd6:	607a      	str	r2, [r7, #4]
 8006fd8:	0019      	movs	r1, r3
 8006fda:	250b      	movs	r5, #11
 8006fdc:	197b      	adds	r3, r7, r5
 8006fde:	1c02      	adds	r2, r0, #0
 8006fe0:	701a      	strb	r2, [r3, #0]
 8006fe2:	2608      	movs	r6, #8
 8006fe4:	19bb      	adds	r3, r7, r6
 8006fe6:	1c0a      	adds	r2, r1, #0
 8006fe8:	801a      	strh	r2, [r3, #0]
  LSM6DSO_Object_t *pObj = (LSM6DSO_Object_t *)Handle;
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8006fee:	697b      	ldr	r3, [r7, #20]
 8006ff0:	695c      	ldr	r4, [r3, #20]
 8006ff2:	697b      	ldr	r3, [r7, #20]
 8006ff4:	7b1b      	ldrb	r3, [r3, #12]
 8006ff6:	b298      	uxth	r0, r3
 8006ff8:	197b      	adds	r3, r7, r5
 8006ffa:	781b      	ldrb	r3, [r3, #0]
 8006ffc:	b299      	uxth	r1, r3
 8006ffe:	19bb      	adds	r3, r7, r6
 8007000:	881b      	ldrh	r3, [r3, #0]
 8007002:	687a      	ldr	r2, [r7, #4]
 8007004:	47a0      	blx	r4
 8007006:	0003      	movs	r3, r0
}
 8007008:	0018      	movs	r0, r3
 800700a:	46bd      	mov	sp, r7
 800700c:	b007      	add	sp, #28
 800700e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007010 <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8007010:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007012:	b087      	sub	sp, #28
 8007014:	af00      	add	r7, sp, #0
 8007016:	60f8      	str	r0, [r7, #12]
 8007018:	0008      	movs	r0, r1
 800701a:	607a      	str	r2, [r7, #4]
 800701c:	0019      	movs	r1, r3
 800701e:	250b      	movs	r5, #11
 8007020:	197b      	adds	r3, r7, r5
 8007022:	1c02      	adds	r2, r0, #0
 8007024:	701a      	strb	r2, [r3, #0]
 8007026:	2608      	movs	r6, #8
 8007028:	19bb      	adds	r3, r7, r6
 800702a:	1c0a      	adds	r2, r1, #0
 800702c:	801a      	strh	r2, [r3, #0]
  LSM6DSO_Object_t *pObj = (LSM6DSO_Object_t *)Handle;
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8007032:	697b      	ldr	r3, [r7, #20]
 8007034:	691c      	ldr	r4, [r3, #16]
 8007036:	697b      	ldr	r3, [r7, #20]
 8007038:	7b1b      	ldrb	r3, [r3, #12]
 800703a:	b298      	uxth	r0, r3
 800703c:	197b      	adds	r3, r7, r5
 800703e:	781b      	ldrb	r3, [r3, #0]
 8007040:	b299      	uxth	r1, r3
 8007042:	19bb      	adds	r3, r7, r6
 8007044:	881b      	ldrh	r3, [r3, #0]
 8007046:	687a      	ldr	r2, [r7, #4]
 8007048:	47a0      	blx	r4
 800704a:	0003      	movs	r3, r0
}
 800704c:	0018      	movs	r0, r3
 800704e:	46bd      	mov	sp, r7
 8007050:	b007      	add	sp, #28
 8007052:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007054 <lsm6dso_read_reg>:
  *
  */
int32_t lsm6dso_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 8007054:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007056:	b087      	sub	sp, #28
 8007058:	af00      	add	r7, sp, #0
 800705a:	60f8      	str	r0, [r7, #12]
 800705c:	0008      	movs	r0, r1
 800705e:	607a      	str	r2, [r7, #4]
 8007060:	0019      	movs	r1, r3
 8007062:	260b      	movs	r6, #11
 8007064:	19bb      	adds	r3, r7, r6
 8007066:	1c02      	adds	r2, r0, #0
 8007068:	701a      	strb	r2, [r3, #0]
 800706a:	2508      	movs	r5, #8
 800706c:	197b      	adds	r3, r7, r5
 800706e:	1c0a      	adds	r2, r1, #0
 8007070:	801a      	strh	r2, [r3, #0]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	685c      	ldr	r4, [r3, #4]
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	6898      	ldr	r0, [r3, #8]
 800707a:	197b      	adds	r3, r7, r5
 800707c:	881d      	ldrh	r5, [r3, #0]
 800707e:	687a      	ldr	r2, [r7, #4]
 8007080:	19bb      	adds	r3, r7, r6
 8007082:	7819      	ldrb	r1, [r3, #0]
 8007084:	002b      	movs	r3, r5
 8007086:	47a0      	blx	r4
 8007088:	0003      	movs	r3, r0
 800708a:	617b      	str	r3, [r7, #20]

  return ret;
 800708c:	697b      	ldr	r3, [r7, #20]
}
 800708e:	0018      	movs	r0, r3
 8007090:	46bd      	mov	sp, r7
 8007092:	b007      	add	sp, #28
 8007094:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007096 <lsm6dso_write_reg>:
  *
  */
int32_t lsm6dso_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 8007096:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007098:	b087      	sub	sp, #28
 800709a:	af00      	add	r7, sp, #0
 800709c:	60f8      	str	r0, [r7, #12]
 800709e:	0008      	movs	r0, r1
 80070a0:	607a      	str	r2, [r7, #4]
 80070a2:	0019      	movs	r1, r3
 80070a4:	260b      	movs	r6, #11
 80070a6:	19bb      	adds	r3, r7, r6
 80070a8:	1c02      	adds	r2, r0, #0
 80070aa:	701a      	strb	r2, [r3, #0]
 80070ac:	2508      	movs	r5, #8
 80070ae:	197b      	adds	r3, r7, r5
 80070b0:	1c0a      	adds	r2, r1, #0
 80070b2:	801a      	strh	r2, [r3, #0]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	681c      	ldr	r4, [r3, #0]
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	6898      	ldr	r0, [r3, #8]
 80070bc:	197b      	adds	r3, r7, r5
 80070be:	881d      	ldrh	r5, [r3, #0]
 80070c0:	687a      	ldr	r2, [r7, #4]
 80070c2:	19bb      	adds	r3, r7, r6
 80070c4:	7819      	ldrb	r1, [r3, #0]
 80070c6:	002b      	movs	r3, r5
 80070c8:	47a0      	blx	r4
 80070ca:	0003      	movs	r3, r0
 80070cc:	617b      	str	r3, [r7, #20]

  return ret;
 80070ce:	697b      	ldr	r3, [r7, #20]
}
 80070d0:	0018      	movs	r0, r3
 80070d2:	46bd      	mov	sp, r7
 80070d4:	b007      	add	sp, #28
 80070d6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080070d8 <lsm6dso_xl_full_scale_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_xl_t val)
{
 80070d8:	b590      	push	{r4, r7, lr}
 80070da:	b085      	sub	sp, #20
 80070dc:	af00      	add	r7, sp, #0
 80070de:	6078      	str	r0, [r7, #4]
 80070e0:	000a      	movs	r2, r1
 80070e2:	1cfb      	adds	r3, r7, #3
 80070e4:	701a      	strb	r2, [r3, #0]
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 80070e6:	2408      	movs	r4, #8
 80070e8:	193a      	adds	r2, r7, r4
 80070ea:	6878      	ldr	r0, [r7, #4]
 80070ec:	2301      	movs	r3, #1
 80070ee:	2110      	movs	r1, #16
 80070f0:	f7ff ffb0 	bl	8007054 <lsm6dso_read_reg>
 80070f4:	0003      	movs	r3, r0
 80070f6:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d117      	bne.n	800712e <lsm6dso_xl_full_scale_set+0x56>
  {
    reg.fs_xl = (uint8_t) val;
 80070fe:	1cfb      	adds	r3, r7, #3
 8007100:	781b      	ldrb	r3, [r3, #0]
 8007102:	2203      	movs	r2, #3
 8007104:	4013      	ands	r3, r2
 8007106:	b2da      	uxtb	r2, r3
 8007108:	193b      	adds	r3, r7, r4
 800710a:	2103      	movs	r1, #3
 800710c:	400a      	ands	r2, r1
 800710e:	0090      	lsls	r0, r2, #2
 8007110:	781a      	ldrb	r2, [r3, #0]
 8007112:	210c      	movs	r1, #12
 8007114:	438a      	bics	r2, r1
 8007116:	1c11      	adds	r1, r2, #0
 8007118:	1c02      	adds	r2, r0, #0
 800711a:	430a      	orrs	r2, r1
 800711c:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 800711e:	193a      	adds	r2, r7, r4
 8007120:	6878      	ldr	r0, [r7, #4]
 8007122:	2301      	movs	r3, #1
 8007124:	2110      	movs	r1, #16
 8007126:	f7ff ffb6 	bl	8007096 <lsm6dso_write_reg>
 800712a:	0003      	movs	r3, r0
 800712c:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800712e:	68fb      	ldr	r3, [r7, #12]
}
 8007130:	0018      	movs	r0, r3
 8007132:	46bd      	mov	sp, r7
 8007134:	b005      	add	sp, #20
 8007136:	bd90      	pop	{r4, r7, pc}

08007138 <lsm6dso_xl_full_scale_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_full_scale_get(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_xl_t *val)
{
 8007138:	b590      	push	{r4, r7, lr}
 800713a:	b085      	sub	sp, #20
 800713c:	af00      	add	r7, sp, #0
 800713e:	6078      	str	r0, [r7, #4]
 8007140:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 8007142:	2408      	movs	r4, #8
 8007144:	193a      	adds	r2, r7, r4
 8007146:	6878      	ldr	r0, [r7, #4]
 8007148:	2301      	movs	r3, #1
 800714a:	2110      	movs	r1, #16
 800714c:	f7ff ff82 	bl	8007054 <lsm6dso_read_reg>
 8007150:	0003      	movs	r3, r0
 8007152:	60fb      	str	r3, [r7, #12]

  switch (reg.fs_xl)
 8007154:	193b      	adds	r3, r7, r4
 8007156:	781b      	ldrb	r3, [r3, #0]
 8007158:	071b      	lsls	r3, r3, #28
 800715a:	0f9b      	lsrs	r3, r3, #30
 800715c:	b2db      	uxtb	r3, r3
 800715e:	2b03      	cmp	r3, #3
 8007160:	d014      	beq.n	800718c <lsm6dso_xl_full_scale_get+0x54>
 8007162:	dc17      	bgt.n	8007194 <lsm6dso_xl_full_scale_get+0x5c>
 8007164:	2b02      	cmp	r3, #2
 8007166:	d00d      	beq.n	8007184 <lsm6dso_xl_full_scale_get+0x4c>
 8007168:	dc14      	bgt.n	8007194 <lsm6dso_xl_full_scale_get+0x5c>
 800716a:	2b00      	cmp	r3, #0
 800716c:	d002      	beq.n	8007174 <lsm6dso_xl_full_scale_get+0x3c>
 800716e:	2b01      	cmp	r3, #1
 8007170:	d004      	beq.n	800717c <lsm6dso_xl_full_scale_get+0x44>
 8007172:	e00f      	b.n	8007194 <lsm6dso_xl_full_scale_get+0x5c>
  {
    case LSM6DSO_2g:
      *val = LSM6DSO_2g;
 8007174:	683b      	ldr	r3, [r7, #0]
 8007176:	2200      	movs	r2, #0
 8007178:	701a      	strb	r2, [r3, #0]
      break;
 800717a:	e00f      	b.n	800719c <lsm6dso_xl_full_scale_get+0x64>

    case LSM6DSO_16g:
      *val = LSM6DSO_16g;
 800717c:	683b      	ldr	r3, [r7, #0]
 800717e:	2201      	movs	r2, #1
 8007180:	701a      	strb	r2, [r3, #0]
      break;
 8007182:	e00b      	b.n	800719c <lsm6dso_xl_full_scale_get+0x64>

    case LSM6DSO_4g:
      *val = LSM6DSO_4g;
 8007184:	683b      	ldr	r3, [r7, #0]
 8007186:	2202      	movs	r2, #2
 8007188:	701a      	strb	r2, [r3, #0]
      break;
 800718a:	e007      	b.n	800719c <lsm6dso_xl_full_scale_get+0x64>

    case LSM6DSO_8g:
      *val = LSM6DSO_8g;
 800718c:	683b      	ldr	r3, [r7, #0]
 800718e:	2203      	movs	r2, #3
 8007190:	701a      	strb	r2, [r3, #0]
      break;
 8007192:	e003      	b.n	800719c <lsm6dso_xl_full_scale_get+0x64>

    default:
      *val = LSM6DSO_2g;
 8007194:	683b      	ldr	r3, [r7, #0]
 8007196:	2200      	movs	r2, #0
 8007198:	701a      	strb	r2, [r3, #0]
      break;
 800719a:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 800719c:	68fb      	ldr	r3, [r7, #12]
}
 800719e:	0018      	movs	r0, r3
 80071a0:	46bd      	mov	sp, r7
 80071a2:	b005      	add	sp, #20
 80071a4:	bd90      	pop	{r4, r7, pc}

080071a6 <lsm6dso_xl_data_rate_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_xl_t val)
{
 80071a6:	b590      	push	{r4, r7, lr}
 80071a8:	b087      	sub	sp, #28
 80071aa:	af00      	add	r7, sp, #0
 80071ac:	6078      	str	r0, [r7, #4]
 80071ae:	000a      	movs	r2, r1
 80071b0:	1cfb      	adds	r3, r7, #3
 80071b2:	701a      	strb	r2, [r3, #0]
  lsm6dso_odr_xl_t odr_xl =  val;
 80071b4:	2317      	movs	r3, #23
 80071b6:	18fb      	adds	r3, r7, r3
 80071b8:	1cfa      	adds	r2, r7, #3
 80071ba:	7812      	ldrb	r2, [r2, #0]
 80071bc:	701a      	strb	r2, [r3, #0]
  lsm6dso_fsm_odr_t fsm_odr;
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dso_fsm_enable_get(ctx, &fsm_enable);
 80071be:	240c      	movs	r4, #12
 80071c0:	193a      	adds	r2, r7, r4
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	0011      	movs	r1, r2
 80071c6:	0018      	movs	r0, r3
 80071c8:	f000 fd69 	bl	8007c9e <lsm6dso_fsm_enable_get>
 80071cc:	0003      	movs	r3, r0
 80071ce:	613b      	str	r3, [r7, #16]

  if (ret == 0)
 80071d0:	693b      	ldr	r3, [r7, #16]
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d000      	beq.n	80071d8 <lsm6dso_xl_data_rate_set+0x32>
 80071d6:	e105      	b.n	80073e4 <lsm6dso_xl_data_rate_set+0x23e>
  {
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 80071d8:	0021      	movs	r1, r4
 80071da:	187b      	adds	r3, r7, r1
 80071dc:	781b      	ldrb	r3, [r3, #0]
 80071de:	07db      	lsls	r3, r3, #31
 80071e0:	0fdb      	lsrs	r3, r3, #31
 80071e2:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 80071e4:	187b      	adds	r3, r7, r1
 80071e6:	781b      	ldrb	r3, [r3, #0]
 80071e8:	079b      	lsls	r3, r3, #30
 80071ea:	0fdb      	lsrs	r3, r3, #31
 80071ec:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 80071ee:	4313      	orrs	r3, r2
 80071f0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 80071f2:	187b      	adds	r3, r7, r1
 80071f4:	781b      	ldrb	r3, [r3, #0]
 80071f6:	075b      	lsls	r3, r3, #29
 80071f8:	0fdb      	lsrs	r3, r3, #31
 80071fa:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 80071fc:	4313      	orrs	r3, r2
 80071fe:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 8007200:	187b      	adds	r3, r7, r1
 8007202:	781b      	ldrb	r3, [r3, #0]
 8007204:	071b      	lsls	r3, r3, #28
 8007206:	0fdb      	lsrs	r3, r3, #31
 8007208:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 800720a:	4313      	orrs	r3, r2
 800720c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 800720e:	187b      	adds	r3, r7, r1
 8007210:	781b      	ldrb	r3, [r3, #0]
 8007212:	06db      	lsls	r3, r3, #27
 8007214:	0fdb      	lsrs	r3, r3, #31
 8007216:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 8007218:	4313      	orrs	r3, r2
 800721a:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 800721c:	187b      	adds	r3, r7, r1
 800721e:	781b      	ldrb	r3, [r3, #0]
 8007220:	069b      	lsls	r3, r3, #26
 8007222:	0fdb      	lsrs	r3, r3, #31
 8007224:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 8007226:	4313      	orrs	r3, r2
 8007228:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 800722a:	187b      	adds	r3, r7, r1
 800722c:	781b      	ldrb	r3, [r3, #0]
 800722e:	065b      	lsls	r3, r3, #25
 8007230:	0fdb      	lsrs	r3, r3, #31
 8007232:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 8007234:	4313      	orrs	r3, r2
 8007236:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 8007238:	187b      	adds	r3, r7, r1
 800723a:	781b      	ldrb	r3, [r3, #0]
 800723c:	061b      	lsls	r3, r3, #24
 800723e:	0fdb      	lsrs	r3, r3, #31
 8007240:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 8007242:	4313      	orrs	r3, r2
 8007244:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 8007246:	187b      	adds	r3, r7, r1
 8007248:	785b      	ldrb	r3, [r3, #1]
 800724a:	07db      	lsls	r3, r3, #31
 800724c:	0fdb      	lsrs	r3, r3, #31
 800724e:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 8007250:	4313      	orrs	r3, r2
 8007252:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 8007254:	187b      	adds	r3, r7, r1
 8007256:	785b      	ldrb	r3, [r3, #1]
 8007258:	079b      	lsls	r3, r3, #30
 800725a:	0fdb      	lsrs	r3, r3, #31
 800725c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 800725e:	4313      	orrs	r3, r2
 8007260:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 8007262:	187b      	adds	r3, r7, r1
 8007264:	785b      	ldrb	r3, [r3, #1]
 8007266:	075b      	lsls	r3, r3, #29
 8007268:	0fdb      	lsrs	r3, r3, #31
 800726a:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 800726c:	4313      	orrs	r3, r2
 800726e:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 8007270:	187b      	adds	r3, r7, r1
 8007272:	785b      	ldrb	r3, [r3, #1]
 8007274:	071b      	lsls	r3, r3, #28
 8007276:	0fdb      	lsrs	r3, r3, #31
 8007278:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 800727a:	4313      	orrs	r3, r2
 800727c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 800727e:	187b      	adds	r3, r7, r1
 8007280:	785b      	ldrb	r3, [r3, #1]
 8007282:	06db      	lsls	r3, r3, #27
 8007284:	0fdb      	lsrs	r3, r3, #31
 8007286:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 8007288:	4313      	orrs	r3, r2
 800728a:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 800728c:	187b      	adds	r3, r7, r1
 800728e:	785b      	ldrb	r3, [r3, #1]
 8007290:	069b      	lsls	r3, r3, #26
 8007292:	0fdb      	lsrs	r3, r3, #31
 8007294:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 8007296:	4313      	orrs	r3, r2
 8007298:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 800729a:	187b      	adds	r3, r7, r1
 800729c:	785b      	ldrb	r3, [r3, #1]
 800729e:	065b      	lsls	r3, r3, #25
 80072a0:	0fdb      	lsrs	r3, r3, #31
 80072a2:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 80072a4:	4313      	orrs	r3, r2
 80072a6:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
 80072a8:	187b      	adds	r3, r7, r1
 80072aa:	785b      	ldrb	r3, [r3, #1]
 80072ac:	061b      	lsls	r3, r3, #24
 80072ae:	0fdb      	lsrs	r3, r3, #31
 80072b0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 80072b2:	4313      	orrs	r3, r2
 80072b4:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 80072b6:	2b01      	cmp	r3, #1
 80072b8:	d000      	beq.n	80072bc <lsm6dso_xl_data_rate_set+0x116>
 80072ba:	e093      	b.n	80073e4 <lsm6dso_xl_data_rate_set+0x23e>
    {
      ret =  lsm6dso_fsm_data_rate_get(ctx, &fsm_odr);
 80072bc:	240b      	movs	r4, #11
 80072be:	193a      	adds	r2, r7, r4
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	0011      	movs	r1, r2
 80072c4:	0018      	movs	r0, r3
 80072c6:	f000 fd10 	bl	8007cea <lsm6dso_fsm_data_rate_get>
 80072ca:	0003      	movs	r3, r0
 80072cc:	613b      	str	r3, [r7, #16]

      if (ret == 0)
 80072ce:	693b      	ldr	r3, [r7, #16]
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d000      	beq.n	80072d6 <lsm6dso_xl_data_rate_set+0x130>
 80072d4:	e086      	b.n	80073e4 <lsm6dso_xl_data_rate_set+0x23e>
      {
        switch (fsm_odr)
 80072d6:	193b      	adds	r3, r7, r4
 80072d8:	781b      	ldrb	r3, [r3, #0]
 80072da:	2b03      	cmp	r3, #3
 80072dc:	d052      	beq.n	8007384 <lsm6dso_xl_data_rate_set+0x1de>
 80072de:	dd00      	ble.n	80072e2 <lsm6dso_xl_data_rate_set+0x13c>
 80072e0:	e07a      	b.n	80073d8 <lsm6dso_xl_data_rate_set+0x232>
 80072e2:	2b02      	cmp	r3, #2
 80072e4:	d02d      	beq.n	8007342 <lsm6dso_xl_data_rate_set+0x19c>
 80072e6:	dd00      	ble.n	80072ea <lsm6dso_xl_data_rate_set+0x144>
 80072e8:	e076      	b.n	80073d8 <lsm6dso_xl_data_rate_set+0x232>
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d002      	beq.n	80072f4 <lsm6dso_xl_data_rate_set+0x14e>
 80072ee:	2b01      	cmp	r3, #1
 80072f0:	d00f      	beq.n	8007312 <lsm6dso_xl_data_rate_set+0x16c>
 80072f2:	e071      	b.n	80073d8 <lsm6dso_xl_data_rate_set+0x232>
        {
          case LSM6DSO_ODR_FSM_12Hz5:
            if (val == LSM6DSO_XL_ODR_OFF)
 80072f4:	1cfb      	adds	r3, r7, #3
 80072f6:	781b      	ldrb	r3, [r3, #0]
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d104      	bne.n	8007306 <lsm6dso_xl_data_rate_set+0x160>
            {
              odr_xl = LSM6DSO_XL_ODR_12Hz5;
 80072fc:	2317      	movs	r3, #23
 80072fe:	18fb      	adds	r3, r7, r3
 8007300:	2201      	movs	r2, #1
 8007302:	701a      	strb	r2, [r3, #0]
            else
            {
              odr_xl = val;
            }

            break;
 8007304:	e06f      	b.n	80073e6 <lsm6dso_xl_data_rate_set+0x240>
              odr_xl = val;
 8007306:	2317      	movs	r3, #23
 8007308:	18fb      	adds	r3, r7, r3
 800730a:	1cfa      	adds	r2, r7, #3
 800730c:	7812      	ldrb	r2, [r2, #0]
 800730e:	701a      	strb	r2, [r3, #0]
            break;
 8007310:	e069      	b.n	80073e6 <lsm6dso_xl_data_rate_set+0x240>

          case LSM6DSO_ODR_FSM_26Hz:
            if (val == LSM6DSO_XL_ODR_OFF)
 8007312:	1cfb      	adds	r3, r7, #3
 8007314:	781b      	ldrb	r3, [r3, #0]
 8007316:	2b00      	cmp	r3, #0
 8007318:	d104      	bne.n	8007324 <lsm6dso_xl_data_rate_set+0x17e>
            {
              odr_xl = LSM6DSO_XL_ODR_26Hz;
 800731a:	2317      	movs	r3, #23
 800731c:	18fb      	adds	r3, r7, r3
 800731e:	2202      	movs	r2, #2
 8007320:	701a      	strb	r2, [r3, #0]
            else
            {
              odr_xl = val;
            }

            break;
 8007322:	e060      	b.n	80073e6 <lsm6dso_xl_data_rate_set+0x240>
            else if (val == LSM6DSO_XL_ODR_12Hz5)
 8007324:	1cfb      	adds	r3, r7, #3
 8007326:	781b      	ldrb	r3, [r3, #0]
 8007328:	2b01      	cmp	r3, #1
 800732a:	d104      	bne.n	8007336 <lsm6dso_xl_data_rate_set+0x190>
              odr_xl = LSM6DSO_XL_ODR_26Hz;
 800732c:	2317      	movs	r3, #23
 800732e:	18fb      	adds	r3, r7, r3
 8007330:	2202      	movs	r2, #2
 8007332:	701a      	strb	r2, [r3, #0]
            break;
 8007334:	e057      	b.n	80073e6 <lsm6dso_xl_data_rate_set+0x240>
              odr_xl = val;
 8007336:	2317      	movs	r3, #23
 8007338:	18fb      	adds	r3, r7, r3
 800733a:	1cfa      	adds	r2, r7, #3
 800733c:	7812      	ldrb	r2, [r2, #0]
 800733e:	701a      	strb	r2, [r3, #0]
            break;
 8007340:	e051      	b.n	80073e6 <lsm6dso_xl_data_rate_set+0x240>

          case LSM6DSO_ODR_FSM_52Hz:
            if (val == LSM6DSO_XL_ODR_OFF)
 8007342:	1cfb      	adds	r3, r7, #3
 8007344:	781b      	ldrb	r3, [r3, #0]
 8007346:	2b00      	cmp	r3, #0
 8007348:	d104      	bne.n	8007354 <lsm6dso_xl_data_rate_set+0x1ae>
            {
              odr_xl = LSM6DSO_XL_ODR_52Hz;
 800734a:	2317      	movs	r3, #23
 800734c:	18fb      	adds	r3, r7, r3
 800734e:	2203      	movs	r2, #3
 8007350:	701a      	strb	r2, [r3, #0]
            else
            {
              odr_xl = val;
            }

            break;
 8007352:	e048      	b.n	80073e6 <lsm6dso_xl_data_rate_set+0x240>
            else if (val == LSM6DSO_XL_ODR_12Hz5)
 8007354:	1cfb      	adds	r3, r7, #3
 8007356:	781b      	ldrb	r3, [r3, #0]
 8007358:	2b01      	cmp	r3, #1
 800735a:	d104      	bne.n	8007366 <lsm6dso_xl_data_rate_set+0x1c0>
              odr_xl = LSM6DSO_XL_ODR_52Hz;
 800735c:	2317      	movs	r3, #23
 800735e:	18fb      	adds	r3, r7, r3
 8007360:	2203      	movs	r2, #3
 8007362:	701a      	strb	r2, [r3, #0]
            break;
 8007364:	e03f      	b.n	80073e6 <lsm6dso_xl_data_rate_set+0x240>
            else if (val == LSM6DSO_XL_ODR_26Hz)
 8007366:	1cfb      	adds	r3, r7, #3
 8007368:	781b      	ldrb	r3, [r3, #0]
 800736a:	2b02      	cmp	r3, #2
 800736c:	d104      	bne.n	8007378 <lsm6dso_xl_data_rate_set+0x1d2>
              odr_xl = LSM6DSO_XL_ODR_52Hz;
 800736e:	2317      	movs	r3, #23
 8007370:	18fb      	adds	r3, r7, r3
 8007372:	2203      	movs	r2, #3
 8007374:	701a      	strb	r2, [r3, #0]
            break;
 8007376:	e036      	b.n	80073e6 <lsm6dso_xl_data_rate_set+0x240>
              odr_xl = val;
 8007378:	2317      	movs	r3, #23
 800737a:	18fb      	adds	r3, r7, r3
 800737c:	1cfa      	adds	r2, r7, #3
 800737e:	7812      	ldrb	r2, [r2, #0]
 8007380:	701a      	strb	r2, [r3, #0]
            break;
 8007382:	e030      	b.n	80073e6 <lsm6dso_xl_data_rate_set+0x240>

          case LSM6DSO_ODR_FSM_104Hz:
            if (val == LSM6DSO_XL_ODR_OFF)
 8007384:	1cfb      	adds	r3, r7, #3
 8007386:	781b      	ldrb	r3, [r3, #0]
 8007388:	2b00      	cmp	r3, #0
 800738a:	d104      	bne.n	8007396 <lsm6dso_xl_data_rate_set+0x1f0>
            {
              odr_xl = LSM6DSO_XL_ODR_104Hz;
 800738c:	2317      	movs	r3, #23
 800738e:	18fb      	adds	r3, r7, r3
 8007390:	2204      	movs	r2, #4
 8007392:	701a      	strb	r2, [r3, #0]
            else
            {
              odr_xl = val;
            }

            break;
 8007394:	e027      	b.n	80073e6 <lsm6dso_xl_data_rate_set+0x240>
            else if (val == LSM6DSO_XL_ODR_12Hz5)
 8007396:	1cfb      	adds	r3, r7, #3
 8007398:	781b      	ldrb	r3, [r3, #0]
 800739a:	2b01      	cmp	r3, #1
 800739c:	d104      	bne.n	80073a8 <lsm6dso_xl_data_rate_set+0x202>
              odr_xl = LSM6DSO_XL_ODR_104Hz;
 800739e:	2317      	movs	r3, #23
 80073a0:	18fb      	adds	r3, r7, r3
 80073a2:	2204      	movs	r2, #4
 80073a4:	701a      	strb	r2, [r3, #0]
            break;
 80073a6:	e01e      	b.n	80073e6 <lsm6dso_xl_data_rate_set+0x240>
            else if (val == LSM6DSO_XL_ODR_26Hz)
 80073a8:	1cfb      	adds	r3, r7, #3
 80073aa:	781b      	ldrb	r3, [r3, #0]
 80073ac:	2b02      	cmp	r3, #2
 80073ae:	d104      	bne.n	80073ba <lsm6dso_xl_data_rate_set+0x214>
              odr_xl = LSM6DSO_XL_ODR_104Hz;
 80073b0:	2317      	movs	r3, #23
 80073b2:	18fb      	adds	r3, r7, r3
 80073b4:	2204      	movs	r2, #4
 80073b6:	701a      	strb	r2, [r3, #0]
            break;
 80073b8:	e015      	b.n	80073e6 <lsm6dso_xl_data_rate_set+0x240>
            else if (val == LSM6DSO_XL_ODR_52Hz)
 80073ba:	1cfb      	adds	r3, r7, #3
 80073bc:	781b      	ldrb	r3, [r3, #0]
 80073be:	2b03      	cmp	r3, #3
 80073c0:	d104      	bne.n	80073cc <lsm6dso_xl_data_rate_set+0x226>
              odr_xl = LSM6DSO_XL_ODR_104Hz;
 80073c2:	2317      	movs	r3, #23
 80073c4:	18fb      	adds	r3, r7, r3
 80073c6:	2204      	movs	r2, #4
 80073c8:	701a      	strb	r2, [r3, #0]
            break;
 80073ca:	e00c      	b.n	80073e6 <lsm6dso_xl_data_rate_set+0x240>
              odr_xl = val;
 80073cc:	2317      	movs	r3, #23
 80073ce:	18fb      	adds	r3, r7, r3
 80073d0:	1cfa      	adds	r2, r7, #3
 80073d2:	7812      	ldrb	r2, [r2, #0]
 80073d4:	701a      	strb	r2, [r3, #0]
            break;
 80073d6:	e006      	b.n	80073e6 <lsm6dso_xl_data_rate_set+0x240>

          default:
            odr_xl = val;
 80073d8:	2317      	movs	r3, #23
 80073da:	18fb      	adds	r3, r7, r3
 80073dc:	1cfa      	adds	r2, r7, #3
 80073de:	7812      	ldrb	r2, [r2, #0]
 80073e0:	701a      	strb	r2, [r3, #0]
            break;
 80073e2:	e000      	b.n	80073e6 <lsm6dso_xl_data_rate_set+0x240>
        }
      }
 80073e4:	46c0      	nop			; (mov r8, r8)
    }
  }

  if (ret == 0)
 80073e6:	693b      	ldr	r3, [r7, #16]
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d108      	bne.n	80073fe <lsm6dso_xl_data_rate_set+0x258>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 80073ec:	2308      	movs	r3, #8
 80073ee:	18fa      	adds	r2, r7, r3
 80073f0:	6878      	ldr	r0, [r7, #4]
 80073f2:	2301      	movs	r3, #1
 80073f4:	2110      	movs	r1, #16
 80073f6:	f7ff fe2d 	bl	8007054 <lsm6dso_read_reg>
 80073fa:	0003      	movs	r3, r0
 80073fc:	613b      	str	r3, [r7, #16]
  }

  if (ret == 0)
 80073fe:	693b      	ldr	r3, [r7, #16]
 8007400:	2b00      	cmp	r3, #0
 8007402:	d117      	bne.n	8007434 <lsm6dso_xl_data_rate_set+0x28e>
  {
    reg.odr_xl = (uint8_t) odr_xl;
 8007404:	2317      	movs	r3, #23
 8007406:	18fb      	adds	r3, r7, r3
 8007408:	781b      	ldrb	r3, [r3, #0]
 800740a:	220f      	movs	r2, #15
 800740c:	4013      	ands	r3, r2
 800740e:	b2da      	uxtb	r2, r3
 8007410:	2408      	movs	r4, #8
 8007412:	193b      	adds	r3, r7, r4
 8007414:	0110      	lsls	r0, r2, #4
 8007416:	781a      	ldrb	r2, [r3, #0]
 8007418:	210f      	movs	r1, #15
 800741a:	400a      	ands	r2, r1
 800741c:	1c11      	adds	r1, r2, #0
 800741e:	1c02      	adds	r2, r0, #0
 8007420:	430a      	orrs	r2, r1
 8007422:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 8007424:	193a      	adds	r2, r7, r4
 8007426:	6878      	ldr	r0, [r7, #4]
 8007428:	2301      	movs	r3, #1
 800742a:	2110      	movs	r1, #16
 800742c:	f7ff fe33 	bl	8007096 <lsm6dso_write_reg>
 8007430:	0003      	movs	r3, r0
 8007432:	613b      	str	r3, [r7, #16]
  }

  return ret;
 8007434:	693b      	ldr	r3, [r7, #16]
}
 8007436:	0018      	movs	r0, r3
 8007438:	46bd      	mov	sp, r7
 800743a:	b007      	add	sp, #28
 800743c:	bd90      	pop	{r4, r7, pc}
	...

08007440 <lsm6dso_xl_data_rate_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_data_rate_get(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_xl_t *val)
{
 8007440:	b590      	push	{r4, r7, lr}
 8007442:	b085      	sub	sp, #20
 8007444:	af00      	add	r7, sp, #0
 8007446:	6078      	str	r0, [r7, #4]
 8007448:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 800744a:	2408      	movs	r4, #8
 800744c:	193a      	adds	r2, r7, r4
 800744e:	6878      	ldr	r0, [r7, #4]
 8007450:	2301      	movs	r3, #1
 8007452:	2110      	movs	r1, #16
 8007454:	f7ff fdfe 	bl	8007054 <lsm6dso_read_reg>
 8007458:	0003      	movs	r3, r0
 800745a:	60fb      	str	r3, [r7, #12]

  switch (reg.odr_xl)
 800745c:	193b      	adds	r3, r7, r4
 800745e:	781b      	ldrb	r3, [r3, #0]
 8007460:	061b      	lsls	r3, r3, #24
 8007462:	0f1b      	lsrs	r3, r3, #28
 8007464:	b2db      	uxtb	r3, r3
 8007466:	2b0b      	cmp	r3, #11
 8007468:	d834      	bhi.n	80074d4 <lsm6dso_xl_data_rate_get+0x94>
 800746a:	009a      	lsls	r2, r3, #2
 800746c:	4b1e      	ldr	r3, [pc, #120]	; (80074e8 <lsm6dso_xl_data_rate_get+0xa8>)
 800746e:	18d3      	adds	r3, r2, r3
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	469f      	mov	pc, r3
  {
    case LSM6DSO_XL_ODR_OFF:
      *val = LSM6DSO_XL_ODR_OFF;
 8007474:	683b      	ldr	r3, [r7, #0]
 8007476:	2200      	movs	r2, #0
 8007478:	701a      	strb	r2, [r3, #0]
      break;
 800747a:	e02f      	b.n	80074dc <lsm6dso_xl_data_rate_get+0x9c>

    case LSM6DSO_XL_ODR_12Hz5:
      *val = LSM6DSO_XL_ODR_12Hz5;
 800747c:	683b      	ldr	r3, [r7, #0]
 800747e:	2201      	movs	r2, #1
 8007480:	701a      	strb	r2, [r3, #0]
      break;
 8007482:	e02b      	b.n	80074dc <lsm6dso_xl_data_rate_get+0x9c>

    case LSM6DSO_XL_ODR_26Hz:
      *val = LSM6DSO_XL_ODR_26Hz;
 8007484:	683b      	ldr	r3, [r7, #0]
 8007486:	2202      	movs	r2, #2
 8007488:	701a      	strb	r2, [r3, #0]
      break;
 800748a:	e027      	b.n	80074dc <lsm6dso_xl_data_rate_get+0x9c>

    case LSM6DSO_XL_ODR_52Hz:
      *val = LSM6DSO_XL_ODR_52Hz;
 800748c:	683b      	ldr	r3, [r7, #0]
 800748e:	2203      	movs	r2, #3
 8007490:	701a      	strb	r2, [r3, #0]
      break;
 8007492:	e023      	b.n	80074dc <lsm6dso_xl_data_rate_get+0x9c>

    case LSM6DSO_XL_ODR_104Hz:
      *val = LSM6DSO_XL_ODR_104Hz;
 8007494:	683b      	ldr	r3, [r7, #0]
 8007496:	2204      	movs	r2, #4
 8007498:	701a      	strb	r2, [r3, #0]
      break;
 800749a:	e01f      	b.n	80074dc <lsm6dso_xl_data_rate_get+0x9c>

    case LSM6DSO_XL_ODR_208Hz:
      *val = LSM6DSO_XL_ODR_208Hz;
 800749c:	683b      	ldr	r3, [r7, #0]
 800749e:	2205      	movs	r2, #5
 80074a0:	701a      	strb	r2, [r3, #0]
      break;
 80074a2:	e01b      	b.n	80074dc <lsm6dso_xl_data_rate_get+0x9c>

    case LSM6DSO_XL_ODR_417Hz:
      *val = LSM6DSO_XL_ODR_417Hz;
 80074a4:	683b      	ldr	r3, [r7, #0]
 80074a6:	2206      	movs	r2, #6
 80074a8:	701a      	strb	r2, [r3, #0]
      break;
 80074aa:	e017      	b.n	80074dc <lsm6dso_xl_data_rate_get+0x9c>

    case LSM6DSO_XL_ODR_833Hz:
      *val = LSM6DSO_XL_ODR_833Hz;
 80074ac:	683b      	ldr	r3, [r7, #0]
 80074ae:	2207      	movs	r2, #7
 80074b0:	701a      	strb	r2, [r3, #0]
      break;
 80074b2:	e013      	b.n	80074dc <lsm6dso_xl_data_rate_get+0x9c>

    case LSM6DSO_XL_ODR_1667Hz:
      *val = LSM6DSO_XL_ODR_1667Hz;
 80074b4:	683b      	ldr	r3, [r7, #0]
 80074b6:	2208      	movs	r2, #8
 80074b8:	701a      	strb	r2, [r3, #0]
      break;
 80074ba:	e00f      	b.n	80074dc <lsm6dso_xl_data_rate_get+0x9c>

    case LSM6DSO_XL_ODR_3333Hz:
      *val = LSM6DSO_XL_ODR_3333Hz;
 80074bc:	683b      	ldr	r3, [r7, #0]
 80074be:	2209      	movs	r2, #9
 80074c0:	701a      	strb	r2, [r3, #0]
      break;
 80074c2:	e00b      	b.n	80074dc <lsm6dso_xl_data_rate_get+0x9c>

    case LSM6DSO_XL_ODR_6667Hz:
      *val = LSM6DSO_XL_ODR_6667Hz;
 80074c4:	683b      	ldr	r3, [r7, #0]
 80074c6:	220a      	movs	r2, #10
 80074c8:	701a      	strb	r2, [r3, #0]
      break;
 80074ca:	e007      	b.n	80074dc <lsm6dso_xl_data_rate_get+0x9c>

    case LSM6DSO_XL_ODR_1Hz6:
      *val = LSM6DSO_XL_ODR_1Hz6;
 80074cc:	683b      	ldr	r3, [r7, #0]
 80074ce:	220b      	movs	r2, #11
 80074d0:	701a      	strb	r2, [r3, #0]
      break;
 80074d2:	e003      	b.n	80074dc <lsm6dso_xl_data_rate_get+0x9c>

    default:
      *val = LSM6DSO_XL_ODR_OFF;
 80074d4:	683b      	ldr	r3, [r7, #0]
 80074d6:	2200      	movs	r2, #0
 80074d8:	701a      	strb	r2, [r3, #0]
      break;
 80074da:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 80074dc:	68fb      	ldr	r3, [r7, #12]
}
 80074de:	0018      	movs	r0, r3
 80074e0:	46bd      	mov	sp, r7
 80074e2:	b005      	add	sp, #20
 80074e4:	bd90      	pop	{r4, r7, pc}
 80074e6:	46c0      	nop			; (mov r8, r8)
 80074e8:	080161e4 	.word	0x080161e4

080074ec <lsm6dso_gy_full_scale_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_g_t val)
{
 80074ec:	b590      	push	{r4, r7, lr}
 80074ee:	b085      	sub	sp, #20
 80074f0:	af00      	add	r7, sp, #0
 80074f2:	6078      	str	r0, [r7, #4]
 80074f4:	000a      	movs	r2, r1
 80074f6:	1cfb      	adds	r3, r7, #3
 80074f8:	701a      	strb	r2, [r3, #0]
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 80074fa:	2408      	movs	r4, #8
 80074fc:	193a      	adds	r2, r7, r4
 80074fe:	6878      	ldr	r0, [r7, #4]
 8007500:	2301      	movs	r3, #1
 8007502:	2111      	movs	r1, #17
 8007504:	f7ff fda6 	bl	8007054 <lsm6dso_read_reg>
 8007508:	0003      	movs	r3, r0
 800750a:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	2b00      	cmp	r3, #0
 8007510:	d117      	bne.n	8007542 <lsm6dso_gy_full_scale_set+0x56>
  {
    reg.fs_g = (uint8_t) val;
 8007512:	1cfb      	adds	r3, r7, #3
 8007514:	781b      	ldrb	r3, [r3, #0]
 8007516:	2207      	movs	r2, #7
 8007518:	4013      	ands	r3, r2
 800751a:	b2da      	uxtb	r2, r3
 800751c:	193b      	adds	r3, r7, r4
 800751e:	2107      	movs	r1, #7
 8007520:	400a      	ands	r2, r1
 8007522:	1890      	adds	r0, r2, r2
 8007524:	781a      	ldrb	r2, [r3, #0]
 8007526:	210e      	movs	r1, #14
 8007528:	438a      	bics	r2, r1
 800752a:	1c11      	adds	r1, r2, #0
 800752c:	1c02      	adds	r2, r0, #0
 800752e:	430a      	orrs	r2, r1
 8007530:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 8007532:	193a      	adds	r2, r7, r4
 8007534:	6878      	ldr	r0, [r7, #4]
 8007536:	2301      	movs	r3, #1
 8007538:	2111      	movs	r1, #17
 800753a:	f7ff fdac 	bl	8007096 <lsm6dso_write_reg>
 800753e:	0003      	movs	r3, r0
 8007540:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8007542:	68fb      	ldr	r3, [r7, #12]
}
 8007544:	0018      	movs	r0, r3
 8007546:	46bd      	mov	sp, r7
 8007548:	b005      	add	sp, #20
 800754a:	bd90      	pop	{r4, r7, pc}

0800754c <lsm6dso_gy_full_scale_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_full_scale_get(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_g_t *val)
{
 800754c:	b590      	push	{r4, r7, lr}
 800754e:	b085      	sub	sp, #20
 8007550:	af00      	add	r7, sp, #0
 8007552:	6078      	str	r0, [r7, #4]
 8007554:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 8007556:	2408      	movs	r4, #8
 8007558:	193a      	adds	r2, r7, r4
 800755a:	6878      	ldr	r0, [r7, #4]
 800755c:	2301      	movs	r3, #1
 800755e:	2111      	movs	r1, #17
 8007560:	f7ff fd78 	bl	8007054 <lsm6dso_read_reg>
 8007564:	0003      	movs	r3, r0
 8007566:	60fb      	str	r3, [r7, #12]

  switch (reg.fs_g)
 8007568:	193b      	adds	r3, r7, r4
 800756a:	781b      	ldrb	r3, [r3, #0]
 800756c:	071b      	lsls	r3, r3, #28
 800756e:	0f5b      	lsrs	r3, r3, #29
 8007570:	b2db      	uxtb	r3, r3
 8007572:	2b06      	cmp	r3, #6
 8007574:	d818      	bhi.n	80075a8 <lsm6dso_gy_full_scale_get+0x5c>
 8007576:	009a      	lsls	r2, r3, #2
 8007578:	4b10      	ldr	r3, [pc, #64]	; (80075bc <lsm6dso_gy_full_scale_get+0x70>)
 800757a:	18d3      	adds	r3, r2, r3
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	469f      	mov	pc, r3
  {
    case LSM6DSO_250dps:
      *val = LSM6DSO_250dps;
 8007580:	683b      	ldr	r3, [r7, #0]
 8007582:	2200      	movs	r2, #0
 8007584:	701a      	strb	r2, [r3, #0]
      break;
 8007586:	e013      	b.n	80075b0 <lsm6dso_gy_full_scale_get+0x64>

    case LSM6DSO_125dps:
      *val = LSM6DSO_125dps;
 8007588:	683b      	ldr	r3, [r7, #0]
 800758a:	2201      	movs	r2, #1
 800758c:	701a      	strb	r2, [r3, #0]
      break;
 800758e:	e00f      	b.n	80075b0 <lsm6dso_gy_full_scale_get+0x64>

    case LSM6DSO_500dps:
      *val = LSM6DSO_500dps;
 8007590:	683b      	ldr	r3, [r7, #0]
 8007592:	2202      	movs	r2, #2
 8007594:	701a      	strb	r2, [r3, #0]
      break;
 8007596:	e00b      	b.n	80075b0 <lsm6dso_gy_full_scale_get+0x64>

    case LSM6DSO_1000dps:
      *val = LSM6DSO_1000dps;
 8007598:	683b      	ldr	r3, [r7, #0]
 800759a:	2204      	movs	r2, #4
 800759c:	701a      	strb	r2, [r3, #0]
      break;
 800759e:	e007      	b.n	80075b0 <lsm6dso_gy_full_scale_get+0x64>

    case LSM6DSO_2000dps:
      *val = LSM6DSO_2000dps;
 80075a0:	683b      	ldr	r3, [r7, #0]
 80075a2:	2206      	movs	r2, #6
 80075a4:	701a      	strb	r2, [r3, #0]
      break;
 80075a6:	e003      	b.n	80075b0 <lsm6dso_gy_full_scale_get+0x64>

    default:
      *val = LSM6DSO_250dps;
 80075a8:	683b      	ldr	r3, [r7, #0]
 80075aa:	2200      	movs	r2, #0
 80075ac:	701a      	strb	r2, [r3, #0]
      break;
 80075ae:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 80075b0:	68fb      	ldr	r3, [r7, #12]
}
 80075b2:	0018      	movs	r0, r3
 80075b4:	46bd      	mov	sp, r7
 80075b6:	b005      	add	sp, #20
 80075b8:	bd90      	pop	{r4, r7, pc}
 80075ba:	46c0      	nop			; (mov r8, r8)
 80075bc:	08016214 	.word	0x08016214

080075c0 <lsm6dso_gy_data_rate_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_g_t val)
{
 80075c0:	b590      	push	{r4, r7, lr}
 80075c2:	b087      	sub	sp, #28
 80075c4:	af00      	add	r7, sp, #0
 80075c6:	6078      	str	r0, [r7, #4]
 80075c8:	000a      	movs	r2, r1
 80075ca:	1cfb      	adds	r3, r7, #3
 80075cc:	701a      	strb	r2, [r3, #0]
  lsm6dso_odr_g_t odr_gy =  val;
 80075ce:	2317      	movs	r3, #23
 80075d0:	18fb      	adds	r3, r7, r3
 80075d2:	1cfa      	adds	r2, r7, #3
 80075d4:	7812      	ldrb	r2, [r2, #0]
 80075d6:	701a      	strb	r2, [r3, #0]
  lsm6dso_fsm_odr_t fsm_odr;
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dso_fsm_enable_get(ctx, &fsm_enable);
 80075d8:	240c      	movs	r4, #12
 80075da:	193a      	adds	r2, r7, r4
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	0011      	movs	r1, r2
 80075e0:	0018      	movs	r0, r3
 80075e2:	f000 fb5c 	bl	8007c9e <lsm6dso_fsm_enable_get>
 80075e6:	0003      	movs	r3, r0
 80075e8:	613b      	str	r3, [r7, #16]

  if (ret == 0)
 80075ea:	693b      	ldr	r3, [r7, #16]
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d000      	beq.n	80075f2 <lsm6dso_gy_data_rate_set+0x32>
 80075f0:	e105      	b.n	80077fe <lsm6dso_gy_data_rate_set+0x23e>
  {
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 80075f2:	0021      	movs	r1, r4
 80075f4:	187b      	adds	r3, r7, r1
 80075f6:	781b      	ldrb	r3, [r3, #0]
 80075f8:	07db      	lsls	r3, r3, #31
 80075fa:	0fdb      	lsrs	r3, r3, #31
 80075fc:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 80075fe:	187b      	adds	r3, r7, r1
 8007600:	781b      	ldrb	r3, [r3, #0]
 8007602:	079b      	lsls	r3, r3, #30
 8007604:	0fdb      	lsrs	r3, r3, #31
 8007606:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8007608:	4313      	orrs	r3, r2
 800760a:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 800760c:	187b      	adds	r3, r7, r1
 800760e:	781b      	ldrb	r3, [r3, #0]
 8007610:	075b      	lsls	r3, r3, #29
 8007612:	0fdb      	lsrs	r3, r3, #31
 8007614:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 8007616:	4313      	orrs	r3, r2
 8007618:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 800761a:	187b      	adds	r3, r7, r1
 800761c:	781b      	ldrb	r3, [r3, #0]
 800761e:	071b      	lsls	r3, r3, #28
 8007620:	0fdb      	lsrs	r3, r3, #31
 8007622:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 8007624:	4313      	orrs	r3, r2
 8007626:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 8007628:	187b      	adds	r3, r7, r1
 800762a:	781b      	ldrb	r3, [r3, #0]
 800762c:	06db      	lsls	r3, r3, #27
 800762e:	0fdb      	lsrs	r3, r3, #31
 8007630:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 8007632:	4313      	orrs	r3, r2
 8007634:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 8007636:	187b      	adds	r3, r7, r1
 8007638:	781b      	ldrb	r3, [r3, #0]
 800763a:	069b      	lsls	r3, r3, #26
 800763c:	0fdb      	lsrs	r3, r3, #31
 800763e:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 8007640:	4313      	orrs	r3, r2
 8007642:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 8007644:	187b      	adds	r3, r7, r1
 8007646:	781b      	ldrb	r3, [r3, #0]
 8007648:	065b      	lsls	r3, r3, #25
 800764a:	0fdb      	lsrs	r3, r3, #31
 800764c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 800764e:	4313      	orrs	r3, r2
 8007650:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 8007652:	187b      	adds	r3, r7, r1
 8007654:	781b      	ldrb	r3, [r3, #0]
 8007656:	061b      	lsls	r3, r3, #24
 8007658:	0fdb      	lsrs	r3, r3, #31
 800765a:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 800765c:	4313      	orrs	r3, r2
 800765e:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 8007660:	187b      	adds	r3, r7, r1
 8007662:	785b      	ldrb	r3, [r3, #1]
 8007664:	07db      	lsls	r3, r3, #31
 8007666:	0fdb      	lsrs	r3, r3, #31
 8007668:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 800766a:	4313      	orrs	r3, r2
 800766c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 800766e:	187b      	adds	r3, r7, r1
 8007670:	785b      	ldrb	r3, [r3, #1]
 8007672:	079b      	lsls	r3, r3, #30
 8007674:	0fdb      	lsrs	r3, r3, #31
 8007676:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 8007678:	4313      	orrs	r3, r2
 800767a:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 800767c:	187b      	adds	r3, r7, r1
 800767e:	785b      	ldrb	r3, [r3, #1]
 8007680:	075b      	lsls	r3, r3, #29
 8007682:	0fdb      	lsrs	r3, r3, #31
 8007684:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 8007686:	4313      	orrs	r3, r2
 8007688:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 800768a:	187b      	adds	r3, r7, r1
 800768c:	785b      	ldrb	r3, [r3, #1]
 800768e:	071b      	lsls	r3, r3, #28
 8007690:	0fdb      	lsrs	r3, r3, #31
 8007692:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 8007694:	4313      	orrs	r3, r2
 8007696:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 8007698:	187b      	adds	r3, r7, r1
 800769a:	785b      	ldrb	r3, [r3, #1]
 800769c:	06db      	lsls	r3, r3, #27
 800769e:	0fdb      	lsrs	r3, r3, #31
 80076a0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 80076a2:	4313      	orrs	r3, r2
 80076a4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 80076a6:	187b      	adds	r3, r7, r1
 80076a8:	785b      	ldrb	r3, [r3, #1]
 80076aa:	069b      	lsls	r3, r3, #26
 80076ac:	0fdb      	lsrs	r3, r3, #31
 80076ae:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 80076b0:	4313      	orrs	r3, r2
 80076b2:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 80076b4:	187b      	adds	r3, r7, r1
 80076b6:	785b      	ldrb	r3, [r3, #1]
 80076b8:	065b      	lsls	r3, r3, #25
 80076ba:	0fdb      	lsrs	r3, r3, #31
 80076bc:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 80076be:	4313      	orrs	r3, r2
 80076c0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
 80076c2:	187b      	adds	r3, r7, r1
 80076c4:	785b      	ldrb	r3, [r3, #1]
 80076c6:	061b      	lsls	r3, r3, #24
 80076c8:	0fdb      	lsrs	r3, r3, #31
 80076ca:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 80076cc:	4313      	orrs	r3, r2
 80076ce:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 80076d0:	2b01      	cmp	r3, #1
 80076d2:	d000      	beq.n	80076d6 <lsm6dso_gy_data_rate_set+0x116>
 80076d4:	e093      	b.n	80077fe <lsm6dso_gy_data_rate_set+0x23e>
    {
      ret =  lsm6dso_fsm_data_rate_get(ctx, &fsm_odr);
 80076d6:	240b      	movs	r4, #11
 80076d8:	193a      	adds	r2, r7, r4
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	0011      	movs	r1, r2
 80076de:	0018      	movs	r0, r3
 80076e0:	f000 fb03 	bl	8007cea <lsm6dso_fsm_data_rate_get>
 80076e4:	0003      	movs	r3, r0
 80076e6:	613b      	str	r3, [r7, #16]

      if (ret == 0)
 80076e8:	693b      	ldr	r3, [r7, #16]
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d000      	beq.n	80076f0 <lsm6dso_gy_data_rate_set+0x130>
 80076ee:	e086      	b.n	80077fe <lsm6dso_gy_data_rate_set+0x23e>
      {
        switch (fsm_odr)
 80076f0:	193b      	adds	r3, r7, r4
 80076f2:	781b      	ldrb	r3, [r3, #0]
 80076f4:	2b03      	cmp	r3, #3
 80076f6:	d052      	beq.n	800779e <lsm6dso_gy_data_rate_set+0x1de>
 80076f8:	dd00      	ble.n	80076fc <lsm6dso_gy_data_rate_set+0x13c>
 80076fa:	e07a      	b.n	80077f2 <lsm6dso_gy_data_rate_set+0x232>
 80076fc:	2b02      	cmp	r3, #2
 80076fe:	d02d      	beq.n	800775c <lsm6dso_gy_data_rate_set+0x19c>
 8007700:	dd00      	ble.n	8007704 <lsm6dso_gy_data_rate_set+0x144>
 8007702:	e076      	b.n	80077f2 <lsm6dso_gy_data_rate_set+0x232>
 8007704:	2b00      	cmp	r3, #0
 8007706:	d002      	beq.n	800770e <lsm6dso_gy_data_rate_set+0x14e>
 8007708:	2b01      	cmp	r3, #1
 800770a:	d00f      	beq.n	800772c <lsm6dso_gy_data_rate_set+0x16c>
 800770c:	e071      	b.n	80077f2 <lsm6dso_gy_data_rate_set+0x232>
        {
          case LSM6DSO_ODR_FSM_12Hz5:
            if (val == LSM6DSO_GY_ODR_OFF)
 800770e:	1cfb      	adds	r3, r7, #3
 8007710:	781b      	ldrb	r3, [r3, #0]
 8007712:	2b00      	cmp	r3, #0
 8007714:	d104      	bne.n	8007720 <lsm6dso_gy_data_rate_set+0x160>
            {
              odr_gy = LSM6DSO_GY_ODR_12Hz5;
 8007716:	2317      	movs	r3, #23
 8007718:	18fb      	adds	r3, r7, r3
 800771a:	2201      	movs	r2, #1
 800771c:	701a      	strb	r2, [r3, #0]
            else
            {
              odr_gy = val;
            }

            break;
 800771e:	e06f      	b.n	8007800 <lsm6dso_gy_data_rate_set+0x240>
              odr_gy = val;
 8007720:	2317      	movs	r3, #23
 8007722:	18fb      	adds	r3, r7, r3
 8007724:	1cfa      	adds	r2, r7, #3
 8007726:	7812      	ldrb	r2, [r2, #0]
 8007728:	701a      	strb	r2, [r3, #0]
            break;
 800772a:	e069      	b.n	8007800 <lsm6dso_gy_data_rate_set+0x240>

          case LSM6DSO_ODR_FSM_26Hz:
            if (val == LSM6DSO_GY_ODR_OFF)
 800772c:	1cfb      	adds	r3, r7, #3
 800772e:	781b      	ldrb	r3, [r3, #0]
 8007730:	2b00      	cmp	r3, #0
 8007732:	d104      	bne.n	800773e <lsm6dso_gy_data_rate_set+0x17e>
            {
              odr_gy = LSM6DSO_GY_ODR_26Hz;
 8007734:	2317      	movs	r3, #23
 8007736:	18fb      	adds	r3, r7, r3
 8007738:	2202      	movs	r2, #2
 800773a:	701a      	strb	r2, [r3, #0]
            else
            {
              odr_gy = val;
            }

            break;
 800773c:	e060      	b.n	8007800 <lsm6dso_gy_data_rate_set+0x240>
            else if (val == LSM6DSO_GY_ODR_12Hz5)
 800773e:	1cfb      	adds	r3, r7, #3
 8007740:	781b      	ldrb	r3, [r3, #0]
 8007742:	2b01      	cmp	r3, #1
 8007744:	d104      	bne.n	8007750 <lsm6dso_gy_data_rate_set+0x190>
              odr_gy = LSM6DSO_GY_ODR_26Hz;
 8007746:	2317      	movs	r3, #23
 8007748:	18fb      	adds	r3, r7, r3
 800774a:	2202      	movs	r2, #2
 800774c:	701a      	strb	r2, [r3, #0]
            break;
 800774e:	e057      	b.n	8007800 <lsm6dso_gy_data_rate_set+0x240>
              odr_gy = val;
 8007750:	2317      	movs	r3, #23
 8007752:	18fb      	adds	r3, r7, r3
 8007754:	1cfa      	adds	r2, r7, #3
 8007756:	7812      	ldrb	r2, [r2, #0]
 8007758:	701a      	strb	r2, [r3, #0]
            break;
 800775a:	e051      	b.n	8007800 <lsm6dso_gy_data_rate_set+0x240>

          case LSM6DSO_ODR_FSM_52Hz:
            if (val == LSM6DSO_GY_ODR_OFF)
 800775c:	1cfb      	adds	r3, r7, #3
 800775e:	781b      	ldrb	r3, [r3, #0]
 8007760:	2b00      	cmp	r3, #0
 8007762:	d104      	bne.n	800776e <lsm6dso_gy_data_rate_set+0x1ae>
            {
              odr_gy = LSM6DSO_GY_ODR_52Hz;
 8007764:	2317      	movs	r3, #23
 8007766:	18fb      	adds	r3, r7, r3
 8007768:	2203      	movs	r2, #3
 800776a:	701a      	strb	r2, [r3, #0]
            else
            {
              odr_gy = val;
            }

            break;
 800776c:	e048      	b.n	8007800 <lsm6dso_gy_data_rate_set+0x240>
            else if (val == LSM6DSO_GY_ODR_12Hz5)
 800776e:	1cfb      	adds	r3, r7, #3
 8007770:	781b      	ldrb	r3, [r3, #0]
 8007772:	2b01      	cmp	r3, #1
 8007774:	d104      	bne.n	8007780 <lsm6dso_gy_data_rate_set+0x1c0>
              odr_gy = LSM6DSO_GY_ODR_52Hz;
 8007776:	2317      	movs	r3, #23
 8007778:	18fb      	adds	r3, r7, r3
 800777a:	2203      	movs	r2, #3
 800777c:	701a      	strb	r2, [r3, #0]
            break;
 800777e:	e03f      	b.n	8007800 <lsm6dso_gy_data_rate_set+0x240>
            else if (val == LSM6DSO_GY_ODR_26Hz)
 8007780:	1cfb      	adds	r3, r7, #3
 8007782:	781b      	ldrb	r3, [r3, #0]
 8007784:	2b02      	cmp	r3, #2
 8007786:	d104      	bne.n	8007792 <lsm6dso_gy_data_rate_set+0x1d2>
              odr_gy = LSM6DSO_GY_ODR_52Hz;
 8007788:	2317      	movs	r3, #23
 800778a:	18fb      	adds	r3, r7, r3
 800778c:	2203      	movs	r2, #3
 800778e:	701a      	strb	r2, [r3, #0]
            break;
 8007790:	e036      	b.n	8007800 <lsm6dso_gy_data_rate_set+0x240>
              odr_gy = val;
 8007792:	2317      	movs	r3, #23
 8007794:	18fb      	adds	r3, r7, r3
 8007796:	1cfa      	adds	r2, r7, #3
 8007798:	7812      	ldrb	r2, [r2, #0]
 800779a:	701a      	strb	r2, [r3, #0]
            break;
 800779c:	e030      	b.n	8007800 <lsm6dso_gy_data_rate_set+0x240>

          case LSM6DSO_ODR_FSM_104Hz:
            if (val == LSM6DSO_GY_ODR_OFF)
 800779e:	1cfb      	adds	r3, r7, #3
 80077a0:	781b      	ldrb	r3, [r3, #0]
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d104      	bne.n	80077b0 <lsm6dso_gy_data_rate_set+0x1f0>
            {
              odr_gy = LSM6DSO_GY_ODR_104Hz;
 80077a6:	2317      	movs	r3, #23
 80077a8:	18fb      	adds	r3, r7, r3
 80077aa:	2204      	movs	r2, #4
 80077ac:	701a      	strb	r2, [r3, #0]
            else
            {
              odr_gy = val;
            }

            break;
 80077ae:	e027      	b.n	8007800 <lsm6dso_gy_data_rate_set+0x240>
            else if (val == LSM6DSO_GY_ODR_12Hz5)
 80077b0:	1cfb      	adds	r3, r7, #3
 80077b2:	781b      	ldrb	r3, [r3, #0]
 80077b4:	2b01      	cmp	r3, #1
 80077b6:	d104      	bne.n	80077c2 <lsm6dso_gy_data_rate_set+0x202>
              odr_gy = LSM6DSO_GY_ODR_104Hz;
 80077b8:	2317      	movs	r3, #23
 80077ba:	18fb      	adds	r3, r7, r3
 80077bc:	2204      	movs	r2, #4
 80077be:	701a      	strb	r2, [r3, #0]
            break;
 80077c0:	e01e      	b.n	8007800 <lsm6dso_gy_data_rate_set+0x240>
            else if (val == LSM6DSO_GY_ODR_26Hz)
 80077c2:	1cfb      	adds	r3, r7, #3
 80077c4:	781b      	ldrb	r3, [r3, #0]
 80077c6:	2b02      	cmp	r3, #2
 80077c8:	d104      	bne.n	80077d4 <lsm6dso_gy_data_rate_set+0x214>
              odr_gy = LSM6DSO_GY_ODR_104Hz;
 80077ca:	2317      	movs	r3, #23
 80077cc:	18fb      	adds	r3, r7, r3
 80077ce:	2204      	movs	r2, #4
 80077d0:	701a      	strb	r2, [r3, #0]
            break;
 80077d2:	e015      	b.n	8007800 <lsm6dso_gy_data_rate_set+0x240>
            else if (val == LSM6DSO_GY_ODR_52Hz)
 80077d4:	1cfb      	adds	r3, r7, #3
 80077d6:	781b      	ldrb	r3, [r3, #0]
 80077d8:	2b03      	cmp	r3, #3
 80077da:	d104      	bne.n	80077e6 <lsm6dso_gy_data_rate_set+0x226>
              odr_gy = LSM6DSO_GY_ODR_104Hz;
 80077dc:	2317      	movs	r3, #23
 80077de:	18fb      	adds	r3, r7, r3
 80077e0:	2204      	movs	r2, #4
 80077e2:	701a      	strb	r2, [r3, #0]
            break;
 80077e4:	e00c      	b.n	8007800 <lsm6dso_gy_data_rate_set+0x240>
              odr_gy = val;
 80077e6:	2317      	movs	r3, #23
 80077e8:	18fb      	adds	r3, r7, r3
 80077ea:	1cfa      	adds	r2, r7, #3
 80077ec:	7812      	ldrb	r2, [r2, #0]
 80077ee:	701a      	strb	r2, [r3, #0]
            break;
 80077f0:	e006      	b.n	8007800 <lsm6dso_gy_data_rate_set+0x240>

          default:
            odr_gy = val;
 80077f2:	2317      	movs	r3, #23
 80077f4:	18fb      	adds	r3, r7, r3
 80077f6:	1cfa      	adds	r2, r7, #3
 80077f8:	7812      	ldrb	r2, [r2, #0]
 80077fa:	701a      	strb	r2, [r3, #0]
            break;
 80077fc:	e000      	b.n	8007800 <lsm6dso_gy_data_rate_set+0x240>
        }
      }
 80077fe:	46c0      	nop			; (mov r8, r8)
    }
  }

  if (ret == 0)
 8007800:	693b      	ldr	r3, [r7, #16]
 8007802:	2b00      	cmp	r3, #0
 8007804:	d108      	bne.n	8007818 <lsm6dso_gy_data_rate_set+0x258>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 8007806:	2308      	movs	r3, #8
 8007808:	18fa      	adds	r2, r7, r3
 800780a:	6878      	ldr	r0, [r7, #4]
 800780c:	2301      	movs	r3, #1
 800780e:	2111      	movs	r1, #17
 8007810:	f7ff fc20 	bl	8007054 <lsm6dso_read_reg>
 8007814:	0003      	movs	r3, r0
 8007816:	613b      	str	r3, [r7, #16]
  }

  if (ret == 0)
 8007818:	693b      	ldr	r3, [r7, #16]
 800781a:	2b00      	cmp	r3, #0
 800781c:	d117      	bne.n	800784e <lsm6dso_gy_data_rate_set+0x28e>
  {
    reg.odr_g = (uint8_t) odr_gy;
 800781e:	2317      	movs	r3, #23
 8007820:	18fb      	adds	r3, r7, r3
 8007822:	781b      	ldrb	r3, [r3, #0]
 8007824:	220f      	movs	r2, #15
 8007826:	4013      	ands	r3, r2
 8007828:	b2da      	uxtb	r2, r3
 800782a:	2408      	movs	r4, #8
 800782c:	193b      	adds	r3, r7, r4
 800782e:	0110      	lsls	r0, r2, #4
 8007830:	781a      	ldrb	r2, [r3, #0]
 8007832:	210f      	movs	r1, #15
 8007834:	400a      	ands	r2, r1
 8007836:	1c11      	adds	r1, r2, #0
 8007838:	1c02      	adds	r2, r0, #0
 800783a:	430a      	orrs	r2, r1
 800783c:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 800783e:	193a      	adds	r2, r7, r4
 8007840:	6878      	ldr	r0, [r7, #4]
 8007842:	2301      	movs	r3, #1
 8007844:	2111      	movs	r1, #17
 8007846:	f7ff fc26 	bl	8007096 <lsm6dso_write_reg>
 800784a:	0003      	movs	r3, r0
 800784c:	613b      	str	r3, [r7, #16]
  }

  return ret;
 800784e:	693b      	ldr	r3, [r7, #16]
}
 8007850:	0018      	movs	r0, r3
 8007852:	46bd      	mov	sp, r7
 8007854:	b007      	add	sp, #28
 8007856:	bd90      	pop	{r4, r7, pc}

08007858 <lsm6dso_gy_data_rate_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_data_rate_get(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_g_t *val)
{
 8007858:	b590      	push	{r4, r7, lr}
 800785a:	b085      	sub	sp, #20
 800785c:	af00      	add	r7, sp, #0
 800785e:	6078      	str	r0, [r7, #4]
 8007860:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 8007862:	2408      	movs	r4, #8
 8007864:	193a      	adds	r2, r7, r4
 8007866:	6878      	ldr	r0, [r7, #4]
 8007868:	2301      	movs	r3, #1
 800786a:	2111      	movs	r1, #17
 800786c:	f7ff fbf2 	bl	8007054 <lsm6dso_read_reg>
 8007870:	0003      	movs	r3, r0
 8007872:	60fb      	str	r3, [r7, #12]

  switch (reg.odr_g)
 8007874:	193b      	adds	r3, r7, r4
 8007876:	781b      	ldrb	r3, [r3, #0]
 8007878:	061b      	lsls	r3, r3, #24
 800787a:	0f1b      	lsrs	r3, r3, #28
 800787c:	b2db      	uxtb	r3, r3
 800787e:	2b0a      	cmp	r3, #10
 8007880:	d830      	bhi.n	80078e4 <lsm6dso_gy_data_rate_get+0x8c>
 8007882:	009a      	lsls	r2, r3, #2
 8007884:	4b1c      	ldr	r3, [pc, #112]	; (80078f8 <lsm6dso_gy_data_rate_get+0xa0>)
 8007886:	18d3      	adds	r3, r2, r3
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	469f      	mov	pc, r3
  {
    case LSM6DSO_GY_ODR_OFF:
      *val = LSM6DSO_GY_ODR_OFF;
 800788c:	683b      	ldr	r3, [r7, #0]
 800788e:	2200      	movs	r2, #0
 8007890:	701a      	strb	r2, [r3, #0]
      break;
 8007892:	e02b      	b.n	80078ec <lsm6dso_gy_data_rate_get+0x94>

    case LSM6DSO_GY_ODR_12Hz5:
      *val = LSM6DSO_GY_ODR_12Hz5;
 8007894:	683b      	ldr	r3, [r7, #0]
 8007896:	2201      	movs	r2, #1
 8007898:	701a      	strb	r2, [r3, #0]
      break;
 800789a:	e027      	b.n	80078ec <lsm6dso_gy_data_rate_get+0x94>

    case LSM6DSO_GY_ODR_26Hz:
      *val = LSM6DSO_GY_ODR_26Hz;
 800789c:	683b      	ldr	r3, [r7, #0]
 800789e:	2202      	movs	r2, #2
 80078a0:	701a      	strb	r2, [r3, #0]
      break;
 80078a2:	e023      	b.n	80078ec <lsm6dso_gy_data_rate_get+0x94>

    case LSM6DSO_GY_ODR_52Hz:
      *val = LSM6DSO_GY_ODR_52Hz;
 80078a4:	683b      	ldr	r3, [r7, #0]
 80078a6:	2203      	movs	r2, #3
 80078a8:	701a      	strb	r2, [r3, #0]
      break;
 80078aa:	e01f      	b.n	80078ec <lsm6dso_gy_data_rate_get+0x94>

    case LSM6DSO_GY_ODR_104Hz:
      *val = LSM6DSO_GY_ODR_104Hz;
 80078ac:	683b      	ldr	r3, [r7, #0]
 80078ae:	2204      	movs	r2, #4
 80078b0:	701a      	strb	r2, [r3, #0]
      break;
 80078b2:	e01b      	b.n	80078ec <lsm6dso_gy_data_rate_get+0x94>

    case LSM6DSO_GY_ODR_208Hz:
      *val = LSM6DSO_GY_ODR_208Hz;
 80078b4:	683b      	ldr	r3, [r7, #0]
 80078b6:	2205      	movs	r2, #5
 80078b8:	701a      	strb	r2, [r3, #0]
      break;
 80078ba:	e017      	b.n	80078ec <lsm6dso_gy_data_rate_get+0x94>

    case LSM6DSO_GY_ODR_417Hz:
      *val = LSM6DSO_GY_ODR_417Hz;
 80078bc:	683b      	ldr	r3, [r7, #0]
 80078be:	2206      	movs	r2, #6
 80078c0:	701a      	strb	r2, [r3, #0]
      break;
 80078c2:	e013      	b.n	80078ec <lsm6dso_gy_data_rate_get+0x94>

    case LSM6DSO_GY_ODR_833Hz:
      *val = LSM6DSO_GY_ODR_833Hz;
 80078c4:	683b      	ldr	r3, [r7, #0]
 80078c6:	2207      	movs	r2, #7
 80078c8:	701a      	strb	r2, [r3, #0]
      break;
 80078ca:	e00f      	b.n	80078ec <lsm6dso_gy_data_rate_get+0x94>

    case LSM6DSO_GY_ODR_1667Hz:
      *val = LSM6DSO_GY_ODR_1667Hz;
 80078cc:	683b      	ldr	r3, [r7, #0]
 80078ce:	2208      	movs	r2, #8
 80078d0:	701a      	strb	r2, [r3, #0]
      break;
 80078d2:	e00b      	b.n	80078ec <lsm6dso_gy_data_rate_get+0x94>

    case LSM6DSO_GY_ODR_3333Hz:
      *val = LSM6DSO_GY_ODR_3333Hz;
 80078d4:	683b      	ldr	r3, [r7, #0]
 80078d6:	2209      	movs	r2, #9
 80078d8:	701a      	strb	r2, [r3, #0]
      break;
 80078da:	e007      	b.n	80078ec <lsm6dso_gy_data_rate_get+0x94>

    case LSM6DSO_GY_ODR_6667Hz:
      *val = LSM6DSO_GY_ODR_6667Hz;
 80078dc:	683b      	ldr	r3, [r7, #0]
 80078de:	220a      	movs	r2, #10
 80078e0:	701a      	strb	r2, [r3, #0]
      break;
 80078e2:	e003      	b.n	80078ec <lsm6dso_gy_data_rate_get+0x94>

    default:
      *val = LSM6DSO_GY_ODR_OFF;
 80078e4:	683b      	ldr	r3, [r7, #0]
 80078e6:	2200      	movs	r2, #0
 80078e8:	701a      	strb	r2, [r3, #0]
      break;
 80078ea:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 80078ec:	68fb      	ldr	r3, [r7, #12]
}
 80078ee:	0018      	movs	r0, r3
 80078f0:	46bd      	mov	sp, r7
 80078f2:	b005      	add	sp, #20
 80078f4:	bd90      	pop	{r4, r7, pc}
 80078f6:	46c0      	nop			; (mov r8, r8)
 80078f8:	08016230 	.word	0x08016230

080078fc <lsm6dso_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL3_C
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80078fc:	b590      	push	{r4, r7, lr}
 80078fe:	b085      	sub	sp, #20
 8007900:	af00      	add	r7, sp, #0
 8007902:	6078      	str	r0, [r7, #4]
 8007904:	000a      	movs	r2, r1
 8007906:	1cfb      	adds	r3, r7, #3
 8007908:	701a      	strb	r2, [r3, #0]
  lsm6dso_ctrl3_c_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 800790a:	2408      	movs	r4, #8
 800790c:	193a      	adds	r2, r7, r4
 800790e:	6878      	ldr	r0, [r7, #4]
 8007910:	2301      	movs	r3, #1
 8007912:	2112      	movs	r1, #18
 8007914:	f7ff fb9e 	bl	8007054 <lsm6dso_read_reg>
 8007918:	0003      	movs	r3, r0
 800791a:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	2b00      	cmp	r3, #0
 8007920:	d117      	bne.n	8007952 <lsm6dso_block_data_update_set+0x56>
  {
    reg.bdu = val;
 8007922:	1cfb      	adds	r3, r7, #3
 8007924:	781b      	ldrb	r3, [r3, #0]
 8007926:	2201      	movs	r2, #1
 8007928:	4013      	ands	r3, r2
 800792a:	b2da      	uxtb	r2, r3
 800792c:	193b      	adds	r3, r7, r4
 800792e:	2101      	movs	r1, #1
 8007930:	400a      	ands	r2, r1
 8007932:	0190      	lsls	r0, r2, #6
 8007934:	781a      	ldrb	r2, [r3, #0]
 8007936:	2140      	movs	r1, #64	; 0x40
 8007938:	438a      	bics	r2, r1
 800793a:	1c11      	adds	r1, r2, #0
 800793c:	1c02      	adds	r2, r0, #0
 800793e:	430a      	orrs	r2, r1
 8007940:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 8007942:	193a      	adds	r2, r7, r4
 8007944:	6878      	ldr	r0, [r7, #4]
 8007946:	2301      	movs	r3, #1
 8007948:	2112      	movs	r1, #18
 800794a:	f7ff fba4 	bl	8007096 <lsm6dso_write_reg>
 800794e:	0003      	movs	r3, r0
 8007950:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8007952:	68fb      	ldr	r3, [r7, #12]
}
 8007954:	0018      	movs	r0, r3
 8007956:	46bd      	mov	sp, r7
 8007958:	b005      	add	sp, #20
 800795a:	bd90      	pop	{r4, r7, pc}

0800795c <lsm6dso_angular_rate_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_angular_rate_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 800795c:	b590      	push	{r4, r7, lr}
 800795e:	b087      	sub	sp, #28
 8007960:	af00      	add	r7, sp, #0
 8007962:	6078      	str	r0, [r7, #4]
 8007964:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_OUTX_L_G, buff, 6);
 8007966:	240c      	movs	r4, #12
 8007968:	193a      	adds	r2, r7, r4
 800796a:	6878      	ldr	r0, [r7, #4]
 800796c:	2306      	movs	r3, #6
 800796e:	2122      	movs	r1, #34	; 0x22
 8007970:	f7ff fb70 	bl	8007054 <lsm6dso_read_reg>
 8007974:	0003      	movs	r3, r0
 8007976:	617b      	str	r3, [r7, #20]
  val[0] = (int16_t)buff[1];
 8007978:	0021      	movs	r1, r4
 800797a:	187b      	adds	r3, r7, r1
 800797c:	785b      	ldrb	r3, [r3, #1]
 800797e:	b21a      	sxth	r2, r3
 8007980:	683b      	ldr	r3, [r7, #0]
 8007982:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8007984:	683b      	ldr	r3, [r7, #0]
 8007986:	2200      	movs	r2, #0
 8007988:	5e9b      	ldrsh	r3, [r3, r2]
 800798a:	b29b      	uxth	r3, r3
 800798c:	021b      	lsls	r3, r3, #8
 800798e:	b29a      	uxth	r2, r3
 8007990:	187b      	adds	r3, r7, r1
 8007992:	781b      	ldrb	r3, [r3, #0]
 8007994:	b29b      	uxth	r3, r3
 8007996:	18d3      	adds	r3, r2, r3
 8007998:	b29b      	uxth	r3, r3
 800799a:	b21a      	sxth	r2, r3
 800799c:	683b      	ldr	r3, [r7, #0]
 800799e:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 80079a0:	187b      	adds	r3, r7, r1
 80079a2:	78da      	ldrb	r2, [r3, #3]
 80079a4:	683b      	ldr	r3, [r7, #0]
 80079a6:	3302      	adds	r3, #2
 80079a8:	b212      	sxth	r2, r2
 80079aa:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 80079ac:	683b      	ldr	r3, [r7, #0]
 80079ae:	3302      	adds	r3, #2
 80079b0:	2200      	movs	r2, #0
 80079b2:	5e9b      	ldrsh	r3, [r3, r2]
 80079b4:	b29b      	uxth	r3, r3
 80079b6:	021b      	lsls	r3, r3, #8
 80079b8:	b29a      	uxth	r2, r3
 80079ba:	187b      	adds	r3, r7, r1
 80079bc:	789b      	ldrb	r3, [r3, #2]
 80079be:	b29b      	uxth	r3, r3
 80079c0:	18d3      	adds	r3, r2, r3
 80079c2:	b29a      	uxth	r2, r3
 80079c4:	683b      	ldr	r3, [r7, #0]
 80079c6:	3302      	adds	r3, #2
 80079c8:	b212      	sxth	r2, r2
 80079ca:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 80079cc:	187b      	adds	r3, r7, r1
 80079ce:	795a      	ldrb	r2, [r3, #5]
 80079d0:	683b      	ldr	r3, [r7, #0]
 80079d2:	3304      	adds	r3, #4
 80079d4:	b212      	sxth	r2, r2
 80079d6:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 80079d8:	683b      	ldr	r3, [r7, #0]
 80079da:	3304      	adds	r3, #4
 80079dc:	2200      	movs	r2, #0
 80079de:	5e9b      	ldrsh	r3, [r3, r2]
 80079e0:	b29b      	uxth	r3, r3
 80079e2:	021b      	lsls	r3, r3, #8
 80079e4:	b29a      	uxth	r2, r3
 80079e6:	187b      	adds	r3, r7, r1
 80079e8:	791b      	ldrb	r3, [r3, #4]
 80079ea:	b29b      	uxth	r3, r3
 80079ec:	18d3      	adds	r3, r2, r3
 80079ee:	b29a      	uxth	r2, r3
 80079f0:	683b      	ldr	r3, [r7, #0]
 80079f2:	3304      	adds	r3, #4
 80079f4:	b212      	sxth	r2, r2
 80079f6:	801a      	strh	r2, [r3, #0]

  return ret;
 80079f8:	697b      	ldr	r3, [r7, #20]
}
 80079fa:	0018      	movs	r0, r3
 80079fc:	46bd      	mov	sp, r7
 80079fe:	b007      	add	sp, #28
 8007a00:	bd90      	pop	{r4, r7, pc}

08007a02 <lsm6dso_acceleration_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8007a02:	b590      	push	{r4, r7, lr}
 8007a04:	b087      	sub	sp, #28
 8007a06:	af00      	add	r7, sp, #0
 8007a08:	6078      	str	r0, [r7, #4]
 8007a0a:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_OUTX_L_A, buff, 6);
 8007a0c:	240c      	movs	r4, #12
 8007a0e:	193a      	adds	r2, r7, r4
 8007a10:	6878      	ldr	r0, [r7, #4]
 8007a12:	2306      	movs	r3, #6
 8007a14:	2128      	movs	r1, #40	; 0x28
 8007a16:	f7ff fb1d 	bl	8007054 <lsm6dso_read_reg>
 8007a1a:	0003      	movs	r3, r0
 8007a1c:	617b      	str	r3, [r7, #20]
  val[0] = (int16_t)buff[1];
 8007a1e:	0021      	movs	r1, r4
 8007a20:	187b      	adds	r3, r7, r1
 8007a22:	785b      	ldrb	r3, [r3, #1]
 8007a24:	b21a      	sxth	r2, r3
 8007a26:	683b      	ldr	r3, [r7, #0]
 8007a28:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8007a2a:	683b      	ldr	r3, [r7, #0]
 8007a2c:	2200      	movs	r2, #0
 8007a2e:	5e9b      	ldrsh	r3, [r3, r2]
 8007a30:	b29b      	uxth	r3, r3
 8007a32:	021b      	lsls	r3, r3, #8
 8007a34:	b29a      	uxth	r2, r3
 8007a36:	187b      	adds	r3, r7, r1
 8007a38:	781b      	ldrb	r3, [r3, #0]
 8007a3a:	b29b      	uxth	r3, r3
 8007a3c:	18d3      	adds	r3, r2, r3
 8007a3e:	b29b      	uxth	r3, r3
 8007a40:	b21a      	sxth	r2, r3
 8007a42:	683b      	ldr	r3, [r7, #0]
 8007a44:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8007a46:	187b      	adds	r3, r7, r1
 8007a48:	78da      	ldrb	r2, [r3, #3]
 8007a4a:	683b      	ldr	r3, [r7, #0]
 8007a4c:	3302      	adds	r3, #2
 8007a4e:	b212      	sxth	r2, r2
 8007a50:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8007a52:	683b      	ldr	r3, [r7, #0]
 8007a54:	3302      	adds	r3, #2
 8007a56:	2200      	movs	r2, #0
 8007a58:	5e9b      	ldrsh	r3, [r3, r2]
 8007a5a:	b29b      	uxth	r3, r3
 8007a5c:	021b      	lsls	r3, r3, #8
 8007a5e:	b29a      	uxth	r2, r3
 8007a60:	187b      	adds	r3, r7, r1
 8007a62:	789b      	ldrb	r3, [r3, #2]
 8007a64:	b29b      	uxth	r3, r3
 8007a66:	18d3      	adds	r3, r2, r3
 8007a68:	b29a      	uxth	r2, r3
 8007a6a:	683b      	ldr	r3, [r7, #0]
 8007a6c:	3302      	adds	r3, #2
 8007a6e:	b212      	sxth	r2, r2
 8007a70:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8007a72:	187b      	adds	r3, r7, r1
 8007a74:	795a      	ldrb	r2, [r3, #5]
 8007a76:	683b      	ldr	r3, [r7, #0]
 8007a78:	3304      	adds	r3, #4
 8007a7a:	b212      	sxth	r2, r2
 8007a7c:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8007a7e:	683b      	ldr	r3, [r7, #0]
 8007a80:	3304      	adds	r3, #4
 8007a82:	2200      	movs	r2, #0
 8007a84:	5e9b      	ldrsh	r3, [r3, r2]
 8007a86:	b29b      	uxth	r3, r3
 8007a88:	021b      	lsls	r3, r3, #8
 8007a8a:	b29a      	uxth	r2, r3
 8007a8c:	187b      	adds	r3, r7, r1
 8007a8e:	791b      	ldrb	r3, [r3, #4]
 8007a90:	b29b      	uxth	r3, r3
 8007a92:	18d3      	adds	r3, r2, r3
 8007a94:	b29a      	uxth	r2, r3
 8007a96:	683b      	ldr	r3, [r7, #0]
 8007a98:	3304      	adds	r3, #4
 8007a9a:	b212      	sxth	r2, r2
 8007a9c:	801a      	strh	r2, [r3, #0]

  return ret;
 8007a9e:	697b      	ldr	r3, [r7, #20]
}
 8007aa0:	0018      	movs	r0, r3
 8007aa2:	46bd      	mov	sp, r7
 8007aa4:	b007      	add	sp, #28
 8007aa6:	bd90      	pop	{r4, r7, pc}

08007aa8 <lsm6dso_mem_bank_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_mem_bank_set(stmdev_ctx_t *ctx,
                             lsm6dso_reg_access_t val)
{
 8007aa8:	b590      	push	{r4, r7, lr}
 8007aaa:	b085      	sub	sp, #20
 8007aac:	af00      	add	r7, sp, #0
 8007aae:	6078      	str	r0, [r7, #4]
 8007ab0:	000a      	movs	r2, r1
 8007ab2:	1cfb      	adds	r3, r7, #3
 8007ab4:	701a      	strb	r2, [r3, #0]
  lsm6dso_func_cfg_access_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_FUNC_CFG_ACCESS, (uint8_t *)&reg, 1);
 8007ab6:	2408      	movs	r4, #8
 8007ab8:	193a      	adds	r2, r7, r4
 8007aba:	6878      	ldr	r0, [r7, #4]
 8007abc:	2301      	movs	r3, #1
 8007abe:	2101      	movs	r1, #1
 8007ac0:	f7ff fac8 	bl	8007054 <lsm6dso_read_reg>
 8007ac4:	0003      	movs	r3, r0
 8007ac6:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d115      	bne.n	8007afa <lsm6dso_mem_bank_set+0x52>
  {
    reg.reg_access = (uint8_t)val;
 8007ace:	1cfb      	adds	r3, r7, #3
 8007ad0:	781b      	ldrb	r3, [r3, #0]
 8007ad2:	2203      	movs	r2, #3
 8007ad4:	4013      	ands	r3, r2
 8007ad6:	b2da      	uxtb	r2, r3
 8007ad8:	193b      	adds	r3, r7, r4
 8007ada:	0190      	lsls	r0, r2, #6
 8007adc:	781a      	ldrb	r2, [r3, #0]
 8007ade:	213f      	movs	r1, #63	; 0x3f
 8007ae0:	400a      	ands	r2, r1
 8007ae2:	1c11      	adds	r1, r2, #0
 8007ae4:	1c02      	adds	r2, r0, #0
 8007ae6:	430a      	orrs	r2, r1
 8007ae8:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_FUNC_CFG_ACCESS, (uint8_t *)&reg, 1);
 8007aea:	193a      	adds	r2, r7, r4
 8007aec:	6878      	ldr	r0, [r7, #4]
 8007aee:	2301      	movs	r3, #1
 8007af0:	2101      	movs	r1, #1
 8007af2:	f7ff fad0 	bl	8007096 <lsm6dso_write_reg>
 8007af6:	0003      	movs	r3, r0
 8007af8:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8007afa:	68fb      	ldr	r3, [r7, #12]
}
 8007afc:	0018      	movs	r0, r3
 8007afe:	46bd      	mov	sp, r7
 8007b00:	b005      	add	sp, #20
 8007b02:	bd90      	pop	{r4, r7, pc}

08007b04 <lsm6dso_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8007b04:	b580      	push	{r7, lr}
 8007b06:	b084      	sub	sp, #16
 8007b08:	af00      	add	r7, sp, #0
 8007b0a:	6078      	str	r0, [r7, #4]
 8007b0c:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_WHO_AM_I, buff, 1);
 8007b0e:	683a      	ldr	r2, [r7, #0]
 8007b10:	6878      	ldr	r0, [r7, #4]
 8007b12:	2301      	movs	r3, #1
 8007b14:	210f      	movs	r1, #15
 8007b16:	f7ff fa9d 	bl	8007054 <lsm6dso_read_reg>
 8007b1a:	0003      	movs	r3, r0
 8007b1c:	60fb      	str	r3, [r7, #12]

  return ret;
 8007b1e:	68fb      	ldr	r3, [r7, #12]
}
 8007b20:	0018      	movs	r0, r3
 8007b22:	46bd      	mov	sp, r7
 8007b24:	b004      	add	sp, #16
 8007b26:	bd80      	pop	{r7, pc}

08007b28 <lsm6dso_auto_increment_set>:
  * @param  val      change the values of if_inc in reg CTRL3_C
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8007b28:	b590      	push	{r4, r7, lr}
 8007b2a:	b085      	sub	sp, #20
 8007b2c:	af00      	add	r7, sp, #0
 8007b2e:	6078      	str	r0, [r7, #4]
 8007b30:	000a      	movs	r2, r1
 8007b32:	1cfb      	adds	r3, r7, #3
 8007b34:	701a      	strb	r2, [r3, #0]
  lsm6dso_ctrl3_c_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 8007b36:	2408      	movs	r4, #8
 8007b38:	193a      	adds	r2, r7, r4
 8007b3a:	6878      	ldr	r0, [r7, #4]
 8007b3c:	2301      	movs	r3, #1
 8007b3e:	2112      	movs	r1, #18
 8007b40:	f7ff fa88 	bl	8007054 <lsm6dso_read_reg>
 8007b44:	0003      	movs	r3, r0
 8007b46:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d117      	bne.n	8007b7e <lsm6dso_auto_increment_set+0x56>
  {
    reg.if_inc = val;
 8007b4e:	1cfb      	adds	r3, r7, #3
 8007b50:	781b      	ldrb	r3, [r3, #0]
 8007b52:	2201      	movs	r2, #1
 8007b54:	4013      	ands	r3, r2
 8007b56:	b2da      	uxtb	r2, r3
 8007b58:	193b      	adds	r3, r7, r4
 8007b5a:	2101      	movs	r1, #1
 8007b5c:	400a      	ands	r2, r1
 8007b5e:	0090      	lsls	r0, r2, #2
 8007b60:	781a      	ldrb	r2, [r3, #0]
 8007b62:	2104      	movs	r1, #4
 8007b64:	438a      	bics	r2, r1
 8007b66:	1c11      	adds	r1, r2, #0
 8007b68:	1c02      	adds	r2, r0, #0
 8007b6a:	430a      	orrs	r2, r1
 8007b6c:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 8007b6e:	193a      	adds	r2, r7, r4
 8007b70:	6878      	ldr	r0, [r7, #4]
 8007b72:	2301      	movs	r3, #1
 8007b74:	2112      	movs	r1, #18
 8007b76:	f7ff fa8e 	bl	8007096 <lsm6dso_write_reg>
 8007b7a:	0003      	movs	r3, r0
 8007b7c:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8007b7e:	68fb      	ldr	r3, [r7, #12]
}
 8007b80:	0018      	movs	r0, r3
 8007b82:	46bd      	mov	sp, r7
 8007b84:	b005      	add	sp, #20
 8007b86:	bd90      	pop	{r4, r7, pc}

08007b88 <lsm6dso_i3c_disable_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_i3c_disable_set(stmdev_ctx_t *ctx,
                                lsm6dso_i3c_disable_t val)
{
 8007b88:	b590      	push	{r4, r7, lr}
 8007b8a:	b087      	sub	sp, #28
 8007b8c:	af00      	add	r7, sp, #0
 8007b8e:	6078      	str	r0, [r7, #4]
 8007b90:	000a      	movs	r2, r1
 8007b92:	1cfb      	adds	r3, r7, #3
 8007b94:	701a      	strb	r2, [r3, #0]
  lsm6dso_i3c_bus_avb_t i3c_bus_avb;
  lsm6dso_ctrl9_xl_t ctrl9_xl;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL9_XL, (uint8_t *)&ctrl9_xl, 1);
 8007b96:	240c      	movs	r4, #12
 8007b98:	193a      	adds	r2, r7, r4
 8007b9a:	6878      	ldr	r0, [r7, #4]
 8007b9c:	2301      	movs	r3, #1
 8007b9e:	2118      	movs	r1, #24
 8007ba0:	f7ff fa58 	bl	8007054 <lsm6dso_read_reg>
 8007ba4:	0003      	movs	r3, r0
 8007ba6:	617b      	str	r3, [r7, #20]

  if (ret == 0)
 8007ba8:	697b      	ldr	r3, [r7, #20]
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d11a      	bne.n	8007be4 <lsm6dso_i3c_disable_set+0x5c>
  {
    ctrl9_xl.i3c_disable = ((uint8_t)val & 0x80U) >> 7;
 8007bae:	1cfb      	adds	r3, r7, #3
 8007bb0:	781b      	ldrb	r3, [r3, #0]
 8007bb2:	09db      	lsrs	r3, r3, #7
 8007bb4:	b2db      	uxtb	r3, r3
 8007bb6:	1c1a      	adds	r2, r3, #0
 8007bb8:	2301      	movs	r3, #1
 8007bba:	4013      	ands	r3, r2
 8007bbc:	b2da      	uxtb	r2, r3
 8007bbe:	193b      	adds	r3, r7, r4
 8007bc0:	2101      	movs	r1, #1
 8007bc2:	400a      	ands	r2, r1
 8007bc4:	1890      	adds	r0, r2, r2
 8007bc6:	781a      	ldrb	r2, [r3, #0]
 8007bc8:	2102      	movs	r1, #2
 8007bca:	438a      	bics	r2, r1
 8007bcc:	1c11      	adds	r1, r2, #0
 8007bce:	1c02      	adds	r2, r0, #0
 8007bd0:	430a      	orrs	r2, r1
 8007bd2:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL9_XL, (uint8_t *)&ctrl9_xl, 1);
 8007bd4:	193a      	adds	r2, r7, r4
 8007bd6:	6878      	ldr	r0, [r7, #4]
 8007bd8:	2301      	movs	r3, #1
 8007bda:	2118      	movs	r1, #24
 8007bdc:	f7ff fa5b 	bl	8007096 <lsm6dso_write_reg>
 8007be0:	0003      	movs	r3, r0
 8007be2:	617b      	str	r3, [r7, #20]
  }

  if (ret == 0)
 8007be4:	697b      	ldr	r3, [r7, #20]
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d108      	bne.n	8007bfc <lsm6dso_i3c_disable_set+0x74>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_I3C_BUS_AVB,
 8007bea:	2310      	movs	r3, #16
 8007bec:	18fa      	adds	r2, r7, r3
 8007bee:	6878      	ldr	r0, [r7, #4]
 8007bf0:	2301      	movs	r3, #1
 8007bf2:	2162      	movs	r1, #98	; 0x62
 8007bf4:	f7ff fa2e 	bl	8007054 <lsm6dso_read_reg>
 8007bf8:	0003      	movs	r3, r0
 8007bfa:	617b      	str	r3, [r7, #20]
                           (uint8_t *)&i3c_bus_avb, 1);
  }

  if (ret == 0)
 8007bfc:	697b      	ldr	r3, [r7, #20]
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d118      	bne.n	8007c34 <lsm6dso_i3c_disable_set+0xac>
  {
    i3c_bus_avb.i3c_bus_avb_sel = (uint8_t)val & 0x03U;
 8007c02:	1cfb      	adds	r3, r7, #3
 8007c04:	781b      	ldrb	r3, [r3, #0]
 8007c06:	2203      	movs	r2, #3
 8007c08:	4013      	ands	r3, r2
 8007c0a:	b2da      	uxtb	r2, r3
 8007c0c:	2410      	movs	r4, #16
 8007c0e:	193b      	adds	r3, r7, r4
 8007c10:	2103      	movs	r1, #3
 8007c12:	400a      	ands	r2, r1
 8007c14:	00d0      	lsls	r0, r2, #3
 8007c16:	781a      	ldrb	r2, [r3, #0]
 8007c18:	2118      	movs	r1, #24
 8007c1a:	438a      	bics	r2, r1
 8007c1c:	1c11      	adds	r1, r2, #0
 8007c1e:	1c02      	adds	r2, r0, #0
 8007c20:	430a      	orrs	r2, r1
 8007c22:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_I3C_BUS_AVB,
 8007c24:	193a      	adds	r2, r7, r4
 8007c26:	6878      	ldr	r0, [r7, #4]
 8007c28:	2301      	movs	r3, #1
 8007c2a:	2162      	movs	r1, #98	; 0x62
 8007c2c:	f7ff fa33 	bl	8007096 <lsm6dso_write_reg>
 8007c30:	0003      	movs	r3, r0
 8007c32:	617b      	str	r3, [r7, #20]
                            (uint8_t *)&i3c_bus_avb, 1);
  }

  return ret;
 8007c34:	697b      	ldr	r3, [r7, #20]
}
 8007c36:	0018      	movs	r0, r3
 8007c38:	46bd      	mov	sp, r7
 8007c3a:	b007      	add	sp, #28
 8007c3c:	bd90      	pop	{r4, r7, pc}

08007c3e <lsm6dso_fifo_mode_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_fifo_mode_set(stmdev_ctx_t *ctx,
                              lsm6dso_fifo_mode_t val)
{
 8007c3e:	b590      	push	{r4, r7, lr}
 8007c40:	b085      	sub	sp, #20
 8007c42:	af00      	add	r7, sp, #0
 8007c44:	6078      	str	r0, [r7, #4]
 8007c46:	000a      	movs	r2, r1
 8007c48:	1cfb      	adds	r3, r7, #3
 8007c4a:	701a      	strb	r2, [r3, #0]
  lsm6dso_fifo_ctrl4_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_FIFO_CTRL4, (uint8_t *)&reg, 1);
 8007c4c:	2408      	movs	r4, #8
 8007c4e:	193a      	adds	r2, r7, r4
 8007c50:	6878      	ldr	r0, [r7, #4]
 8007c52:	2301      	movs	r3, #1
 8007c54:	210a      	movs	r1, #10
 8007c56:	f7ff f9fd 	bl	8007054 <lsm6dso_read_reg>
 8007c5a:	0003      	movs	r3, r0
 8007c5c:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d117      	bne.n	8007c94 <lsm6dso_fifo_mode_set+0x56>
  {
    reg.fifo_mode = (uint8_t)val;
 8007c64:	1cfb      	adds	r3, r7, #3
 8007c66:	781b      	ldrb	r3, [r3, #0]
 8007c68:	2207      	movs	r2, #7
 8007c6a:	4013      	ands	r3, r2
 8007c6c:	b2da      	uxtb	r2, r3
 8007c6e:	193b      	adds	r3, r7, r4
 8007c70:	2107      	movs	r1, #7
 8007c72:	400a      	ands	r2, r1
 8007c74:	0010      	movs	r0, r2
 8007c76:	781a      	ldrb	r2, [r3, #0]
 8007c78:	2107      	movs	r1, #7
 8007c7a:	438a      	bics	r2, r1
 8007c7c:	1c11      	adds	r1, r2, #0
 8007c7e:	1c02      	adds	r2, r0, #0
 8007c80:	430a      	orrs	r2, r1
 8007c82:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_FIFO_CTRL4, (uint8_t *)&reg, 1);
 8007c84:	193a      	adds	r2, r7, r4
 8007c86:	6878      	ldr	r0, [r7, #4]
 8007c88:	2301      	movs	r3, #1
 8007c8a:	210a      	movs	r1, #10
 8007c8c:	f7ff fa03 	bl	8007096 <lsm6dso_write_reg>
 8007c90:	0003      	movs	r3, r0
 8007c92:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8007c94:	68fb      	ldr	r3, [r7, #12]
}
 8007c96:	0018      	movs	r0, r3
 8007c98:	46bd      	mov	sp, r7
 8007c9a:	b005      	add	sp, #20
 8007c9c:	bd90      	pop	{r4, r7, pc}

08007c9e <lsm6dso_fsm_enable_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_fsm_enable_get(stmdev_ctx_t *ctx,
                               lsm6dso_emb_fsm_enable_t *val)
{
 8007c9e:	b580      	push	{r7, lr}
 8007ca0:	b084      	sub	sp, #16
 8007ca2:	af00      	add	r7, sp, #0
 8007ca4:	6078      	str	r0, [r7, #4]
 8007ca6:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_EMBEDDED_FUNC_BANK);
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	2102      	movs	r1, #2
 8007cac:	0018      	movs	r0, r3
 8007cae:	f7ff fefb 	bl	8007aa8 <lsm6dso_mem_bank_set>
 8007cb2:	0003      	movs	r3, r0
 8007cb4:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d107      	bne.n	8007ccc <lsm6dso_fsm_enable_get+0x2e>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_FSM_ENABLE_A, (uint8_t *) val, 2);
 8007cbc:	683a      	ldr	r2, [r7, #0]
 8007cbe:	6878      	ldr	r0, [r7, #4]
 8007cc0:	2302      	movs	r3, #2
 8007cc2:	2146      	movs	r1, #70	; 0x46
 8007cc4:	f7ff f9c6 	bl	8007054 <lsm6dso_read_reg>
 8007cc8:	0003      	movs	r3, r0
 8007cca:	60fb      	str	r3, [r7, #12]
  }

  if (ret == 0)
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d106      	bne.n	8007ce0 <lsm6dso_fsm_enable_get+0x42>
  {
    ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_USER_BANK);
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	2100      	movs	r1, #0
 8007cd6:	0018      	movs	r0, r3
 8007cd8:	f7ff fee6 	bl	8007aa8 <lsm6dso_mem_bank_set>
 8007cdc:	0003      	movs	r3, r0
 8007cde:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8007ce0:	68fb      	ldr	r3, [r7, #12]
}
 8007ce2:	0018      	movs	r0, r3
 8007ce4:	46bd      	mov	sp, r7
 8007ce6:	b004      	add	sp, #16
 8007ce8:	bd80      	pop	{r7, pc}

08007cea <lsm6dso_fsm_data_rate_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_fsm_data_rate_get(stmdev_ctx_t *ctx,
                                  lsm6dso_fsm_odr_t *val)
{
 8007cea:	b580      	push	{r7, lr}
 8007cec:	b084      	sub	sp, #16
 8007cee:	af00      	add	r7, sp, #0
 8007cf0:	6078      	str	r0, [r7, #4]
 8007cf2:	6039      	str	r1, [r7, #0]
  lsm6dso_emb_func_odr_cfg_b_t reg;
  int32_t ret;

  ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_EMBEDDED_FUNC_BANK);
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	2102      	movs	r1, #2
 8007cf8:	0018      	movs	r0, r3
 8007cfa:	f7ff fed5 	bl	8007aa8 <lsm6dso_mem_bank_set>
 8007cfe:	0003      	movs	r3, r0
 8007d00:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d108      	bne.n	8007d1a <lsm6dso_fsm_data_rate_get+0x30>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_EMB_FUNC_ODR_CFG_B,
 8007d08:	2308      	movs	r3, #8
 8007d0a:	18fa      	adds	r2, r7, r3
 8007d0c:	6878      	ldr	r0, [r7, #4]
 8007d0e:	2301      	movs	r3, #1
 8007d10:	215f      	movs	r1, #95	; 0x5f
 8007d12:	f7ff f99f 	bl	8007054 <lsm6dso_read_reg>
 8007d16:	0003      	movs	r3, r0
 8007d18:	60fb      	str	r3, [r7, #12]
                           (uint8_t *)&reg, 1);
  }

  if (ret == 0)
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d12b      	bne.n	8007d78 <lsm6dso_fsm_data_rate_get+0x8e>
  {
    switch (reg.fsm_odr)
 8007d20:	2308      	movs	r3, #8
 8007d22:	18fb      	adds	r3, r7, r3
 8007d24:	781b      	ldrb	r3, [r3, #0]
 8007d26:	06db      	lsls	r3, r3, #27
 8007d28:	0f9b      	lsrs	r3, r3, #30
 8007d2a:	b2db      	uxtb	r3, r3
 8007d2c:	2b03      	cmp	r3, #3
 8007d2e:	d014      	beq.n	8007d5a <lsm6dso_fsm_data_rate_get+0x70>
 8007d30:	dc17      	bgt.n	8007d62 <lsm6dso_fsm_data_rate_get+0x78>
 8007d32:	2b02      	cmp	r3, #2
 8007d34:	d00d      	beq.n	8007d52 <lsm6dso_fsm_data_rate_get+0x68>
 8007d36:	dc14      	bgt.n	8007d62 <lsm6dso_fsm_data_rate_get+0x78>
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d002      	beq.n	8007d42 <lsm6dso_fsm_data_rate_get+0x58>
 8007d3c:	2b01      	cmp	r3, #1
 8007d3e:	d004      	beq.n	8007d4a <lsm6dso_fsm_data_rate_get+0x60>
 8007d40:	e00f      	b.n	8007d62 <lsm6dso_fsm_data_rate_get+0x78>
    {
      case LSM6DSO_ODR_FSM_12Hz5:
        *val = LSM6DSO_ODR_FSM_12Hz5;
 8007d42:	683b      	ldr	r3, [r7, #0]
 8007d44:	2200      	movs	r2, #0
 8007d46:	701a      	strb	r2, [r3, #0]
        break;
 8007d48:	e00f      	b.n	8007d6a <lsm6dso_fsm_data_rate_get+0x80>

      case LSM6DSO_ODR_FSM_26Hz:
        *val = LSM6DSO_ODR_FSM_26Hz;
 8007d4a:	683b      	ldr	r3, [r7, #0]
 8007d4c:	2201      	movs	r2, #1
 8007d4e:	701a      	strb	r2, [r3, #0]
        break;
 8007d50:	e00b      	b.n	8007d6a <lsm6dso_fsm_data_rate_get+0x80>

      case LSM6DSO_ODR_FSM_52Hz:
        *val = LSM6DSO_ODR_FSM_52Hz;
 8007d52:	683b      	ldr	r3, [r7, #0]
 8007d54:	2202      	movs	r2, #2
 8007d56:	701a      	strb	r2, [r3, #0]
        break;
 8007d58:	e007      	b.n	8007d6a <lsm6dso_fsm_data_rate_get+0x80>

      case LSM6DSO_ODR_FSM_104Hz:
        *val = LSM6DSO_ODR_FSM_104Hz;
 8007d5a:	683b      	ldr	r3, [r7, #0]
 8007d5c:	2203      	movs	r2, #3
 8007d5e:	701a      	strb	r2, [r3, #0]
        break;
 8007d60:	e003      	b.n	8007d6a <lsm6dso_fsm_data_rate_get+0x80>

      default:
        *val = LSM6DSO_ODR_FSM_12Hz5;
 8007d62:	683b      	ldr	r3, [r7, #0]
 8007d64:	2200      	movs	r2, #0
 8007d66:	701a      	strb	r2, [r3, #0]
        break;
 8007d68:	46c0      	nop			; (mov r8, r8)
    }

    ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_USER_BANK);
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	2100      	movs	r1, #0
 8007d6e:	0018      	movs	r0, r3
 8007d70:	f7ff fe9a 	bl	8007aa8 <lsm6dso_mem_bank_set>
 8007d74:	0003      	movs	r3, r0
 8007d76:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8007d78:	68fb      	ldr	r3, [r7, #12]
}
 8007d7a:	0018      	movs	r0, r3
 8007d7c:	46bd      	mov	sp, r7
 8007d7e:	b004      	add	sp, #16
 8007d80:	bd80      	pop	{r7, pc}
	...

08007d84 <STTS751_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS751_RegisterBusIO(STTS751_Object_t *pObj, STTS751_IO_t *pIO)
{
 8007d84:	b580      	push	{r7, lr}
 8007d86:	b084      	sub	sp, #16
 8007d88:	af00      	add	r7, sp, #0
 8007d8a:	6078      	str	r0, [r7, #4]
 8007d8c:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d103      	bne.n	8007d9c <STTS751_RegisterBusIO+0x18>
  {
    ret = STTS751_ERROR;
 8007d94:	2301      	movs	r3, #1
 8007d96:	425b      	negs	r3, r3
 8007d98:	60fb      	str	r3, [r7, #12]
 8007d9a:	e031      	b.n	8007e00 <STTS751_RegisterBusIO+0x7c>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8007d9c:	683b      	ldr	r3, [r7, #0]
 8007d9e:	681a      	ldr	r2, [r3, #0]
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8007da4:	683b      	ldr	r3, [r7, #0]
 8007da6:	685a      	ldr	r2, [r3, #4]
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8007dac:	683b      	ldr	r3, [r7, #0]
 8007dae:	689a      	ldr	r2, [r3, #8]
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8007db4:	683b      	ldr	r3, [r7, #0]
 8007db6:	7b1a      	ldrb	r2, [r3, #12]
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8007dbc:	683b      	ldr	r3, [r7, #0]
 8007dbe:	691a      	ldr	r2, [r3, #16]
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8007dc4:	683b      	ldr	r3, [r7, #0]
 8007dc6:	695a      	ldr	r2, [r3, #20]
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8007dcc:	683b      	ldr	r3, [r7, #0]
 8007dce:	699a      	ldr	r2, [r3, #24]
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	4a0d      	ldr	r2, [pc, #52]	; (8007e0c <STTS751_RegisterBusIO+0x88>)
 8007dd8:	621a      	str	r2, [r3, #32]
    pObj->Ctx.write_reg = WriteRegWrap;
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	4a0c      	ldr	r2, [pc, #48]	; (8007e10 <STTS751_RegisterBusIO+0x8c>)
 8007dde:	61da      	str	r2, [r3, #28]
    pObj->Ctx.handle   = pObj;
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	687a      	ldr	r2, [r7, #4]
 8007de4:	625a      	str	r2, [r3, #36]	; 0x24

    if (pObj->IO.Init != NULL)
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d005      	beq.n	8007dfa <STTS751_RegisterBusIO+0x76>
    {
      ret = pObj->IO.Init();
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	4798      	blx	r3
 8007df4:	0003      	movs	r3, r0
 8007df6:	60fb      	str	r3, [r7, #12]
 8007df8:	e002      	b.n	8007e00 <STTS751_RegisterBusIO+0x7c>
    }
    else
    {
      ret = STTS751_ERROR;
 8007dfa:	2301      	movs	r3, #1
 8007dfc:	425b      	negs	r3, r3
 8007dfe:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8007e00:	68fb      	ldr	r3, [r7, #12]
}
 8007e02:	0018      	movs	r0, r3
 8007e04:	46bd      	mov	sp, r7
 8007e06:	b004      	add	sp, #16
 8007e08:	bd80      	pop	{r7, pc}
 8007e0a:	46c0      	nop			; (mov r8, r8)
 8007e0c:	08008233 	.word	0x08008233
 8007e10:	080082c9 	.word	0x080082c9

08007e14 <STTS751_Init>:
  * @brief  Initialize the STTS751 sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS751_Init(STTS751_Object_t *pObj)
{
 8007e14:	b580      	push	{r7, lr}
 8007e16:	b082      	sub	sp, #8
 8007e18:	af00      	add	r7, sp, #0
 8007e1a:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 0U)
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	2228      	movs	r2, #40	; 0x28
 8007e20:	5c9b      	ldrb	r3, [r3, r2]
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d124      	bne.n	8007e70 <STTS751_Init+0x5c>
  {
    /* Disable EVENT pin of SMBus. */
    if (stts751_pin_event_route_set(&(pObj->Ctx),  PROPERTY_ENABLE) != STTS751_OK)
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	331c      	adds	r3, #28
 8007e2a:	2101      	movs	r1, #1
 8007e2c:	0018      	movs	r0, r3
 8007e2e:	f000 fc6d 	bl	800870c <stts751_pin_event_route_set>
 8007e32:	1e03      	subs	r3, r0, #0
 8007e34:	d002      	beq.n	8007e3c <STTS751_Init+0x28>
    {
      return STTS751_ERROR;
 8007e36:	2301      	movs	r3, #1
 8007e38:	425b      	negs	r3, r3
 8007e3a:	e01e      	b.n	8007e7a <STTS751_Init+0x66>
    }

    /* Set default ODR */
    pObj->temp_odr = 1.0f;
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	22fe      	movs	r2, #254	; 0xfe
 8007e40:	0592      	lsls	r2, r2, #22
 8007e42:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the resolution to the maximum allowed value */
    if (stts751_resolution_set(&(pObj->Ctx), STTS751_12bit) != STTS751_OK)
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	331c      	adds	r3, #28
 8007e48:	2103      	movs	r1, #3
 8007e4a:	0018      	movs	r0, r3
 8007e4c:	f000 fbc4 	bl	80085d8 <stts751_resolution_set>
 8007e50:	1e03      	subs	r3, r0, #0
 8007e52:	d002      	beq.n	8007e5a <STTS751_Init+0x46>
    {
      return STTS751_ERROR;
 8007e54:	2301      	movs	r3, #1
 8007e56:	425b      	negs	r3, r3
 8007e58:	e00f      	b.n	8007e7a <STTS751_Init+0x66>
    }

    /* Put the component in standby mode. */
    if (stts751_temp_data_rate_set(&(pObj->Ctx), STTS751_TEMP_ODR_OFF) != STTS751_OK)
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	331c      	adds	r3, #28
 8007e5e:	2180      	movs	r1, #128	; 0x80
 8007e60:	0018      	movs	r0, r3
 8007e62:	f000 fad5 	bl	8008410 <stts751_temp_data_rate_set>
 8007e66:	1e03      	subs	r3, r0, #0
 8007e68:	d002      	beq.n	8007e70 <STTS751_Init+0x5c>
    {
      return STTS751_ERROR;
 8007e6a:	2301      	movs	r3, #1
 8007e6c:	425b      	negs	r3, r3
 8007e6e:	e004      	b.n	8007e7a <STTS751_Init+0x66>
    }
  }

  pObj->is_initialized = 1;
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	2228      	movs	r2, #40	; 0x28
 8007e74:	2101      	movs	r1, #1
 8007e76:	5499      	strb	r1, [r3, r2]

  return STTS751_OK;
 8007e78:	2300      	movs	r3, #0
}
 8007e7a:	0018      	movs	r0, r3
 8007e7c:	46bd      	mov	sp, r7
 8007e7e:	b002      	add	sp, #8
 8007e80:	bd80      	pop	{r7, pc}

08007e82 <STTS751_DeInit>:
  * @brief  Deinitialize the STTS751 sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS751_DeInit(STTS751_Object_t *pObj)
{
 8007e82:	b580      	push	{r7, lr}
 8007e84:	b082      	sub	sp, #8
 8007e86:	af00      	add	r7, sp, #0
 8007e88:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 1U)
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	2228      	movs	r2, #40	; 0x28
 8007e8e:	5c9b      	ldrb	r3, [r3, r2]
 8007e90:	2b01      	cmp	r3, #1
 8007e92:	d108      	bne.n	8007ea6 <STTS751_DeInit+0x24>
  {
    /* Put the component in standby mode */
    if (STTS751_TEMP_Disable(pObj) != STTS751_OK)
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	0018      	movs	r0, r3
 8007e98:	f000 f86a 	bl	8007f70 <STTS751_TEMP_Disable>
 8007e9c:	1e03      	subs	r3, r0, #0
 8007e9e:	d002      	beq.n	8007ea6 <STTS751_DeInit+0x24>
    {
      return STTS751_ERROR;
 8007ea0:	2301      	movs	r3, #1
 8007ea2:	425b      	negs	r3, r3
 8007ea4:	e004      	b.n	8007eb0 <STTS751_DeInit+0x2e>
    }
  }

  pObj->is_initialized = 0;
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	2228      	movs	r2, #40	; 0x28
 8007eaa:	2100      	movs	r1, #0
 8007eac:	5499      	strb	r1, [r3, r2]

  return STTS751_OK;
 8007eae:	2300      	movs	r3, #0
}
 8007eb0:	0018      	movs	r0, r3
 8007eb2:	46bd      	mov	sp, r7
 8007eb4:	b002      	add	sp, #8
 8007eb6:	bd80      	pop	{r7, pc}

08007eb8 <STTS751_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS751_ReadID(STTS751_Object_t *pObj, uint8_t *Id)
{
 8007eb8:	b580      	push	{r7, lr}
 8007eba:	b084      	sub	sp, #16
 8007ebc:	af00      	add	r7, sp, #0
 8007ebe:	6078      	str	r0, [r7, #4]
 8007ec0:	6039      	str	r1, [r7, #0]
  stts751_id_t buf;

  if (stts751_device_id_get(&(pObj->Ctx), &buf) != STTS751_OK)
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	331c      	adds	r3, #28
 8007ec6:	220c      	movs	r2, #12
 8007ec8:	18ba      	adds	r2, r7, r2
 8007eca:	0011      	movs	r1, r2
 8007ecc:	0018      	movs	r0, r3
 8007ece:	f000 fc4b 	bl	8008768 <stts751_device_id_get>
 8007ed2:	1e03      	subs	r3, r0, #0
 8007ed4:	d002      	beq.n	8007edc <STTS751_ReadID+0x24>
  {
    return STTS751_ERROR;
 8007ed6:	2301      	movs	r3, #1
 8007ed8:	425b      	negs	r3, r3
 8007eda:	e005      	b.n	8007ee8 <STTS751_ReadID+0x30>
  }

  *Id = buf.manufacturer_id;
 8007edc:	230c      	movs	r3, #12
 8007ede:	18fb      	adds	r3, r7, r3
 8007ee0:	785a      	ldrb	r2, [r3, #1]
 8007ee2:	683b      	ldr	r3, [r7, #0]
 8007ee4:	701a      	strb	r2, [r3, #0]

  return STTS751_OK;
 8007ee6:	2300      	movs	r3, #0
}
 8007ee8:	0018      	movs	r0, r3
 8007eea:	46bd      	mov	sp, r7
 8007eec:	b004      	add	sp, #16
 8007eee:	bd80      	pop	{r7, pc}

08007ef0 <STTS751_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to STTS751 sensor capabilities
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS751_GetCapabilities(STTS751_Object_t *pObj, STTS751_Capabilities_t *Capabilities)
{
 8007ef0:	b580      	push	{r7, lr}
 8007ef2:	b082      	sub	sp, #8
 8007ef4:	af00      	add	r7, sp, #0
 8007ef6:	6078      	str	r0, [r7, #4]
 8007ef8:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Humidity    = 0;
 8007efa:	683b      	ldr	r3, [r7, #0]
 8007efc:	2200      	movs	r2, #0
 8007efe:	709a      	strb	r2, [r3, #2]
  Capabilities->Pressure    = 0;
 8007f00:	683b      	ldr	r3, [r7, #0]
 8007f02:	2200      	movs	r2, #0
 8007f04:	705a      	strb	r2, [r3, #1]
  Capabilities->Temperature = 1;
 8007f06:	683b      	ldr	r3, [r7, #0]
 8007f08:	2201      	movs	r2, #1
 8007f0a:	701a      	strb	r2, [r3, #0]
  Capabilities->LowPower    = 0;
 8007f0c:	683b      	ldr	r3, [r7, #0]
 8007f0e:	2200      	movs	r2, #0
 8007f10:	70da      	strb	r2, [r3, #3]
  Capabilities->HumMaxOdr   = 0.0f;
 8007f12:	683b      	ldr	r3, [r7, #0]
 8007f14:	2200      	movs	r2, #0
 8007f16:	605a      	str	r2, [r3, #4]
  Capabilities->TempMaxOdr  = 32.0f;
 8007f18:	683b      	ldr	r3, [r7, #0]
 8007f1a:	2284      	movs	r2, #132	; 0x84
 8007f1c:	05d2      	lsls	r2, r2, #23
 8007f1e:	609a      	str	r2, [r3, #8]
  Capabilities->PressMaxOdr = 0.0f;
 8007f20:	683b      	ldr	r3, [r7, #0]
 8007f22:	2200      	movs	r2, #0
 8007f24:	60da      	str	r2, [r3, #12]
  return STTS751_OK;
 8007f26:	2300      	movs	r3, #0
}
 8007f28:	0018      	movs	r0, r3
 8007f2a:	46bd      	mov	sp, r7
 8007f2c:	b002      	add	sp, #8
 8007f2e:	bd80      	pop	{r7, pc}

08007f30 <STTS751_TEMP_Enable>:
  * @brief  Enable the STTS751 temperature sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS751_TEMP_Enable(STTS751_Object_t *pObj)
{
 8007f30:	b580      	push	{r7, lr}
 8007f32:	b082      	sub	sp, #8
 8007f34:	af00      	add	r7, sp, #0
 8007f36:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->temp_is_enabled == 1U)
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	2229      	movs	r2, #41	; 0x29
 8007f3c:	5c9b      	ldrb	r3, [r3, r2]
 8007f3e:	2b01      	cmp	r3, #1
 8007f40:	d101      	bne.n	8007f46 <STTS751_TEMP_Enable+0x16>
  {
    return STTS751_OK;
 8007f42:	2300      	movs	r3, #0
 8007f44:	e010      	b.n	8007f68 <STTS751_TEMP_Enable+0x38>
  }

  /* Power on the component and set the odr. */
  if (STTS751_TEMP_SetOutputDataRate(pObj, pObj->temp_odr) != STTS751_OK)
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	1c11      	adds	r1, r2, #0
 8007f4e:	0018      	movs	r0, r3
 8007f50:	f000 f8a2 	bl	8008098 <STTS751_TEMP_SetOutputDataRate>
 8007f54:	1e03      	subs	r3, r0, #0
 8007f56:	d002      	beq.n	8007f5e <STTS751_TEMP_Enable+0x2e>
  {
    return STTS751_ERROR;
 8007f58:	2301      	movs	r3, #1
 8007f5a:	425b      	negs	r3, r3
 8007f5c:	e004      	b.n	8007f68 <STTS751_TEMP_Enable+0x38>
  }

  pObj->temp_is_enabled = 1;
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	2229      	movs	r2, #41	; 0x29
 8007f62:	2101      	movs	r1, #1
 8007f64:	5499      	strb	r1, [r3, r2]

  return STTS751_OK;
 8007f66:	2300      	movs	r3, #0
}
 8007f68:	0018      	movs	r0, r3
 8007f6a:	46bd      	mov	sp, r7
 8007f6c:	b002      	add	sp, #8
 8007f6e:	bd80      	pop	{r7, pc}

08007f70 <STTS751_TEMP_Disable>:
  * @brief  Disable the STTS751 temperature sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS751_TEMP_Disable(STTS751_Object_t *pObj)
{
 8007f70:	b580      	push	{r7, lr}
 8007f72:	b082      	sub	sp, #8
 8007f74:	af00      	add	r7, sp, #0
 8007f76:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->temp_is_enabled == 0U)
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	2229      	movs	r2, #41	; 0x29
 8007f7c:	5c9b      	ldrb	r3, [r3, r2]
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d101      	bne.n	8007f86 <STTS751_TEMP_Disable+0x16>
  {
    return STTS751_OK;
 8007f82:	2300      	movs	r3, #0
 8007f84:	e01c      	b.n	8007fc0 <STTS751_TEMP_Disable+0x50>
  }

  /* Save the current odr. */
  if (STTS751_TEMP_GetOutputDataRate(pObj, &pObj->temp_odr) != STTS751_OK)
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	332c      	adds	r3, #44	; 0x2c
 8007f8a:	001a      	movs	r2, r3
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	0011      	movs	r1, r2
 8007f90:	0018      	movs	r0, r3
 8007f92:	f000 f819 	bl	8007fc8 <STTS751_TEMP_GetOutputDataRate>
 8007f96:	1e03      	subs	r3, r0, #0
 8007f98:	d002      	beq.n	8007fa0 <STTS751_TEMP_Disable+0x30>
  {
    return STTS751_ERROR;
 8007f9a:	2301      	movs	r3, #1
 8007f9c:	425b      	negs	r3, r3
 8007f9e:	e00f      	b.n	8007fc0 <STTS751_TEMP_Disable+0x50>
  }

  /* Put the component in standby mode. */
  if (stts751_temp_data_rate_set(&(pObj->Ctx), STTS751_TEMP_ODR_OFF) != STTS751_OK)
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	331c      	adds	r3, #28
 8007fa4:	2180      	movs	r1, #128	; 0x80
 8007fa6:	0018      	movs	r0, r3
 8007fa8:	f000 fa32 	bl	8008410 <stts751_temp_data_rate_set>
 8007fac:	1e03      	subs	r3, r0, #0
 8007fae:	d002      	beq.n	8007fb6 <STTS751_TEMP_Disable+0x46>
  {
    return STTS751_ERROR;
 8007fb0:	2301      	movs	r3, #1
 8007fb2:	425b      	negs	r3, r3
 8007fb4:	e004      	b.n	8007fc0 <STTS751_TEMP_Disable+0x50>
  }

  pObj->temp_is_enabled = 0;
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	2229      	movs	r2, #41	; 0x29
 8007fba:	2100      	movs	r1, #0
 8007fbc:	5499      	strb	r1, [r3, r2]

  return STTS751_OK;
 8007fbe:	2300      	movs	r3, #0
}
 8007fc0:	0018      	movs	r0, r3
 8007fc2:	46bd      	mov	sp, r7
 8007fc4:	b002      	add	sp, #8
 8007fc6:	bd80      	pop	{r7, pc}

08007fc8 <STTS751_TEMP_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS751_TEMP_GetOutputDataRate(STTS751_Object_t *pObj, float *Odr)
{
 8007fc8:	b580      	push	{r7, lr}
 8007fca:	b084      	sub	sp, #16
 8007fcc:	af00      	add	r7, sp, #0
 8007fce:	6078      	str	r0, [r7, #4]
 8007fd0:	6039      	str	r1, [r7, #0]
  int32_t ret = STTS751_OK;
 8007fd2:	2300      	movs	r3, #0
 8007fd4:	60fb      	str	r3, [r7, #12]
  stts751_odr_t odr_low_level;

  if (stts751_temp_data_rate_get(&(pObj->Ctx), &odr_low_level) != STTS751_OK)
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	331c      	adds	r3, #28
 8007fda:	220b      	movs	r2, #11
 8007fdc:	18ba      	adds	r2, r7, r2
 8007fde:	0011      	movs	r1, r2
 8007fe0:	0018      	movs	r0, r3
 8007fe2:	f000 fa85 	bl	80084f0 <stts751_temp_data_rate_get>
 8007fe6:	1e03      	subs	r3, r0, #0
 8007fe8:	d002      	beq.n	8007ff0 <STTS751_TEMP_GetOutputDataRate+0x28>
  {
    return STTS751_ERROR;
 8007fea:	2301      	movs	r3, #1
 8007fec:	425b      	negs	r3, r3
 8007fee:	e04d      	b.n	800808c <STTS751_TEMP_GetOutputDataRate+0xc4>
  }

  switch (odr_low_level)
 8007ff0:	230b      	movs	r3, #11
 8007ff2:	18fb      	adds	r3, r7, r3
 8007ff4:	781b      	ldrb	r3, [r3, #0]
 8007ff6:	2b90      	cmp	r3, #144	; 0x90
 8007ff8:	d00d      	beq.n	8008016 <STTS751_TEMP_GetOutputDataRate+0x4e>
 8007ffa:	dc42      	bgt.n	8008082 <STTS751_TEMP_GetOutputDataRate+0xba>
 8007ffc:	2b09      	cmp	r3, #9
 8007ffe:	dc08      	bgt.n	8008012 <STTS751_TEMP_GetOutputDataRate+0x4a>
 8008000:	2b00      	cmp	r3, #0
 8008002:	db3e      	blt.n	8008082 <STTS751_TEMP_GetOutputDataRate+0xba>
 8008004:	2b09      	cmp	r3, #9
 8008006:	d83c      	bhi.n	8008082 <STTS751_TEMP_GetOutputDataRate+0xba>
 8008008:	009a      	lsls	r2, r3, #2
 800800a:	4b22      	ldr	r3, [pc, #136]	; (8008094 <STTS751_TEMP_GetOutputDataRate+0xcc>)
 800800c:	18d3      	adds	r3, r2, r3
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	469f      	mov	pc, r3
 8008012:	2b80      	cmp	r3, #128	; 0x80
 8008014:	d135      	bne.n	8008082 <STTS751_TEMP_GetOutputDataRate+0xba>
  {
    case STTS751_TEMP_ODR_OFF:
    case STTS751_TEMP_ODR_ONE_SHOT:
      *Odr = 0.0f;
 8008016:	683b      	ldr	r3, [r7, #0]
 8008018:	2200      	movs	r2, #0
 800801a:	601a      	str	r2, [r3, #0]
      break;
 800801c:	e035      	b.n	800808a <STTS751_TEMP_GetOutputDataRate+0xc2>

    case STTS751_TEMP_ODR_62mHz5:
      *Odr = 0.0625f;
 800801e:	683b      	ldr	r3, [r7, #0]
 8008020:	22f6      	movs	r2, #246	; 0xf6
 8008022:	0592      	lsls	r2, r2, #22
 8008024:	601a      	str	r2, [r3, #0]
      break;
 8008026:	e030      	b.n	800808a <STTS751_TEMP_GetOutputDataRate+0xc2>

    case STTS751_TEMP_ODR_125mHz:
      *Odr = 0.125f;
 8008028:	683b      	ldr	r3, [r7, #0]
 800802a:	22f8      	movs	r2, #248	; 0xf8
 800802c:	0592      	lsls	r2, r2, #22
 800802e:	601a      	str	r2, [r3, #0]
      break;
 8008030:	e02b      	b.n	800808a <STTS751_TEMP_GetOutputDataRate+0xc2>

    case STTS751_TEMP_ODR_250mHz:
      *Odr = 0.250f;
 8008032:	683b      	ldr	r3, [r7, #0]
 8008034:	22fa      	movs	r2, #250	; 0xfa
 8008036:	0592      	lsls	r2, r2, #22
 8008038:	601a      	str	r2, [r3, #0]
      break;
 800803a:	e026      	b.n	800808a <STTS751_TEMP_GetOutputDataRate+0xc2>

    case STTS751_TEMP_ODR_500mHz:
      *Odr = 0.500f;
 800803c:	683b      	ldr	r3, [r7, #0]
 800803e:	22fc      	movs	r2, #252	; 0xfc
 8008040:	0592      	lsls	r2, r2, #22
 8008042:	601a      	str	r2, [r3, #0]
      break;
 8008044:	e021      	b.n	800808a <STTS751_TEMP_GetOutputDataRate+0xc2>

    case STTS751_TEMP_ODR_1Hz:
      *Odr = 1.0f;
 8008046:	683b      	ldr	r3, [r7, #0]
 8008048:	22fe      	movs	r2, #254	; 0xfe
 800804a:	0592      	lsls	r2, r2, #22
 800804c:	601a      	str	r2, [r3, #0]
      break;
 800804e:	e01c      	b.n	800808a <STTS751_TEMP_GetOutputDataRate+0xc2>

    case STTS751_TEMP_ODR_2Hz:
      *Odr = 2.0f;
 8008050:	683b      	ldr	r3, [r7, #0]
 8008052:	2280      	movs	r2, #128	; 0x80
 8008054:	05d2      	lsls	r2, r2, #23
 8008056:	601a      	str	r2, [r3, #0]
      break;
 8008058:	e017      	b.n	800808a <STTS751_TEMP_GetOutputDataRate+0xc2>

    case STTS751_TEMP_ODR_4Hz:
      *Odr = 4.0f;
 800805a:	683b      	ldr	r3, [r7, #0]
 800805c:	2281      	movs	r2, #129	; 0x81
 800805e:	05d2      	lsls	r2, r2, #23
 8008060:	601a      	str	r2, [r3, #0]
      break;
 8008062:	e012      	b.n	800808a <STTS751_TEMP_GetOutputDataRate+0xc2>

    case STTS751_TEMP_ODR_8Hz:
      *Odr = 8.0f;
 8008064:	683b      	ldr	r3, [r7, #0]
 8008066:	2282      	movs	r2, #130	; 0x82
 8008068:	05d2      	lsls	r2, r2, #23
 800806a:	601a      	str	r2, [r3, #0]
      break;
 800806c:	e00d      	b.n	800808a <STTS751_TEMP_GetOutputDataRate+0xc2>

    case STTS751_TEMP_ODR_16Hz:
      *Odr = 16.0f;
 800806e:	683b      	ldr	r3, [r7, #0]
 8008070:	2283      	movs	r2, #131	; 0x83
 8008072:	05d2      	lsls	r2, r2, #23
 8008074:	601a      	str	r2, [r3, #0]
      break;
 8008076:	e008      	b.n	800808a <STTS751_TEMP_GetOutputDataRate+0xc2>

    case STTS751_TEMP_ODR_32Hz:
      *Odr = 32.0f;
 8008078:	683b      	ldr	r3, [r7, #0]
 800807a:	2284      	movs	r2, #132	; 0x84
 800807c:	05d2      	lsls	r2, r2, #23
 800807e:	601a      	str	r2, [r3, #0]
      break;
 8008080:	e003      	b.n	800808a <STTS751_TEMP_GetOutputDataRate+0xc2>

    default:
      ret = STTS751_ERROR;
 8008082:	2301      	movs	r3, #1
 8008084:	425b      	negs	r3, r3
 8008086:	60fb      	str	r3, [r7, #12]
      break;
 8008088:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 800808a:	68fb      	ldr	r3, [r7, #12]
}
 800808c:	0018      	movs	r0, r3
 800808e:	46bd      	mov	sp, r7
 8008090:	b004      	add	sp, #16
 8008092:	bd80      	pop	{r7, pc}
 8008094:	0801625c 	.word	0x0801625c

08008098 <STTS751_TEMP_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS751_TEMP_SetOutputDataRate(STTS751_Object_t *pObj, float Odr)
{
 8008098:	b580      	push	{r7, lr}
 800809a:	b084      	sub	sp, #16
 800809c:	af00      	add	r7, sp, #0
 800809e:	6078      	str	r0, [r7, #4]
 80080a0:	6039      	str	r1, [r7, #0]
  stts751_odr_t new_odr;
  stts751_tres_t res;

  /* Get the current resolution */
  if (stts751_resolution_get(&(pObj->Ctx), &res) != STTS751_OK)
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	331c      	adds	r3, #28
 80080a6:	220e      	movs	r2, #14
 80080a8:	18ba      	adds	r2, r7, r2
 80080aa:	0011      	movs	r1, r2
 80080ac:	0018      	movs	r0, r3
 80080ae:	f000 fac3 	bl	8008638 <stts751_resolution_get>
 80080b2:	1e03      	subs	r3, r0, #0
 80080b4:	d002      	beq.n	80080bc <STTS751_TEMP_SetOutputDataRate+0x24>
  {
    return STTS751_ERROR;
 80080b6:	2301      	movs	r3, #1
 80080b8:	425b      	negs	r3, r3
 80080ba:	e095      	b.n	80081e8 <STTS751_TEMP_SetOutputDataRate+0x150>
  }

  /* If the requested odr is 16Hz we cannot use the 12 bits resolution */
  if (Odr == 16.0f && res == STTS751_12bit)
 80080bc:	2183      	movs	r1, #131	; 0x83
 80080be:	05c9      	lsls	r1, r1, #23
 80080c0:	6838      	ldr	r0, [r7, #0]
 80080c2:	f7f8 f9ad 	bl	8000420 <__aeabi_fcmpeq>
 80080c6:	1e03      	subs	r3, r0, #0
 80080c8:	d00f      	beq.n	80080ea <STTS751_TEMP_SetOutputDataRate+0x52>
 80080ca:	230e      	movs	r3, #14
 80080cc:	18fb      	adds	r3, r7, r3
 80080ce:	781b      	ldrb	r3, [r3, #0]
 80080d0:	2b03      	cmp	r3, #3
 80080d2:	d10a      	bne.n	80080ea <STTS751_TEMP_SetOutputDataRate+0x52>
  {
    /* We force resolution to the maximum allowed value */
    if (stts751_resolution_set(&(pObj->Ctx), STTS751_11bit) != STTS751_OK)
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	331c      	adds	r3, #28
 80080d8:	2101      	movs	r1, #1
 80080da:	0018      	movs	r0, r3
 80080dc:	f000 fa7c 	bl	80085d8 <stts751_resolution_set>
 80080e0:	1e03      	subs	r3, r0, #0
 80080e2:	d002      	beq.n	80080ea <STTS751_TEMP_SetOutputDataRate+0x52>
    {
      return STTS751_ERROR;
 80080e4:	2301      	movs	r3, #1
 80080e6:	425b      	negs	r3, r3
 80080e8:	e07e      	b.n	80081e8 <STTS751_TEMP_SetOutputDataRate+0x150>
    }
  }

  /* If the requested odr is 32Hz we cannot use the 12 bits and 11 bits resolutions */
  if (Odr == 32.0f && (res == STTS751_12bit || res == STTS751_11bit))
 80080ea:	2184      	movs	r1, #132	; 0x84
 80080ec:	05c9      	lsls	r1, r1, #23
 80080ee:	6838      	ldr	r0, [r7, #0]
 80080f0:	f7f8 f996 	bl	8000420 <__aeabi_fcmpeq>
 80080f4:	1e03      	subs	r3, r0, #0
 80080f6:	d013      	beq.n	8008120 <STTS751_TEMP_SetOutputDataRate+0x88>
 80080f8:	220e      	movs	r2, #14
 80080fa:	18bb      	adds	r3, r7, r2
 80080fc:	781b      	ldrb	r3, [r3, #0]
 80080fe:	2b03      	cmp	r3, #3
 8008100:	d003      	beq.n	800810a <STTS751_TEMP_SetOutputDataRate+0x72>
 8008102:	18bb      	adds	r3, r7, r2
 8008104:	781b      	ldrb	r3, [r3, #0]
 8008106:	2b01      	cmp	r3, #1
 8008108:	d10a      	bne.n	8008120 <STTS751_TEMP_SetOutputDataRate+0x88>
  {
    /* We force resolution to the maximum allowed value */
    if (stts751_resolution_set(&(pObj->Ctx), STTS751_10bit) != STTS751_OK)
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	331c      	adds	r3, #28
 800810e:	2100      	movs	r1, #0
 8008110:	0018      	movs	r0, r3
 8008112:	f000 fa61 	bl	80085d8 <stts751_resolution_set>
 8008116:	1e03      	subs	r3, r0, #0
 8008118:	d002      	beq.n	8008120 <STTS751_TEMP_SetOutputDataRate+0x88>
    {
      return STTS751_ERROR;
 800811a:	2301      	movs	r3, #1
 800811c:	425b      	negs	r3, r3
 800811e:	e063      	b.n	80081e8 <STTS751_TEMP_SetOutputDataRate+0x150>
    }
  }

  new_odr = (Odr <= 0.0625f) ? STTS751_TEMP_ODR_62mHz5
            : (Odr <= 0.125f) ? STTS751_TEMP_ODR_125mHz
 8008120:	21f6      	movs	r1, #246	; 0xf6
 8008122:	0589      	lsls	r1, r1, #22
 8008124:	6838      	ldr	r0, [r7, #0]
 8008126:	f7f8 f98b 	bl	8000440 <__aeabi_fcmple>
 800812a:	1e03      	subs	r3, r0, #0
 800812c:	d001      	beq.n	8008132 <STTS751_TEMP_SetOutputDataRate+0x9a>
 800812e:	2300      	movs	r3, #0
 8008130:	e048      	b.n	80081c4 <STTS751_TEMP_SetOutputDataRate+0x12c>
 8008132:	21f8      	movs	r1, #248	; 0xf8
 8008134:	0589      	lsls	r1, r1, #22
 8008136:	6838      	ldr	r0, [r7, #0]
 8008138:	f7f8 f982 	bl	8000440 <__aeabi_fcmple>
 800813c:	1e03      	subs	r3, r0, #0
 800813e:	d001      	beq.n	8008144 <STTS751_TEMP_SetOutputDataRate+0xac>
 8008140:	2301      	movs	r3, #1
 8008142:	e03f      	b.n	80081c4 <STTS751_TEMP_SetOutputDataRate+0x12c>
 8008144:	21fa      	movs	r1, #250	; 0xfa
 8008146:	0589      	lsls	r1, r1, #22
 8008148:	6838      	ldr	r0, [r7, #0]
 800814a:	f7f8 f979 	bl	8000440 <__aeabi_fcmple>
 800814e:	1e03      	subs	r3, r0, #0
 8008150:	d001      	beq.n	8008156 <STTS751_TEMP_SetOutputDataRate+0xbe>
 8008152:	2302      	movs	r3, #2
 8008154:	e036      	b.n	80081c4 <STTS751_TEMP_SetOutputDataRate+0x12c>
 8008156:	21fc      	movs	r1, #252	; 0xfc
 8008158:	0589      	lsls	r1, r1, #22
 800815a:	6838      	ldr	r0, [r7, #0]
 800815c:	f7f8 f970 	bl	8000440 <__aeabi_fcmple>
 8008160:	1e03      	subs	r3, r0, #0
 8008162:	d001      	beq.n	8008168 <STTS751_TEMP_SetOutputDataRate+0xd0>
 8008164:	2303      	movs	r3, #3
 8008166:	e02d      	b.n	80081c4 <STTS751_TEMP_SetOutputDataRate+0x12c>
 8008168:	21fe      	movs	r1, #254	; 0xfe
 800816a:	0589      	lsls	r1, r1, #22
 800816c:	6838      	ldr	r0, [r7, #0]
 800816e:	f7f8 f967 	bl	8000440 <__aeabi_fcmple>
 8008172:	1e03      	subs	r3, r0, #0
 8008174:	d001      	beq.n	800817a <STTS751_TEMP_SetOutputDataRate+0xe2>
 8008176:	2304      	movs	r3, #4
 8008178:	e024      	b.n	80081c4 <STTS751_TEMP_SetOutputDataRate+0x12c>
 800817a:	2180      	movs	r1, #128	; 0x80
 800817c:	05c9      	lsls	r1, r1, #23
 800817e:	6838      	ldr	r0, [r7, #0]
 8008180:	f7f8 f95e 	bl	8000440 <__aeabi_fcmple>
 8008184:	1e03      	subs	r3, r0, #0
 8008186:	d001      	beq.n	800818c <STTS751_TEMP_SetOutputDataRate+0xf4>
 8008188:	2305      	movs	r3, #5
 800818a:	e01b      	b.n	80081c4 <STTS751_TEMP_SetOutputDataRate+0x12c>
 800818c:	2181      	movs	r1, #129	; 0x81
 800818e:	05c9      	lsls	r1, r1, #23
 8008190:	6838      	ldr	r0, [r7, #0]
 8008192:	f7f8 f955 	bl	8000440 <__aeabi_fcmple>
 8008196:	1e03      	subs	r3, r0, #0
 8008198:	d001      	beq.n	800819e <STTS751_TEMP_SetOutputDataRate+0x106>
 800819a:	2306      	movs	r3, #6
 800819c:	e012      	b.n	80081c4 <STTS751_TEMP_SetOutputDataRate+0x12c>
 800819e:	2182      	movs	r1, #130	; 0x82
 80081a0:	05c9      	lsls	r1, r1, #23
 80081a2:	6838      	ldr	r0, [r7, #0]
 80081a4:	f7f8 f94c 	bl	8000440 <__aeabi_fcmple>
 80081a8:	1e03      	subs	r3, r0, #0
 80081aa:	d001      	beq.n	80081b0 <STTS751_TEMP_SetOutputDataRate+0x118>
 80081ac:	2307      	movs	r3, #7
 80081ae:	e009      	b.n	80081c4 <STTS751_TEMP_SetOutputDataRate+0x12c>
 80081b0:	2183      	movs	r1, #131	; 0x83
 80081b2:	05c9      	lsls	r1, r1, #23
 80081b4:	6838      	ldr	r0, [r7, #0]
 80081b6:	f7f8 f943 	bl	8000440 <__aeabi_fcmple>
 80081ba:	1e03      	subs	r3, r0, #0
 80081bc:	d001      	beq.n	80081c2 <STTS751_TEMP_SetOutputDataRate+0x12a>
 80081be:	2308      	movs	r3, #8
 80081c0:	e000      	b.n	80081c4 <STTS751_TEMP_SetOutputDataRate+0x12c>
 80081c2:	2309      	movs	r3, #9
  new_odr = (Odr <= 0.0625f) ? STTS751_TEMP_ODR_62mHz5
 80081c4:	210f      	movs	r1, #15
 80081c6:	187a      	adds	r2, r7, r1
 80081c8:	7013      	strb	r3, [r2, #0]
            : (Odr <= 4.0f) ? STTS751_TEMP_ODR_4Hz
            : (Odr <= 8.0f) ? STTS751_TEMP_ODR_8Hz
            : (Odr <= 16.0f) ? STTS751_TEMP_ODR_16Hz
            :                    STTS751_TEMP_ODR_32Hz;

  if (stts751_temp_data_rate_set(&(pObj->Ctx), new_odr) != STTS751_OK)
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	331c      	adds	r3, #28
 80081ce:	001a      	movs	r2, r3
 80081d0:	187b      	adds	r3, r7, r1
 80081d2:	781b      	ldrb	r3, [r3, #0]
 80081d4:	0019      	movs	r1, r3
 80081d6:	0010      	movs	r0, r2
 80081d8:	f000 f91a 	bl	8008410 <stts751_temp_data_rate_set>
 80081dc:	1e03      	subs	r3, r0, #0
 80081de:	d002      	beq.n	80081e6 <STTS751_TEMP_SetOutputDataRate+0x14e>
  {
    return STTS751_ERROR;
 80081e0:	2301      	movs	r3, #1
 80081e2:	425b      	negs	r3, r3
 80081e4:	e000      	b.n	80081e8 <STTS751_TEMP_SetOutputDataRate+0x150>
  }

  return STTS751_OK;
 80081e6:	2300      	movs	r3, #0
}
 80081e8:	0018      	movs	r0, r3
 80081ea:	46bd      	mov	sp, r7
 80081ec:	b004      	add	sp, #16
 80081ee:	bd80      	pop	{r7, pc}

080081f0 <STTS751_TEMP_GetTemperature>:
  * @param  pObj the device pObj
  * @param  Value pointer where the temperature value is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STTS751_TEMP_GetTemperature(STTS751_Object_t *pObj, float *Value)
{
 80081f0:	b580      	push	{r7, lr}
 80081f2:	b084      	sub	sp, #16
 80081f4:	af00      	add	r7, sp, #0
 80081f6:	6078      	str	r0, [r7, #4]
 80081f8:	6039      	str	r1, [r7, #0]
  int16_t raw_value;

  /* Get the temperature */
  if (stts751_temperature_raw_get(&(pObj->Ctx), &raw_value) != STTS751_OK)
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	331c      	adds	r3, #28
 80081fe:	220e      	movs	r2, #14
 8008200:	18ba      	adds	r2, r7, r2
 8008202:	0011      	movs	r1, r2
 8008204:	0018      	movs	r0, r3
 8008206:	f000 fa4e 	bl	80086a6 <stts751_temperature_raw_get>
 800820a:	1e03      	subs	r3, r0, #0
 800820c:	d002      	beq.n	8008214 <STTS751_TEMP_GetTemperature+0x24>
  {
    return STTS751_ERROR;
 800820e:	2301      	movs	r3, #1
 8008210:	425b      	negs	r3, r3
 8008212:	e00a      	b.n	800822a <STTS751_TEMP_GetTemperature+0x3a>
  }

  *Value = stts751_from_lsb_to_celsius(raw_value);
 8008214:	230e      	movs	r3, #14
 8008216:	18fb      	adds	r3, r7, r3
 8008218:	2200      	movs	r2, #0
 800821a:	5e9b      	ldrsh	r3, [r3, r2]
 800821c:	0018      	movs	r0, r3
 800821e:	f000 f8e0 	bl	80083e2 <stts751_from_lsb_to_celsius>
 8008222:	1c02      	adds	r2, r0, #0
 8008224:	683b      	ldr	r3, [r7, #0]
 8008226:	601a      	str	r2, [r3, #0]

  return STTS751_OK;
 8008228:	2300      	movs	r3, #0
}
 800822a:	0018      	movs	r0, r3
 800822c:	46bd      	mov	sp, r7
 800822e:	b004      	add	sp, #16
 8008230:	bd80      	pop	{r7, pc}

08008232 <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8008232:	b5b0      	push	{r4, r5, r7, lr}
 8008234:	b088      	sub	sp, #32
 8008236:	af00      	add	r7, sp, #0
 8008238:	60f8      	str	r0, [r7, #12]
 800823a:	0008      	movs	r0, r1
 800823c:	607a      	str	r2, [r7, #4]
 800823e:	0019      	movs	r1, r3
 8008240:	230b      	movs	r3, #11
 8008242:	18fb      	adds	r3, r7, r3
 8008244:	1c02      	adds	r2, r0, #0
 8008246:	701a      	strb	r2, [r3, #0]
 8008248:	2308      	movs	r3, #8
 800824a:	18fb      	adds	r3, r7, r3
 800824c:	1c0a      	adds	r2, r1, #0
 800824e:	801a      	strh	r2, [r3, #0]
  uint16_t i;
  int32_t ret = STTS751_OK;
 8008250:	2300      	movs	r3, #0
 8008252:	61bb      	str	r3, [r7, #24]
  STTS751_Object_t *pObj = (STTS751_Object_t *)Handle;
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == (uint32_t)STTS751_I2C_BUS) /* I2C */
 8008258:	697b      	ldr	r3, [r7, #20]
 800825a:	689b      	ldr	r3, [r3, #8]
 800825c:	2b00      	cmp	r3, #0
 800825e:	d12e      	bne.n	80082be <ReadRegWrap+0x8c>
  {
    for (i = 0; i < Length; i++)
 8008260:	231e      	movs	r3, #30
 8008262:	18fb      	adds	r3, r7, r3
 8008264:	2200      	movs	r2, #0
 8008266:	801a      	strh	r2, [r3, #0]
 8008268:	e021      	b.n	80082ae <ReadRegWrap+0x7c>
    {
      ret = pObj->IO.ReadReg(pObj->IO.Address, (Reg + i), &pData[i], 1);
 800826a:	697b      	ldr	r3, [r7, #20]
 800826c:	695c      	ldr	r4, [r3, #20]
 800826e:	697b      	ldr	r3, [r7, #20]
 8008270:	7b1b      	ldrb	r3, [r3, #12]
 8008272:	b298      	uxth	r0, r3
 8008274:	230b      	movs	r3, #11
 8008276:	18fb      	adds	r3, r7, r3
 8008278:	781b      	ldrb	r3, [r3, #0]
 800827a:	b29a      	uxth	r2, r3
 800827c:	251e      	movs	r5, #30
 800827e:	197b      	adds	r3, r7, r5
 8008280:	881b      	ldrh	r3, [r3, #0]
 8008282:	18d3      	adds	r3, r2, r3
 8008284:	b299      	uxth	r1, r3
 8008286:	197b      	adds	r3, r7, r5
 8008288:	881b      	ldrh	r3, [r3, #0]
 800828a:	687a      	ldr	r2, [r7, #4]
 800828c:	18d2      	adds	r2, r2, r3
 800828e:	2301      	movs	r3, #1
 8008290:	47a0      	blx	r4
 8008292:	0003      	movs	r3, r0
 8008294:	61bb      	str	r3, [r7, #24]
      if (ret != STTS751_OK)
 8008296:	69bb      	ldr	r3, [r7, #24]
 8008298:	2b00      	cmp	r3, #0
 800829a:	d002      	beq.n	80082a2 <ReadRegWrap+0x70>
      {
        return STTS751_ERROR;
 800829c:	2301      	movs	r3, #1
 800829e:	425b      	negs	r3, r3
 80082a0:	e00e      	b.n	80082c0 <ReadRegWrap+0x8e>
    for (i = 0; i < Length; i++)
 80082a2:	211e      	movs	r1, #30
 80082a4:	187b      	adds	r3, r7, r1
 80082a6:	881a      	ldrh	r2, [r3, #0]
 80082a8:	187b      	adds	r3, r7, r1
 80082aa:	3201      	adds	r2, #1
 80082ac:	801a      	strh	r2, [r3, #0]
 80082ae:	231e      	movs	r3, #30
 80082b0:	18fa      	adds	r2, r7, r3
 80082b2:	2308      	movs	r3, #8
 80082b4:	18fb      	adds	r3, r7, r3
 80082b6:	8812      	ldrh	r2, [r2, #0]
 80082b8:	881b      	ldrh	r3, [r3, #0]
 80082ba:	429a      	cmp	r2, r3
 80082bc:	d3d5      	bcc.n	800826a <ReadRegWrap+0x38>
      }
    }
  }

  return ret;
 80082be:	69bb      	ldr	r3, [r7, #24]
}
 80082c0:	0018      	movs	r0, r3
 80082c2:	46bd      	mov	sp, r7
 80082c4:	b008      	add	sp, #32
 80082c6:	bdb0      	pop	{r4, r5, r7, pc}

080082c8 <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80082c8:	b5b0      	push	{r4, r5, r7, lr}
 80082ca:	b088      	sub	sp, #32
 80082cc:	af00      	add	r7, sp, #0
 80082ce:	60f8      	str	r0, [r7, #12]
 80082d0:	0008      	movs	r0, r1
 80082d2:	607a      	str	r2, [r7, #4]
 80082d4:	0019      	movs	r1, r3
 80082d6:	230b      	movs	r3, #11
 80082d8:	18fb      	adds	r3, r7, r3
 80082da:	1c02      	adds	r2, r0, #0
 80082dc:	701a      	strb	r2, [r3, #0]
 80082de:	2308      	movs	r3, #8
 80082e0:	18fb      	adds	r3, r7, r3
 80082e2:	1c0a      	adds	r2, r1, #0
 80082e4:	801a      	strh	r2, [r3, #0]
  uint16_t i;
  int32_t ret = STTS751_OK;
 80082e6:	2300      	movs	r3, #0
 80082e8:	61bb      	str	r3, [r7, #24]
  STTS751_Object_t *pObj = (STTS751_Object_t *)Handle;
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == (uint32_t)STTS751_I2C_BUS) /* I2C */
 80082ee:	697b      	ldr	r3, [r7, #20]
 80082f0:	689b      	ldr	r3, [r3, #8]
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d12e      	bne.n	8008354 <WriteRegWrap+0x8c>
  {
    for (i = 0; i < Length; i++)
 80082f6:	231e      	movs	r3, #30
 80082f8:	18fb      	adds	r3, r7, r3
 80082fa:	2200      	movs	r2, #0
 80082fc:	801a      	strh	r2, [r3, #0]
 80082fe:	e021      	b.n	8008344 <WriteRegWrap+0x7c>
    {
      ret = pObj->IO.WriteReg(pObj->IO.Address, (Reg + i), &pData[i], 1);
 8008300:	697b      	ldr	r3, [r7, #20]
 8008302:	691c      	ldr	r4, [r3, #16]
 8008304:	697b      	ldr	r3, [r7, #20]
 8008306:	7b1b      	ldrb	r3, [r3, #12]
 8008308:	b298      	uxth	r0, r3
 800830a:	230b      	movs	r3, #11
 800830c:	18fb      	adds	r3, r7, r3
 800830e:	781b      	ldrb	r3, [r3, #0]
 8008310:	b29a      	uxth	r2, r3
 8008312:	251e      	movs	r5, #30
 8008314:	197b      	adds	r3, r7, r5
 8008316:	881b      	ldrh	r3, [r3, #0]
 8008318:	18d3      	adds	r3, r2, r3
 800831a:	b299      	uxth	r1, r3
 800831c:	197b      	adds	r3, r7, r5
 800831e:	881b      	ldrh	r3, [r3, #0]
 8008320:	687a      	ldr	r2, [r7, #4]
 8008322:	18d2      	adds	r2, r2, r3
 8008324:	2301      	movs	r3, #1
 8008326:	47a0      	blx	r4
 8008328:	0003      	movs	r3, r0
 800832a:	61bb      	str	r3, [r7, #24]
      if (ret != STTS751_OK)
 800832c:	69bb      	ldr	r3, [r7, #24]
 800832e:	2b00      	cmp	r3, #0
 8008330:	d002      	beq.n	8008338 <WriteRegWrap+0x70>
      {
        return STTS751_ERROR;
 8008332:	2301      	movs	r3, #1
 8008334:	425b      	negs	r3, r3
 8008336:	e00e      	b.n	8008356 <WriteRegWrap+0x8e>
    for (i = 0; i < Length; i++)
 8008338:	211e      	movs	r1, #30
 800833a:	187b      	adds	r3, r7, r1
 800833c:	881a      	ldrh	r2, [r3, #0]
 800833e:	187b      	adds	r3, r7, r1
 8008340:	3201      	adds	r2, #1
 8008342:	801a      	strh	r2, [r3, #0]
 8008344:	231e      	movs	r3, #30
 8008346:	18fa      	adds	r2, r7, r3
 8008348:	2308      	movs	r3, #8
 800834a:	18fb      	adds	r3, r7, r3
 800834c:	8812      	ldrh	r2, [r2, #0]
 800834e:	881b      	ldrh	r3, [r3, #0]
 8008350:	429a      	cmp	r2, r3
 8008352:	d3d5      	bcc.n	8008300 <WriteRegWrap+0x38>
      }
    }
  }

  return ret;
 8008354:	69bb      	ldr	r3, [r7, #24]
}
 8008356:	0018      	movs	r0, r3
 8008358:	46bd      	mov	sp, r7
 800835a:	b008      	add	sp, #32
 800835c:	bdb0      	pop	{r4, r5, r7, pc}

0800835e <stts751_read_reg>:
  *
  */
int32_t stts751_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 800835e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008360:	b087      	sub	sp, #28
 8008362:	af00      	add	r7, sp, #0
 8008364:	60f8      	str	r0, [r7, #12]
 8008366:	0008      	movs	r0, r1
 8008368:	607a      	str	r2, [r7, #4]
 800836a:	0019      	movs	r1, r3
 800836c:	260b      	movs	r6, #11
 800836e:	19bb      	adds	r3, r7, r6
 8008370:	1c02      	adds	r2, r0, #0
 8008372:	701a      	strb	r2, [r3, #0]
 8008374:	2508      	movs	r5, #8
 8008376:	197b      	adds	r3, r7, r5
 8008378:	1c0a      	adds	r2, r1, #0
 800837a:	801a      	strh	r2, [r3, #0]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	685c      	ldr	r4, [r3, #4]
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	6898      	ldr	r0, [r3, #8]
 8008384:	197b      	adds	r3, r7, r5
 8008386:	881d      	ldrh	r5, [r3, #0]
 8008388:	687a      	ldr	r2, [r7, #4]
 800838a:	19bb      	adds	r3, r7, r6
 800838c:	7819      	ldrb	r1, [r3, #0]
 800838e:	002b      	movs	r3, r5
 8008390:	47a0      	blx	r4
 8008392:	0003      	movs	r3, r0
 8008394:	617b      	str	r3, [r7, #20]

  return ret;
 8008396:	697b      	ldr	r3, [r7, #20]
}
 8008398:	0018      	movs	r0, r3
 800839a:	46bd      	mov	sp, r7
 800839c:	b007      	add	sp, #28
 800839e:	bdf0      	pop	{r4, r5, r6, r7, pc}

080083a0 <stts751_write_reg>:
  *
  */
int32_t stts751_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 80083a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80083a2:	b087      	sub	sp, #28
 80083a4:	af00      	add	r7, sp, #0
 80083a6:	60f8      	str	r0, [r7, #12]
 80083a8:	0008      	movs	r0, r1
 80083aa:	607a      	str	r2, [r7, #4]
 80083ac:	0019      	movs	r1, r3
 80083ae:	260b      	movs	r6, #11
 80083b0:	19bb      	adds	r3, r7, r6
 80083b2:	1c02      	adds	r2, r0, #0
 80083b4:	701a      	strb	r2, [r3, #0]
 80083b6:	2508      	movs	r5, #8
 80083b8:	197b      	adds	r3, r7, r5
 80083ba:	1c0a      	adds	r2, r1, #0
 80083bc:	801a      	strh	r2, [r3, #0]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	681c      	ldr	r4, [r3, #0]
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	6898      	ldr	r0, [r3, #8]
 80083c6:	197b      	adds	r3, r7, r5
 80083c8:	881d      	ldrh	r5, [r3, #0]
 80083ca:	687a      	ldr	r2, [r7, #4]
 80083cc:	19bb      	adds	r3, r7, r6
 80083ce:	7819      	ldrb	r1, [r3, #0]
 80083d0:	002b      	movs	r3, r5
 80083d2:	47a0      	blx	r4
 80083d4:	0003      	movs	r3, r0
 80083d6:	617b      	str	r3, [r7, #20]

  return ret;
 80083d8:	697b      	ldr	r3, [r7, #20]
}
 80083da:	0018      	movs	r0, r3
 80083dc:	46bd      	mov	sp, r7
 80083de:	b007      	add	sp, #28
 80083e0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080083e2 <stts751_from_lsb_to_celsius>:
  * @{
  *
  */

float_t stts751_from_lsb_to_celsius(int16_t lsb)
{
 80083e2:	b580      	push	{r7, lr}
 80083e4:	b082      	sub	sp, #8
 80083e6:	af00      	add	r7, sp, #0
 80083e8:	0002      	movs	r2, r0
 80083ea:	1dbb      	adds	r3, r7, #6
 80083ec:	801a      	strh	r2, [r3, #0]
  return ((float_t)lsb) / 256.0f;
 80083ee:	1dbb      	adds	r3, r7, #6
 80083f0:	2200      	movs	r2, #0
 80083f2:	5e9b      	ldrsh	r3, [r3, r2]
 80083f4:	0018      	movs	r0, r3
 80083f6:	f7f8 ffe3 	bl	80013c0 <__aeabi_i2f>
 80083fa:	1c03      	adds	r3, r0, #0
 80083fc:	2187      	movs	r1, #135	; 0x87
 80083fe:	05c9      	lsls	r1, r1, #23
 8008400:	1c18      	adds	r0, r3, #0
 8008402:	f7f8 fb0b 	bl	8000a1c <__aeabi_fdiv>
 8008406:	1c03      	adds	r3, r0, #0
}
 8008408:	1c18      	adds	r0, r3, #0
 800840a:	46bd      	mov	sp, r7
 800840c:	b002      	add	sp, #8
 800840e:	bd80      	pop	{r7, pc}

08008410 <stts751_temp_data_rate_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t stts751_temp_data_rate_set(stmdev_ctx_t *ctx,
                                   stts751_odr_t val)
{
 8008410:	b590      	push	{r4, r7, lr}
 8008412:	b087      	sub	sp, #28
 8008414:	af00      	add	r7, sp, #0
 8008416:	6078      	str	r0, [r7, #4]
 8008418:	000a      	movs	r2, r1
 800841a:	1cfb      	adds	r3, r7, #3
 800841c:	701a      	strb	r2, [r3, #0]
  stts751_configuration_t configuration;
  stts751_conversion_rate_t conversion_rate;
  uint8_t dummy_value = 0xAA;
 800841e:	230b      	movs	r3, #11
 8008420:	18fb      	adds	r3, r7, r3
 8008422:	22aa      	movs	r2, #170	; 0xaa
 8008424:	701a      	strb	r2, [r3, #0]
  int32_t ret;

  ret = stts751_read_reg(ctx, STTS751_CONVERSION_RATE,
 8008426:	240c      	movs	r4, #12
 8008428:	193a      	adds	r2, r7, r4
 800842a:	6878      	ldr	r0, [r7, #4]
 800842c:	2301      	movs	r3, #1
 800842e:	2104      	movs	r1, #4
 8008430:	f7ff ff95 	bl	800835e <stts751_read_reg>
 8008434:	0003      	movs	r3, r0
 8008436:	617b      	str	r3, [r7, #20]
                         (uint8_t *)&conversion_rate, 1);

  if (ret == 0)
 8008438:	697b      	ldr	r3, [r7, #20]
 800843a:	2b00      	cmp	r3, #0
 800843c:	d117      	bne.n	800846e <stts751_temp_data_rate_set+0x5e>
  {
    conversion_rate.conv = (uint8_t)val & 0x0FU;
 800843e:	1cfb      	adds	r3, r7, #3
 8008440:	781b      	ldrb	r3, [r3, #0]
 8008442:	220f      	movs	r2, #15
 8008444:	4013      	ands	r3, r2
 8008446:	b2da      	uxtb	r2, r3
 8008448:	193b      	adds	r3, r7, r4
 800844a:	210f      	movs	r1, #15
 800844c:	400a      	ands	r2, r1
 800844e:	0010      	movs	r0, r2
 8008450:	781a      	ldrb	r2, [r3, #0]
 8008452:	210f      	movs	r1, #15
 8008454:	438a      	bics	r2, r1
 8008456:	1c11      	adds	r1, r2, #0
 8008458:	1c02      	adds	r2, r0, #0
 800845a:	430a      	orrs	r2, r1
 800845c:	701a      	strb	r2, [r3, #0]
    ret = stts751_write_reg(ctx, STTS751_CONVERSION_RATE,
 800845e:	193a      	adds	r2, r7, r4
 8008460:	6878      	ldr	r0, [r7, #4]
 8008462:	2301      	movs	r3, #1
 8008464:	2104      	movs	r1, #4
 8008466:	f7ff ff9b 	bl	80083a0 <stts751_write_reg>
 800846a:	0003      	movs	r3, r0
 800846c:	617b      	str	r3, [r7, #20]
                            (uint8_t *)&conversion_rate, 1);
  }

  if (ret == 0)
 800846e:	697b      	ldr	r3, [r7, #20]
 8008470:	2b00      	cmp	r3, #0
 8008472:	d108      	bne.n	8008486 <stts751_temp_data_rate_set+0x76>
  {
    ret = stts751_read_reg(ctx, STTS751_CONFIGURATION,
 8008474:	2310      	movs	r3, #16
 8008476:	18fa      	adds	r2, r7, r3
 8008478:	6878      	ldr	r0, [r7, #4]
 800847a:	2301      	movs	r3, #1
 800847c:	2103      	movs	r1, #3
 800847e:	f7ff ff6e 	bl	800835e <stts751_read_reg>
 8008482:	0003      	movs	r3, r0
 8008484:	617b      	str	r3, [r7, #20]
                           (uint8_t *)&configuration, 1);
  }

  if (ret == 0)
 8008486:	697b      	ldr	r3, [r7, #20]
 8008488:	2b00      	cmp	r3, #0
 800848a:	d11b      	bne.n	80084c4 <stts751_temp_data_rate_set+0xb4>
  {
    configuration.stop = ((uint8_t)val & 0x80U) >> 7;
 800848c:	1cfb      	adds	r3, r7, #3
 800848e:	781b      	ldrb	r3, [r3, #0]
 8008490:	09db      	lsrs	r3, r3, #7
 8008492:	b2db      	uxtb	r3, r3
 8008494:	1c1a      	adds	r2, r3, #0
 8008496:	2301      	movs	r3, #1
 8008498:	4013      	ands	r3, r2
 800849a:	b2da      	uxtb	r2, r3
 800849c:	2410      	movs	r4, #16
 800849e:	193b      	adds	r3, r7, r4
 80084a0:	2101      	movs	r1, #1
 80084a2:	400a      	ands	r2, r1
 80084a4:	0190      	lsls	r0, r2, #6
 80084a6:	781a      	ldrb	r2, [r3, #0]
 80084a8:	2140      	movs	r1, #64	; 0x40
 80084aa:	438a      	bics	r2, r1
 80084ac:	1c11      	adds	r1, r2, #0
 80084ae:	1c02      	adds	r2, r0, #0
 80084b0:	430a      	orrs	r2, r1
 80084b2:	701a      	strb	r2, [r3, #0]
    ret = stts751_write_reg(ctx, STTS751_CONFIGURATION,
 80084b4:	193a      	adds	r2, r7, r4
 80084b6:	6878      	ldr	r0, [r7, #4]
 80084b8:	2301      	movs	r3, #1
 80084ba:	2103      	movs	r1, #3
 80084bc:	f7ff ff70 	bl	80083a0 <stts751_write_reg>
 80084c0:	0003      	movs	r3, r0
 80084c2:	617b      	str	r3, [r7, #20]
                            (uint8_t *)&configuration, 1);
  }

  if ((ret == 0) && (val == STTS751_TEMP_ODR_ONE_SHOT))
 80084c4:	697b      	ldr	r3, [r7, #20]
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d10c      	bne.n	80084e4 <stts751_temp_data_rate_set+0xd4>
 80084ca:	1cfb      	adds	r3, r7, #3
 80084cc:	781b      	ldrb	r3, [r3, #0]
 80084ce:	2b90      	cmp	r3, #144	; 0x90
 80084d0:	d108      	bne.n	80084e4 <stts751_temp_data_rate_set+0xd4>
  {
    ret = stts751_write_reg(ctx, STTS751_ONE_SHOT, &dummy_value, 1);
 80084d2:	230b      	movs	r3, #11
 80084d4:	18fa      	adds	r2, r7, r3
 80084d6:	6878      	ldr	r0, [r7, #4]
 80084d8:	2301      	movs	r3, #1
 80084da:	210f      	movs	r1, #15
 80084dc:	f7ff ff60 	bl	80083a0 <stts751_write_reg>
 80084e0:	0003      	movs	r3, r0
 80084e2:	617b      	str	r3, [r7, #20]
  }

  return ret;
 80084e4:	697b      	ldr	r3, [r7, #20]
}
 80084e6:	0018      	movs	r0, r3
 80084e8:	46bd      	mov	sp, r7
 80084ea:	b007      	add	sp, #28
 80084ec:	bd90      	pop	{r4, r7, pc}
	...

080084f0 <stts751_temp_data_rate_get>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t stts751_temp_data_rate_get(stmdev_ctx_t *ctx,
                                   stts751_odr_t *val)
{
 80084f0:	b580      	push	{r7, lr}
 80084f2:	b086      	sub	sp, #24
 80084f4:	af00      	add	r7, sp, #0
 80084f6:	6078      	str	r0, [r7, #4]
 80084f8:	6039      	str	r1, [r7, #0]
  stts751_conversion_rate_t conversion_rate;
  stts751_configuration_t configuration;
  int32_t ret;

  ret = stts751_read_reg(ctx, STTS751_CONVERSION_RATE,
 80084fa:	2310      	movs	r3, #16
 80084fc:	18fa      	adds	r2, r7, r3
 80084fe:	6878      	ldr	r0, [r7, #4]
 8008500:	2301      	movs	r3, #1
 8008502:	2104      	movs	r1, #4
 8008504:	f7ff ff2b 	bl	800835e <stts751_read_reg>
 8008508:	0003      	movs	r3, r0
 800850a:	617b      	str	r3, [r7, #20]
                         (uint8_t *)&conversion_rate, 1);

  if (ret == 0)
 800850c:	697b      	ldr	r3, [r7, #20]
 800850e:	2b00      	cmp	r3, #0
 8008510:	d108      	bne.n	8008524 <stts751_temp_data_rate_get+0x34>
  {
    ret = stts751_read_reg(ctx, STTS751_CONFIGURATION,
 8008512:	230c      	movs	r3, #12
 8008514:	18fa      	adds	r2, r7, r3
 8008516:	6878      	ldr	r0, [r7, #4]
 8008518:	2301      	movs	r3, #1
 800851a:	2103      	movs	r1, #3
 800851c:	f7ff ff1f 	bl	800835e <stts751_read_reg>
 8008520:	0003      	movs	r3, r0
 8008522:	617b      	str	r3, [r7, #20]
                           (uint8_t *)&configuration, 1);
  }

  switch ((configuration.stop << 7) + conversion_rate.conv)
 8008524:	230c      	movs	r3, #12
 8008526:	18fb      	adds	r3, r7, r3
 8008528:	781b      	ldrb	r3, [r3, #0]
 800852a:	065b      	lsls	r3, r3, #25
 800852c:	0fdb      	lsrs	r3, r3, #31
 800852e:	b2db      	uxtb	r3, r3
 8008530:	01db      	lsls	r3, r3, #7
 8008532:	2210      	movs	r2, #16
 8008534:	18ba      	adds	r2, r7, r2
 8008536:	7812      	ldrb	r2, [r2, #0]
 8008538:	0712      	lsls	r2, r2, #28
 800853a:	0f12      	lsrs	r2, r2, #28
 800853c:	b2d2      	uxtb	r2, r2
 800853e:	189b      	adds	r3, r3, r2
 8008540:	2b90      	cmp	r3, #144	; 0x90
 8008542:	d011      	beq.n	8008568 <stts751_temp_data_rate_get+0x78>
 8008544:	dc3c      	bgt.n	80085c0 <stts751_temp_data_rate_get+0xd0>
 8008546:	2b09      	cmp	r3, #9
 8008548:	dc08      	bgt.n	800855c <stts751_temp_data_rate_get+0x6c>
 800854a:	2b00      	cmp	r3, #0
 800854c:	db38      	blt.n	80085c0 <stts751_temp_data_rate_get+0xd0>
 800854e:	2b09      	cmp	r3, #9
 8008550:	d836      	bhi.n	80085c0 <stts751_temp_data_rate_get+0xd0>
 8008552:	009a      	lsls	r2, r3, #2
 8008554:	4b1f      	ldr	r3, [pc, #124]	; (80085d4 <stts751_temp_data_rate_get+0xe4>)
 8008556:	18d3      	adds	r3, r2, r3
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	469f      	mov	pc, r3
 800855c:	2b80      	cmp	r3, #128	; 0x80
 800855e:	d12f      	bne.n	80085c0 <stts751_temp_data_rate_get+0xd0>
  {
    case STTS751_TEMP_ODR_OFF:
      *val = STTS751_TEMP_ODR_OFF;
 8008560:	683b      	ldr	r3, [r7, #0]
 8008562:	2280      	movs	r2, #128	; 0x80
 8008564:	701a      	strb	r2, [r3, #0]
      break;
 8008566:	e02f      	b.n	80085c8 <stts751_temp_data_rate_get+0xd8>

    case STTS751_TEMP_ODR_ONE_SHOT:
      *val = STTS751_TEMP_ODR_ONE_SHOT;
 8008568:	683b      	ldr	r3, [r7, #0]
 800856a:	2290      	movs	r2, #144	; 0x90
 800856c:	701a      	strb	r2, [r3, #0]
      break;
 800856e:	e02b      	b.n	80085c8 <stts751_temp_data_rate_get+0xd8>

    case STTS751_TEMP_ODR_62mHz5:
      *val = STTS751_TEMP_ODR_62mHz5;
 8008570:	683b      	ldr	r3, [r7, #0]
 8008572:	2200      	movs	r2, #0
 8008574:	701a      	strb	r2, [r3, #0]
      break;
 8008576:	e027      	b.n	80085c8 <stts751_temp_data_rate_get+0xd8>

    case STTS751_TEMP_ODR_125mHz:
      *val = STTS751_TEMP_ODR_125mHz;
 8008578:	683b      	ldr	r3, [r7, #0]
 800857a:	2201      	movs	r2, #1
 800857c:	701a      	strb	r2, [r3, #0]
      break;
 800857e:	e023      	b.n	80085c8 <stts751_temp_data_rate_get+0xd8>

    case STTS751_TEMP_ODR_250mHz:
      *val = STTS751_TEMP_ODR_250mHz;
 8008580:	683b      	ldr	r3, [r7, #0]
 8008582:	2202      	movs	r2, #2
 8008584:	701a      	strb	r2, [r3, #0]
      break;
 8008586:	e01f      	b.n	80085c8 <stts751_temp_data_rate_get+0xd8>

    case STTS751_TEMP_ODR_500mHz:
      *val = STTS751_TEMP_ODR_500mHz;
 8008588:	683b      	ldr	r3, [r7, #0]
 800858a:	2203      	movs	r2, #3
 800858c:	701a      	strb	r2, [r3, #0]
      break;
 800858e:	e01b      	b.n	80085c8 <stts751_temp_data_rate_get+0xd8>

    case STTS751_TEMP_ODR_1Hz:
      *val = STTS751_TEMP_ODR_1Hz;
 8008590:	683b      	ldr	r3, [r7, #0]
 8008592:	2204      	movs	r2, #4
 8008594:	701a      	strb	r2, [r3, #0]
      break;
 8008596:	e017      	b.n	80085c8 <stts751_temp_data_rate_get+0xd8>

    case STTS751_TEMP_ODR_2Hz:
      *val = STTS751_TEMP_ODR_2Hz;
 8008598:	683b      	ldr	r3, [r7, #0]
 800859a:	2205      	movs	r2, #5
 800859c:	701a      	strb	r2, [r3, #0]
      break;
 800859e:	e013      	b.n	80085c8 <stts751_temp_data_rate_get+0xd8>

    case STTS751_TEMP_ODR_4Hz:
      *val = STTS751_TEMP_ODR_4Hz;
 80085a0:	683b      	ldr	r3, [r7, #0]
 80085a2:	2206      	movs	r2, #6
 80085a4:	701a      	strb	r2, [r3, #0]
      break;
 80085a6:	e00f      	b.n	80085c8 <stts751_temp_data_rate_get+0xd8>

    case STTS751_TEMP_ODR_8Hz:
      *val = STTS751_TEMP_ODR_8Hz;
 80085a8:	683b      	ldr	r3, [r7, #0]
 80085aa:	2207      	movs	r2, #7
 80085ac:	701a      	strb	r2, [r3, #0]
      break;
 80085ae:	e00b      	b.n	80085c8 <stts751_temp_data_rate_get+0xd8>

    case STTS751_TEMP_ODR_16Hz:
      *val = STTS751_TEMP_ODR_16Hz;
 80085b0:	683b      	ldr	r3, [r7, #0]
 80085b2:	2208      	movs	r2, #8
 80085b4:	701a      	strb	r2, [r3, #0]
      break;
 80085b6:	e007      	b.n	80085c8 <stts751_temp_data_rate_get+0xd8>

    case STTS751_TEMP_ODR_32Hz:
      *val = STTS751_TEMP_ODR_32Hz;
 80085b8:	683b      	ldr	r3, [r7, #0]
 80085ba:	2209      	movs	r2, #9
 80085bc:	701a      	strb	r2, [r3, #0]
      break;
 80085be:	e003      	b.n	80085c8 <stts751_temp_data_rate_get+0xd8>

    default:
      *val = STTS751_TEMP_ODR_OFF;
 80085c0:	683b      	ldr	r3, [r7, #0]
 80085c2:	2280      	movs	r2, #128	; 0x80
 80085c4:	701a      	strb	r2, [r3, #0]
      break;
 80085c6:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 80085c8:	697b      	ldr	r3, [r7, #20]
}
 80085ca:	0018      	movs	r0, r3
 80085cc:	46bd      	mov	sp, r7
 80085ce:	b006      	add	sp, #24
 80085d0:	bd80      	pop	{r7, pc}
 80085d2:	46c0      	nop			; (mov r8, r8)
 80085d4:	08016284 	.word	0x08016284

080085d8 <stts751_resolution_set>:
  * @param  val      change the values of tres in reg CONFIGURATION
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t stts751_resolution_set(stmdev_ctx_t *ctx, stts751_tres_t val)
{
 80085d8:	b590      	push	{r4, r7, lr}
 80085da:	b085      	sub	sp, #20
 80085dc:	af00      	add	r7, sp, #0
 80085de:	6078      	str	r0, [r7, #4]
 80085e0:	000a      	movs	r2, r1
 80085e2:	1cfb      	adds	r3, r7, #3
 80085e4:	701a      	strb	r2, [r3, #0]
  stts751_configuration_t reg;
  int32_t ret;

  ret = stts751_read_reg(ctx, STTS751_CONFIGURATION, (uint8_t *) &reg, 1);
 80085e6:	2408      	movs	r4, #8
 80085e8:	193a      	adds	r2, r7, r4
 80085ea:	6878      	ldr	r0, [r7, #4]
 80085ec:	2301      	movs	r3, #1
 80085ee:	2103      	movs	r1, #3
 80085f0:	f7ff feb5 	bl	800835e <stts751_read_reg>
 80085f4:	0003      	movs	r3, r0
 80085f6:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d117      	bne.n	800862e <stts751_resolution_set+0x56>
  {
    reg.tres = (uint8_t) val;
 80085fe:	1cfb      	adds	r3, r7, #3
 8008600:	781b      	ldrb	r3, [r3, #0]
 8008602:	2203      	movs	r2, #3
 8008604:	4013      	ands	r3, r2
 8008606:	b2da      	uxtb	r2, r3
 8008608:	193b      	adds	r3, r7, r4
 800860a:	2103      	movs	r1, #3
 800860c:	400a      	ands	r2, r1
 800860e:	0090      	lsls	r0, r2, #2
 8008610:	781a      	ldrb	r2, [r3, #0]
 8008612:	210c      	movs	r1, #12
 8008614:	438a      	bics	r2, r1
 8008616:	1c11      	adds	r1, r2, #0
 8008618:	1c02      	adds	r2, r0, #0
 800861a:	430a      	orrs	r2, r1
 800861c:	701a      	strb	r2, [r3, #0]
    ret = stts751_write_reg(ctx, STTS751_CONFIGURATION, (uint8_t *) &reg, 1);
 800861e:	193a      	adds	r2, r7, r4
 8008620:	6878      	ldr	r0, [r7, #4]
 8008622:	2301      	movs	r3, #1
 8008624:	2103      	movs	r1, #3
 8008626:	f7ff febb 	bl	80083a0 <stts751_write_reg>
 800862a:	0003      	movs	r3, r0
 800862c:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800862e:	68fb      	ldr	r3, [r7, #12]
}
 8008630:	0018      	movs	r0, r3
 8008632:	46bd      	mov	sp, r7
 8008634:	b005      	add	sp, #20
 8008636:	bd90      	pop	{r4, r7, pc}

08008638 <stts751_resolution_get>:
  * @param  val      Get the values of tres in reg CONFIGURATION
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t stts751_resolution_get(stmdev_ctx_t *ctx, stts751_tres_t *val)
{
 8008638:	b590      	push	{r4, r7, lr}
 800863a:	b085      	sub	sp, #20
 800863c:	af00      	add	r7, sp, #0
 800863e:	6078      	str	r0, [r7, #4]
 8008640:	6039      	str	r1, [r7, #0]
  stts751_configuration_t reg;
  int32_t ret;

  ret = stts751_read_reg(ctx, STTS751_CONFIGURATION, (uint8_t *) &reg, 1);
 8008642:	2408      	movs	r4, #8
 8008644:	193a      	adds	r2, r7, r4
 8008646:	6878      	ldr	r0, [r7, #4]
 8008648:	2301      	movs	r3, #1
 800864a:	2103      	movs	r1, #3
 800864c:	f7ff fe87 	bl	800835e <stts751_read_reg>
 8008650:	0003      	movs	r3, r0
 8008652:	60fb      	str	r3, [r7, #12]

  switch (reg.tres)
 8008654:	193b      	adds	r3, r7, r4
 8008656:	781b      	ldrb	r3, [r3, #0]
 8008658:	071b      	lsls	r3, r3, #28
 800865a:	0f9b      	lsrs	r3, r3, #30
 800865c:	b2db      	uxtb	r3, r3
 800865e:	2b03      	cmp	r3, #3
 8008660:	d014      	beq.n	800868c <stts751_resolution_get+0x54>
 8008662:	dc17      	bgt.n	8008694 <stts751_resolution_get+0x5c>
 8008664:	2b02      	cmp	r3, #2
 8008666:	d005      	beq.n	8008674 <stts751_resolution_get+0x3c>
 8008668:	dc14      	bgt.n	8008694 <stts751_resolution_get+0x5c>
 800866a:	2b00      	cmp	r3, #0
 800866c:	d006      	beq.n	800867c <stts751_resolution_get+0x44>
 800866e:	2b01      	cmp	r3, #1
 8008670:	d008      	beq.n	8008684 <stts751_resolution_get+0x4c>
 8008672:	e00f      	b.n	8008694 <stts751_resolution_get+0x5c>
  {
    case STTS751_9bit:
      *val = STTS751_9bit;
 8008674:	683b      	ldr	r3, [r7, #0]
 8008676:	2202      	movs	r2, #2
 8008678:	701a      	strb	r2, [r3, #0]
      break;
 800867a:	e00f      	b.n	800869c <stts751_resolution_get+0x64>

    case STTS751_10bit:
      *val = STTS751_10bit;
 800867c:	683b      	ldr	r3, [r7, #0]
 800867e:	2200      	movs	r2, #0
 8008680:	701a      	strb	r2, [r3, #0]
      break;
 8008682:	e00b      	b.n	800869c <stts751_resolution_get+0x64>

    case STTS751_11bit:
      *val = STTS751_11bit;
 8008684:	683b      	ldr	r3, [r7, #0]
 8008686:	2201      	movs	r2, #1
 8008688:	701a      	strb	r2, [r3, #0]
      break;
 800868a:	e007      	b.n	800869c <stts751_resolution_get+0x64>

    case STTS751_12bit:
      *val = STTS751_12bit;
 800868c:	683b      	ldr	r3, [r7, #0]
 800868e:	2203      	movs	r2, #3
 8008690:	701a      	strb	r2, [r3, #0]
      break;
 8008692:	e003      	b.n	800869c <stts751_resolution_get+0x64>

    default:
      *val = STTS751_9bit;
 8008694:	683b      	ldr	r3, [r7, #0]
 8008696:	2202      	movs	r2, #2
 8008698:	701a      	strb	r2, [r3, #0]
      break;
 800869a:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 800869c:	68fb      	ldr	r3, [r7, #12]
}
 800869e:	0018      	movs	r0, r3
 80086a0:	46bd      	mov	sp, r7
 80086a2:	b005      	add	sp, #20
 80086a4:	bd90      	pop	{r4, r7, pc}

080086a6 <stts751_temperature_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t stts751_temperature_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 80086a6:	b590      	push	{r4, r7, lr}
 80086a8:	b085      	sub	sp, #20
 80086aa:	af00      	add	r7, sp, #0
 80086ac:	6078      	str	r0, [r7, #4]
 80086ae:	6039      	str	r1, [r7, #0]
  uint8_t buff[2];
  int32_t ret;

  ret = stts751_read_reg(ctx, STTS751_TEMPERATURE_HIGH,
 80086b0:	2408      	movs	r4, #8
 80086b2:	193b      	adds	r3, r7, r4
 80086b4:	1c5a      	adds	r2, r3, #1
 80086b6:	6878      	ldr	r0, [r7, #4]
 80086b8:	2301      	movs	r3, #1
 80086ba:	2100      	movs	r1, #0
 80086bc:	f7ff fe4f 	bl	800835e <stts751_read_reg>
 80086c0:	0003      	movs	r3, r0
 80086c2:	60fb      	str	r3, [r7, #12]
                         (uint8_t *)&buff[1], 1);

  if (ret == 0)
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d11b      	bne.n	8008702 <stts751_temperature_raw_get+0x5c>
  {
    ret = stts751_read_reg(ctx, STTS751_TEMPERATURE_LOW,
 80086ca:	193a      	adds	r2, r7, r4
 80086cc:	6878      	ldr	r0, [r7, #4]
 80086ce:	2301      	movs	r3, #1
 80086d0:	2102      	movs	r1, #2
 80086d2:	f7ff fe44 	bl	800835e <stts751_read_reg>
 80086d6:	0003      	movs	r3, r0
 80086d8:	60fb      	str	r3, [r7, #12]
                           &buff[0], 1);
    *val = (int16_t)buff[1];
 80086da:	0021      	movs	r1, r4
 80086dc:	193b      	adds	r3, r7, r4
 80086de:	785b      	ldrb	r3, [r3, #1]
 80086e0:	b21a      	sxth	r2, r3
 80086e2:	683b      	ldr	r3, [r7, #0]
 80086e4:	801a      	strh	r2, [r3, #0]
    *val = (*val * 256) + (int16_t)buff[0];
 80086e6:	683b      	ldr	r3, [r7, #0]
 80086e8:	2200      	movs	r2, #0
 80086ea:	5e9b      	ldrsh	r3, [r3, r2]
 80086ec:	b29b      	uxth	r3, r3
 80086ee:	021b      	lsls	r3, r3, #8
 80086f0:	b29a      	uxth	r2, r3
 80086f2:	187b      	adds	r3, r7, r1
 80086f4:	781b      	ldrb	r3, [r3, #0]
 80086f6:	b29b      	uxth	r3, r3
 80086f8:	18d3      	adds	r3, r2, r3
 80086fa:	b29b      	uxth	r3, r3
 80086fc:	b21a      	sxth	r2, r3
 80086fe:	683b      	ldr	r3, [r7, #0]
 8008700:	801a      	strh	r2, [r3, #0]
  }

  return ret;
 8008702:	68fb      	ldr	r3, [r7, #12]
}
 8008704:	0018      	movs	r0, r3
 8008706:	46bd      	mov	sp, r7
 8008708:	b005      	add	sp, #20
 800870a:	bd90      	pop	{r4, r7, pc}

0800870c <stts751_pin_event_route_set>:
  * @param  val      set mask1 bit in register CONFIGURATION.
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t stts751_pin_event_route_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800870c:	b590      	push	{r4, r7, lr}
 800870e:	b085      	sub	sp, #20
 8008710:	af00      	add	r7, sp, #0
 8008712:	6078      	str	r0, [r7, #4]
 8008714:	000a      	movs	r2, r1
 8008716:	1cfb      	adds	r3, r7, #3
 8008718:	701a      	strb	r2, [r3, #0]
  stts751_configuration_t reg;
  int32_t ret;

  ret = stts751_read_reg(ctx, STTS751_CONFIGURATION, (uint8_t *)&reg, 1);
 800871a:	2408      	movs	r4, #8
 800871c:	193a      	adds	r2, r7, r4
 800871e:	6878      	ldr	r0, [r7, #4]
 8008720:	2301      	movs	r3, #1
 8008722:	2103      	movs	r1, #3
 8008724:	f7ff fe1b 	bl	800835e <stts751_read_reg>
 8008728:	0003      	movs	r3, r0
 800872a:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	2b00      	cmp	r3, #0
 8008730:	d115      	bne.n	800875e <stts751_pin_event_route_set+0x52>
  {
    reg.mask1 = val;
 8008732:	1cfb      	adds	r3, r7, #3
 8008734:	781b      	ldrb	r3, [r3, #0]
 8008736:	2201      	movs	r2, #1
 8008738:	4013      	ands	r3, r2
 800873a:	b2da      	uxtb	r2, r3
 800873c:	193b      	adds	r3, r7, r4
 800873e:	01d0      	lsls	r0, r2, #7
 8008740:	781a      	ldrb	r2, [r3, #0]
 8008742:	217f      	movs	r1, #127	; 0x7f
 8008744:	400a      	ands	r2, r1
 8008746:	1c11      	adds	r1, r2, #0
 8008748:	1c02      	adds	r2, r0, #0
 800874a:	430a      	orrs	r2, r1
 800874c:	701a      	strb	r2, [r3, #0]
    ret = stts751_write_reg(ctx, STTS751_CONFIGURATION, (uint8_t *)&reg, 1);
 800874e:	193a      	adds	r2, r7, r4
 8008750:	6878      	ldr	r0, [r7, #4]
 8008752:	2301      	movs	r3, #1
 8008754:	2103      	movs	r1, #3
 8008756:	f7ff fe23 	bl	80083a0 <stts751_write_reg>
 800875a:	0003      	movs	r3, r0
 800875c:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800875e:	68fb      	ldr	r3, [r7, #12]
}
 8008760:	0018      	movs	r0, r3
 8008762:	46bd      	mov	sp, r7
 8008764:	b005      	add	sp, #20
 8008766:	bd90      	pop	{r4, r7, pc}

08008768 <stts751_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t stts751_device_id_get(stmdev_ctx_t *ctx, stts751_id_t *buff)
{
 8008768:	b580      	push	{r7, lr}
 800876a:	b084      	sub	sp, #16
 800876c:	af00      	add	r7, sp, #0
 800876e:	6078      	str	r0, [r7, #4]
 8008770:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = stts751_read_reg(ctx, STTS751_PRODUCT_ID,
 8008772:	683a      	ldr	r2, [r7, #0]
 8008774:	6878      	ldr	r0, [r7, #4]
 8008776:	2301      	movs	r3, #1
 8008778:	21fd      	movs	r1, #253	; 0xfd
 800877a:	f7ff fdf0 	bl	800835e <stts751_read_reg>
 800877e:	0003      	movs	r3, r0
 8008780:	60fb      	str	r3, [r7, #12]
                         (uint8_t *)&buff->product_id, 1);

  if (ret == 0)
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	2b00      	cmp	r3, #0
 8008786:	d108      	bne.n	800879a <stts751_device_id_get+0x32>
  {
    ret = stts751_read_reg(ctx, STTS751_MANUFACTURER_ID,
 8008788:	683b      	ldr	r3, [r7, #0]
 800878a:	1c5a      	adds	r2, r3, #1
 800878c:	6878      	ldr	r0, [r7, #4]
 800878e:	2301      	movs	r3, #1
 8008790:	21fe      	movs	r1, #254	; 0xfe
 8008792:	f7ff fde4 	bl	800835e <stts751_read_reg>
 8008796:	0003      	movs	r3, r0
 8008798:	60fb      	str	r3, [r7, #12]
                           (uint8_t *)&buff->manufacturer_id, 1);
  }

  if (ret == 0)
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	2b00      	cmp	r3, #0
 800879e:	d108      	bne.n	80087b2 <stts751_device_id_get+0x4a>
  {
    ret = stts751_read_reg(ctx, STTS751_REVISION_ID,
 80087a0:	683b      	ldr	r3, [r7, #0]
 80087a2:	1c9a      	adds	r2, r3, #2
 80087a4:	6878      	ldr	r0, [r7, #4]
 80087a6:	2301      	movs	r3, #1
 80087a8:	21ff      	movs	r1, #255	; 0xff
 80087aa:	f7ff fdd8 	bl	800835e <stts751_read_reg>
 80087ae:	0003      	movs	r3, r0
 80087b0:	60fb      	str	r3, [r7, #12]
                           (uint8_t *)&buff->revision_id, 1);
  }

  return ret;
 80087b2:	68fb      	ldr	r3, [r7, #12]
}
 80087b4:	0018      	movs	r0, r3
 80087b6:	46bd      	mov	sp, r7
 80087b8:	b004      	add	sp, #16
 80087ba:	bd80      	pop	{r7, pc}

080087bc <IKS01A3_ENV_SENSOR_Init>:
  *         - ENV_TEMPERATURE and/or ENV_PRESSURE for instance 1
  *         - ENV_TEMPERATURE for instance 2
  * @retval BSP status
  */
int32_t IKS01A3_ENV_SENSOR_Init(uint32_t Instance, uint32_t Functions)
{
 80087bc:	b580      	push	{r7, lr}
 80087be:	b08a      	sub	sp, #40	; 0x28
 80087c0:	af00      	add	r7, sp, #0
 80087c2:	6078      	str	r0, [r7, #4]
 80087c4:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 80087c6:	2300      	movs	r3, #0
 80087c8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t function = ENV_TEMPERATURE;
 80087ca:	2301      	movs	r3, #1
 80087cc:	623b      	str	r3, [r7, #32]
  uint32_t i;
  uint32_t component_functions = 0;
 80087ce:	2300      	movs	r3, #0
 80087d0:	61bb      	str	r3, [r7, #24]
  IKS01A3_ENV_SENSOR_Capabilities_t cap;

  switch (Instance)
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	2b02      	cmp	r3, #2
 80087d6:	d100      	bne.n	80087da <IKS01A3_ENV_SENSOR_Init+0x1e>
 80087d8:	e079      	b.n	80088ce <IKS01A3_ENV_SENSOR_Init+0x112>
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	2b02      	cmp	r3, #2
 80087de:	d900      	bls.n	80087e2 <IKS01A3_ENV_SENSOR_Init+0x26>
 80087e0:	e0ac      	b.n	800893c <IKS01A3_ENV_SENSOR_Init+0x180>
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d003      	beq.n	80087f0 <IKS01A3_ENV_SENSOR_Init+0x34>
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	2b01      	cmp	r3, #1
 80087ec:	d038      	beq.n	8008860 <IKS01A3_ENV_SENSOR_Init+0xa4>
 80087ee:	e0a5      	b.n	800893c <IKS01A3_ENV_SENSOR_Init+0x180>
  {
#if (USE_IKS01A3_ENV_SENSOR_HTS221_0 == 1)
    case IKS01A3_HTS221_0:
      if (HTS221_0_Probe(Functions) != BSP_ERROR_NONE)
 80087f0:	683b      	ldr	r3, [r7, #0]
 80087f2:	0018      	movs	r0, r3
 80087f4:	f000 f9b6 	bl	8008b64 <HTS221_0_Probe>
 80087f8:	1e03      	subs	r3, r0, #0
 80087fa:	d002      	beq.n	8008802 <IKS01A3_ENV_SENSOR_Init+0x46>
      {
        return BSP_ERROR_NO_INIT;
 80087fc:	2301      	movs	r3, #1
 80087fe:	425b      	negs	r3, r3
 8008800:	e0db      	b.n	80089ba <IKS01A3_ENV_SENSOR_Init+0x1fe>
      }
      if (EnvDrv[Instance]->GetCapabilities(EnvCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8008802:	4b70      	ldr	r3, [pc, #448]	; (80089c4 <IKS01A3_ENV_SENSOR_Init+0x208>)
 8008804:	687a      	ldr	r2, [r7, #4]
 8008806:	0092      	lsls	r2, r2, #2
 8008808:	58d3      	ldr	r3, [r2, r3]
 800880a:	68db      	ldr	r3, [r3, #12]
 800880c:	4a6e      	ldr	r2, [pc, #440]	; (80089c8 <IKS01A3_ENV_SENSOR_Init+0x20c>)
 800880e:	6879      	ldr	r1, [r7, #4]
 8008810:	0089      	lsls	r1, r1, #2
 8008812:	588a      	ldr	r2, [r1, r2]
 8008814:	2108      	movs	r1, #8
 8008816:	1879      	adds	r1, r7, r1
 8008818:	0010      	movs	r0, r2
 800881a:	4798      	blx	r3
 800881c:	1e03      	subs	r3, r0, #0
 800881e:	d002      	beq.n	8008826 <IKS01A3_ENV_SENSOR_Init+0x6a>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 8008820:	2307      	movs	r3, #7
 8008822:	425b      	negs	r3, r3
 8008824:	e0c9      	b.n	80089ba <IKS01A3_ENV_SENSOR_Init+0x1fe>
      }
      if (cap.Temperature == 1U)
 8008826:	2308      	movs	r3, #8
 8008828:	18fb      	adds	r3, r7, r3
 800882a:	781b      	ldrb	r3, [r3, #0]
 800882c:	2b01      	cmp	r3, #1
 800882e:	d103      	bne.n	8008838 <IKS01A3_ENV_SENSOR_Init+0x7c>
      {
        component_functions |= ENV_TEMPERATURE;
 8008830:	69bb      	ldr	r3, [r7, #24]
 8008832:	2201      	movs	r2, #1
 8008834:	4313      	orrs	r3, r2
 8008836:	61bb      	str	r3, [r7, #24]
      }
      if (cap.Humidity == 1U)
 8008838:	2308      	movs	r3, #8
 800883a:	18fb      	adds	r3, r7, r3
 800883c:	789b      	ldrb	r3, [r3, #2]
 800883e:	2b01      	cmp	r3, #1
 8008840:	d103      	bne.n	800884a <IKS01A3_ENV_SENSOR_Init+0x8e>
      {
        component_functions |= ENV_HUMIDITY;
 8008842:	69bb      	ldr	r3, [r7, #24]
 8008844:	2204      	movs	r2, #4
 8008846:	4313      	orrs	r3, r2
 8008848:	61bb      	str	r3, [r7, #24]
      }
      if (cap.Pressure == 1U)
 800884a:	2308      	movs	r3, #8
 800884c:	18fb      	adds	r3, r7, r3
 800884e:	785b      	ldrb	r3, [r3, #1]
 8008850:	2b01      	cmp	r3, #1
 8008852:	d000      	beq.n	8008856 <IKS01A3_ENV_SENSOR_Init+0x9a>
 8008854:	e076      	b.n	8008944 <IKS01A3_ENV_SENSOR_Init+0x188>
      {
        component_functions |= ENV_PRESSURE;
 8008856:	69bb      	ldr	r3, [r7, #24]
 8008858:	2202      	movs	r2, #2
 800885a:	4313      	orrs	r3, r2
 800885c:	61bb      	str	r3, [r7, #24]
      }
      break;
 800885e:	e071      	b.n	8008944 <IKS01A3_ENV_SENSOR_Init+0x188>
#endif

#if (USE_IKS01A3_ENV_SENSOR_LPS22HH_0 == 1)
    case IKS01A3_LPS22HH_0:
      if (LPS22HH_0_Probe(Functions) != BSP_ERROR_NONE)
 8008860:	683b      	ldr	r3, [r7, #0]
 8008862:	0018      	movs	r0, r3
 8008864:	f000 fa44 	bl	8008cf0 <LPS22HH_0_Probe>
 8008868:	1e03      	subs	r3, r0, #0
 800886a:	d002      	beq.n	8008872 <IKS01A3_ENV_SENSOR_Init+0xb6>
      {
        return BSP_ERROR_NO_INIT;
 800886c:	2301      	movs	r3, #1
 800886e:	425b      	negs	r3, r3
 8008870:	e0a3      	b.n	80089ba <IKS01A3_ENV_SENSOR_Init+0x1fe>
      }
      if (EnvDrv[Instance]->GetCapabilities(EnvCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8008872:	4b54      	ldr	r3, [pc, #336]	; (80089c4 <IKS01A3_ENV_SENSOR_Init+0x208>)
 8008874:	687a      	ldr	r2, [r7, #4]
 8008876:	0092      	lsls	r2, r2, #2
 8008878:	58d3      	ldr	r3, [r2, r3]
 800887a:	68db      	ldr	r3, [r3, #12]
 800887c:	4a52      	ldr	r2, [pc, #328]	; (80089c8 <IKS01A3_ENV_SENSOR_Init+0x20c>)
 800887e:	6879      	ldr	r1, [r7, #4]
 8008880:	0089      	lsls	r1, r1, #2
 8008882:	588a      	ldr	r2, [r1, r2]
 8008884:	2108      	movs	r1, #8
 8008886:	1879      	adds	r1, r7, r1
 8008888:	0010      	movs	r0, r2
 800888a:	4798      	blx	r3
 800888c:	1e03      	subs	r3, r0, #0
 800888e:	d002      	beq.n	8008896 <IKS01A3_ENV_SENSOR_Init+0xda>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 8008890:	2307      	movs	r3, #7
 8008892:	425b      	negs	r3, r3
 8008894:	e091      	b.n	80089ba <IKS01A3_ENV_SENSOR_Init+0x1fe>
      }
      if (cap.Temperature == 1U)
 8008896:	2308      	movs	r3, #8
 8008898:	18fb      	adds	r3, r7, r3
 800889a:	781b      	ldrb	r3, [r3, #0]
 800889c:	2b01      	cmp	r3, #1
 800889e:	d103      	bne.n	80088a8 <IKS01A3_ENV_SENSOR_Init+0xec>
      {
        component_functions |= ENV_TEMPERATURE;
 80088a0:	69bb      	ldr	r3, [r7, #24]
 80088a2:	2201      	movs	r2, #1
 80088a4:	4313      	orrs	r3, r2
 80088a6:	61bb      	str	r3, [r7, #24]
      }
      if (cap.Humidity == 1U)
 80088a8:	2308      	movs	r3, #8
 80088aa:	18fb      	adds	r3, r7, r3
 80088ac:	789b      	ldrb	r3, [r3, #2]
 80088ae:	2b01      	cmp	r3, #1
 80088b0:	d103      	bne.n	80088ba <IKS01A3_ENV_SENSOR_Init+0xfe>
      {
        component_functions |= ENV_HUMIDITY;
 80088b2:	69bb      	ldr	r3, [r7, #24]
 80088b4:	2204      	movs	r2, #4
 80088b6:	4313      	orrs	r3, r2
 80088b8:	61bb      	str	r3, [r7, #24]
      }
      if (cap.Pressure == 1U)
 80088ba:	2308      	movs	r3, #8
 80088bc:	18fb      	adds	r3, r7, r3
 80088be:	785b      	ldrb	r3, [r3, #1]
 80088c0:	2b01      	cmp	r3, #1
 80088c2:	d141      	bne.n	8008948 <IKS01A3_ENV_SENSOR_Init+0x18c>
      {
        component_functions |= ENV_PRESSURE;
 80088c4:	69bb      	ldr	r3, [r7, #24]
 80088c6:	2202      	movs	r2, #2
 80088c8:	4313      	orrs	r3, r2
 80088ca:	61bb      	str	r3, [r7, #24]
      }
      break;
 80088cc:	e03c      	b.n	8008948 <IKS01A3_ENV_SENSOR_Init+0x18c>
#endif

#if (USE_IKS01A3_ENV_SENSOR_STTS751_0 == 1)
    case IKS01A3_STTS751_0:
      if (STTS751_0_Probe(Functions) != BSP_ERROR_NONE)
 80088ce:	683b      	ldr	r3, [r7, #0]
 80088d0:	0018      	movs	r0, r3
 80088d2:	f000 fad5 	bl	8008e80 <STTS751_0_Probe>
 80088d6:	1e03      	subs	r3, r0, #0
 80088d8:	d002      	beq.n	80088e0 <IKS01A3_ENV_SENSOR_Init+0x124>
      {
        return BSP_ERROR_NO_INIT;
 80088da:	2301      	movs	r3, #1
 80088dc:	425b      	negs	r3, r3
 80088de:	e06c      	b.n	80089ba <IKS01A3_ENV_SENSOR_Init+0x1fe>
      }
      if (EnvDrv[Instance]->GetCapabilities(EnvCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 80088e0:	4b38      	ldr	r3, [pc, #224]	; (80089c4 <IKS01A3_ENV_SENSOR_Init+0x208>)
 80088e2:	687a      	ldr	r2, [r7, #4]
 80088e4:	0092      	lsls	r2, r2, #2
 80088e6:	58d3      	ldr	r3, [r2, r3]
 80088e8:	68db      	ldr	r3, [r3, #12]
 80088ea:	4a37      	ldr	r2, [pc, #220]	; (80089c8 <IKS01A3_ENV_SENSOR_Init+0x20c>)
 80088ec:	6879      	ldr	r1, [r7, #4]
 80088ee:	0089      	lsls	r1, r1, #2
 80088f0:	588a      	ldr	r2, [r1, r2]
 80088f2:	2108      	movs	r1, #8
 80088f4:	1879      	adds	r1, r7, r1
 80088f6:	0010      	movs	r0, r2
 80088f8:	4798      	blx	r3
 80088fa:	1e03      	subs	r3, r0, #0
 80088fc:	d002      	beq.n	8008904 <IKS01A3_ENV_SENSOR_Init+0x148>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 80088fe:	2307      	movs	r3, #7
 8008900:	425b      	negs	r3, r3
 8008902:	e05a      	b.n	80089ba <IKS01A3_ENV_SENSOR_Init+0x1fe>
      }
      if (cap.Temperature == 1U)
 8008904:	2308      	movs	r3, #8
 8008906:	18fb      	adds	r3, r7, r3
 8008908:	781b      	ldrb	r3, [r3, #0]
 800890a:	2b01      	cmp	r3, #1
 800890c:	d103      	bne.n	8008916 <IKS01A3_ENV_SENSOR_Init+0x15a>
      {
        component_functions |= ENV_TEMPERATURE;
 800890e:	69bb      	ldr	r3, [r7, #24]
 8008910:	2201      	movs	r2, #1
 8008912:	4313      	orrs	r3, r2
 8008914:	61bb      	str	r3, [r7, #24]
      }
      if (cap.Humidity == 1U)
 8008916:	2308      	movs	r3, #8
 8008918:	18fb      	adds	r3, r7, r3
 800891a:	789b      	ldrb	r3, [r3, #2]
 800891c:	2b01      	cmp	r3, #1
 800891e:	d103      	bne.n	8008928 <IKS01A3_ENV_SENSOR_Init+0x16c>
      {
        component_functions |= ENV_HUMIDITY;
 8008920:	69bb      	ldr	r3, [r7, #24]
 8008922:	2204      	movs	r2, #4
 8008924:	4313      	orrs	r3, r2
 8008926:	61bb      	str	r3, [r7, #24]
      }
      if (cap.Pressure == 1U)
 8008928:	2308      	movs	r3, #8
 800892a:	18fb      	adds	r3, r7, r3
 800892c:	785b      	ldrb	r3, [r3, #1]
 800892e:	2b01      	cmp	r3, #1
 8008930:	d10c      	bne.n	800894c <IKS01A3_ENV_SENSOR_Init+0x190>
      {
        component_functions |= ENV_PRESSURE;
 8008932:	69bb      	ldr	r3, [r7, #24]
 8008934:	2202      	movs	r2, #2
 8008936:	4313      	orrs	r3, r2
 8008938:	61bb      	str	r3, [r7, #24]
      }
      break;
 800893a:	e007      	b.n	800894c <IKS01A3_ENV_SENSOR_Init+0x190>
      }
      break;
#endif

    default:
      ret = BSP_ERROR_WRONG_PARAM;
 800893c:	2302      	movs	r3, #2
 800893e:	425b      	negs	r3, r3
 8008940:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8008942:	e004      	b.n	800894e <IKS01A3_ENV_SENSOR_Init+0x192>
      break;
 8008944:	46c0      	nop			; (mov r8, r8)
 8008946:	e002      	b.n	800894e <IKS01A3_ENV_SENSOR_Init+0x192>
      break;
 8008948:	46c0      	nop			; (mov r8, r8)
 800894a:	e000      	b.n	800894e <IKS01A3_ENV_SENSOR_Init+0x192>
      break;
 800894c:	46c0      	nop			; (mov r8, r8)
  }

  if (ret != BSP_ERROR_NONE)
 800894e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008950:	2b00      	cmp	r3, #0
 8008952:	d001      	beq.n	8008958 <IKS01A3_ENV_SENSOR_Init+0x19c>
  {
    return ret;
 8008954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008956:	e030      	b.n	80089ba <IKS01A3_ENV_SENSOR_Init+0x1fe>
  }

  for (i = 0; i < IKS01A3_ENV_FUNCTIONS_NBR; i++)
 8008958:	2300      	movs	r3, #0
 800895a:	61fb      	str	r3, [r7, #28]
 800895c:	e029      	b.n	80089b2 <IKS01A3_ENV_SENSOR_Init+0x1f6>
  {
    if (((Functions & function) == function) && ((component_functions & function) == function))
 800895e:	683b      	ldr	r3, [r7, #0]
 8008960:	6a3a      	ldr	r2, [r7, #32]
 8008962:	4013      	ands	r3, r2
 8008964:	6a3a      	ldr	r2, [r7, #32]
 8008966:	429a      	cmp	r2, r3
 8008968:	d11d      	bne.n	80089a6 <IKS01A3_ENV_SENSOR_Init+0x1ea>
 800896a:	69bb      	ldr	r3, [r7, #24]
 800896c:	6a3a      	ldr	r2, [r7, #32]
 800896e:	4013      	ands	r3, r2
 8008970:	6a3a      	ldr	r2, [r7, #32]
 8008972:	429a      	cmp	r2, r3
 8008974:	d117      	bne.n	80089a6 <IKS01A3_ENV_SENSOR_Init+0x1ea>
    {
      if (EnvFuncDrv[Instance][FunctionIndex[function]]->Enable(EnvCompObj[Instance]) != BSP_ERROR_NONE)
 8008976:	4b15      	ldr	r3, [pc, #84]	; (80089cc <IKS01A3_ENV_SENSOR_Init+0x210>)
 8008978:	6a3a      	ldr	r2, [r7, #32]
 800897a:	0092      	lsls	r2, r2, #2
 800897c:	58d0      	ldr	r0, [r2, r3]
 800897e:	4914      	ldr	r1, [pc, #80]	; (80089d0 <IKS01A3_ENV_SENSOR_Init+0x214>)
 8008980:	687a      	ldr	r2, [r7, #4]
 8008982:	0013      	movs	r3, r2
 8008984:	005b      	lsls	r3, r3, #1
 8008986:	189b      	adds	r3, r3, r2
 8008988:	181b      	adds	r3, r3, r0
 800898a:	009b      	lsls	r3, r3, #2
 800898c:	585b      	ldr	r3, [r3, r1]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	4a0d      	ldr	r2, [pc, #52]	; (80089c8 <IKS01A3_ENV_SENSOR_Init+0x20c>)
 8008992:	6879      	ldr	r1, [r7, #4]
 8008994:	0089      	lsls	r1, r1, #2
 8008996:	588a      	ldr	r2, [r1, r2]
 8008998:	0010      	movs	r0, r2
 800899a:	4798      	blx	r3
 800899c:	1e03      	subs	r3, r0, #0
 800899e:	d002      	beq.n	80089a6 <IKS01A3_ENV_SENSOR_Init+0x1ea>
      {
        return BSP_ERROR_COMPONENT_FAILURE;
 80089a0:	2305      	movs	r3, #5
 80089a2:	425b      	negs	r3, r3
 80089a4:	e009      	b.n	80089ba <IKS01A3_ENV_SENSOR_Init+0x1fe>
      }
    }
    function = function << 1;
 80089a6:	6a3b      	ldr	r3, [r7, #32]
 80089a8:	005b      	lsls	r3, r3, #1
 80089aa:	623b      	str	r3, [r7, #32]
  for (i = 0; i < IKS01A3_ENV_FUNCTIONS_NBR; i++)
 80089ac:	69fb      	ldr	r3, [r7, #28]
 80089ae:	3301      	adds	r3, #1
 80089b0:	61fb      	str	r3, [r7, #28]
 80089b2:	69fb      	ldr	r3, [r7, #28]
 80089b4:	2b02      	cmp	r3, #2
 80089b6:	d9d2      	bls.n	800895e <IKS01A3_ENV_SENSOR_Init+0x1a2>
  }

  return ret;
 80089b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80089ba:	0018      	movs	r0, r3
 80089bc:	46bd      	mov	sp, r7
 80089be:	b00a      	add	sp, #40	; 0x28
 80089c0:	bd80      	pop	{r7, pc}
 80089c2:	46c0      	nop			; (mov r8, r8)
 80089c4:	20000bcc 	.word	0x20000bcc
 80089c8:	20000b9c 	.word	0x20000b9c
 80089cc:	20000224 	.word	0x20000224
 80089d0:	20000ba8 	.word	0x20000ba8

080089d4 <IKS01A3_ENV_SENSOR_Enable>:
  *         - ENV_TEMPERATURE or ENV_HUMIDITY for instance 0
  *         - ENV_TEMPERATURE or ENV_PRESSURE for instance 1
  * @retval BSP status
  */
int32_t IKS01A3_ENV_SENSOR_Enable(uint32_t Instance, uint32_t Function)
{
 80089d4:	b580      	push	{r7, lr}
 80089d6:	b084      	sub	sp, #16
 80089d8:	af00      	add	r7, sp, #0
 80089da:	6078      	str	r0, [r7, #4]
 80089dc:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= IKS01A3_ENV_INSTANCES_NBR)
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	2b02      	cmp	r3, #2
 80089e2:	d903      	bls.n	80089ec <IKS01A3_ENV_SENSOR_Enable+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80089e4:	2302      	movs	r3, #2
 80089e6:	425b      	negs	r3, r3
 80089e8:	60fb      	str	r3, [r7, #12]
 80089ea:	e027      	b.n	8008a3c <IKS01A3_ENV_SENSOR_Enable+0x68>
  }
  else
  {
    if ((EnvCtx[Instance].Functions & Function) == Function)
 80089ec:	4b16      	ldr	r3, [pc, #88]	; (8008a48 <IKS01A3_ENV_SENSOR_Enable+0x74>)
 80089ee:	687a      	ldr	r2, [r7, #4]
 80089f0:	0092      	lsls	r2, r2, #2
 80089f2:	58d3      	ldr	r3, [r2, r3]
 80089f4:	683a      	ldr	r2, [r7, #0]
 80089f6:	4013      	ands	r3, r2
 80089f8:	683a      	ldr	r2, [r7, #0]
 80089fa:	429a      	cmp	r2, r3
 80089fc:	d11b      	bne.n	8008a36 <IKS01A3_ENV_SENSOR_Enable+0x62>
    {
      if (EnvFuncDrv[Instance][FunctionIndex[Function]]->Enable(EnvCompObj[Instance]) != BSP_ERROR_NONE)
 80089fe:	4b13      	ldr	r3, [pc, #76]	; (8008a4c <IKS01A3_ENV_SENSOR_Enable+0x78>)
 8008a00:	683a      	ldr	r2, [r7, #0]
 8008a02:	0092      	lsls	r2, r2, #2
 8008a04:	58d0      	ldr	r0, [r2, r3]
 8008a06:	4912      	ldr	r1, [pc, #72]	; (8008a50 <IKS01A3_ENV_SENSOR_Enable+0x7c>)
 8008a08:	687a      	ldr	r2, [r7, #4]
 8008a0a:	0013      	movs	r3, r2
 8008a0c:	005b      	lsls	r3, r3, #1
 8008a0e:	189b      	adds	r3, r3, r2
 8008a10:	181b      	adds	r3, r3, r0
 8008a12:	009b      	lsls	r3, r3, #2
 8008a14:	585b      	ldr	r3, [r3, r1]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	4a0e      	ldr	r2, [pc, #56]	; (8008a54 <IKS01A3_ENV_SENSOR_Enable+0x80>)
 8008a1a:	6879      	ldr	r1, [r7, #4]
 8008a1c:	0089      	lsls	r1, r1, #2
 8008a1e:	588a      	ldr	r2, [r1, r2]
 8008a20:	0010      	movs	r0, r2
 8008a22:	4798      	blx	r3
 8008a24:	1e03      	subs	r3, r0, #0
 8008a26:	d003      	beq.n	8008a30 <IKS01A3_ENV_SENSOR_Enable+0x5c>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8008a28:	2305      	movs	r3, #5
 8008a2a:	425b      	negs	r3, r3
 8008a2c:	60fb      	str	r3, [r7, #12]
 8008a2e:	e005      	b.n	8008a3c <IKS01A3_ENV_SENSOR_Enable+0x68>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8008a30:	2300      	movs	r3, #0
 8008a32:	60fb      	str	r3, [r7, #12]
 8008a34:	e002      	b.n	8008a3c <IKS01A3_ENV_SENSOR_Enable+0x68>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 8008a36:	2302      	movs	r3, #2
 8008a38:	425b      	negs	r3, r3
 8008a3a:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8008a3c:	68fb      	ldr	r3, [r7, #12]
}
 8008a3e:	0018      	movs	r0, r3
 8008a40:	46bd      	mov	sp, r7
 8008a42:	b004      	add	sp, #16
 8008a44:	bd80      	pop	{r7, pc}
 8008a46:	46c0      	nop			; (mov r8, r8)
 8008a48:	20000bd8 	.word	0x20000bd8
 8008a4c:	20000224 	.word	0x20000224
 8008a50:	20000ba8 	.word	0x20000ba8
 8008a54:	20000b9c 	.word	0x20000b9c

08008a58 <IKS01A3_ENV_SENSOR_Disable>:
  *         - ENV_TEMPERATURE or ENV_HUMIDITY for instance 0
  *         - ENV_TEMPERATURE or ENV_PRESSURE for instance 1
  * @retval BSP status
  */
int32_t IKS01A3_ENV_SENSOR_Disable(uint32_t Instance, uint32_t Function)
{
 8008a58:	b580      	push	{r7, lr}
 8008a5a:	b084      	sub	sp, #16
 8008a5c:	af00      	add	r7, sp, #0
 8008a5e:	6078      	str	r0, [r7, #4]
 8008a60:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= IKS01A3_ENV_INSTANCES_NBR)
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	2b02      	cmp	r3, #2
 8008a66:	d903      	bls.n	8008a70 <IKS01A3_ENV_SENSOR_Disable+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8008a68:	2302      	movs	r3, #2
 8008a6a:	425b      	negs	r3, r3
 8008a6c:	60fb      	str	r3, [r7, #12]
 8008a6e:	e027      	b.n	8008ac0 <IKS01A3_ENV_SENSOR_Disable+0x68>
  }
  else
  {
    if ((EnvCtx[Instance].Functions & Function) == Function)
 8008a70:	4b16      	ldr	r3, [pc, #88]	; (8008acc <IKS01A3_ENV_SENSOR_Disable+0x74>)
 8008a72:	687a      	ldr	r2, [r7, #4]
 8008a74:	0092      	lsls	r2, r2, #2
 8008a76:	58d3      	ldr	r3, [r2, r3]
 8008a78:	683a      	ldr	r2, [r7, #0]
 8008a7a:	4013      	ands	r3, r2
 8008a7c:	683a      	ldr	r2, [r7, #0]
 8008a7e:	429a      	cmp	r2, r3
 8008a80:	d11b      	bne.n	8008aba <IKS01A3_ENV_SENSOR_Disable+0x62>
    {
      if (EnvFuncDrv[Instance][FunctionIndex[Function]]->Disable(EnvCompObj[Instance]) != BSP_ERROR_NONE)
 8008a82:	4b13      	ldr	r3, [pc, #76]	; (8008ad0 <IKS01A3_ENV_SENSOR_Disable+0x78>)
 8008a84:	683a      	ldr	r2, [r7, #0]
 8008a86:	0092      	lsls	r2, r2, #2
 8008a88:	58d0      	ldr	r0, [r2, r3]
 8008a8a:	4912      	ldr	r1, [pc, #72]	; (8008ad4 <IKS01A3_ENV_SENSOR_Disable+0x7c>)
 8008a8c:	687a      	ldr	r2, [r7, #4]
 8008a8e:	0013      	movs	r3, r2
 8008a90:	005b      	lsls	r3, r3, #1
 8008a92:	189b      	adds	r3, r3, r2
 8008a94:	181b      	adds	r3, r3, r0
 8008a96:	009b      	lsls	r3, r3, #2
 8008a98:	585b      	ldr	r3, [r3, r1]
 8008a9a:	685b      	ldr	r3, [r3, #4]
 8008a9c:	4a0e      	ldr	r2, [pc, #56]	; (8008ad8 <IKS01A3_ENV_SENSOR_Disable+0x80>)
 8008a9e:	6879      	ldr	r1, [r7, #4]
 8008aa0:	0089      	lsls	r1, r1, #2
 8008aa2:	588a      	ldr	r2, [r1, r2]
 8008aa4:	0010      	movs	r0, r2
 8008aa6:	4798      	blx	r3
 8008aa8:	1e03      	subs	r3, r0, #0
 8008aaa:	d003      	beq.n	8008ab4 <IKS01A3_ENV_SENSOR_Disable+0x5c>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8008aac:	2305      	movs	r3, #5
 8008aae:	425b      	negs	r3, r3
 8008ab0:	60fb      	str	r3, [r7, #12]
 8008ab2:	e005      	b.n	8008ac0 <IKS01A3_ENV_SENSOR_Disable+0x68>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8008ab4:	2300      	movs	r3, #0
 8008ab6:	60fb      	str	r3, [r7, #12]
 8008ab8:	e002      	b.n	8008ac0 <IKS01A3_ENV_SENSOR_Disable+0x68>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 8008aba:	2302      	movs	r3, #2
 8008abc:	425b      	negs	r3, r3
 8008abe:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8008ac0:	68fb      	ldr	r3, [r7, #12]
}
 8008ac2:	0018      	movs	r0, r3
 8008ac4:	46bd      	mov	sp, r7
 8008ac6:	b004      	add	sp, #16
 8008ac8:	bd80      	pop	{r7, pc}
 8008aca:	46c0      	nop			; (mov r8, r8)
 8008acc:	20000bd8 	.word	0x20000bd8
 8008ad0:	20000224 	.word	0x20000224
 8008ad4:	20000ba8 	.word	0x20000ba8
 8008ad8:	20000b9c 	.word	0x20000b9c

08008adc <IKS01A3_ENV_SENSOR_GetValue>:
  *         - ENV_TEMPERATURE or ENV_PRESSURE for instance 1
  * @param  Value pointer to environmental sensor value
  * @retval BSP status
  */
int32_t IKS01A3_ENV_SENSOR_GetValue(uint32_t Instance, uint32_t Function, float *Value)
{
 8008adc:	b580      	push	{r7, lr}
 8008ade:	b086      	sub	sp, #24
 8008ae0:	af00      	add	r7, sp, #0
 8008ae2:	60f8      	str	r0, [r7, #12]
 8008ae4:	60b9      	str	r1, [r7, #8]
 8008ae6:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= IKS01A3_ENV_INSTANCES_NBR)
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	2b02      	cmp	r3, #2
 8008aec:	d903      	bls.n	8008af6 <IKS01A3_ENV_SENSOR_GetValue+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8008aee:	2302      	movs	r3, #2
 8008af0:	425b      	negs	r3, r3
 8008af2:	617b      	str	r3, [r7, #20]
 8008af4:	e028      	b.n	8008b48 <IKS01A3_ENV_SENSOR_GetValue+0x6c>
  }
  else
  {
    if ((EnvCtx[Instance].Functions & Function) == Function)
 8008af6:	4b17      	ldr	r3, [pc, #92]	; (8008b54 <IKS01A3_ENV_SENSOR_GetValue+0x78>)
 8008af8:	68fa      	ldr	r2, [r7, #12]
 8008afa:	0092      	lsls	r2, r2, #2
 8008afc:	58d3      	ldr	r3, [r2, r3]
 8008afe:	68ba      	ldr	r2, [r7, #8]
 8008b00:	4013      	ands	r3, r2
 8008b02:	68ba      	ldr	r2, [r7, #8]
 8008b04:	429a      	cmp	r2, r3
 8008b06:	d11c      	bne.n	8008b42 <IKS01A3_ENV_SENSOR_GetValue+0x66>
    {
      if (EnvFuncDrv[Instance][FunctionIndex[Function]]->GetValue(EnvCompObj[Instance], Value) != BSP_ERROR_NONE)
 8008b08:	4b13      	ldr	r3, [pc, #76]	; (8008b58 <IKS01A3_ENV_SENSOR_GetValue+0x7c>)
 8008b0a:	68ba      	ldr	r2, [r7, #8]
 8008b0c:	0092      	lsls	r2, r2, #2
 8008b0e:	58d0      	ldr	r0, [r2, r3]
 8008b10:	4912      	ldr	r1, [pc, #72]	; (8008b5c <IKS01A3_ENV_SENSOR_GetValue+0x80>)
 8008b12:	68fa      	ldr	r2, [r7, #12]
 8008b14:	0013      	movs	r3, r2
 8008b16:	005b      	lsls	r3, r3, #1
 8008b18:	189b      	adds	r3, r3, r2
 8008b1a:	181b      	adds	r3, r3, r0
 8008b1c:	009b      	lsls	r3, r3, #2
 8008b1e:	585b      	ldr	r3, [r3, r1]
 8008b20:	691b      	ldr	r3, [r3, #16]
 8008b22:	4a0f      	ldr	r2, [pc, #60]	; (8008b60 <IKS01A3_ENV_SENSOR_GetValue+0x84>)
 8008b24:	68f9      	ldr	r1, [r7, #12]
 8008b26:	0089      	lsls	r1, r1, #2
 8008b28:	588a      	ldr	r2, [r1, r2]
 8008b2a:	6879      	ldr	r1, [r7, #4]
 8008b2c:	0010      	movs	r0, r2
 8008b2e:	4798      	blx	r3
 8008b30:	1e03      	subs	r3, r0, #0
 8008b32:	d003      	beq.n	8008b3c <IKS01A3_ENV_SENSOR_GetValue+0x60>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8008b34:	2305      	movs	r3, #5
 8008b36:	425b      	negs	r3, r3
 8008b38:	617b      	str	r3, [r7, #20]
 8008b3a:	e005      	b.n	8008b48 <IKS01A3_ENV_SENSOR_GetValue+0x6c>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8008b3c:	2300      	movs	r3, #0
 8008b3e:	617b      	str	r3, [r7, #20]
 8008b40:	e002      	b.n	8008b48 <IKS01A3_ENV_SENSOR_GetValue+0x6c>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 8008b42:	2302      	movs	r3, #2
 8008b44:	425b      	negs	r3, r3
 8008b46:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 8008b48:	697b      	ldr	r3, [r7, #20]
}
 8008b4a:	0018      	movs	r0, r3
 8008b4c:	46bd      	mov	sp, r7
 8008b4e:	b006      	add	sp, #24
 8008b50:	bd80      	pop	{r7, pc}
 8008b52:	46c0      	nop			; (mov r8, r8)
 8008b54:	20000bd8 	.word	0x20000bd8
 8008b58:	20000224 	.word	0x20000224
 8008b5c:	20000ba8 	.word	0x20000ba8
 8008b60:	20000b9c 	.word	0x20000b9c

08008b64 <HTS221_0_Probe>:
  * @param  Functions Environmental sensor functions. Could be :
  *         - ENV_TEMPERATURE and/or ENV_HUMIDITY
  * @retval BSP status
  */
static int32_t HTS221_0_Probe(uint32_t Functions)
{
 8008b64:	b590      	push	{r4, r7, lr}
 8008b66:	b091      	sub	sp, #68	; 0x44
 8008b68:	af00      	add	r7, sp, #0
 8008b6a:	6078      	str	r0, [r7, #4]
  HTS221_IO_t            io_ctx;
  uint8_t              id;
  int32_t              ret = BSP_ERROR_NONE;
 8008b6c:	2300      	movs	r3, #0
 8008b6e:	63fb      	str	r3, [r7, #60]	; 0x3c
  static HTS221_Object_t hts221_obj_0;
  HTS221_Capabilities_t  cap;

  /* Configure the environmental sensor driver */
  io_ctx.BusType     = HTS221_I2C_BUS; /* I2C */
 8008b70:	2120      	movs	r1, #32
 8008b72:	187b      	adds	r3, r7, r1
 8008b74:	2200      	movs	r2, #0
 8008b76:	609a      	str	r2, [r3, #8]
  io_ctx.Address     = HTS221_I2C_ADDRESS;
 8008b78:	187b      	adds	r3, r7, r1
 8008b7a:	22bf      	movs	r2, #191	; 0xbf
 8008b7c:	731a      	strb	r2, [r3, #12]
  io_ctx.Init        = IKS01A3_I2C_Init;
 8008b7e:	187b      	adds	r3, r7, r1
 8008b80:	4a4d      	ldr	r2, [pc, #308]	; (8008cb8 <HTS221_0_Probe+0x154>)
 8008b82:	601a      	str	r2, [r3, #0]
  io_ctx.DeInit      = IKS01A3_I2C_DeInit;
 8008b84:	187b      	adds	r3, r7, r1
 8008b86:	4a4d      	ldr	r2, [pc, #308]	; (8008cbc <HTS221_0_Probe+0x158>)
 8008b88:	605a      	str	r2, [r3, #4]
  io_ctx.ReadReg     = IKS01A3_I2C_ReadReg;
 8008b8a:	187b      	adds	r3, r7, r1
 8008b8c:	4a4c      	ldr	r2, [pc, #304]	; (8008cc0 <HTS221_0_Probe+0x15c>)
 8008b8e:	615a      	str	r2, [r3, #20]
  io_ctx.WriteReg    = IKS01A3_I2C_WriteReg;
 8008b90:	187b      	adds	r3, r7, r1
 8008b92:	4a4c      	ldr	r2, [pc, #304]	; (8008cc4 <HTS221_0_Probe+0x160>)
 8008b94:	611a      	str	r2, [r3, #16]
  io_ctx.GetTick     = IKS01A3_GetTick;
 8008b96:	187b      	adds	r3, r7, r1
 8008b98:	4a4b      	ldr	r2, [pc, #300]	; (8008cc8 <HTS221_0_Probe+0x164>)
 8008b9a:	619a      	str	r2, [r3, #24]

  if (HTS221_RegisterBusIO(&hts221_obj_0, &io_ctx) != HTS221_OK)
 8008b9c:	187a      	adds	r2, r7, r1
 8008b9e:	4b4b      	ldr	r3, [pc, #300]	; (8008ccc <HTS221_0_Probe+0x168>)
 8008ba0:	0011      	movs	r1, r2
 8008ba2:	0018      	movs	r0, r3
 8008ba4:	f7f9 f956 	bl	8001e54 <HTS221_RegisterBusIO>
 8008ba8:	1e03      	subs	r3, r0, #0
 8008baa:	d003      	beq.n	8008bb4 <HTS221_0_Probe+0x50>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8008bac:	2307      	movs	r3, #7
 8008bae:	425b      	negs	r3, r3
 8008bb0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008bb2:	e07b      	b.n	8008cac <HTS221_0_Probe+0x148>
  }
  else if (HTS221_ReadID(&hts221_obj_0, &id) != HTS221_OK)
 8008bb4:	231f      	movs	r3, #31
 8008bb6:	18fa      	adds	r2, r7, r3
 8008bb8:	4b44      	ldr	r3, [pc, #272]	; (8008ccc <HTS221_0_Probe+0x168>)
 8008bba:	0011      	movs	r1, r2
 8008bbc:	0018      	movs	r0, r3
 8008bbe:	f7f9 f9d0 	bl	8001f62 <HTS221_ReadID>
 8008bc2:	1e03      	subs	r3, r0, #0
 8008bc4:	d003      	beq.n	8008bce <HTS221_0_Probe+0x6a>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8008bc6:	2307      	movs	r3, #7
 8008bc8:	425b      	negs	r3, r3
 8008bca:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008bcc:	e06e      	b.n	8008cac <HTS221_0_Probe+0x148>
  }
  else if (id != HTS221_ID)
 8008bce:	231f      	movs	r3, #31
 8008bd0:	18fb      	adds	r3, r7, r3
 8008bd2:	781b      	ldrb	r3, [r3, #0]
 8008bd4:	2bbc      	cmp	r3, #188	; 0xbc
 8008bd6:	d003      	beq.n	8008be0 <HTS221_0_Probe+0x7c>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8008bd8:	2307      	movs	r3, #7
 8008bda:	425b      	negs	r3, r3
 8008bdc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008bde:	e065      	b.n	8008cac <HTS221_0_Probe+0x148>
  }
  else
  {
    (void)HTS221_GetCapabilities(&hts221_obj_0, &cap);
 8008be0:	240c      	movs	r4, #12
 8008be2:	193a      	adds	r2, r7, r4
 8008be4:	4b39      	ldr	r3, [pc, #228]	; (8008ccc <HTS221_0_Probe+0x168>)
 8008be6:	0011      	movs	r1, r2
 8008be8:	0018      	movs	r0, r3
 8008bea:	f7f9 f9d1 	bl	8001f90 <HTS221_GetCapabilities>
    EnvCtx[IKS01A3_HTS221_0].Functions = ((uint32_t)cap.Temperature) | ((uint32_t)cap.Pressure << 1) | ((
 8008bee:	0021      	movs	r1, r4
 8008bf0:	187b      	adds	r3, r7, r1
 8008bf2:	781b      	ldrb	r3, [r3, #0]
 8008bf4:	001a      	movs	r2, r3
 8008bf6:	187b      	adds	r3, r7, r1
 8008bf8:	785b      	ldrb	r3, [r3, #1]
 8008bfa:	005b      	lsls	r3, r3, #1
 8008bfc:	431a      	orrs	r2, r3
                                           uint32_t)cap.Humidity << 2);
 8008bfe:	187b      	adds	r3, r7, r1
 8008c00:	789b      	ldrb	r3, [r3, #2]
 8008c02:	009b      	lsls	r3, r3, #2
    EnvCtx[IKS01A3_HTS221_0].Functions = ((uint32_t)cap.Temperature) | ((uint32_t)cap.Pressure << 1) | ((
 8008c04:	431a      	orrs	r2, r3
 8008c06:	4b32      	ldr	r3, [pc, #200]	; (8008cd0 <HTS221_0_Probe+0x16c>)
 8008c08:	601a      	str	r2, [r3, #0]

    EnvCompObj[IKS01A3_HTS221_0] = &hts221_obj_0;
 8008c0a:	4b32      	ldr	r3, [pc, #200]	; (8008cd4 <HTS221_0_Probe+0x170>)
 8008c0c:	4a2f      	ldr	r2, [pc, #188]	; (8008ccc <HTS221_0_Probe+0x168>)
 8008c0e:	601a      	str	r2, [r3, #0]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    EnvDrv[IKS01A3_HTS221_0] = (ENV_SENSOR_CommonDrv_t *)(void *)&HTS221_COMMON_Driver;
 8008c10:	4b31      	ldr	r3, [pc, #196]	; (8008cd8 <HTS221_0_Probe+0x174>)
 8008c12:	4a32      	ldr	r2, [pc, #200]	; (8008cdc <HTS221_0_Probe+0x178>)
 8008c14:	601a      	str	r2, [r3, #0]

    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_TEMPERATURE) == ENV_TEMPERATURE) && (cap.Temperature == 1U))
 8008c16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d11c      	bne.n	8008c56 <HTS221_0_Probe+0xf2>
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	2201      	movs	r2, #1
 8008c20:	4013      	ands	r3, r2
 8008c22:	d018      	beq.n	8008c56 <HTS221_0_Probe+0xf2>
 8008c24:	187b      	adds	r3, r7, r1
 8008c26:	781b      	ldrb	r3, [r3, #0]
 8008c28:	2b01      	cmp	r3, #1
 8008c2a:	d114      	bne.n	8008c56 <HTS221_0_Probe+0xf2>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS01A3_HTS221_0][FunctionIndex[ENV_TEMPERATURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&HTS221_TEMP_Driver;
 8008c2c:	4b2c      	ldr	r3, [pc, #176]	; (8008ce0 <HTS221_0_Probe+0x17c>)
 8008c2e:	685a      	ldr	r2, [r3, #4]
 8008c30:	4b2c      	ldr	r3, [pc, #176]	; (8008ce4 <HTS221_0_Probe+0x180>)
 8008c32:	0092      	lsls	r2, r2, #2
 8008c34:	492c      	ldr	r1, [pc, #176]	; (8008ce8 <HTS221_0_Probe+0x184>)
 8008c36:	50d1      	str	r1, [r2, r3]

      if (EnvDrv[IKS01A3_HTS221_0]->Init(EnvCompObj[IKS01A3_HTS221_0]) != HTS221_OK)
 8008c38:	4b27      	ldr	r3, [pc, #156]	; (8008cd8 <HTS221_0_Probe+0x174>)
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	681a      	ldr	r2, [r3, #0]
 8008c3e:	4b25      	ldr	r3, [pc, #148]	; (8008cd4 <HTS221_0_Probe+0x170>)
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	0018      	movs	r0, r3
 8008c44:	4790      	blx	r2
 8008c46:	1e03      	subs	r3, r0, #0
 8008c48:	d003      	beq.n	8008c52 <HTS221_0_Probe+0xee>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8008c4a:	2305      	movs	r3, #5
 8008c4c:	425b      	negs	r3, r3
 8008c4e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008c50:	e001      	b.n	8008c56 <HTS221_0_Probe+0xf2>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8008c52:	2300      	movs	r3, #0
 8008c54:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_HUMIDITY) == ENV_HUMIDITY) && (cap.Humidity == 1U))
 8008c56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d11d      	bne.n	8008c98 <HTS221_0_Probe+0x134>
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	2204      	movs	r2, #4
 8008c60:	4013      	ands	r3, r2
 8008c62:	d019      	beq.n	8008c98 <HTS221_0_Probe+0x134>
 8008c64:	230c      	movs	r3, #12
 8008c66:	18fb      	adds	r3, r7, r3
 8008c68:	789b      	ldrb	r3, [r3, #2]
 8008c6a:	2b01      	cmp	r3, #1
 8008c6c:	d114      	bne.n	8008c98 <HTS221_0_Probe+0x134>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS01A3_HTS221_0][FunctionIndex[ENV_HUMIDITY]] = (ENV_SENSOR_FuncDrv_t *)(void *)&HTS221_HUM_Driver;
 8008c6e:	4b1c      	ldr	r3, [pc, #112]	; (8008ce0 <HTS221_0_Probe+0x17c>)
 8008c70:	691a      	ldr	r2, [r3, #16]
 8008c72:	4b1c      	ldr	r3, [pc, #112]	; (8008ce4 <HTS221_0_Probe+0x180>)
 8008c74:	0092      	lsls	r2, r2, #2
 8008c76:	491d      	ldr	r1, [pc, #116]	; (8008cec <HTS221_0_Probe+0x188>)
 8008c78:	50d1      	str	r1, [r2, r3]

      if (EnvDrv[IKS01A3_HTS221_0]->Init(EnvCompObj[IKS01A3_HTS221_0]) != HTS221_OK)
 8008c7a:	4b17      	ldr	r3, [pc, #92]	; (8008cd8 <HTS221_0_Probe+0x174>)
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	681a      	ldr	r2, [r3, #0]
 8008c80:	4b14      	ldr	r3, [pc, #80]	; (8008cd4 <HTS221_0_Probe+0x170>)
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	0018      	movs	r0, r3
 8008c86:	4790      	blx	r2
 8008c88:	1e03      	subs	r3, r0, #0
 8008c8a:	d003      	beq.n	8008c94 <HTS221_0_Probe+0x130>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8008c8c:	2305      	movs	r3, #5
 8008c8e:	425b      	negs	r3, r3
 8008c90:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008c92:	e001      	b.n	8008c98 <HTS221_0_Probe+0x134>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8008c94:	2300      	movs	r3, #0
 8008c96:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_PRESSURE) == ENV_PRESSURE))
 8008c98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d106      	bne.n	8008cac <HTS221_0_Probe+0x148>
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	2202      	movs	r2, #2
 8008ca2:	4013      	ands	r3, r2
 8008ca4:	d002      	beq.n	8008cac <HTS221_0_Probe+0x148>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8008ca6:	2305      	movs	r3, #5
 8008ca8:	425b      	negs	r3, r3
 8008caa:	63fb      	str	r3, [r7, #60]	; 0x3c
    }
  }

  return ret;
 8008cac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8008cae:	0018      	movs	r0, r3
 8008cb0:	46bd      	mov	sp, r7
 8008cb2:	b011      	add	sp, #68	; 0x44
 8008cb4:	bd90      	pop	{r4, r7, pc}
 8008cb6:	46c0      	nop			; (mov r8, r8)
 8008cb8:	08001a41 	.word	0x08001a41
 8008cbc:	08001abd 	.word	0x08001abd
 8008cc0:	08001b85 	.word	0x08001b85
 8008cc4:	08001b0d 	.word	0x08001b0d
 8008cc8:	08001bfd 	.word	0x08001bfd
 8008ccc:	20000be4 	.word	0x20000be4
 8008cd0:	20000bd8 	.word	0x20000bd8
 8008cd4:	20000b9c 	.word	0x20000b9c
 8008cd8:	20000bcc 	.word	0x20000bcc
 8008cdc:	200000d0 	.word	0x200000d0
 8008ce0:	20000224 	.word	0x20000224
 8008ce4:	20000ba8 	.word	0x20000ba8
 8008ce8:	200000f4 	.word	0x200000f4
 8008cec:	200000e0 	.word	0x200000e0

08008cf0 <LPS22HH_0_Probe>:
  * @param  Functions Environmental sensor functions. Could be :
  *         - ENV_TEMPERATURE and/or ENV_PRESSURE
  * @retval BSP status
  */
static int32_t LPS22HH_0_Probe(uint32_t Functions)
{
 8008cf0:	b590      	push	{r4, r7, lr}
 8008cf2:	b091      	sub	sp, #68	; 0x44
 8008cf4:	af00      	add	r7, sp, #0
 8008cf6:	6078      	str	r0, [r7, #4]
  LPS22HH_IO_t            io_ctx;
  uint8_t                 id;
  int32_t                 ret = BSP_ERROR_NONE;
 8008cf8:	2300      	movs	r3, #0
 8008cfa:	63fb      	str	r3, [r7, #60]	; 0x3c
  static LPS22HH_Object_t lps22hh_obj_0;
  LPS22HH_Capabilities_t  cap;

  /* Configure the pressure driver */
  io_ctx.BusType     = LPS22HH_I2C_BUS; /* I2C */
 8008cfc:	2120      	movs	r1, #32
 8008cfe:	187b      	adds	r3, r7, r1
 8008d00:	2200      	movs	r2, #0
 8008d02:	609a      	str	r2, [r3, #8]
  io_ctx.Address     = LPS22HH_I2C_ADD_H;
 8008d04:	187b      	adds	r3, r7, r1
 8008d06:	22bb      	movs	r2, #187	; 0xbb
 8008d08:	731a      	strb	r2, [r3, #12]
  io_ctx.Init        = IKS01A3_I2C_Init;
 8008d0a:	187b      	adds	r3, r7, r1
 8008d0c:	4a4e      	ldr	r2, [pc, #312]	; (8008e48 <LPS22HH_0_Probe+0x158>)
 8008d0e:	601a      	str	r2, [r3, #0]
  io_ctx.DeInit      = IKS01A3_I2C_DeInit;
 8008d10:	187b      	adds	r3, r7, r1
 8008d12:	4a4e      	ldr	r2, [pc, #312]	; (8008e4c <LPS22HH_0_Probe+0x15c>)
 8008d14:	605a      	str	r2, [r3, #4]
  io_ctx.ReadReg     = IKS01A3_I2C_ReadReg;
 8008d16:	187b      	adds	r3, r7, r1
 8008d18:	4a4d      	ldr	r2, [pc, #308]	; (8008e50 <LPS22HH_0_Probe+0x160>)
 8008d1a:	615a      	str	r2, [r3, #20]
  io_ctx.WriteReg    = IKS01A3_I2C_WriteReg;
 8008d1c:	187b      	adds	r3, r7, r1
 8008d1e:	4a4d      	ldr	r2, [pc, #308]	; (8008e54 <LPS22HH_0_Probe+0x164>)
 8008d20:	611a      	str	r2, [r3, #16]
  io_ctx.GetTick     = IKS01A3_GetTick;
 8008d22:	187b      	adds	r3, r7, r1
 8008d24:	4a4c      	ldr	r2, [pc, #304]	; (8008e58 <LPS22HH_0_Probe+0x168>)
 8008d26:	619a      	str	r2, [r3, #24]

  if (LPS22HH_RegisterBusIO(&lps22hh_obj_0, &io_ctx) != LPS22HH_OK)
 8008d28:	187a      	adds	r2, r7, r1
 8008d2a:	4b4c      	ldr	r3, [pc, #304]	; (8008e5c <LPS22HH_0_Probe+0x16c>)
 8008d2c:	0011      	movs	r1, r2
 8008d2e:	0018      	movs	r0, r3
 8008d30:	f7fc f97c 	bl	800502c <LPS22HH_RegisterBusIO>
 8008d34:	1e03      	subs	r3, r0, #0
 8008d36:	d003      	beq.n	8008d40 <LPS22HH_0_Probe+0x50>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8008d38:	2307      	movs	r3, #7
 8008d3a:	425b      	negs	r3, r3
 8008d3c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008d3e:	e07d      	b.n	8008e3c <LPS22HH_0_Probe+0x14c>
  }
  else if (LPS22HH_ReadID(&lps22hh_obj_0, &id) != LPS22HH_OK)
 8008d40:	231f      	movs	r3, #31
 8008d42:	18fa      	adds	r2, r7, r3
 8008d44:	4b45      	ldr	r3, [pc, #276]	; (8008e5c <LPS22HH_0_Probe+0x16c>)
 8008d46:	0011      	movs	r1, r2
 8008d48:	0018      	movs	r0, r3
 8008d4a:	f7fc fa14 	bl	8005176 <LPS22HH_ReadID>
 8008d4e:	1e03      	subs	r3, r0, #0
 8008d50:	d003      	beq.n	8008d5a <LPS22HH_0_Probe+0x6a>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8008d52:	2307      	movs	r3, #7
 8008d54:	425b      	negs	r3, r3
 8008d56:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008d58:	e070      	b.n	8008e3c <LPS22HH_0_Probe+0x14c>
  }
  else if (id != LPS22HH_ID)
 8008d5a:	231f      	movs	r3, #31
 8008d5c:	18fb      	adds	r3, r7, r3
 8008d5e:	781b      	ldrb	r3, [r3, #0]
 8008d60:	2bb3      	cmp	r3, #179	; 0xb3
 8008d62:	d003      	beq.n	8008d6c <LPS22HH_0_Probe+0x7c>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8008d64:	2307      	movs	r3, #7
 8008d66:	425b      	negs	r3, r3
 8008d68:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008d6a:	e067      	b.n	8008e3c <LPS22HH_0_Probe+0x14c>
  }
  else
  {
    (void)LPS22HH_GetCapabilities(&lps22hh_obj_0, &cap);
 8008d6c:	240c      	movs	r4, #12
 8008d6e:	193a      	adds	r2, r7, r4
 8008d70:	4b3a      	ldr	r3, [pc, #232]	; (8008e5c <LPS22HH_0_Probe+0x16c>)
 8008d72:	0011      	movs	r1, r2
 8008d74:	0018      	movs	r0, r3
 8008d76:	f7fc fa15 	bl	80051a4 <LPS22HH_GetCapabilities>

    EnvCtx[IKS01A3_LPS22HH_0].Functions = ((uint32_t)cap.Temperature) | ((uint32_t)cap.Pressure << 1) | ((
 8008d7a:	0021      	movs	r1, r4
 8008d7c:	187b      	adds	r3, r7, r1
 8008d7e:	781b      	ldrb	r3, [r3, #0]
 8008d80:	001a      	movs	r2, r3
 8008d82:	187b      	adds	r3, r7, r1
 8008d84:	785b      	ldrb	r3, [r3, #1]
 8008d86:	005b      	lsls	r3, r3, #1
 8008d88:	431a      	orrs	r2, r3
                                            uint32_t)cap.Humidity << 2);
 8008d8a:	187b      	adds	r3, r7, r1
 8008d8c:	789b      	ldrb	r3, [r3, #2]
 8008d8e:	009b      	lsls	r3, r3, #2
    EnvCtx[IKS01A3_LPS22HH_0].Functions = ((uint32_t)cap.Temperature) | ((uint32_t)cap.Pressure << 1) | ((
 8008d90:	431a      	orrs	r2, r3
 8008d92:	4b33      	ldr	r3, [pc, #204]	; (8008e60 <LPS22HH_0_Probe+0x170>)
 8008d94:	605a      	str	r2, [r3, #4]

    EnvCompObj[IKS01A3_LPS22HH_0] = &lps22hh_obj_0;
 8008d96:	4b33      	ldr	r3, [pc, #204]	; (8008e64 <LPS22HH_0_Probe+0x174>)
 8008d98:	4a30      	ldr	r2, [pc, #192]	; (8008e5c <LPS22HH_0_Probe+0x16c>)
 8008d9a:	605a      	str	r2, [r3, #4]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    EnvDrv[IKS01A3_LPS22HH_0] = (ENV_SENSOR_CommonDrv_t *)(void *)&LPS22HH_COMMON_Driver;
 8008d9c:	4b32      	ldr	r3, [pc, #200]	; (8008e68 <LPS22HH_0_Probe+0x178>)
 8008d9e:	4a33      	ldr	r2, [pc, #204]	; (8008e6c <LPS22HH_0_Probe+0x17c>)
 8008da0:	605a      	str	r2, [r3, #4]

    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_TEMPERATURE) == ENV_TEMPERATURE) && (cap.Temperature == 1U))
 8008da2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d11d      	bne.n	8008de4 <LPS22HH_0_Probe+0xf4>
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	2201      	movs	r2, #1
 8008dac:	4013      	ands	r3, r2
 8008dae:	d019      	beq.n	8008de4 <LPS22HH_0_Probe+0xf4>
 8008db0:	187b      	adds	r3, r7, r1
 8008db2:	781b      	ldrb	r3, [r3, #0]
 8008db4:	2b01      	cmp	r3, #1
 8008db6:	d115      	bne.n	8008de4 <LPS22HH_0_Probe+0xf4>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS01A3_LPS22HH_0][FunctionIndex[ENV_TEMPERATURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&LPS22HH_TEMP_Driver;
 8008db8:	4b2d      	ldr	r3, [pc, #180]	; (8008e70 <LPS22HH_0_Probe+0x180>)
 8008dba:	685a      	ldr	r2, [r3, #4]
 8008dbc:	4b2d      	ldr	r3, [pc, #180]	; (8008e74 <LPS22HH_0_Probe+0x184>)
 8008dbe:	3203      	adds	r2, #3
 8008dc0:	0092      	lsls	r2, r2, #2
 8008dc2:	492d      	ldr	r1, [pc, #180]	; (8008e78 <LPS22HH_0_Probe+0x188>)
 8008dc4:	50d1      	str	r1, [r2, r3]

      if (EnvDrv[IKS01A3_LPS22HH_0]->Init(EnvCompObj[IKS01A3_LPS22HH_0]) != LPS22HH_OK)
 8008dc6:	4b28      	ldr	r3, [pc, #160]	; (8008e68 <LPS22HH_0_Probe+0x178>)
 8008dc8:	685b      	ldr	r3, [r3, #4]
 8008dca:	681a      	ldr	r2, [r3, #0]
 8008dcc:	4b25      	ldr	r3, [pc, #148]	; (8008e64 <LPS22HH_0_Probe+0x174>)
 8008dce:	685b      	ldr	r3, [r3, #4]
 8008dd0:	0018      	movs	r0, r3
 8008dd2:	4790      	blx	r2
 8008dd4:	1e03      	subs	r3, r0, #0
 8008dd6:	d003      	beq.n	8008de0 <LPS22HH_0_Probe+0xf0>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8008dd8:	2305      	movs	r3, #5
 8008dda:	425b      	negs	r3, r3
 8008ddc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008dde:	e001      	b.n	8008de4 <LPS22HH_0_Probe+0xf4>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8008de0:	2300      	movs	r3, #0
 8008de2:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_PRESSURE) == ENV_PRESSURE) && (cap.Pressure == 1U))
 8008de4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d11e      	bne.n	8008e28 <LPS22HH_0_Probe+0x138>
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	2202      	movs	r2, #2
 8008dee:	4013      	ands	r3, r2
 8008df0:	d01a      	beq.n	8008e28 <LPS22HH_0_Probe+0x138>
 8008df2:	230c      	movs	r3, #12
 8008df4:	18fb      	adds	r3, r7, r3
 8008df6:	785b      	ldrb	r3, [r3, #1]
 8008df8:	2b01      	cmp	r3, #1
 8008dfa:	d115      	bne.n	8008e28 <LPS22HH_0_Probe+0x138>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS01A3_LPS22HH_0][FunctionIndex[ENV_PRESSURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&LPS22HH_PRESS_Driver;
 8008dfc:	4b1c      	ldr	r3, [pc, #112]	; (8008e70 <LPS22HH_0_Probe+0x180>)
 8008dfe:	689a      	ldr	r2, [r3, #8]
 8008e00:	4b1c      	ldr	r3, [pc, #112]	; (8008e74 <LPS22HH_0_Probe+0x184>)
 8008e02:	3203      	adds	r2, #3
 8008e04:	0092      	lsls	r2, r2, #2
 8008e06:	491d      	ldr	r1, [pc, #116]	; (8008e7c <LPS22HH_0_Probe+0x18c>)
 8008e08:	50d1      	str	r1, [r2, r3]

      if (EnvDrv[IKS01A3_LPS22HH_0]->Init(EnvCompObj[IKS01A3_LPS22HH_0]) != LPS22HH_OK)
 8008e0a:	4b17      	ldr	r3, [pc, #92]	; (8008e68 <LPS22HH_0_Probe+0x178>)
 8008e0c:	685b      	ldr	r3, [r3, #4]
 8008e0e:	681a      	ldr	r2, [r3, #0]
 8008e10:	4b14      	ldr	r3, [pc, #80]	; (8008e64 <LPS22HH_0_Probe+0x174>)
 8008e12:	685b      	ldr	r3, [r3, #4]
 8008e14:	0018      	movs	r0, r3
 8008e16:	4790      	blx	r2
 8008e18:	1e03      	subs	r3, r0, #0
 8008e1a:	d003      	beq.n	8008e24 <LPS22HH_0_Probe+0x134>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8008e1c:	2305      	movs	r3, #5
 8008e1e:	425b      	negs	r3, r3
 8008e20:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008e22:	e001      	b.n	8008e28 <LPS22HH_0_Probe+0x138>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8008e24:	2300      	movs	r3, #0
 8008e26:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_HUMIDITY) == ENV_HUMIDITY))
 8008e28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d106      	bne.n	8008e3c <LPS22HH_0_Probe+0x14c>
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	2204      	movs	r2, #4
 8008e32:	4013      	ands	r3, r2
 8008e34:	d002      	beq.n	8008e3c <LPS22HH_0_Probe+0x14c>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8008e36:	2305      	movs	r3, #5
 8008e38:	425b      	negs	r3, r3
 8008e3a:	63fb      	str	r3, [r7, #60]	; 0x3c
    }
  }
  return ret;
 8008e3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8008e3e:	0018      	movs	r0, r3
 8008e40:	46bd      	mov	sp, r7
 8008e42:	b011      	add	sp, #68	; 0x44
 8008e44:	bd90      	pop	{r4, r7, pc}
 8008e46:	46c0      	nop			; (mov r8, r8)
 8008e48:	08001a41 	.word	0x08001a41
 8008e4c:	08001abd 	.word	0x08001abd
 8008e50:	08001b85 	.word	0x08001b85
 8008e54:	08001b0d 	.word	0x08001b0d
 8008e58:	08001bfd 	.word	0x08001bfd
 8008e5c:	20000c10 	.word	0x20000c10
 8008e60:	20000bd8 	.word	0x20000bd8
 8008e64:	20000b9c 	.word	0x20000b9c
 8008e68:	20000bcc 	.word	0x20000bcc
 8008e6c:	20000170 	.word	0x20000170
 8008e70:	20000224 	.word	0x20000224
 8008e74:	20000ba8 	.word	0x20000ba8
 8008e78:	20000194 	.word	0x20000194
 8008e7c:	20000180 	.word	0x20000180

08008e80 <STTS751_0_Probe>:
  * @param  Functions Environmental sensor functions. Could be :
  *         - ENV_TEMPERATURE
  * @retval BSP status
  */
static int32_t STTS751_0_Probe(uint32_t Functions)
{
 8008e80:	b590      	push	{r4, r7, lr}
 8008e82:	b091      	sub	sp, #68	; 0x44
 8008e84:	af00      	add	r7, sp, #0
 8008e86:	6078      	str	r0, [r7, #4]
  STTS751_IO_t            io_ctx;
  uint8_t                 id;
  int32_t                 ret = BSP_ERROR_NONE;
 8008e88:	2300      	movs	r3, #0
 8008e8a:	63fb      	str	r3, [r7, #60]	; 0x3c
  static STTS751_Object_t stts751_obj_0;
  STTS751_Capabilities_t  cap;

  /* Configure the pressure driver */
  io_ctx.BusType     = STTS751_I2C_BUS; /* I2C */
 8008e8c:	2120      	movs	r1, #32
 8008e8e:	187b      	adds	r3, r7, r1
 8008e90:	2200      	movs	r2, #0
 8008e92:	609a      	str	r2, [r3, #8]
  io_ctx.Address     = STTS751_1xxxx_ADD_7K5;
 8008e94:	187b      	adds	r3, r7, r1
 8008e96:	2295      	movs	r2, #149	; 0x95
 8008e98:	731a      	strb	r2, [r3, #12]
  io_ctx.Init        = IKS01A3_I2C_Init;
 8008e9a:	187b      	adds	r3, r7, r1
 8008e9c:	4a42      	ldr	r2, [pc, #264]	; (8008fa8 <STTS751_0_Probe+0x128>)
 8008e9e:	601a      	str	r2, [r3, #0]
  io_ctx.DeInit      = IKS01A3_I2C_DeInit;
 8008ea0:	187b      	adds	r3, r7, r1
 8008ea2:	4a42      	ldr	r2, [pc, #264]	; (8008fac <STTS751_0_Probe+0x12c>)
 8008ea4:	605a      	str	r2, [r3, #4]
  io_ctx.ReadReg     = IKS01A3_I2C_ReadReg;
 8008ea6:	187b      	adds	r3, r7, r1
 8008ea8:	4a41      	ldr	r2, [pc, #260]	; (8008fb0 <STTS751_0_Probe+0x130>)
 8008eaa:	615a      	str	r2, [r3, #20]
  io_ctx.WriteReg    = IKS01A3_I2C_WriteReg;
 8008eac:	187b      	adds	r3, r7, r1
 8008eae:	4a41      	ldr	r2, [pc, #260]	; (8008fb4 <STTS751_0_Probe+0x134>)
 8008eb0:	611a      	str	r2, [r3, #16]
  io_ctx.GetTick     = IKS01A3_GetTick;
 8008eb2:	187b      	adds	r3, r7, r1
 8008eb4:	4a40      	ldr	r2, [pc, #256]	; (8008fb8 <STTS751_0_Probe+0x138>)
 8008eb6:	619a      	str	r2, [r3, #24]

  if (STTS751_RegisterBusIO(&stts751_obj_0, &io_ctx) != STTS751_OK)
 8008eb8:	187a      	adds	r2, r7, r1
 8008eba:	4b40      	ldr	r3, [pc, #256]	; (8008fbc <STTS751_0_Probe+0x13c>)
 8008ebc:	0011      	movs	r1, r2
 8008ebe:	0018      	movs	r0, r3
 8008ec0:	f7fe ff60 	bl	8007d84 <STTS751_RegisterBusIO>
 8008ec4:	1e03      	subs	r3, r0, #0
 8008ec6:	d003      	beq.n	8008ed0 <STTS751_0_Probe+0x50>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8008ec8:	2307      	movs	r3, #7
 8008eca:	425b      	negs	r3, r3
 8008ecc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008ece:	e065      	b.n	8008f9c <STTS751_0_Probe+0x11c>
  }
  else if (STTS751_ReadID(&stts751_obj_0, &id) != STTS751_OK)
 8008ed0:	231f      	movs	r3, #31
 8008ed2:	18fa      	adds	r2, r7, r3
 8008ed4:	4b39      	ldr	r3, [pc, #228]	; (8008fbc <STTS751_0_Probe+0x13c>)
 8008ed6:	0011      	movs	r1, r2
 8008ed8:	0018      	movs	r0, r3
 8008eda:	f7fe ffed 	bl	8007eb8 <STTS751_ReadID>
 8008ede:	1e03      	subs	r3, r0, #0
 8008ee0:	d003      	beq.n	8008eea <STTS751_0_Probe+0x6a>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8008ee2:	2307      	movs	r3, #7
 8008ee4:	425b      	negs	r3, r3
 8008ee6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008ee8:	e058      	b.n	8008f9c <STTS751_0_Probe+0x11c>
  }
  else if (id != STTS751_ID_MAN)
 8008eea:	231f      	movs	r3, #31
 8008eec:	18fb      	adds	r3, r7, r3
 8008eee:	781b      	ldrb	r3, [r3, #0]
 8008ef0:	2b53      	cmp	r3, #83	; 0x53
 8008ef2:	d003      	beq.n	8008efc <STTS751_0_Probe+0x7c>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8008ef4:	2307      	movs	r3, #7
 8008ef6:	425b      	negs	r3, r3
 8008ef8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008efa:	e04f      	b.n	8008f9c <STTS751_0_Probe+0x11c>
  }
  else
  {
    (void)STTS751_GetCapabilities(&stts751_obj_0, &cap);
 8008efc:	240c      	movs	r4, #12
 8008efe:	193a      	adds	r2, r7, r4
 8008f00:	4b2e      	ldr	r3, [pc, #184]	; (8008fbc <STTS751_0_Probe+0x13c>)
 8008f02:	0011      	movs	r1, r2
 8008f04:	0018      	movs	r0, r3
 8008f06:	f7fe fff3 	bl	8007ef0 <STTS751_GetCapabilities>

    EnvCtx[IKS01A3_STTS751_0].Functions = ((uint32_t)cap.Temperature) | ((uint32_t)cap.Pressure << 1) | ((
 8008f0a:	0021      	movs	r1, r4
 8008f0c:	187b      	adds	r3, r7, r1
 8008f0e:	781b      	ldrb	r3, [r3, #0]
 8008f10:	001a      	movs	r2, r3
 8008f12:	187b      	adds	r3, r7, r1
 8008f14:	785b      	ldrb	r3, [r3, #1]
 8008f16:	005b      	lsls	r3, r3, #1
 8008f18:	431a      	orrs	r2, r3
                                            uint32_t)cap.Humidity << 2);
 8008f1a:	187b      	adds	r3, r7, r1
 8008f1c:	789b      	ldrb	r3, [r3, #2]
 8008f1e:	009b      	lsls	r3, r3, #2
    EnvCtx[IKS01A3_STTS751_0].Functions = ((uint32_t)cap.Temperature) | ((uint32_t)cap.Pressure << 1) | ((
 8008f20:	431a      	orrs	r2, r3
 8008f22:	4b27      	ldr	r3, [pc, #156]	; (8008fc0 <STTS751_0_Probe+0x140>)
 8008f24:	609a      	str	r2, [r3, #8]

    EnvCompObj[IKS01A3_STTS751_0] = &stts751_obj_0;
 8008f26:	4b27      	ldr	r3, [pc, #156]	; (8008fc4 <STTS751_0_Probe+0x144>)
 8008f28:	4a24      	ldr	r2, [pc, #144]	; (8008fbc <STTS751_0_Probe+0x13c>)
 8008f2a:	609a      	str	r2, [r3, #8]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    EnvDrv[IKS01A3_STTS751_0] = (ENV_SENSOR_CommonDrv_t *)(void *)&STTS751_COMMON_Driver;
 8008f2c:	4b26      	ldr	r3, [pc, #152]	; (8008fc8 <STTS751_0_Probe+0x148>)
 8008f2e:	4a27      	ldr	r2, [pc, #156]	; (8008fcc <STTS751_0_Probe+0x14c>)
 8008f30:	609a      	str	r2, [r3, #8]

    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_TEMPERATURE) == ENV_TEMPERATURE) && (cap.Temperature == 1U))
 8008f32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d11d      	bne.n	8008f74 <STTS751_0_Probe+0xf4>
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	2201      	movs	r2, #1
 8008f3c:	4013      	ands	r3, r2
 8008f3e:	d019      	beq.n	8008f74 <STTS751_0_Probe+0xf4>
 8008f40:	187b      	adds	r3, r7, r1
 8008f42:	781b      	ldrb	r3, [r3, #0]
 8008f44:	2b01      	cmp	r3, #1
 8008f46:	d115      	bne.n	8008f74 <STTS751_0_Probe+0xf4>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[IKS01A3_STTS751_0][FunctionIndex[ENV_TEMPERATURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&STTS751_TEMP_Driver;
 8008f48:	4b21      	ldr	r3, [pc, #132]	; (8008fd0 <STTS751_0_Probe+0x150>)
 8008f4a:	685a      	ldr	r2, [r3, #4]
 8008f4c:	4b21      	ldr	r3, [pc, #132]	; (8008fd4 <STTS751_0_Probe+0x154>)
 8008f4e:	3206      	adds	r2, #6
 8008f50:	0092      	lsls	r2, r2, #2
 8008f52:	4921      	ldr	r1, [pc, #132]	; (8008fd8 <STTS751_0_Probe+0x158>)
 8008f54:	50d1      	str	r1, [r2, r3]

      if (EnvDrv[IKS01A3_STTS751_0]->Init(EnvCompObj[IKS01A3_STTS751_0]) != STTS751_OK)
 8008f56:	4b1c      	ldr	r3, [pc, #112]	; (8008fc8 <STTS751_0_Probe+0x148>)
 8008f58:	689b      	ldr	r3, [r3, #8]
 8008f5a:	681a      	ldr	r2, [r3, #0]
 8008f5c:	4b19      	ldr	r3, [pc, #100]	; (8008fc4 <STTS751_0_Probe+0x144>)
 8008f5e:	689b      	ldr	r3, [r3, #8]
 8008f60:	0018      	movs	r0, r3
 8008f62:	4790      	blx	r2
 8008f64:	1e03      	subs	r3, r0, #0
 8008f66:	d003      	beq.n	8008f70 <STTS751_0_Probe+0xf0>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8008f68:	2305      	movs	r3, #5
 8008f6a:	425b      	negs	r3, r3
 8008f6c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008f6e:	e001      	b.n	8008f74 <STTS751_0_Probe+0xf4>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8008f70:	2300      	movs	r3, #0
 8008f72:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_HUMIDITY) == ENV_HUMIDITY))
 8008f74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d106      	bne.n	8008f88 <STTS751_0_Probe+0x108>
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	2204      	movs	r2, #4
 8008f7e:	4013      	ands	r3, r2
 8008f80:	d002      	beq.n	8008f88 <STTS751_0_Probe+0x108>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8008f82:	2305      	movs	r3, #5
 8008f84:	425b      	negs	r3, r3
 8008f86:	63fb      	str	r3, [r7, #60]	; 0x3c
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_PRESSURE) == ENV_PRESSURE))
 8008f88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d106      	bne.n	8008f9c <STTS751_0_Probe+0x11c>
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	2202      	movs	r2, #2
 8008f92:	4013      	ands	r3, r2
 8008f94:	d002      	beq.n	8008f9c <STTS751_0_Probe+0x11c>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8008f96:	2305      	movs	r3, #5
 8008f98:	425b      	negs	r3, r3
 8008f9a:	63fb      	str	r3, [r7, #60]	; 0x3c
    }
  }
  return ret;
 8008f9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8008f9e:	0018      	movs	r0, r3
 8008fa0:	46bd      	mov	sp, r7
 8008fa2:	b011      	add	sp, #68	; 0x44
 8008fa4:	bd90      	pop	{r4, r7, pc}
 8008fa6:	46c0      	nop			; (mov r8, r8)
 8008fa8:	08001a41 	.word	0x08001a41
 8008fac:	08001abd 	.word	0x08001abd
 8008fb0:	08001b85 	.word	0x08001b85
 8008fb4:	08001b0d 	.word	0x08001b0d
 8008fb8:	08001bfd 	.word	0x08001bfd
 8008fbc:	20000c3c 	.word	0x20000c3c
 8008fc0:	20000bd8 	.word	0x20000bd8
 8008fc4:	20000b9c 	.word	0x20000b9c
 8008fc8:	20000bcc 	.word	0x20000bcc
 8008fcc:	20000200 	.word	0x20000200
 8008fd0:	20000224 	.word	0x20000224
 8008fd4:	20000ba8 	.word	0x20000ba8
 8008fd8:	20000210 	.word	0x20000210

08008fdc <IKS01A3_MOTION_SENSOR_Init>:
  *         - MOTION_ACCELERO for instance 1
  *         - MOTION_MAGNETO for instance 2
  * @retval BSP status
  */
int32_t IKS01A3_MOTION_SENSOR_Init(uint32_t Instance, uint32_t Functions)
{
 8008fdc:	b580      	push	{r7, lr}
 8008fde:	b08e      	sub	sp, #56	; 0x38
 8008fe0:	af00      	add	r7, sp, #0
 8008fe2:	6078      	str	r0, [r7, #4]
 8008fe4:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8008fe6:	2300      	movs	r3, #0
 8008fe8:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t function = MOTION_GYRO;
 8008fea:	2301      	movs	r3, #1
 8008fec:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t i;
  uint32_t component_functions = 0;
 8008fee:	2300      	movs	r3, #0
 8008ff0:	62bb      	str	r3, [r7, #40]	; 0x28
  IKS01A3_MOTION_SENSOR_Capabilities_t cap;

  switch (Instance)
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	2b02      	cmp	r3, #2
 8008ff6:	d100      	bne.n	8008ffa <IKS01A3_MOTION_SENSOR_Init+0x1e>
 8008ff8:	e079      	b.n	80090ee <IKS01A3_MOTION_SENSOR_Init+0x112>
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	2b02      	cmp	r3, #2
 8008ffe:	d900      	bls.n	8009002 <IKS01A3_MOTION_SENSOR_Init+0x26>
 8009000:	e0ac      	b.n	800915c <IKS01A3_MOTION_SENSOR_Init+0x180>
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	2b00      	cmp	r3, #0
 8009006:	d003      	beq.n	8009010 <IKS01A3_MOTION_SENSOR_Init+0x34>
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	2b01      	cmp	r3, #1
 800900c:	d038      	beq.n	8009080 <IKS01A3_MOTION_SENSOR_Init+0xa4>
 800900e:	e0a5      	b.n	800915c <IKS01A3_MOTION_SENSOR_Init+0x180>
  {
#if (USE_IKS01A3_MOTION_SENSOR_LSM6DSO_0 == 1)
    case IKS01A3_LSM6DSO_0:
      if (LSM6DSO_0_Probe(Functions) != BSP_ERROR_NONE)
 8009010:	683b      	ldr	r3, [r7, #0]
 8009012:	0018      	movs	r0, r3
 8009014:	f000 fa3e 	bl	8009494 <LSM6DSO_0_Probe>
 8009018:	1e03      	subs	r3, r0, #0
 800901a:	d002      	beq.n	8009022 <IKS01A3_MOTION_SENSOR_Init+0x46>
      {
        return BSP_ERROR_NO_INIT;
 800901c:	2301      	movs	r3, #1
 800901e:	425b      	negs	r3, r3
 8009020:	e0db      	b.n	80091da <IKS01A3_MOTION_SENSOR_Init+0x1fe>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8009022:	4b70      	ldr	r3, [pc, #448]	; (80091e4 <IKS01A3_MOTION_SENSOR_Init+0x208>)
 8009024:	687a      	ldr	r2, [r7, #4]
 8009026:	0092      	lsls	r2, r2, #2
 8009028:	58d3      	ldr	r3, [r2, r3]
 800902a:	68db      	ldr	r3, [r3, #12]
 800902c:	4a6e      	ldr	r2, [pc, #440]	; (80091e8 <IKS01A3_MOTION_SENSOR_Init+0x20c>)
 800902e:	6879      	ldr	r1, [r7, #4]
 8009030:	0089      	lsls	r1, r1, #2
 8009032:	588a      	ldr	r2, [r1, r2]
 8009034:	210c      	movs	r1, #12
 8009036:	1879      	adds	r1, r7, r1
 8009038:	0010      	movs	r0, r2
 800903a:	4798      	blx	r3
 800903c:	1e03      	subs	r3, r0, #0
 800903e:	d002      	beq.n	8009046 <IKS01A3_MOTION_SENSOR_Init+0x6a>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 8009040:	2307      	movs	r3, #7
 8009042:	425b      	negs	r3, r3
 8009044:	e0c9      	b.n	80091da <IKS01A3_MOTION_SENSOR_Init+0x1fe>
      }
      if (cap.Acc == 1U)
 8009046:	230c      	movs	r3, #12
 8009048:	18fb      	adds	r3, r7, r3
 800904a:	781b      	ldrb	r3, [r3, #0]
 800904c:	2b01      	cmp	r3, #1
 800904e:	d103      	bne.n	8009058 <IKS01A3_MOTION_SENSOR_Init+0x7c>
      {
        component_functions |= MOTION_ACCELERO;
 8009050:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009052:	2202      	movs	r2, #2
 8009054:	4313      	orrs	r3, r2
 8009056:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Gyro == 1U)
 8009058:	230c      	movs	r3, #12
 800905a:	18fb      	adds	r3, r7, r3
 800905c:	785b      	ldrb	r3, [r3, #1]
 800905e:	2b01      	cmp	r3, #1
 8009060:	d103      	bne.n	800906a <IKS01A3_MOTION_SENSOR_Init+0x8e>
      {
        component_functions |= MOTION_GYRO;
 8009062:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009064:	2201      	movs	r2, #1
 8009066:	4313      	orrs	r3, r2
 8009068:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Magneto == 1U)
 800906a:	230c      	movs	r3, #12
 800906c:	18fb      	adds	r3, r7, r3
 800906e:	789b      	ldrb	r3, [r3, #2]
 8009070:	2b01      	cmp	r3, #1
 8009072:	d000      	beq.n	8009076 <IKS01A3_MOTION_SENSOR_Init+0x9a>
 8009074:	e076      	b.n	8009164 <IKS01A3_MOTION_SENSOR_Init+0x188>
      {
        component_functions |= MOTION_MAGNETO;
 8009076:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009078:	2204      	movs	r2, #4
 800907a:	4313      	orrs	r3, r2
 800907c:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      break;
 800907e:	e071      	b.n	8009164 <IKS01A3_MOTION_SENSOR_Init+0x188>
#endif

#if (USE_IKS01A3_MOTION_SENSOR_LIS2DW12_0 == 1)
    case IKS01A3_LIS2DW12_0:
      if (LIS2DW12_0_Probe(Functions) != BSP_ERROR_NONE)
 8009080:	683b      	ldr	r3, [r7, #0]
 8009082:	0018      	movs	r0, r3
 8009084:	f000 facc 	bl	8009620 <LIS2DW12_0_Probe>
 8009088:	1e03      	subs	r3, r0, #0
 800908a:	d002      	beq.n	8009092 <IKS01A3_MOTION_SENSOR_Init+0xb6>
      {
        return BSP_ERROR_NO_INIT;
 800908c:	2301      	movs	r3, #1
 800908e:	425b      	negs	r3, r3
 8009090:	e0a3      	b.n	80091da <IKS01A3_MOTION_SENSOR_Init+0x1fe>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8009092:	4b54      	ldr	r3, [pc, #336]	; (80091e4 <IKS01A3_MOTION_SENSOR_Init+0x208>)
 8009094:	687a      	ldr	r2, [r7, #4]
 8009096:	0092      	lsls	r2, r2, #2
 8009098:	58d3      	ldr	r3, [r2, r3]
 800909a:	68db      	ldr	r3, [r3, #12]
 800909c:	4a52      	ldr	r2, [pc, #328]	; (80091e8 <IKS01A3_MOTION_SENSOR_Init+0x20c>)
 800909e:	6879      	ldr	r1, [r7, #4]
 80090a0:	0089      	lsls	r1, r1, #2
 80090a2:	588a      	ldr	r2, [r1, r2]
 80090a4:	210c      	movs	r1, #12
 80090a6:	1879      	adds	r1, r7, r1
 80090a8:	0010      	movs	r0, r2
 80090aa:	4798      	blx	r3
 80090ac:	1e03      	subs	r3, r0, #0
 80090ae:	d002      	beq.n	80090b6 <IKS01A3_MOTION_SENSOR_Init+0xda>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 80090b0:	2307      	movs	r3, #7
 80090b2:	425b      	negs	r3, r3
 80090b4:	e091      	b.n	80091da <IKS01A3_MOTION_SENSOR_Init+0x1fe>
      }
      if (cap.Acc == 1U)
 80090b6:	230c      	movs	r3, #12
 80090b8:	18fb      	adds	r3, r7, r3
 80090ba:	781b      	ldrb	r3, [r3, #0]
 80090bc:	2b01      	cmp	r3, #1
 80090be:	d103      	bne.n	80090c8 <IKS01A3_MOTION_SENSOR_Init+0xec>
      {
        component_functions |= MOTION_ACCELERO;
 80090c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090c2:	2202      	movs	r2, #2
 80090c4:	4313      	orrs	r3, r2
 80090c6:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Gyro == 1U)
 80090c8:	230c      	movs	r3, #12
 80090ca:	18fb      	adds	r3, r7, r3
 80090cc:	785b      	ldrb	r3, [r3, #1]
 80090ce:	2b01      	cmp	r3, #1
 80090d0:	d103      	bne.n	80090da <IKS01A3_MOTION_SENSOR_Init+0xfe>
      {
        component_functions |= MOTION_GYRO;
 80090d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090d4:	2201      	movs	r2, #1
 80090d6:	4313      	orrs	r3, r2
 80090d8:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Magneto == 1U)
 80090da:	230c      	movs	r3, #12
 80090dc:	18fb      	adds	r3, r7, r3
 80090de:	789b      	ldrb	r3, [r3, #2]
 80090e0:	2b01      	cmp	r3, #1
 80090e2:	d141      	bne.n	8009168 <IKS01A3_MOTION_SENSOR_Init+0x18c>
      {
        component_functions |= MOTION_MAGNETO;
 80090e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090e6:	2204      	movs	r2, #4
 80090e8:	4313      	orrs	r3, r2
 80090ea:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      break;
 80090ec:	e03c      	b.n	8009168 <IKS01A3_MOTION_SENSOR_Init+0x18c>
#endif

#if (USE_IKS01A3_MOTION_SENSOR_LIS2MDL_0 == 1)
    case IKS01A3_LIS2MDL_0:
      if (LIS2MDL_0_Probe(Functions) != BSP_ERROR_NONE)
 80090ee:	683b      	ldr	r3, [r7, #0]
 80090f0:	0018      	movs	r0, r3
 80090f2:	f000 fb43 	bl	800977c <LIS2MDL_0_Probe>
 80090f6:	1e03      	subs	r3, r0, #0
 80090f8:	d002      	beq.n	8009100 <IKS01A3_MOTION_SENSOR_Init+0x124>
      {
        return BSP_ERROR_NO_INIT;
 80090fa:	2301      	movs	r3, #1
 80090fc:	425b      	negs	r3, r3
 80090fe:	e06c      	b.n	80091da <IKS01A3_MOTION_SENSOR_Init+0x1fe>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8009100:	4b38      	ldr	r3, [pc, #224]	; (80091e4 <IKS01A3_MOTION_SENSOR_Init+0x208>)
 8009102:	687a      	ldr	r2, [r7, #4]
 8009104:	0092      	lsls	r2, r2, #2
 8009106:	58d3      	ldr	r3, [r2, r3]
 8009108:	68db      	ldr	r3, [r3, #12]
 800910a:	4a37      	ldr	r2, [pc, #220]	; (80091e8 <IKS01A3_MOTION_SENSOR_Init+0x20c>)
 800910c:	6879      	ldr	r1, [r7, #4]
 800910e:	0089      	lsls	r1, r1, #2
 8009110:	588a      	ldr	r2, [r1, r2]
 8009112:	210c      	movs	r1, #12
 8009114:	1879      	adds	r1, r7, r1
 8009116:	0010      	movs	r0, r2
 8009118:	4798      	blx	r3
 800911a:	1e03      	subs	r3, r0, #0
 800911c:	d002      	beq.n	8009124 <IKS01A3_MOTION_SENSOR_Init+0x148>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 800911e:	2307      	movs	r3, #7
 8009120:	425b      	negs	r3, r3
 8009122:	e05a      	b.n	80091da <IKS01A3_MOTION_SENSOR_Init+0x1fe>
      }
      if (cap.Acc == 1U)
 8009124:	230c      	movs	r3, #12
 8009126:	18fb      	adds	r3, r7, r3
 8009128:	781b      	ldrb	r3, [r3, #0]
 800912a:	2b01      	cmp	r3, #1
 800912c:	d103      	bne.n	8009136 <IKS01A3_MOTION_SENSOR_Init+0x15a>
      {
        component_functions |= MOTION_ACCELERO;
 800912e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009130:	2202      	movs	r2, #2
 8009132:	4313      	orrs	r3, r2
 8009134:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Gyro == 1U)
 8009136:	230c      	movs	r3, #12
 8009138:	18fb      	adds	r3, r7, r3
 800913a:	785b      	ldrb	r3, [r3, #1]
 800913c:	2b01      	cmp	r3, #1
 800913e:	d103      	bne.n	8009148 <IKS01A3_MOTION_SENSOR_Init+0x16c>
      {
        component_functions |= MOTION_GYRO;
 8009140:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009142:	2201      	movs	r2, #1
 8009144:	4313      	orrs	r3, r2
 8009146:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Magneto == 1U)
 8009148:	230c      	movs	r3, #12
 800914a:	18fb      	adds	r3, r7, r3
 800914c:	789b      	ldrb	r3, [r3, #2]
 800914e:	2b01      	cmp	r3, #1
 8009150:	d10c      	bne.n	800916c <IKS01A3_MOTION_SENSOR_Init+0x190>
      {
        component_functions |= MOTION_MAGNETO;
 8009152:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009154:	2204      	movs	r2, #4
 8009156:	4313      	orrs	r3, r2
 8009158:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      break;
 800915a:	e007      	b.n	800916c <IKS01A3_MOTION_SENSOR_Init+0x190>
      }
      break;
#endif

    default:
      ret = BSP_ERROR_WRONG_PARAM;
 800915c:	2302      	movs	r3, #2
 800915e:	425b      	negs	r3, r3
 8009160:	637b      	str	r3, [r7, #52]	; 0x34
      break;
 8009162:	e004      	b.n	800916e <IKS01A3_MOTION_SENSOR_Init+0x192>
      break;
 8009164:	46c0      	nop			; (mov r8, r8)
 8009166:	e002      	b.n	800916e <IKS01A3_MOTION_SENSOR_Init+0x192>
      break;
 8009168:	46c0      	nop			; (mov r8, r8)
 800916a:	e000      	b.n	800916e <IKS01A3_MOTION_SENSOR_Init+0x192>
      break;
 800916c:	46c0      	nop			; (mov r8, r8)
  }

  if (ret != BSP_ERROR_NONE)
 800916e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009170:	2b00      	cmp	r3, #0
 8009172:	d001      	beq.n	8009178 <IKS01A3_MOTION_SENSOR_Init+0x19c>
  {
    return ret;
 8009174:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009176:	e030      	b.n	80091da <IKS01A3_MOTION_SENSOR_Init+0x1fe>
  }

  for (i = 0; i < IKS01A3_MOTION_FUNCTIONS_NBR; i++)
 8009178:	2300      	movs	r3, #0
 800917a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800917c:	e029      	b.n	80091d2 <IKS01A3_MOTION_SENSOR_Init+0x1f6>
  {
    if (((Functions & function) == function) && ((component_functions & function) == function))
 800917e:	683b      	ldr	r3, [r7, #0]
 8009180:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009182:	4013      	ands	r3, r2
 8009184:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009186:	429a      	cmp	r2, r3
 8009188:	d11d      	bne.n	80091c6 <IKS01A3_MOTION_SENSOR_Init+0x1ea>
 800918a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800918c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800918e:	4013      	ands	r3, r2
 8009190:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009192:	429a      	cmp	r2, r3
 8009194:	d117      	bne.n	80091c6 <IKS01A3_MOTION_SENSOR_Init+0x1ea>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[function]]->Enable(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 8009196:	4b15      	ldr	r3, [pc, #84]	; (80091ec <IKS01A3_MOTION_SENSOR_Init+0x210>)
 8009198:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800919a:	0092      	lsls	r2, r2, #2
 800919c:	58d0      	ldr	r0, [r2, r3]
 800919e:	4914      	ldr	r1, [pc, #80]	; (80091f0 <IKS01A3_MOTION_SENSOR_Init+0x214>)
 80091a0:	687a      	ldr	r2, [r7, #4]
 80091a2:	0013      	movs	r3, r2
 80091a4:	005b      	lsls	r3, r3, #1
 80091a6:	189b      	adds	r3, r3, r2
 80091a8:	181b      	adds	r3, r3, r0
 80091aa:	009b      	lsls	r3, r3, #2
 80091ac:	585b      	ldr	r3, [r3, r1]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	4a0d      	ldr	r2, [pc, #52]	; (80091e8 <IKS01A3_MOTION_SENSOR_Init+0x20c>)
 80091b2:	6879      	ldr	r1, [r7, #4]
 80091b4:	0089      	lsls	r1, r1, #2
 80091b6:	588a      	ldr	r2, [r1, r2]
 80091b8:	0010      	movs	r0, r2
 80091ba:	4798      	blx	r3
 80091bc:	1e03      	subs	r3, r0, #0
 80091be:	d002      	beq.n	80091c6 <IKS01A3_MOTION_SENSOR_Init+0x1ea>
      {
        return BSP_ERROR_COMPONENT_FAILURE;
 80091c0:	2305      	movs	r3, #5
 80091c2:	425b      	negs	r3, r3
 80091c4:	e009      	b.n	80091da <IKS01A3_MOTION_SENSOR_Init+0x1fe>
      }
    }
    function = function << 1;
 80091c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091c8:	005b      	lsls	r3, r3, #1
 80091ca:	633b      	str	r3, [r7, #48]	; 0x30
  for (i = 0; i < IKS01A3_MOTION_FUNCTIONS_NBR; i++)
 80091cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091ce:	3301      	adds	r3, #1
 80091d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80091d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091d4:	2b02      	cmp	r3, #2
 80091d6:	d9d2      	bls.n	800917e <IKS01A3_MOTION_SENSOR_Init+0x1a2>
  }

  return ret;
 80091d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80091da:	0018      	movs	r0, r3
 80091dc:	46bd      	mov	sp, r7
 80091de:	b00e      	add	sp, #56	; 0x38
 80091e0:	bd80      	pop	{r7, pc}
 80091e2:	46c0      	nop			; (mov r8, r8)
 80091e4:	20000c9c 	.word	0x20000c9c
 80091e8:	20000c6c 	.word	0x20000c6c
 80091ec:	20000238 	.word	0x20000238
 80091f0:	20000c78 	.word	0x20000c78

080091f4 <IKS01A3_MOTION_SENSOR_Enable>:
  *         - MOTION_ACCELERO for instance 1
  *         - MOTION_MAGNETO for instance 2
  * @retval BSP status
  */
int32_t IKS01A3_MOTION_SENSOR_Enable(uint32_t Instance, uint32_t Function)
{
 80091f4:	b580      	push	{r7, lr}
 80091f6:	b084      	sub	sp, #16
 80091f8:	af00      	add	r7, sp, #0
 80091fa:	6078      	str	r0, [r7, #4]
 80091fc:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= IKS01A3_MOTION_INSTANCES_NBR)
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	2b02      	cmp	r3, #2
 8009202:	d903      	bls.n	800920c <IKS01A3_MOTION_SENSOR_Enable+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8009204:	2302      	movs	r3, #2
 8009206:	425b      	negs	r3, r3
 8009208:	60fb      	str	r3, [r7, #12]
 800920a:	e027      	b.n	800925c <IKS01A3_MOTION_SENSOR_Enable+0x68>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 800920c:	4b16      	ldr	r3, [pc, #88]	; (8009268 <IKS01A3_MOTION_SENSOR_Enable+0x74>)
 800920e:	687a      	ldr	r2, [r7, #4]
 8009210:	0092      	lsls	r2, r2, #2
 8009212:	58d3      	ldr	r3, [r2, r3]
 8009214:	683a      	ldr	r2, [r7, #0]
 8009216:	4013      	ands	r3, r2
 8009218:	683a      	ldr	r2, [r7, #0]
 800921a:	429a      	cmp	r2, r3
 800921c:	d11b      	bne.n	8009256 <IKS01A3_MOTION_SENSOR_Enable+0x62>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->Enable(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 800921e:	4b13      	ldr	r3, [pc, #76]	; (800926c <IKS01A3_MOTION_SENSOR_Enable+0x78>)
 8009220:	683a      	ldr	r2, [r7, #0]
 8009222:	0092      	lsls	r2, r2, #2
 8009224:	58d0      	ldr	r0, [r2, r3]
 8009226:	4912      	ldr	r1, [pc, #72]	; (8009270 <IKS01A3_MOTION_SENSOR_Enable+0x7c>)
 8009228:	687a      	ldr	r2, [r7, #4]
 800922a:	0013      	movs	r3, r2
 800922c:	005b      	lsls	r3, r3, #1
 800922e:	189b      	adds	r3, r3, r2
 8009230:	181b      	adds	r3, r3, r0
 8009232:	009b      	lsls	r3, r3, #2
 8009234:	585b      	ldr	r3, [r3, r1]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	4a0e      	ldr	r2, [pc, #56]	; (8009274 <IKS01A3_MOTION_SENSOR_Enable+0x80>)
 800923a:	6879      	ldr	r1, [r7, #4]
 800923c:	0089      	lsls	r1, r1, #2
 800923e:	588a      	ldr	r2, [r1, r2]
 8009240:	0010      	movs	r0, r2
 8009242:	4798      	blx	r3
 8009244:	1e03      	subs	r3, r0, #0
 8009246:	d003      	beq.n	8009250 <IKS01A3_MOTION_SENSOR_Enable+0x5c>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8009248:	2305      	movs	r3, #5
 800924a:	425b      	negs	r3, r3
 800924c:	60fb      	str	r3, [r7, #12]
 800924e:	e005      	b.n	800925c <IKS01A3_MOTION_SENSOR_Enable+0x68>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8009250:	2300      	movs	r3, #0
 8009252:	60fb      	str	r3, [r7, #12]
 8009254:	e002      	b.n	800925c <IKS01A3_MOTION_SENSOR_Enable+0x68>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 8009256:	2302      	movs	r3, #2
 8009258:	425b      	negs	r3, r3
 800925a:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 800925c:	68fb      	ldr	r3, [r7, #12]
}
 800925e:	0018      	movs	r0, r3
 8009260:	46bd      	mov	sp, r7
 8009262:	b004      	add	sp, #16
 8009264:	bd80      	pop	{r7, pc}
 8009266:	46c0      	nop			; (mov r8, r8)
 8009268:	20000ca8 	.word	0x20000ca8
 800926c:	20000238 	.word	0x20000238
 8009270:	20000c78 	.word	0x20000c78
 8009274:	20000c6c 	.word	0x20000c6c

08009278 <IKS01A3_MOTION_SENSOR_Disable>:
  *         - MOTION_ACCELERO for instance 1
  *         - MOTION_MAGNETO for instance 2
  * @retval BSP status
  */
int32_t IKS01A3_MOTION_SENSOR_Disable(uint32_t Instance, uint32_t Function)
{
 8009278:	b580      	push	{r7, lr}
 800927a:	b084      	sub	sp, #16
 800927c:	af00      	add	r7, sp, #0
 800927e:	6078      	str	r0, [r7, #4]
 8009280:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= IKS01A3_MOTION_INSTANCES_NBR)
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	2b02      	cmp	r3, #2
 8009286:	d903      	bls.n	8009290 <IKS01A3_MOTION_SENSOR_Disable+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8009288:	2302      	movs	r3, #2
 800928a:	425b      	negs	r3, r3
 800928c:	60fb      	str	r3, [r7, #12]
 800928e:	e027      	b.n	80092e0 <IKS01A3_MOTION_SENSOR_Disable+0x68>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 8009290:	4b16      	ldr	r3, [pc, #88]	; (80092ec <IKS01A3_MOTION_SENSOR_Disable+0x74>)
 8009292:	687a      	ldr	r2, [r7, #4]
 8009294:	0092      	lsls	r2, r2, #2
 8009296:	58d3      	ldr	r3, [r2, r3]
 8009298:	683a      	ldr	r2, [r7, #0]
 800929a:	4013      	ands	r3, r2
 800929c:	683a      	ldr	r2, [r7, #0]
 800929e:	429a      	cmp	r2, r3
 80092a0:	d11b      	bne.n	80092da <IKS01A3_MOTION_SENSOR_Disable+0x62>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->Disable(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 80092a2:	4b13      	ldr	r3, [pc, #76]	; (80092f0 <IKS01A3_MOTION_SENSOR_Disable+0x78>)
 80092a4:	683a      	ldr	r2, [r7, #0]
 80092a6:	0092      	lsls	r2, r2, #2
 80092a8:	58d0      	ldr	r0, [r2, r3]
 80092aa:	4912      	ldr	r1, [pc, #72]	; (80092f4 <IKS01A3_MOTION_SENSOR_Disable+0x7c>)
 80092ac:	687a      	ldr	r2, [r7, #4]
 80092ae:	0013      	movs	r3, r2
 80092b0:	005b      	lsls	r3, r3, #1
 80092b2:	189b      	adds	r3, r3, r2
 80092b4:	181b      	adds	r3, r3, r0
 80092b6:	009b      	lsls	r3, r3, #2
 80092b8:	585b      	ldr	r3, [r3, r1]
 80092ba:	685b      	ldr	r3, [r3, #4]
 80092bc:	4a0e      	ldr	r2, [pc, #56]	; (80092f8 <IKS01A3_MOTION_SENSOR_Disable+0x80>)
 80092be:	6879      	ldr	r1, [r7, #4]
 80092c0:	0089      	lsls	r1, r1, #2
 80092c2:	588a      	ldr	r2, [r1, r2]
 80092c4:	0010      	movs	r0, r2
 80092c6:	4798      	blx	r3
 80092c8:	1e03      	subs	r3, r0, #0
 80092ca:	d003      	beq.n	80092d4 <IKS01A3_MOTION_SENSOR_Disable+0x5c>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80092cc:	2305      	movs	r3, #5
 80092ce:	425b      	negs	r3, r3
 80092d0:	60fb      	str	r3, [r7, #12]
 80092d2:	e005      	b.n	80092e0 <IKS01A3_MOTION_SENSOR_Disable+0x68>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 80092d4:	2300      	movs	r3, #0
 80092d6:	60fb      	str	r3, [r7, #12]
 80092d8:	e002      	b.n	80092e0 <IKS01A3_MOTION_SENSOR_Disable+0x68>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 80092da:	2302      	movs	r3, #2
 80092dc:	425b      	negs	r3, r3
 80092de:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 80092e0:	68fb      	ldr	r3, [r7, #12]
}
 80092e2:	0018      	movs	r0, r3
 80092e4:	46bd      	mov	sp, r7
 80092e6:	b004      	add	sp, #16
 80092e8:	bd80      	pop	{r7, pc}
 80092ea:	46c0      	nop			; (mov r8, r8)
 80092ec:	20000ca8 	.word	0x20000ca8
 80092f0:	20000238 	.word	0x20000238
 80092f4:	20000c78 	.word	0x20000c78
 80092f8:	20000c6c 	.word	0x20000c6c

080092fc <IKS01A3_MOTION_SENSOR_GetAxes>:
  *         - MOTION_MAGNETO for instance 2
  * @param  Axes pointer to axes data structure
  * @retval BSP status
  */
int32_t IKS01A3_MOTION_SENSOR_GetAxes(uint32_t Instance, uint32_t Function, IKS01A3_MOTION_SENSOR_Axes_t *Axes)
{
 80092fc:	b580      	push	{r7, lr}
 80092fe:	b086      	sub	sp, #24
 8009300:	af00      	add	r7, sp, #0
 8009302:	60f8      	str	r0, [r7, #12]
 8009304:	60b9      	str	r1, [r7, #8]
 8009306:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= IKS01A3_MOTION_INSTANCES_NBR)
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	2b02      	cmp	r3, #2
 800930c:	d903      	bls.n	8009316 <IKS01A3_MOTION_SENSOR_GetAxes+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800930e:	2302      	movs	r3, #2
 8009310:	425b      	negs	r3, r3
 8009312:	617b      	str	r3, [r7, #20]
 8009314:	e028      	b.n	8009368 <IKS01A3_MOTION_SENSOR_GetAxes+0x6c>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 8009316:	4b17      	ldr	r3, [pc, #92]	; (8009374 <IKS01A3_MOTION_SENSOR_GetAxes+0x78>)
 8009318:	68fa      	ldr	r2, [r7, #12]
 800931a:	0092      	lsls	r2, r2, #2
 800931c:	58d3      	ldr	r3, [r2, r3]
 800931e:	68ba      	ldr	r2, [r7, #8]
 8009320:	4013      	ands	r3, r2
 8009322:	68ba      	ldr	r2, [r7, #8]
 8009324:	429a      	cmp	r2, r3
 8009326:	d11c      	bne.n	8009362 <IKS01A3_MOTION_SENSOR_GetAxes+0x66>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->GetAxes(MotionCompObj[Instance], Axes) != BSP_ERROR_NONE)
 8009328:	4b13      	ldr	r3, [pc, #76]	; (8009378 <IKS01A3_MOTION_SENSOR_GetAxes+0x7c>)
 800932a:	68ba      	ldr	r2, [r7, #8]
 800932c:	0092      	lsls	r2, r2, #2
 800932e:	58d0      	ldr	r0, [r2, r3]
 8009330:	4912      	ldr	r1, [pc, #72]	; (800937c <IKS01A3_MOTION_SENSOR_GetAxes+0x80>)
 8009332:	68fa      	ldr	r2, [r7, #12]
 8009334:	0013      	movs	r3, r2
 8009336:	005b      	lsls	r3, r3, #1
 8009338:	189b      	adds	r3, r3, r2
 800933a:	181b      	adds	r3, r3, r0
 800933c:	009b      	lsls	r3, r3, #2
 800933e:	585b      	ldr	r3, [r3, r1]
 8009340:	69db      	ldr	r3, [r3, #28]
 8009342:	4a0f      	ldr	r2, [pc, #60]	; (8009380 <IKS01A3_MOTION_SENSOR_GetAxes+0x84>)
 8009344:	68f9      	ldr	r1, [r7, #12]
 8009346:	0089      	lsls	r1, r1, #2
 8009348:	588a      	ldr	r2, [r1, r2]
 800934a:	6879      	ldr	r1, [r7, #4]
 800934c:	0010      	movs	r0, r2
 800934e:	4798      	blx	r3
 8009350:	1e03      	subs	r3, r0, #0
 8009352:	d003      	beq.n	800935c <IKS01A3_MOTION_SENSOR_GetAxes+0x60>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8009354:	2305      	movs	r3, #5
 8009356:	425b      	negs	r3, r3
 8009358:	617b      	str	r3, [r7, #20]
 800935a:	e005      	b.n	8009368 <IKS01A3_MOTION_SENSOR_GetAxes+0x6c>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800935c:	2300      	movs	r3, #0
 800935e:	617b      	str	r3, [r7, #20]
 8009360:	e002      	b.n	8009368 <IKS01A3_MOTION_SENSOR_GetAxes+0x6c>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 8009362:	2302      	movs	r3, #2
 8009364:	425b      	negs	r3, r3
 8009366:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 8009368:	697b      	ldr	r3, [r7, #20]
}
 800936a:	0018      	movs	r0, r3
 800936c:	46bd      	mov	sp, r7
 800936e:	b006      	add	sp, #24
 8009370:	bd80      	pop	{r7, pc}
 8009372:	46c0      	nop			; (mov r8, r8)
 8009374:	20000ca8 	.word	0x20000ca8
 8009378:	20000238 	.word	0x20000238
 800937c:	20000c78 	.word	0x20000c78
 8009380:	20000c6c 	.word	0x20000c6c

08009384 <IKS01A3_MOTION_SENSOR_SetOutputDataRate>:
  *         - MOTION_MAGNETO for instance 2
  * @param  Odr Output Data Rate value to be set
  * @retval BSP status
  */
int32_t IKS01A3_MOTION_SENSOR_SetOutputDataRate(uint32_t Instance, uint32_t Function, float Odr)
{
 8009384:	b580      	push	{r7, lr}
 8009386:	b086      	sub	sp, #24
 8009388:	af00      	add	r7, sp, #0
 800938a:	60f8      	str	r0, [r7, #12]
 800938c:	60b9      	str	r1, [r7, #8]
 800938e:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= IKS01A3_MOTION_INSTANCES_NBR)
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	2b02      	cmp	r3, #2
 8009394:	d903      	bls.n	800939e <IKS01A3_MOTION_SENSOR_SetOutputDataRate+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8009396:	2302      	movs	r3, #2
 8009398:	425b      	negs	r3, r3
 800939a:	617b      	str	r3, [r7, #20]
 800939c:	e028      	b.n	80093f0 <IKS01A3_MOTION_SENSOR_SetOutputDataRate+0x6c>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 800939e:	4b17      	ldr	r3, [pc, #92]	; (80093fc <IKS01A3_MOTION_SENSOR_SetOutputDataRate+0x78>)
 80093a0:	68fa      	ldr	r2, [r7, #12]
 80093a2:	0092      	lsls	r2, r2, #2
 80093a4:	58d3      	ldr	r3, [r2, r3]
 80093a6:	68ba      	ldr	r2, [r7, #8]
 80093a8:	4013      	ands	r3, r2
 80093aa:	68ba      	ldr	r2, [r7, #8]
 80093ac:	429a      	cmp	r2, r3
 80093ae:	d11c      	bne.n	80093ea <IKS01A3_MOTION_SENSOR_SetOutputDataRate+0x66>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->SetOutputDataRate(MotionCompObj[Instance], Odr) != BSP_ERROR_NONE)
 80093b0:	4b13      	ldr	r3, [pc, #76]	; (8009400 <IKS01A3_MOTION_SENSOR_SetOutputDataRate+0x7c>)
 80093b2:	68ba      	ldr	r2, [r7, #8]
 80093b4:	0092      	lsls	r2, r2, #2
 80093b6:	58d0      	ldr	r0, [r2, r3]
 80093b8:	4912      	ldr	r1, [pc, #72]	; (8009404 <IKS01A3_MOTION_SENSOR_SetOutputDataRate+0x80>)
 80093ba:	68fa      	ldr	r2, [r7, #12]
 80093bc:	0013      	movs	r3, r2
 80093be:	005b      	lsls	r3, r3, #1
 80093c0:	189b      	adds	r3, r3, r2
 80093c2:	181b      	adds	r3, r3, r0
 80093c4:	009b      	lsls	r3, r3, #2
 80093c6:	585b      	ldr	r3, [r3, r1]
 80093c8:	691b      	ldr	r3, [r3, #16]
 80093ca:	4a0f      	ldr	r2, [pc, #60]	; (8009408 <IKS01A3_MOTION_SENSOR_SetOutputDataRate+0x84>)
 80093cc:	68f9      	ldr	r1, [r7, #12]
 80093ce:	0089      	lsls	r1, r1, #2
 80093d0:	588a      	ldr	r2, [r1, r2]
 80093d2:	6879      	ldr	r1, [r7, #4]
 80093d4:	0010      	movs	r0, r2
 80093d6:	4798      	blx	r3
 80093d8:	1e03      	subs	r3, r0, #0
 80093da:	d003      	beq.n	80093e4 <IKS01A3_MOTION_SENSOR_SetOutputDataRate+0x60>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80093dc:	2305      	movs	r3, #5
 80093de:	425b      	negs	r3, r3
 80093e0:	617b      	str	r3, [r7, #20]
 80093e2:	e005      	b.n	80093f0 <IKS01A3_MOTION_SENSOR_SetOutputDataRate+0x6c>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 80093e4:	2300      	movs	r3, #0
 80093e6:	617b      	str	r3, [r7, #20]
 80093e8:	e002      	b.n	80093f0 <IKS01A3_MOTION_SENSOR_SetOutputDataRate+0x6c>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 80093ea:	2302      	movs	r3, #2
 80093ec:	425b      	negs	r3, r3
 80093ee:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 80093f0:	697b      	ldr	r3, [r7, #20]
}
 80093f2:	0018      	movs	r0, r3
 80093f4:	46bd      	mov	sp, r7
 80093f6:	b006      	add	sp, #24
 80093f8:	bd80      	pop	{r7, pc}
 80093fa:	46c0      	nop			; (mov r8, r8)
 80093fc:	20000ca8 	.word	0x20000ca8
 8009400:	20000238 	.word	0x20000238
 8009404:	20000c78 	.word	0x20000c78
 8009408:	20000c6c 	.word	0x20000c6c

0800940c <IKS01A3_MOTION_SENSOR_SetFullScale>:
  *         - MOTION_MAGNETO for instance 2
  * @param  Fullscale Fullscale value to be set
  * @retval BSP status
  */
int32_t IKS01A3_MOTION_SENSOR_SetFullScale(uint32_t Instance, uint32_t Function, int32_t Fullscale)
{
 800940c:	b580      	push	{r7, lr}
 800940e:	b086      	sub	sp, #24
 8009410:	af00      	add	r7, sp, #0
 8009412:	60f8      	str	r0, [r7, #12]
 8009414:	60b9      	str	r1, [r7, #8]
 8009416:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= IKS01A3_MOTION_INSTANCES_NBR)
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	2b02      	cmp	r3, #2
 800941c:	d903      	bls.n	8009426 <IKS01A3_MOTION_SENSOR_SetFullScale+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800941e:	2302      	movs	r3, #2
 8009420:	425b      	negs	r3, r3
 8009422:	617b      	str	r3, [r7, #20]
 8009424:	e028      	b.n	8009478 <IKS01A3_MOTION_SENSOR_SetFullScale+0x6c>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 8009426:	4b17      	ldr	r3, [pc, #92]	; (8009484 <IKS01A3_MOTION_SENSOR_SetFullScale+0x78>)
 8009428:	68fa      	ldr	r2, [r7, #12]
 800942a:	0092      	lsls	r2, r2, #2
 800942c:	58d3      	ldr	r3, [r2, r3]
 800942e:	68ba      	ldr	r2, [r7, #8]
 8009430:	4013      	ands	r3, r2
 8009432:	68ba      	ldr	r2, [r7, #8]
 8009434:	429a      	cmp	r2, r3
 8009436:	d11c      	bne.n	8009472 <IKS01A3_MOTION_SENSOR_SetFullScale+0x66>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->SetFullScale(MotionCompObj[Instance],
 8009438:	4b13      	ldr	r3, [pc, #76]	; (8009488 <IKS01A3_MOTION_SENSOR_SetFullScale+0x7c>)
 800943a:	68ba      	ldr	r2, [r7, #8]
 800943c:	0092      	lsls	r2, r2, #2
 800943e:	58d0      	ldr	r0, [r2, r3]
 8009440:	4912      	ldr	r1, [pc, #72]	; (800948c <IKS01A3_MOTION_SENSOR_SetFullScale+0x80>)
 8009442:	68fa      	ldr	r2, [r7, #12]
 8009444:	0013      	movs	r3, r2
 8009446:	005b      	lsls	r3, r3, #1
 8009448:	189b      	adds	r3, r3, r2
 800944a:	181b      	adds	r3, r3, r0
 800944c:	009b      	lsls	r3, r3, #2
 800944e:	585b      	ldr	r3, [r3, r1]
 8009450:	699b      	ldr	r3, [r3, #24]
 8009452:	4a0f      	ldr	r2, [pc, #60]	; (8009490 <IKS01A3_MOTION_SENSOR_SetFullScale+0x84>)
 8009454:	68f9      	ldr	r1, [r7, #12]
 8009456:	0089      	lsls	r1, r1, #2
 8009458:	588a      	ldr	r2, [r1, r2]
 800945a:	6879      	ldr	r1, [r7, #4]
 800945c:	0010      	movs	r0, r2
 800945e:	4798      	blx	r3
 8009460:	1e03      	subs	r3, r0, #0
 8009462:	d003      	beq.n	800946c <IKS01A3_MOTION_SENSOR_SetFullScale+0x60>
                                                                         Fullscale) != BSP_ERROR_NONE)
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8009464:	2305      	movs	r3, #5
 8009466:	425b      	negs	r3, r3
 8009468:	617b      	str	r3, [r7, #20]
 800946a:	e005      	b.n	8009478 <IKS01A3_MOTION_SENSOR_SetFullScale+0x6c>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800946c:	2300      	movs	r3, #0
 800946e:	617b      	str	r3, [r7, #20]
 8009470:	e002      	b.n	8009478 <IKS01A3_MOTION_SENSOR_SetFullScale+0x6c>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 8009472:	2302      	movs	r3, #2
 8009474:	425b      	negs	r3, r3
 8009476:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 8009478:	697b      	ldr	r3, [r7, #20]
}
 800947a:	0018      	movs	r0, r3
 800947c:	46bd      	mov	sp, r7
 800947e:	b006      	add	sp, #24
 8009480:	bd80      	pop	{r7, pc}
 8009482:	46c0      	nop			; (mov r8, r8)
 8009484:	20000ca8 	.word	0x20000ca8
 8009488:	20000238 	.word	0x20000238
 800948c:	20000c78 	.word	0x20000c78
 8009490:	20000c6c 	.word	0x20000c6c

08009494 <LSM6DSO_0_Probe>:
/**
  * @brief  Register Bus IOs for instance 0 if component ID is OK
  * @retval BSP status
  */
static int32_t LSM6DSO_0_Probe(uint32_t Functions)
{
 8009494:	b590      	push	{r4, r7, lr}
 8009496:	b093      	sub	sp, #76	; 0x4c
 8009498:	af00      	add	r7, sp, #0
 800949a:	6078      	str	r0, [r7, #4]
  LSM6DSO_IO_t            io_ctx;
  uint8_t                 id;
  static LSM6DSO_Object_t lsm6dso_obj_0;
  LSM6DSO_Capabilities_t  cap;
  int32_t ret = BSP_ERROR_NONE;
 800949c:	2300      	movs	r3, #0
 800949e:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the accelero driver */
  io_ctx.BusType     = LSM6DSO_I2C_BUS; /* I2C */
 80094a0:	2128      	movs	r1, #40	; 0x28
 80094a2:	187b      	adds	r3, r7, r1
 80094a4:	2200      	movs	r2, #0
 80094a6:	609a      	str	r2, [r3, #8]
  io_ctx.Address     = LSM6DSO_I2C_ADD_H;
 80094a8:	187b      	adds	r3, r7, r1
 80094aa:	22d7      	movs	r2, #215	; 0xd7
 80094ac:	731a      	strb	r2, [r3, #12]
  io_ctx.Init        = IKS01A3_I2C_Init;
 80094ae:	187b      	adds	r3, r7, r1
 80094b0:	4a4d      	ldr	r2, [pc, #308]	; (80095e8 <LSM6DSO_0_Probe+0x154>)
 80094b2:	601a      	str	r2, [r3, #0]
  io_ctx.DeInit      = IKS01A3_I2C_DeInit;
 80094b4:	187b      	adds	r3, r7, r1
 80094b6:	4a4d      	ldr	r2, [pc, #308]	; (80095ec <LSM6DSO_0_Probe+0x158>)
 80094b8:	605a      	str	r2, [r3, #4]
  io_ctx.ReadReg     = IKS01A3_I2C_ReadReg;
 80094ba:	187b      	adds	r3, r7, r1
 80094bc:	4a4c      	ldr	r2, [pc, #304]	; (80095f0 <LSM6DSO_0_Probe+0x15c>)
 80094be:	615a      	str	r2, [r3, #20]
  io_ctx.WriteReg    = IKS01A3_I2C_WriteReg;
 80094c0:	187b      	adds	r3, r7, r1
 80094c2:	4a4c      	ldr	r2, [pc, #304]	; (80095f4 <LSM6DSO_0_Probe+0x160>)
 80094c4:	611a      	str	r2, [r3, #16]
  io_ctx.GetTick     = IKS01A3_GetTick;
 80094c6:	187b      	adds	r3, r7, r1
 80094c8:	4a4b      	ldr	r2, [pc, #300]	; (80095f8 <LSM6DSO_0_Probe+0x164>)
 80094ca:	619a      	str	r2, [r3, #24]

  if (LSM6DSO_RegisterBusIO(&lsm6dso_obj_0, &io_ctx) != LSM6DSO_OK)
 80094cc:	187a      	adds	r2, r7, r1
 80094ce:	4b4b      	ldr	r3, [pc, #300]	; (80095fc <LSM6DSO_0_Probe+0x168>)
 80094d0:	0011      	movs	r1, r2
 80094d2:	0018      	movs	r0, r3
 80094d4:	f7fc fc1c 	bl	8005d10 <LSM6DSO_RegisterBusIO>
 80094d8:	1e03      	subs	r3, r0, #0
 80094da:	d003      	beq.n	80094e4 <LSM6DSO_0_Probe+0x50>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80094dc:	2307      	movs	r3, #7
 80094de:	425b      	negs	r3, r3
 80094e0:	647b      	str	r3, [r7, #68]	; 0x44
 80094e2:	e07b      	b.n	80095dc <LSM6DSO_0_Probe+0x148>
  }
  else if (LSM6DSO_ReadID(&lsm6dso_obj_0, &id) != LSM6DSO_OK)
 80094e4:	2327      	movs	r3, #39	; 0x27
 80094e6:	18fa      	adds	r2, r7, r3
 80094e8:	4b44      	ldr	r3, [pc, #272]	; (80095fc <LSM6DSO_0_Probe+0x168>)
 80094ea:	0011      	movs	r1, r2
 80094ec:	0018      	movs	r0, r3
 80094ee:	f7fc fd09 	bl	8005f04 <LSM6DSO_ReadID>
 80094f2:	1e03      	subs	r3, r0, #0
 80094f4:	d003      	beq.n	80094fe <LSM6DSO_0_Probe+0x6a>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80094f6:	2307      	movs	r3, #7
 80094f8:	425b      	negs	r3, r3
 80094fa:	647b      	str	r3, [r7, #68]	; 0x44
 80094fc:	e06e      	b.n	80095dc <LSM6DSO_0_Probe+0x148>
  }
  else if (id != LSM6DSO_ID)
 80094fe:	2327      	movs	r3, #39	; 0x27
 8009500:	18fb      	adds	r3, r7, r3
 8009502:	781b      	ldrb	r3, [r3, #0]
 8009504:	2b6c      	cmp	r3, #108	; 0x6c
 8009506:	d003      	beq.n	8009510 <LSM6DSO_0_Probe+0x7c>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8009508:	2307      	movs	r3, #7
 800950a:	425b      	negs	r3, r3
 800950c:	647b      	str	r3, [r7, #68]	; 0x44
 800950e:	e065      	b.n	80095dc <LSM6DSO_0_Probe+0x148>
  }
  else
  {
    (void)LSM6DSO_GetCapabilities(&lsm6dso_obj_0, &cap);
 8009510:	2408      	movs	r4, #8
 8009512:	193a      	adds	r2, r7, r4
 8009514:	4b39      	ldr	r3, [pc, #228]	; (80095fc <LSM6DSO_0_Probe+0x168>)
 8009516:	0011      	movs	r1, r2
 8009518:	0018      	movs	r0, r3
 800951a:	f7fc fd09 	bl	8005f30 <LSM6DSO_GetCapabilities>
    MotionCtx[IKS01A3_LSM6DSO_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 800951e:	0021      	movs	r1, r4
 8009520:	187b      	adds	r3, r7, r1
 8009522:	785b      	ldrb	r3, [r3, #1]
 8009524:	001a      	movs	r2, r3
 8009526:	187b      	adds	r3, r7, r1
 8009528:	781b      	ldrb	r3, [r3, #0]
 800952a:	005b      	lsls	r3, r3, #1
 800952c:	431a      	orrs	r2, r3
 800952e:	187b      	adds	r3, r7, r1
 8009530:	789b      	ldrb	r3, [r3, #2]
 8009532:	009b      	lsls	r3, r3, #2
 8009534:	431a      	orrs	r2, r3
 8009536:	4b32      	ldr	r3, [pc, #200]	; (8009600 <LSM6DSO_0_Probe+0x16c>)
 8009538:	601a      	str	r2, [r3, #0]

    MotionCompObj[IKS01A3_LSM6DSO_0] = &lsm6dso_obj_0;
 800953a:	4b32      	ldr	r3, [pc, #200]	; (8009604 <LSM6DSO_0_Probe+0x170>)
 800953c:	4a2f      	ldr	r2, [pc, #188]	; (80095fc <LSM6DSO_0_Probe+0x168>)
 800953e:	601a      	str	r2, [r3, #0]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS01A3_LSM6DSO_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LSM6DSO_COMMON_Driver;
 8009540:	4b31      	ldr	r3, [pc, #196]	; (8009608 <LSM6DSO_0_Probe+0x174>)
 8009542:	4a32      	ldr	r2, [pc, #200]	; (800960c <LSM6DSO_0_Probe+0x178>)
 8009544:	601a      	str	r2, [r3, #0]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO) && (cap.Gyro == 1U))
 8009546:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009548:	2b00      	cmp	r3, #0
 800954a:	d11c      	bne.n	8009586 <LSM6DSO_0_Probe+0xf2>
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	2201      	movs	r2, #1
 8009550:	4013      	ands	r3, r2
 8009552:	d018      	beq.n	8009586 <LSM6DSO_0_Probe+0xf2>
 8009554:	187b      	adds	r3, r7, r1
 8009556:	785b      	ldrb	r3, [r3, #1]
 8009558:	2b01      	cmp	r3, #1
 800955a:	d114      	bne.n	8009586 <LSM6DSO_0_Probe+0xf2>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A3_LSM6DSO_0][FunctionIndex[MOTION_GYRO]] = (MOTION_SENSOR_FuncDrv_t *)(void *)&LSM6DSO_GYRO_Driver;
 800955c:	4b2c      	ldr	r3, [pc, #176]	; (8009610 <LSM6DSO_0_Probe+0x17c>)
 800955e:	685a      	ldr	r2, [r3, #4]
 8009560:	4b2c      	ldr	r3, [pc, #176]	; (8009614 <LSM6DSO_0_Probe+0x180>)
 8009562:	0092      	lsls	r2, r2, #2
 8009564:	492c      	ldr	r1, [pc, #176]	; (8009618 <LSM6DSO_0_Probe+0x184>)
 8009566:	50d1      	str	r1, [r2, r3]

      if (MotionDrv[IKS01A3_LSM6DSO_0]->Init(MotionCompObj[IKS01A3_LSM6DSO_0]) != LSM6DSO_OK)
 8009568:	4b27      	ldr	r3, [pc, #156]	; (8009608 <LSM6DSO_0_Probe+0x174>)
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	681a      	ldr	r2, [r3, #0]
 800956e:	4b25      	ldr	r3, [pc, #148]	; (8009604 <LSM6DSO_0_Probe+0x170>)
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	0018      	movs	r0, r3
 8009574:	4790      	blx	r2
 8009576:	1e03      	subs	r3, r0, #0
 8009578:	d003      	beq.n	8009582 <LSM6DSO_0_Probe+0xee>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800957a:	2305      	movs	r3, #5
 800957c:	425b      	negs	r3, r3
 800957e:	647b      	str	r3, [r7, #68]	; 0x44
 8009580:	e001      	b.n	8009586 <LSM6DSO_0_Probe+0xf2>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8009582:	2300      	movs	r3, #0
 8009584:	647b      	str	r3, [r7, #68]	; 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 8009586:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009588:	2b00      	cmp	r3, #0
 800958a:	d11d      	bne.n	80095c8 <LSM6DSO_0_Probe+0x134>
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	2202      	movs	r2, #2
 8009590:	4013      	ands	r3, r2
 8009592:	d019      	beq.n	80095c8 <LSM6DSO_0_Probe+0x134>
 8009594:	2308      	movs	r3, #8
 8009596:	18fb      	adds	r3, r7, r3
 8009598:	781b      	ldrb	r3, [r3, #0]
 800959a:	2b01      	cmp	r3, #1
 800959c:	d114      	bne.n	80095c8 <LSM6DSO_0_Probe+0x134>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A3_LSM6DSO_0][FunctionIndex[MOTION_ACCELERO]] = (MOTION_SENSOR_FuncDrv_t *)(
 800959e:	4b1c      	ldr	r3, [pc, #112]	; (8009610 <LSM6DSO_0_Probe+0x17c>)
 80095a0:	689a      	ldr	r2, [r3, #8]
 80095a2:	4b1c      	ldr	r3, [pc, #112]	; (8009614 <LSM6DSO_0_Probe+0x180>)
 80095a4:	0092      	lsls	r2, r2, #2
 80095a6:	491d      	ldr	r1, [pc, #116]	; (800961c <LSM6DSO_0_Probe+0x188>)
 80095a8:	50d1      	str	r1, [r2, r3]
                                                                           void *)&LSM6DSO_ACC_Driver;

      if (MotionDrv[IKS01A3_LSM6DSO_0]->Init(MotionCompObj[IKS01A3_LSM6DSO_0]) != LSM6DSO_OK)
 80095aa:	4b17      	ldr	r3, [pc, #92]	; (8009608 <LSM6DSO_0_Probe+0x174>)
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	681a      	ldr	r2, [r3, #0]
 80095b0:	4b14      	ldr	r3, [pc, #80]	; (8009604 <LSM6DSO_0_Probe+0x170>)
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	0018      	movs	r0, r3
 80095b6:	4790      	blx	r2
 80095b8:	1e03      	subs	r3, r0, #0
 80095ba:	d003      	beq.n	80095c4 <LSM6DSO_0_Probe+0x130>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80095bc:	2305      	movs	r3, #5
 80095be:	425b      	negs	r3, r3
 80095c0:	647b      	str	r3, [r7, #68]	; 0x44
 80095c2:	e001      	b.n	80095c8 <LSM6DSO_0_Probe+0x134>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 80095c4:	2300      	movs	r3, #0
 80095c6:	647b      	str	r3, [r7, #68]	; 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO))
 80095c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d106      	bne.n	80095dc <LSM6DSO_0_Probe+0x148>
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	2204      	movs	r2, #4
 80095d2:	4013      	ands	r3, r2
 80095d4:	d002      	beq.n	80095dc <LSM6DSO_0_Probe+0x148>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 80095d6:	2305      	movs	r3, #5
 80095d8:	425b      	negs	r3, r3
 80095da:	647b      	str	r3, [r7, #68]	; 0x44
    }
  }
  return ret;
 80095dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 80095de:	0018      	movs	r0, r3
 80095e0:	46bd      	mov	sp, r7
 80095e2:	b013      	add	sp, #76	; 0x4c
 80095e4:	bd90      	pop	{r4, r7, pc}
 80095e6:	46c0      	nop			; (mov r8, r8)
 80095e8:	08001a41 	.word	0x08001a41
 80095ec:	08001abd 	.word	0x08001abd
 80095f0:	08001b85 	.word	0x08001b85
 80095f4:	08001b0d 	.word	0x08001b0d
 80095f8:	08001bfd 	.word	0x08001bfd
 80095fc:	20000cb4 	.word	0x20000cb4
 8009600:	20000ca8 	.word	0x20000ca8
 8009604:	20000c6c 	.word	0x20000c6c
 8009608:	20000c9c 	.word	0x20000c9c
 800960c:	200001a8 	.word	0x200001a8
 8009610:	20000238 	.word	0x20000238
 8009614:	20000c78 	.word	0x20000c78
 8009618:	200001dc 	.word	0x200001dc
 800961c:	200001b8 	.word	0x200001b8

08009620 <LIS2DW12_0_Probe>:
/**
  * @brief  Register Bus IOs for instance 1 if component ID is OK
  * @retval BSP status
  */
static int32_t LIS2DW12_0_Probe(uint32_t Functions)
{
 8009620:	b590      	push	{r4, r7, lr}
 8009622:	b093      	sub	sp, #76	; 0x4c
 8009624:	af00      	add	r7, sp, #0
 8009626:	6078      	str	r0, [r7, #4]
  LIS2DW12_IO_t            io_ctx;
  uint8_t                  id;
  static LIS2DW12_Object_t lis2dw12_obj_0;
  LIS2DW12_Capabilities_t  cap;
  int32_t ret = BSP_ERROR_NONE;
 8009628:	2300      	movs	r3, #0
 800962a:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the accelero driver */
  io_ctx.BusType     = LIS2DW12_I2C_BUS; /* I2C */
 800962c:	2128      	movs	r1, #40	; 0x28
 800962e:	187b      	adds	r3, r7, r1
 8009630:	2200      	movs	r2, #0
 8009632:	609a      	str	r2, [r3, #8]
  io_ctx.Address     = LIS2DW12_I2C_ADD_H;
 8009634:	187b      	adds	r3, r7, r1
 8009636:	2233      	movs	r2, #51	; 0x33
 8009638:	731a      	strb	r2, [r3, #12]
  io_ctx.Init        = IKS01A3_I2C_Init;
 800963a:	187b      	adds	r3, r7, r1
 800963c:	4a42      	ldr	r2, [pc, #264]	; (8009748 <LIS2DW12_0_Probe+0x128>)
 800963e:	601a      	str	r2, [r3, #0]
  io_ctx.DeInit      = IKS01A3_I2C_DeInit;
 8009640:	187b      	adds	r3, r7, r1
 8009642:	4a42      	ldr	r2, [pc, #264]	; (800974c <LIS2DW12_0_Probe+0x12c>)
 8009644:	605a      	str	r2, [r3, #4]
  io_ctx.ReadReg     = IKS01A3_I2C_ReadReg;
 8009646:	187b      	adds	r3, r7, r1
 8009648:	4a41      	ldr	r2, [pc, #260]	; (8009750 <LIS2DW12_0_Probe+0x130>)
 800964a:	615a      	str	r2, [r3, #20]
  io_ctx.WriteReg    = IKS01A3_I2C_WriteReg;
 800964c:	187b      	adds	r3, r7, r1
 800964e:	4a41      	ldr	r2, [pc, #260]	; (8009754 <LIS2DW12_0_Probe+0x134>)
 8009650:	611a      	str	r2, [r3, #16]
  io_ctx.GetTick     = IKS01A3_GetTick;
 8009652:	187b      	adds	r3, r7, r1
 8009654:	4a40      	ldr	r2, [pc, #256]	; (8009758 <LIS2DW12_0_Probe+0x138>)
 8009656:	619a      	str	r2, [r3, #24]

  if (LIS2DW12_RegisterBusIO(&lis2dw12_obj_0, &io_ctx) != LIS2DW12_OK)
 8009658:	187a      	adds	r2, r7, r1
 800965a:	4b40      	ldr	r3, [pc, #256]	; (800975c <LIS2DW12_0_Probe+0x13c>)
 800965c:	0011      	movs	r1, r2
 800965e:	0018      	movs	r0, r3
 8009660:	f7f9 fa8c 	bl	8002b7c <LIS2DW12_RegisterBusIO>
 8009664:	1e03      	subs	r3, r0, #0
 8009666:	d003      	beq.n	8009670 <LIS2DW12_0_Probe+0x50>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8009668:	2307      	movs	r3, #7
 800966a:	425b      	negs	r3, r3
 800966c:	647b      	str	r3, [r7, #68]	; 0x44
 800966e:	e065      	b.n	800973c <LIS2DW12_0_Probe+0x11c>
  }
  else if (LIS2DW12_ReadID(&lis2dw12_obj_0, &id) != LIS2DW12_OK)
 8009670:	2327      	movs	r3, #39	; 0x27
 8009672:	18fa      	adds	r2, r7, r3
 8009674:	4b39      	ldr	r3, [pc, #228]	; (800975c <LIS2DW12_0_Probe+0x13c>)
 8009676:	0011      	movs	r1, r2
 8009678:	0018      	movs	r0, r3
 800967a:	f7f9 fb62 	bl	8002d42 <LIS2DW12_ReadID>
 800967e:	1e03      	subs	r3, r0, #0
 8009680:	d003      	beq.n	800968a <LIS2DW12_0_Probe+0x6a>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8009682:	2307      	movs	r3, #7
 8009684:	425b      	negs	r3, r3
 8009686:	647b      	str	r3, [r7, #68]	; 0x44
 8009688:	e058      	b.n	800973c <LIS2DW12_0_Probe+0x11c>
  }
  else if (id != LIS2DW12_ID)
 800968a:	2327      	movs	r3, #39	; 0x27
 800968c:	18fb      	adds	r3, r7, r3
 800968e:	781b      	ldrb	r3, [r3, #0]
 8009690:	2b44      	cmp	r3, #68	; 0x44
 8009692:	d003      	beq.n	800969c <LIS2DW12_0_Probe+0x7c>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8009694:	2307      	movs	r3, #7
 8009696:	425b      	negs	r3, r3
 8009698:	647b      	str	r3, [r7, #68]	; 0x44
 800969a:	e04f      	b.n	800973c <LIS2DW12_0_Probe+0x11c>
  }
  else
  {
    (void)LIS2DW12_GetCapabilities(&lis2dw12_obj_0, &cap);
 800969c:	2408      	movs	r4, #8
 800969e:	193a      	adds	r2, r7, r4
 80096a0:	4b2e      	ldr	r3, [pc, #184]	; (800975c <LIS2DW12_0_Probe+0x13c>)
 80096a2:	0011      	movs	r1, r2
 80096a4:	0018      	movs	r0, r3
 80096a6:	f7f9 fb63 	bl	8002d70 <LIS2DW12_GetCapabilities>
    MotionCtx[IKS01A3_LIS2DW12_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 80096aa:	0021      	movs	r1, r4
 80096ac:	187b      	adds	r3, r7, r1
 80096ae:	785b      	ldrb	r3, [r3, #1]
 80096b0:	001a      	movs	r2, r3
 80096b2:	187b      	adds	r3, r7, r1
 80096b4:	781b      	ldrb	r3, [r3, #0]
 80096b6:	005b      	lsls	r3, r3, #1
 80096b8:	431a      	orrs	r2, r3
 80096ba:	187b      	adds	r3, r7, r1
 80096bc:	789b      	ldrb	r3, [r3, #2]
 80096be:	009b      	lsls	r3, r3, #2
 80096c0:	431a      	orrs	r2, r3
 80096c2:	4b27      	ldr	r3, [pc, #156]	; (8009760 <LIS2DW12_0_Probe+0x140>)
 80096c4:	605a      	str	r2, [r3, #4]

    MotionCompObj[IKS01A3_LIS2DW12_0] = &lis2dw12_obj_0;
 80096c6:	4b27      	ldr	r3, [pc, #156]	; (8009764 <LIS2DW12_0_Probe+0x144>)
 80096c8:	4a24      	ldr	r2, [pc, #144]	; (800975c <LIS2DW12_0_Probe+0x13c>)
 80096ca:	605a      	str	r2, [r3, #4]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS01A3_LIS2DW12_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LIS2DW12_COMMON_Driver;
 80096cc:	4b26      	ldr	r3, [pc, #152]	; (8009768 <LIS2DW12_0_Probe+0x148>)
 80096ce:	4a27      	ldr	r2, [pc, #156]	; (800976c <LIS2DW12_0_Probe+0x14c>)
 80096d0:	605a      	str	r2, [r3, #4]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 80096d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d11d      	bne.n	8009714 <LIS2DW12_0_Probe+0xf4>
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	2202      	movs	r2, #2
 80096dc:	4013      	ands	r3, r2
 80096de:	d019      	beq.n	8009714 <LIS2DW12_0_Probe+0xf4>
 80096e0:	187b      	adds	r3, r7, r1
 80096e2:	781b      	ldrb	r3, [r3, #0]
 80096e4:	2b01      	cmp	r3, #1
 80096e6:	d115      	bne.n	8009714 <LIS2DW12_0_Probe+0xf4>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A3_LIS2DW12_0][FunctionIndex[MOTION_ACCELERO]] = (MOTION_SENSOR_FuncDrv_t *)(
 80096e8:	4b21      	ldr	r3, [pc, #132]	; (8009770 <LIS2DW12_0_Probe+0x150>)
 80096ea:	689a      	ldr	r2, [r3, #8]
 80096ec:	4b21      	ldr	r3, [pc, #132]	; (8009774 <LIS2DW12_0_Probe+0x154>)
 80096ee:	3203      	adds	r2, #3
 80096f0:	0092      	lsls	r2, r2, #2
 80096f2:	4921      	ldr	r1, [pc, #132]	; (8009778 <LIS2DW12_0_Probe+0x158>)
 80096f4:	50d1      	str	r1, [r2, r3]
                                                                            void *)&LIS2DW12_ACC_Driver;

      if (MotionDrv[IKS01A3_LIS2DW12_0]->Init(MotionCompObj[IKS01A3_LIS2DW12_0]) != LIS2DW12_OK)
 80096f6:	4b1c      	ldr	r3, [pc, #112]	; (8009768 <LIS2DW12_0_Probe+0x148>)
 80096f8:	685b      	ldr	r3, [r3, #4]
 80096fa:	681a      	ldr	r2, [r3, #0]
 80096fc:	4b19      	ldr	r3, [pc, #100]	; (8009764 <LIS2DW12_0_Probe+0x144>)
 80096fe:	685b      	ldr	r3, [r3, #4]
 8009700:	0018      	movs	r0, r3
 8009702:	4790      	blx	r2
 8009704:	1e03      	subs	r3, r0, #0
 8009706:	d003      	beq.n	8009710 <LIS2DW12_0_Probe+0xf0>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8009708:	2305      	movs	r3, #5
 800970a:	425b      	negs	r3, r3
 800970c:	647b      	str	r3, [r7, #68]	; 0x44
 800970e:	e001      	b.n	8009714 <LIS2DW12_0_Probe+0xf4>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8009710:	2300      	movs	r3, #0
 8009712:	647b      	str	r3, [r7, #68]	; 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO))
 8009714:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009716:	2b00      	cmp	r3, #0
 8009718:	d106      	bne.n	8009728 <LIS2DW12_0_Probe+0x108>
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	2201      	movs	r2, #1
 800971e:	4013      	ands	r3, r2
 8009720:	d002      	beq.n	8009728 <LIS2DW12_0_Probe+0x108>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8009722:	2305      	movs	r3, #5
 8009724:	425b      	negs	r3, r3
 8009726:	647b      	str	r3, [r7, #68]	; 0x44
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO))
 8009728:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800972a:	2b00      	cmp	r3, #0
 800972c:	d106      	bne.n	800973c <LIS2DW12_0_Probe+0x11c>
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	2204      	movs	r2, #4
 8009732:	4013      	ands	r3, r2
 8009734:	d002      	beq.n	800973c <LIS2DW12_0_Probe+0x11c>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8009736:	2305      	movs	r3, #5
 8009738:	425b      	negs	r3, r3
 800973a:	647b      	str	r3, [r7, #68]	; 0x44
    }
  }
  return ret;
 800973c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800973e:	0018      	movs	r0, r3
 8009740:	46bd      	mov	sp, r7
 8009742:	b013      	add	sp, #76	; 0x4c
 8009744:	bd90      	pop	{r4, r7, pc}
 8009746:	46c0      	nop			; (mov r8, r8)
 8009748:	08001a41 	.word	0x08001a41
 800974c:	08001abd 	.word	0x08001abd
 8009750:	08001b85 	.word	0x08001b85
 8009754:	08001b0d 	.word	0x08001b0d
 8009758:	08001bfd 	.word	0x08001bfd
 800975c:	20000ce4 	.word	0x20000ce4
 8009760:	20000ca8 	.word	0x20000ca8
 8009764:	20000c6c 	.word	0x20000c6c
 8009768:	20000c9c 	.word	0x20000c9c
 800976c:	20000108 	.word	0x20000108
 8009770:	20000238 	.word	0x20000238
 8009774:	20000c78 	.word	0x20000c78
 8009778:	20000118 	.word	0x20000118

0800977c <LIS2MDL_0_Probe>:
/**
  * @brief  Register Bus IOs for instance 1 if component ID is OK
  * @retval BSP status
  */
static int32_t LIS2MDL_0_Probe(uint32_t Functions)
{
 800977c:	b590      	push	{r4, r7, lr}
 800977e:	b093      	sub	sp, #76	; 0x4c
 8009780:	af00      	add	r7, sp, #0
 8009782:	6078      	str	r0, [r7, #4]
  LIS2MDL_IO_t            io_ctx;
  uint8_t                 id;
  static LIS2MDL_Object_t lis2mdl_obj_0;
  LIS2MDL_Capabilities_t  cap;
  int32_t                 ret = BSP_ERROR_NONE;
 8009784:	2300      	movs	r3, #0
 8009786:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the accelero driver */
  io_ctx.BusType     = LIS2MDL_I2C_BUS; /* I2C */
 8009788:	2128      	movs	r1, #40	; 0x28
 800978a:	187b      	adds	r3, r7, r1
 800978c:	2200      	movs	r2, #0
 800978e:	609a      	str	r2, [r3, #8]
  io_ctx.Address     = LIS2MDL_I2C_ADD;
 8009790:	187b      	adds	r3, r7, r1
 8009792:	223d      	movs	r2, #61	; 0x3d
 8009794:	731a      	strb	r2, [r3, #12]
  io_ctx.Init        = IKS01A3_I2C_Init;
 8009796:	187b      	adds	r3, r7, r1
 8009798:	4a42      	ldr	r2, [pc, #264]	; (80098a4 <LIS2MDL_0_Probe+0x128>)
 800979a:	601a      	str	r2, [r3, #0]
  io_ctx.DeInit      = IKS01A3_I2C_DeInit;
 800979c:	187b      	adds	r3, r7, r1
 800979e:	4a42      	ldr	r2, [pc, #264]	; (80098a8 <LIS2MDL_0_Probe+0x12c>)
 80097a0:	605a      	str	r2, [r3, #4]
  io_ctx.ReadReg     = IKS01A3_I2C_ReadReg;
 80097a2:	187b      	adds	r3, r7, r1
 80097a4:	4a41      	ldr	r2, [pc, #260]	; (80098ac <LIS2MDL_0_Probe+0x130>)
 80097a6:	615a      	str	r2, [r3, #20]
  io_ctx.WriteReg    = IKS01A3_I2C_WriteReg;
 80097a8:	187b      	adds	r3, r7, r1
 80097aa:	4a41      	ldr	r2, [pc, #260]	; (80098b0 <LIS2MDL_0_Probe+0x134>)
 80097ac:	611a      	str	r2, [r3, #16]
  io_ctx.GetTick     = IKS01A3_GetTick;
 80097ae:	187b      	adds	r3, r7, r1
 80097b0:	4a40      	ldr	r2, [pc, #256]	; (80098b4 <LIS2MDL_0_Probe+0x138>)
 80097b2:	619a      	str	r2, [r3, #24]

  if (LIS2MDL_RegisterBusIO(&lis2mdl_obj_0, &io_ctx) != LIS2MDL_OK)
 80097b4:	187a      	adds	r2, r7, r1
 80097b6:	4b40      	ldr	r3, [pc, #256]	; (80098b8 <LIS2MDL_0_Probe+0x13c>)
 80097b8:	0011      	movs	r1, r2
 80097ba:	0018      	movs	r0, r3
 80097bc:	f7fa fb68 	bl	8003e90 <LIS2MDL_RegisterBusIO>
 80097c0:	1e03      	subs	r3, r0, #0
 80097c2:	d003      	beq.n	80097cc <LIS2MDL_0_Probe+0x50>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80097c4:	2307      	movs	r3, #7
 80097c6:	425b      	negs	r3, r3
 80097c8:	647b      	str	r3, [r7, #68]	; 0x44
 80097ca:	e065      	b.n	8009898 <LIS2MDL_0_Probe+0x11c>
  }
  else if (LIS2MDL_ReadID(&lis2mdl_obj_0, &id) != LIS2MDL_OK)
 80097cc:	2327      	movs	r3, #39	; 0x27
 80097ce:	18fa      	adds	r2, r7, r3
 80097d0:	4b39      	ldr	r3, [pc, #228]	; (80098b8 <LIS2MDL_0_Probe+0x13c>)
 80097d2:	0011      	movs	r1, r2
 80097d4:	0018      	movs	r0, r3
 80097d6:	f7fa fc72 	bl	80040be <LIS2MDL_ReadID>
 80097da:	1e03      	subs	r3, r0, #0
 80097dc:	d003      	beq.n	80097e6 <LIS2MDL_0_Probe+0x6a>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80097de:	2307      	movs	r3, #7
 80097e0:	425b      	negs	r3, r3
 80097e2:	647b      	str	r3, [r7, #68]	; 0x44
 80097e4:	e058      	b.n	8009898 <LIS2MDL_0_Probe+0x11c>
  }
  else if (id != LIS2MDL_ID)
 80097e6:	2327      	movs	r3, #39	; 0x27
 80097e8:	18fb      	adds	r3, r7, r3
 80097ea:	781b      	ldrb	r3, [r3, #0]
 80097ec:	2b40      	cmp	r3, #64	; 0x40
 80097ee:	d003      	beq.n	80097f8 <LIS2MDL_0_Probe+0x7c>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80097f0:	2307      	movs	r3, #7
 80097f2:	425b      	negs	r3, r3
 80097f4:	647b      	str	r3, [r7, #68]	; 0x44
 80097f6:	e04f      	b.n	8009898 <LIS2MDL_0_Probe+0x11c>
  }
  else
  {
    (void)LIS2MDL_GetCapabilities(&lis2mdl_obj_0, &cap);
 80097f8:	2408      	movs	r4, #8
 80097fa:	193a      	adds	r2, r7, r4
 80097fc:	4b2e      	ldr	r3, [pc, #184]	; (80098b8 <LIS2MDL_0_Probe+0x13c>)
 80097fe:	0011      	movs	r1, r2
 8009800:	0018      	movs	r0, r3
 8009802:	f7fa fc81 	bl	8004108 <LIS2MDL_GetCapabilities>
    MotionCtx[IKS01A3_LIS2MDL_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 8009806:	0021      	movs	r1, r4
 8009808:	187b      	adds	r3, r7, r1
 800980a:	785b      	ldrb	r3, [r3, #1]
 800980c:	001a      	movs	r2, r3
 800980e:	187b      	adds	r3, r7, r1
 8009810:	781b      	ldrb	r3, [r3, #0]
 8009812:	005b      	lsls	r3, r3, #1
 8009814:	431a      	orrs	r2, r3
 8009816:	187b      	adds	r3, r7, r1
 8009818:	789b      	ldrb	r3, [r3, #2]
 800981a:	009b      	lsls	r3, r3, #2
 800981c:	431a      	orrs	r2, r3
 800981e:	4b27      	ldr	r3, [pc, #156]	; (80098bc <LIS2MDL_0_Probe+0x140>)
 8009820:	609a      	str	r2, [r3, #8]

    MotionCompObj[IKS01A3_LIS2MDL_0] = &lis2mdl_obj_0;
 8009822:	4b27      	ldr	r3, [pc, #156]	; (80098c0 <LIS2MDL_0_Probe+0x144>)
 8009824:	4a24      	ldr	r2, [pc, #144]	; (80098b8 <LIS2MDL_0_Probe+0x13c>)
 8009826:	609a      	str	r2, [r3, #8]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS01A3_LIS2MDL_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LIS2MDL_COMMON_Driver;
 8009828:	4b26      	ldr	r3, [pc, #152]	; (80098c4 <LIS2MDL_0_Probe+0x148>)
 800982a:	4a27      	ldr	r2, [pc, #156]	; (80098c8 <LIS2MDL_0_Probe+0x14c>)
 800982c:	609a      	str	r2, [r3, #8]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO) && (cap.Magneto == 1U))
 800982e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009830:	2b00      	cmp	r3, #0
 8009832:	d11d      	bne.n	8009870 <LIS2MDL_0_Probe+0xf4>
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	2204      	movs	r2, #4
 8009838:	4013      	ands	r3, r2
 800983a:	d019      	beq.n	8009870 <LIS2MDL_0_Probe+0xf4>
 800983c:	187b      	adds	r3, r7, r1
 800983e:	789b      	ldrb	r3, [r3, #2]
 8009840:	2b01      	cmp	r3, #1
 8009842:	d115      	bne.n	8009870 <LIS2MDL_0_Probe+0xf4>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A3_LIS2MDL_0][FunctionIndex[MOTION_MAGNETO]] = (MOTION_SENSOR_FuncDrv_t *)(
 8009844:	4b21      	ldr	r3, [pc, #132]	; (80098cc <LIS2MDL_0_Probe+0x150>)
 8009846:	691a      	ldr	r2, [r3, #16]
 8009848:	4b21      	ldr	r3, [pc, #132]	; (80098d0 <LIS2MDL_0_Probe+0x154>)
 800984a:	3206      	adds	r2, #6
 800984c:	0092      	lsls	r2, r2, #2
 800984e:	4921      	ldr	r1, [pc, #132]	; (80098d4 <LIS2MDL_0_Probe+0x158>)
 8009850:	50d1      	str	r1, [r2, r3]
                                                                          void *)&LIS2MDL_MAG_Driver;

      if (MotionDrv[IKS01A3_LIS2MDL_0]->Init(MotionCompObj[IKS01A3_LIS2MDL_0]) != LIS2MDL_OK)
 8009852:	4b1c      	ldr	r3, [pc, #112]	; (80098c4 <LIS2MDL_0_Probe+0x148>)
 8009854:	689b      	ldr	r3, [r3, #8]
 8009856:	681a      	ldr	r2, [r3, #0]
 8009858:	4b19      	ldr	r3, [pc, #100]	; (80098c0 <LIS2MDL_0_Probe+0x144>)
 800985a:	689b      	ldr	r3, [r3, #8]
 800985c:	0018      	movs	r0, r3
 800985e:	4790      	blx	r2
 8009860:	1e03      	subs	r3, r0, #0
 8009862:	d003      	beq.n	800986c <LIS2MDL_0_Probe+0xf0>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8009864:	2305      	movs	r3, #5
 8009866:	425b      	negs	r3, r3
 8009868:	647b      	str	r3, [r7, #68]	; 0x44
 800986a:	e001      	b.n	8009870 <LIS2MDL_0_Probe+0xf4>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800986c:	2300      	movs	r3, #0
 800986e:	647b      	str	r3, [r7, #68]	; 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO))
 8009870:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009872:	2b00      	cmp	r3, #0
 8009874:	d106      	bne.n	8009884 <LIS2MDL_0_Probe+0x108>
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	2202      	movs	r2, #2
 800987a:	4013      	ands	r3, r2
 800987c:	d002      	beq.n	8009884 <LIS2MDL_0_Probe+0x108>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800987e:	2305      	movs	r3, #5
 8009880:	425b      	negs	r3, r3
 8009882:	647b      	str	r3, [r7, #68]	; 0x44
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO))
 8009884:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009886:	2b00      	cmp	r3, #0
 8009888:	d106      	bne.n	8009898 <LIS2MDL_0_Probe+0x11c>
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	2201      	movs	r2, #1
 800988e:	4013      	ands	r3, r2
 8009890:	d002      	beq.n	8009898 <LIS2MDL_0_Probe+0x11c>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8009892:	2305      	movs	r3, #5
 8009894:	425b      	negs	r3, r3
 8009896:	647b      	str	r3, [r7, #68]	; 0x44
    }
  }
  return ret;
 8009898:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800989a:	0018      	movs	r0, r3
 800989c:	46bd      	mov	sp, r7
 800989e:	b013      	add	sp, #76	; 0x4c
 80098a0:	bd90      	pop	{r4, r7, pc}
 80098a2:	46c0      	nop			; (mov r8, r8)
 80098a4:	08001a41 	.word	0x08001a41
 80098a8:	08001abd 	.word	0x08001abd
 80098ac:	08001b85 	.word	0x08001b85
 80098b0:	08001b0d 	.word	0x08001b0d
 80098b4:	08001bfd 	.word	0x08001bfd
 80098b8:	20000d18 	.word	0x20000d18
 80098bc:	20000ca8 	.word	0x20000ca8
 80098c0:	20000c6c 	.word	0x20000c6c
 80098c4:	20000c9c 	.word	0x20000c9c
 80098c8:	2000013c 	.word	0x2000013c
 80098cc:	20000238 	.word	0x20000238
 80098d0:	20000c78 	.word	0x20000c78
 80098d4:	2000014c 	.word	0x2000014c

080098d8 <BSP_LED_Init>:
 *              This parameter can be one of the following values:
 *              @arg  LED2, LED4, ...
 * @retval HAL status
 */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 80098d8:	b580      	push	{r7, lr}
 80098da:	b082      	sub	sp, #8
 80098dc:	af00      	add	r7, sp, #0
 80098de:	0002      	movs	r2, r0
 80098e0:	1dfb      	adds	r3, r7, #7
 80098e2:	701a      	strb	r2, [r3, #0]
  static const BSP_LED_GPIO_Init LedGpioInit[LEDn] = {LED_USER_GPIO_Init};
  LedGpioInit[Led]();
 80098e4:	1dfb      	adds	r3, r7, #7
 80098e6:	781a      	ldrb	r2, [r3, #0]
 80098e8:	4b04      	ldr	r3, [pc, #16]	; (80098fc <BSP_LED_Init+0x24>)
 80098ea:	0092      	lsls	r2, r2, #2
 80098ec:	58d3      	ldr	r3, [r2, r3]
 80098ee:	4798      	blx	r3
  return BSP_ERROR_NONE;
 80098f0:	2300      	movs	r3, #0
}
 80098f2:	0018      	movs	r0, r3
 80098f4:	46bd      	mov	sp, r7
 80098f6:	b002      	add	sp, #8
 80098f8:	bd80      	pop	{r7, pc}
 80098fa:	46c0      	nop			; (mov r8, r8)
 80098fc:	080162ac 	.word	0x080162ac

08009900 <BSP_LED_On>:
 *              @arg  LED3
 *              @arg  LED4
 * @retval HAL status
 */
int32_t BSP_LED_On(Led_TypeDef Led)
{
 8009900:	b580      	push	{r7, lr}
 8009902:	b082      	sub	sp, #8
 8009904:	af00      	add	r7, sp, #0
 8009906:	0002      	movs	r2, r0
 8009908:	1dfb      	adds	r3, r7, #7
 800990a:	701a      	strb	r2, [r3, #0]
  HAL_GPIO_WritePin(LED_PORT [Led], LED_PIN [Led], GPIO_PIN_SET);
 800990c:	1dfb      	adds	r3, r7, #7
 800990e:	781a      	ldrb	r2, [r3, #0]
 8009910:	4b06      	ldr	r3, [pc, #24]	; (800992c <BSP_LED_On+0x2c>)
 8009912:	0092      	lsls	r2, r2, #2
 8009914:	58d3      	ldr	r3, [r2, r3]
 8009916:	2120      	movs	r1, #32
 8009918:	2201      	movs	r2, #1
 800991a:	0018      	movs	r0, r3
 800991c:	f001 f8e3 	bl	800aae6 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8009920:	2300      	movs	r3, #0
}
 8009922:	0018      	movs	r0, r3
 8009924:	46bd      	mov	sp, r7
 8009926:	b002      	add	sp, #8
 8009928:	bd80      	pop	{r7, pc}
 800992a:	46c0      	nop			; (mov r8, r8)
 800992c:	2000024c 	.word	0x2000024c

08009930 <BSP_LED_Off>:
 *              @arg  LED3
 *              @arg  LED4
 * @retval HAL status
 */
int32_t BSP_LED_Off(Led_TypeDef Led)
{
 8009930:	b580      	push	{r7, lr}
 8009932:	b082      	sub	sp, #8
 8009934:	af00      	add	r7, sp, #0
 8009936:	0002      	movs	r2, r0
 8009938:	1dfb      	adds	r3, r7, #7
 800993a:	701a      	strb	r2, [r3, #0]
  HAL_GPIO_WritePin(LED_PORT [Led], LED_PIN [Led], GPIO_PIN_RESET);
 800993c:	1dfb      	adds	r3, r7, #7
 800993e:	781a      	ldrb	r2, [r3, #0]
 8009940:	4b06      	ldr	r3, [pc, #24]	; (800995c <BSP_LED_Off+0x2c>)
 8009942:	0092      	lsls	r2, r2, #2
 8009944:	58d3      	ldr	r3, [r2, r3]
 8009946:	2120      	movs	r1, #32
 8009948:	2200      	movs	r2, #0
 800994a:	0018      	movs	r0, r3
 800994c:	f001 f8cb 	bl	800aae6 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8009950:	2300      	movs	r3, #0
}
 8009952:	0018      	movs	r0, r3
 8009954:	46bd      	mov	sp, r7
 8009956:	b002      	add	sp, #8
 8009958:	bd80      	pop	{r7, pc}
 800995a:	46c0      	nop			; (mov r8, r8)
 800995c:	2000024c 	.word	0x2000024c

08009960 <LED_USER_GPIO_Init>:
}
/**
  * @brief
  * @retval None
  */
static void LED_USER_GPIO_Init(void) {
 8009960:	b590      	push	{r4, r7, lr}
 8009962:	b089      	sub	sp, #36	; 0x24
 8009964:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8009966:	4b1f      	ldr	r3, [pc, #124]	; (80099e4 <LED_USER_GPIO_Init+0x84>)
 8009968:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800996a:	4b1e      	ldr	r3, [pc, #120]	; (80099e4 <LED_USER_GPIO_Init+0x84>)
 800996c:	2101      	movs	r1, #1
 800996e:	430a      	orrs	r2, r1
 8009970:	62da      	str	r2, [r3, #44]	; 0x2c
 8009972:	4b1c      	ldr	r3, [pc, #112]	; (80099e4 <LED_USER_GPIO_Init+0x84>)
 8009974:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009976:	2201      	movs	r2, #1
 8009978:	4013      	ands	r3, r2
 800997a:	60bb      	str	r3, [r7, #8]
 800997c:	68bb      	ldr	r3, [r7, #8]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800997e:	240c      	movs	r4, #12
 8009980:	193b      	adds	r3, r7, r4
 8009982:	0018      	movs	r0, r3
 8009984:	2314      	movs	r3, #20
 8009986:	001a      	movs	r2, r3
 8009988:	2100      	movs	r1, #0
 800998a:	f00a f86c 	bl	8013a66 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800998e:	4b15      	ldr	r3, [pc, #84]	; (80099e4 <LED_USER_GPIO_Init+0x84>)
 8009990:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009992:	4b14      	ldr	r3, [pc, #80]	; (80099e4 <LED_USER_GPIO_Init+0x84>)
 8009994:	2101      	movs	r1, #1
 8009996:	430a      	orrs	r2, r1
 8009998:	62da      	str	r2, [r3, #44]	; 0x2c
 800999a:	4b12      	ldr	r3, [pc, #72]	; (80099e4 <LED_USER_GPIO_Init+0x84>)
 800999c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800999e:	2201      	movs	r2, #1
 80099a0:	4013      	ands	r3, r2
 80099a2:	607b      	str	r3, [r7, #4]
 80099a4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BUS_BSP_LED_GPIO_PORT, BUS_BSP_LED_GPIO_PIN, GPIO_PIN_RESET);
 80099a6:	23a0      	movs	r3, #160	; 0xa0
 80099a8:	05db      	lsls	r3, r3, #23
 80099aa:	2200      	movs	r2, #0
 80099ac:	2120      	movs	r1, #32
 80099ae:	0018      	movs	r0, r3
 80099b0:	f001 f899 	bl	800aae6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PTPIN */
  GPIO_InitStruct.Pin = BUS_BSP_LED_GPIO_PIN;
 80099b4:	0021      	movs	r1, r4
 80099b6:	187b      	adds	r3, r7, r1
 80099b8:	2220      	movs	r2, #32
 80099ba:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80099bc:	187b      	adds	r3, r7, r1
 80099be:	2201      	movs	r2, #1
 80099c0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80099c2:	187b      	adds	r3, r7, r1
 80099c4:	2200      	movs	r2, #0
 80099c6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80099c8:	187b      	adds	r3, r7, r1
 80099ca:	2200      	movs	r2, #0
 80099cc:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(BUS_BSP_LED_GPIO_PORT, &GPIO_InitStruct);
 80099ce:	187a      	adds	r2, r7, r1
 80099d0:	23a0      	movs	r3, #160	; 0xa0
 80099d2:	05db      	lsls	r3, r3, #23
 80099d4:	0011      	movs	r1, r2
 80099d6:	0018      	movs	r0, r3
 80099d8:	f000 fe08 	bl	800a5ec <HAL_GPIO_Init>

}
 80099dc:	46c0      	nop			; (mov r8, r8)
 80099de:	46bd      	mov	sp, r7
 80099e0:	b009      	add	sp, #36	; 0x24
 80099e2:	bd90      	pop	{r4, r7, pc}
 80099e4:	40021000 	.word	0x40021000

080099e8 <BSP_PB_Init>:
  *                    @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                            with interrupt generation capability
  * @retval BSP status
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 80099e8:	b580      	push	{r7, lr}
 80099ea:	b084      	sub	sp, #16
 80099ec:	af00      	add	r7, sp, #0
 80099ee:	0002      	movs	r2, r0
 80099f0:	1dfb      	adds	r3, r7, #7
 80099f2:	701a      	strb	r2, [r3, #0]
 80099f4:	1dbb      	adds	r3, r7, #6
 80099f6:	1c0a      	adds	r2, r1, #0
 80099f8:	701a      	strb	r2, [r3, #0]
  int32_t ret = BSP_ERROR_NONE;
 80099fa:	2300      	movs	r3, #0
 80099fc:	60fb      	str	r3, [r7, #12]
  static const BSP_EXTI_LineCallback ButtonCallback[BUTTONn] ={BUTTON_USER_EXTI_Callback};
  static const uint32_t  BSP_BUTTON_PRIO [BUTTONn] ={BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] ={USER_BUTTON_EXTI_LINE};
  static const BSP_BUTTON_GPIO_Init ButtonGpioInit[BUTTONn] = {BUTTON_USER_GPIO_Init};

  ButtonGpioInit[Button]();
 80099fe:	1dfb      	adds	r3, r7, #7
 8009a00:	781a      	ldrb	r2, [r3, #0]
 8009a02:	4b21      	ldr	r3, [pc, #132]	; (8009a88 <BSP_PB_Init+0xa0>)
 8009a04:	0092      	lsls	r2, r2, #2
 8009a06:	58d3      	ldr	r3, [r2, r3]
 8009a08:	4798      	blx	r3

  if (ButtonMode == BUTTON_MODE_EXTI)
 8009a0a:	1dbb      	adds	r3, r7, #6
 8009a0c:	781b      	ldrb	r3, [r3, #0]
 8009a0e:	2b01      	cmp	r3, #1
 8009a10:	d134      	bne.n	8009a7c <BSP_PB_Init+0x94>
  {
    if(HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]) != HAL_OK)
 8009a12:	1dfb      	adds	r3, r7, #7
 8009a14:	781b      	ldrb	r3, [r3, #0]
 8009a16:	00da      	lsls	r2, r3, #3
 8009a18:	4b1c      	ldr	r3, [pc, #112]	; (8009a8c <BSP_PB_Init+0xa4>)
 8009a1a:	18d0      	adds	r0, r2, r3
 8009a1c:	1dfb      	adds	r3, r7, #7
 8009a1e:	781a      	ldrb	r2, [r3, #0]
 8009a20:	4b1b      	ldr	r3, [pc, #108]	; (8009a90 <BSP_PB_Init+0xa8>)
 8009a22:	0092      	lsls	r2, r2, #2
 8009a24:	58d3      	ldr	r3, [r2, r3]
 8009a26:	0019      	movs	r1, r3
 8009a28:	f000 fda9 	bl	800a57e <HAL_EXTI_GetHandle>
 8009a2c:	1e03      	subs	r3, r0, #0
 8009a2e:	d003      	beq.n	8009a38 <BSP_PB_Init+0x50>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8009a30:	2304      	movs	r3, #4
 8009a32:	425b      	negs	r3, r3
 8009a34:	60fb      	str	r3, [r7, #12]
 8009a36:	e021      	b.n	8009a7c <BSP_PB_Init+0x94>
    }
    else if (HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]) != HAL_OK)
 8009a38:	1dfb      	adds	r3, r7, #7
 8009a3a:	781b      	ldrb	r3, [r3, #0]
 8009a3c:	00da      	lsls	r2, r3, #3
 8009a3e:	4b13      	ldr	r3, [pc, #76]	; (8009a8c <BSP_PB_Init+0xa4>)
 8009a40:	18d0      	adds	r0, r2, r3
 8009a42:	1dfb      	adds	r3, r7, #7
 8009a44:	781a      	ldrb	r2, [r3, #0]
 8009a46:	4b13      	ldr	r3, [pc, #76]	; (8009a94 <BSP_PB_Init+0xac>)
 8009a48:	0092      	lsls	r2, r2, #2
 8009a4a:	58d3      	ldr	r3, [r2, r3]
 8009a4c:	001a      	movs	r2, r3
 8009a4e:	2100      	movs	r1, #0
 8009a50:	f000 fd74 	bl	800a53c <HAL_EXTI_RegisterCallback>
 8009a54:	1e03      	subs	r3, r0, #0
 8009a56:	d003      	beq.n	8009a60 <BSP_PB_Init+0x78>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8009a58:	2304      	movs	r3, #4
 8009a5a:	425b      	negs	r3, r3
 8009a5c:	60fb      	str	r3, [r7, #12]
 8009a5e:	e00d      	b.n	8009a7c <BSP_PB_Init+0x94>
    }
	else
    {
      /* Enable and set Button EXTI Interrupt to the lowest priority */
      HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 8009a60:	2007      	movs	r0, #7
 8009a62:	1dfb      	adds	r3, r7, #7
 8009a64:	781a      	ldrb	r2, [r3, #0]
 8009a66:	4b0c      	ldr	r3, [pc, #48]	; (8009a98 <BSP_PB_Init+0xb0>)
 8009a68:	0092      	lsls	r2, r2, #2
 8009a6a:	58d3      	ldr	r3, [r2, r3]
 8009a6c:	2200      	movs	r2, #0
 8009a6e:	0019      	movs	r1, r3
 8009a70:	f000 faa4 	bl	8009fbc <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8009a74:	2307      	movs	r3, #7
 8009a76:	0018      	movs	r0, r3
 8009a78:	f000 fab5 	bl	8009fe6 <HAL_NVIC_EnableIRQ>
    }
  }

  return ret;
 8009a7c:	68fb      	ldr	r3, [r7, #12]
}
 8009a7e:	0018      	movs	r0, r3
 8009a80:	46bd      	mov	sp, r7
 8009a82:	b004      	add	sp, #16
 8009a84:	bd80      	pop	{r7, pc}
 8009a86:	46c0      	nop			; (mov r8, r8)
 8009a88:	080162b0 	.word	0x080162b0
 8009a8c:	20000254 	.word	0x20000254
 8009a90:	080162b4 	.word	0x080162b4
 8009a94:	080162b8 	.word	0x080162b8
 8009a98:	080162bc 	.word	0x080162bc

08009a9c <BSP_PB_GetState>:
 *                This parameter can be one of the following values:
 *                @arg  BUTTON_USER
 * @retval The Button GPIO pin value (GPIO_PIN_RESET = button pressed)
 */
int32_t BSP_PB_GetState(Button_TypeDef Button)
{
 8009a9c:	b580      	push	{r7, lr}
 8009a9e:	b082      	sub	sp, #8
 8009aa0:	af00      	add	r7, sp, #0
 8009aa2:	0002      	movs	r2, r0
 8009aa4:	1dfb      	adds	r3, r7, #7
 8009aa6:	701a      	strb	r2, [r3, #0]
  return (int32_t)(HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]) == GPIO_PIN_RESET);
 8009aa8:	1dfb      	adds	r3, r7, #7
 8009aaa:	781a      	ldrb	r2, [r3, #0]
 8009aac:	4b08      	ldr	r3, [pc, #32]	; (8009ad0 <BSP_PB_GetState+0x34>)
 8009aae:	0092      	lsls	r2, r2, #2
 8009ab0:	58d3      	ldr	r3, [r2, r3]
 8009ab2:	2280      	movs	r2, #128	; 0x80
 8009ab4:	0192      	lsls	r2, r2, #6
 8009ab6:	0011      	movs	r1, r2
 8009ab8:	0018      	movs	r0, r3
 8009aba:	f000 fff7 	bl	800aaac <HAL_GPIO_ReadPin>
 8009abe:	0003      	movs	r3, r0
 8009ac0:	425a      	negs	r2, r3
 8009ac2:	4153      	adcs	r3, r2
 8009ac4:	b2db      	uxtb	r3, r3
}
 8009ac6:	0018      	movs	r0, r3
 8009ac8:	46bd      	mov	sp, r7
 8009aca:	b002      	add	sp, #8
 8009acc:	bd80      	pop	{r7, pc}
 8009ace:	46c0      	nop			; (mov r8, r8)
 8009ad0:	20000250 	.word	0x20000250

08009ad4 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  User EXTI line detection callbacks.
  * @retval None
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 8009ad4:	b580      	push	{r7, lr}
 8009ad6:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8009ad8:	2000      	movs	r0, #0
 8009ada:	f005 f851 	bl	800eb80 <BSP_PB_Callback>
}
 8009ade:	46c0      	nop			; (mov r8, r8)
 8009ae0:	46bd      	mov	sp, r7
 8009ae2:	bd80      	pop	{r7, pc}

08009ae4 <BUTTON_USER_GPIO_Init>:

/**
  * @brief
  * @retval None
  */
static void BUTTON_USER_GPIO_Init(void) {
 8009ae4:	b590      	push	{r4, r7, lr}
 8009ae6:	b089      	sub	sp, #36	; 0x24
 8009ae8:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8009aea:	4b1a      	ldr	r3, [pc, #104]	; (8009b54 <BUTTON_USER_GPIO_Init+0x70>)
 8009aec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009aee:	4b19      	ldr	r3, [pc, #100]	; (8009b54 <BUTTON_USER_GPIO_Init+0x70>)
 8009af0:	2104      	movs	r1, #4
 8009af2:	430a      	orrs	r2, r1
 8009af4:	62da      	str	r2, [r3, #44]	; 0x2c
 8009af6:	4b17      	ldr	r3, [pc, #92]	; (8009b54 <BUTTON_USER_GPIO_Init+0x70>)
 8009af8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009afa:	2204      	movs	r2, #4
 8009afc:	4013      	ands	r3, r2
 8009afe:	60bb      	str	r3, [r7, #8]
 8009b00:	68bb      	ldr	r3, [r7, #8]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009b02:	240c      	movs	r4, #12
 8009b04:	193b      	adds	r3, r7, r4
 8009b06:	0018      	movs	r0, r3
 8009b08:	2314      	movs	r3, #20
 8009b0a:	001a      	movs	r2, r3
 8009b0c:	2100      	movs	r1, #0
 8009b0e:	f009 ffaa 	bl	8013a66 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8009b12:	4b10      	ldr	r3, [pc, #64]	; (8009b54 <BUTTON_USER_GPIO_Init+0x70>)
 8009b14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b16:	4b0f      	ldr	r3, [pc, #60]	; (8009b54 <BUTTON_USER_GPIO_Init+0x70>)
 8009b18:	2104      	movs	r1, #4
 8009b1a:	430a      	orrs	r2, r1
 8009b1c:	62da      	str	r2, [r3, #44]	; 0x2c
 8009b1e:	4b0d      	ldr	r3, [pc, #52]	; (8009b54 <BUTTON_USER_GPIO_Init+0x70>)
 8009b20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b22:	2204      	movs	r2, #4
 8009b24:	4013      	ands	r3, r2
 8009b26:	607b      	str	r3, [r7, #4]
 8009b28:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PTPIN */
  GPIO_InitStruct.Pin = BUS_BSP_BUTTON_GPIO_PIN;
 8009b2a:	193b      	adds	r3, r7, r4
 8009b2c:	2280      	movs	r2, #128	; 0x80
 8009b2e:	0192      	lsls	r2, r2, #6
 8009b30:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8009b32:	193b      	adds	r3, r7, r4
 8009b34:	2284      	movs	r2, #132	; 0x84
 8009b36:	0392      	lsls	r2, r2, #14
 8009b38:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009b3a:	193b      	adds	r3, r7, r4
 8009b3c:	2200      	movs	r2, #0
 8009b3e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(BUS_BSP_BUTTON_GPIO_PORT, &GPIO_InitStruct);
 8009b40:	193b      	adds	r3, r7, r4
 8009b42:	4a05      	ldr	r2, [pc, #20]	; (8009b58 <BUTTON_USER_GPIO_Init+0x74>)
 8009b44:	0019      	movs	r1, r3
 8009b46:	0010      	movs	r0, r2
 8009b48:	f000 fd50 	bl	800a5ec <HAL_GPIO_Init>

}
 8009b4c:	46c0      	nop			; (mov r8, r8)
 8009b4e:	46bd      	mov	sp, r7
 8009b50:	b009      	add	sp, #36	; 0x24
 8009b52:	bd90      	pop	{r4, r7, pc}
 8009b54:	40021000 	.word	0x40021000
 8009b58:	50000800 	.word	0x50000800

08009b5c <BSP_COM_Init>:
 * @param  UART_Init: Pointer to a UART_HandleTypeDef structure that contains the
 *                    configuration information for the specified USART peripheral.
 * @retval BSP error code
 */
int32_t BSP_COM_Init(COM_TypeDef COM)
{
 8009b5c:	b580      	push	{r7, lr}
 8009b5e:	b084      	sub	sp, #16
 8009b60:	af00      	add	r7, sp, #0
 8009b62:	0002      	movs	r2, r0
 8009b64:	1dfb      	adds	r3, r7, #7
 8009b66:	701a      	strb	r2, [r3, #0]
  int32_t ret = BSP_ERROR_NONE;
 8009b68:	2300      	movs	r3, #0
 8009b6a:	60fb      	str	r3, [r7, #12]

  if(COM > COMn)
 8009b6c:	1dfb      	adds	r3, r7, #7
 8009b6e:	781b      	ldrb	r3, [r3, #0]
 8009b70:	2b01      	cmp	r3, #1
 8009b72:	d903      	bls.n	8009b7c <BSP_COM_Init+0x20>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8009b74:	2302      	movs	r3, #2
 8009b76:	425b      	negs	r3, r3
 8009b78:	60fb      	str	r3, [r7, #12]
 8009b7a:	e027      	b.n	8009bcc <BSP_COM_Init+0x70>
  }
  else
  {
     hcom_uart[COM].Instance = COM_USART[COM];
 8009b7c:	1dfb      	adds	r3, r7, #7
 8009b7e:	7819      	ldrb	r1, [r3, #0]
 8009b80:	1dfb      	adds	r3, r7, #7
 8009b82:	781a      	ldrb	r2, [r3, #0]
 8009b84:	4b14      	ldr	r3, [pc, #80]	; (8009bd8 <BSP_COM_Init+0x7c>)
 8009b86:	0089      	lsls	r1, r1, #2
 8009b88:	58c8      	ldr	r0, [r1, r3]
 8009b8a:	4914      	ldr	r1, [pc, #80]	; (8009bdc <BSP_COM_Init+0x80>)
 8009b8c:	0013      	movs	r3, r2
 8009b8e:	015b      	lsls	r3, r3, #5
 8009b90:	189b      	adds	r3, r3, r2
 8009b92:	009b      	lsls	r3, r3, #2
 8009b94:	5058      	str	r0, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0U)
    /* Init the UART Msp */
    USART2_MspInit(&hcom_uart[COM]);
 8009b96:	1dfb      	adds	r3, r7, #7
 8009b98:	781a      	ldrb	r2, [r3, #0]
 8009b9a:	0013      	movs	r3, r2
 8009b9c:	015b      	lsls	r3, r3, #5
 8009b9e:	189b      	adds	r3, r3, r2
 8009ba0:	009b      	lsls	r3, r3, #2
 8009ba2:	4a0e      	ldr	r2, [pc, #56]	; (8009bdc <BSP_COM_Init+0x80>)
 8009ba4:	189b      	adds	r3, r3, r2
 8009ba6:	0018      	movs	r0, r3
 8009ba8:	f000 f854 	bl	8009c54 <USART2_MspInit>
      {
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif
    if (MX_USART2_UART_Init(&hcom_uart[COM]))
 8009bac:	1dfb      	adds	r3, r7, #7
 8009bae:	781a      	ldrb	r2, [r3, #0]
 8009bb0:	0013      	movs	r3, r2
 8009bb2:	015b      	lsls	r3, r3, #5
 8009bb4:	189b      	adds	r3, r3, r2
 8009bb6:	009b      	lsls	r3, r3, #2
 8009bb8:	4a08      	ldr	r2, [pc, #32]	; (8009bdc <BSP_COM_Init+0x80>)
 8009bba:	189b      	adds	r3, r3, r2
 8009bbc:	0018      	movs	r0, r3
 8009bbe:	f000 f80f 	bl	8009be0 <MX_USART2_UART_Init>
 8009bc2:	1e03      	subs	r3, r0, #0
 8009bc4:	d002      	beq.n	8009bcc <BSP_COM_Init+0x70>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8009bc6:	2304      	movs	r3, #4
 8009bc8:	425b      	negs	r3, r3
 8009bca:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8009bcc:	68fb      	ldr	r3, [r7, #12]
}
 8009bce:	0018      	movs	r0, r3
 8009bd0:	46bd      	mov	sp, r7
 8009bd2:	b004      	add	sp, #16
 8009bd4:	bd80      	pop	{r7, pc}
 8009bd6:	46c0      	nop			; (mov r8, r8)
 8009bd8:	2000025c 	.word	0x2000025c
 8009bdc:	20000d44 	.word	0x20000d44

08009be0 <MX_USART2_UART_Init>:
 */

/* USART2 init function */

__weak HAL_StatusTypeDef MX_USART2_UART_Init(UART_HandleTypeDef* huart)
{
 8009be0:	b590      	push	{r4, r7, lr}
 8009be2:	b085      	sub	sp, #20
 8009be4:	af00      	add	r7, sp, #0
 8009be6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8009be8:	240f      	movs	r4, #15
 8009bea:	193b      	adds	r3, r7, r4
 8009bec:	2200      	movs	r2, #0
 8009bee:	701a      	strb	r2, [r3, #0]

  huart->Instance = USART2;
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	4a17      	ldr	r2, [pc, #92]	; (8009c50 <MX_USART2_UART_Init+0x70>)
 8009bf4:	601a      	str	r2, [r3, #0]
  huart->Init.BaudRate = 921600;
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	22e1      	movs	r2, #225	; 0xe1
 8009bfa:	0312      	lsls	r2, r2, #12
 8009bfc:	605a      	str	r2, [r3, #4]
  huart->Init.WordLength = UART_WORDLENGTH_8B;
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	2200      	movs	r2, #0
 8009c02:	609a      	str	r2, [r3, #8]
  huart->Init.StopBits = UART_STOPBITS_1;
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	2200      	movs	r2, #0
 8009c08:	60da      	str	r2, [r3, #12]
  huart->Init.Parity = UART_PARITY_NONE;
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	2200      	movs	r2, #0
 8009c0e:	611a      	str	r2, [r3, #16]
  huart->Init.Mode = UART_MODE_TX_RX;
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	220c      	movs	r2, #12
 8009c14:	615a      	str	r2, [r3, #20]
  huart->Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	2200      	movs	r2, #0
 8009c1a:	619a      	str	r2, [r3, #24]
  huart->Init.OverSampling = UART_OVERSAMPLING_16;
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	2200      	movs	r2, #0
 8009c20:	61da      	str	r2, [r3, #28]
  huart->Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	2200      	movs	r2, #0
 8009c26:	621a      	str	r2, [r3, #32]
  huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	2200      	movs	r2, #0
 8009c2c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(huart) != HAL_OK)
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	0018      	movs	r0, r3
 8009c32:	f003 fc53 	bl	800d4dc <HAL_UART_Init>
 8009c36:	1e03      	subs	r3, r0, #0
 8009c38:	d002      	beq.n	8009c40 <MX_USART2_UART_Init+0x60>
  {
    ret = HAL_ERROR;
 8009c3a:	193b      	adds	r3, r7, r4
 8009c3c:	2201      	movs	r2, #1
 8009c3e:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 8009c40:	230f      	movs	r3, #15
 8009c42:	18fb      	adds	r3, r7, r3
 8009c44:	781b      	ldrb	r3, [r3, #0]
}
 8009c46:	0018      	movs	r0, r3
 8009c48:	46bd      	mov	sp, r7
 8009c4a:	b005      	add	sp, #20
 8009c4c:	bd90      	pop	{r4, r7, pc}
 8009c4e:	46c0      	nop			; (mov r8, r8)
 8009c50:	40004400 	.word	0x40004400

08009c54 <USART2_MspInit>:
 * @retval None
 */
DMA_HandleTypeDef hdma_usart2_rx;

static void USART2_MspInit(UART_HandleTypeDef* uartHandle)
{
 8009c54:	b590      	push	{r4, r7, lr}
 8009c56:	b089      	sub	sp, #36	; 0x24
 8009c58:	af00      	add	r7, sp, #0
 8009c5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_USART2_CLK_ENABLE();
 8009c5c:	4b34      	ldr	r3, [pc, #208]	; (8009d30 <USART2_MspInit+0xdc>)
 8009c5e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009c60:	4b33      	ldr	r3, [pc, #204]	; (8009d30 <USART2_MspInit+0xdc>)
 8009c62:	2180      	movs	r1, #128	; 0x80
 8009c64:	0289      	lsls	r1, r1, #10
 8009c66:	430a      	orrs	r2, r1
 8009c68:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009c6a:	4b31      	ldr	r3, [pc, #196]	; (8009d30 <USART2_MspInit+0xdc>)
 8009c6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c6e:	4b30      	ldr	r3, [pc, #192]	; (8009d30 <USART2_MspInit+0xdc>)
 8009c70:	2101      	movs	r1, #1
 8009c72:	430a      	orrs	r2, r1
 8009c74:	62da      	str	r2, [r3, #44]	; 0x2c
 8009c76:	4b2e      	ldr	r3, [pc, #184]	; (8009d30 <USART2_MspInit+0xdc>)
 8009c78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c7a:	2201      	movs	r2, #1
 8009c7c:	4013      	ands	r3, r2
 8009c7e:	60bb      	str	r3, [r7, #8]
 8009c80:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = BUS_USART2_TX_GPIO_PIN;
 8009c82:	240c      	movs	r4, #12
 8009c84:	193b      	adds	r3, r7, r4
 8009c86:	2204      	movs	r2, #4
 8009c88:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009c8a:	193b      	adds	r3, r7, r4
 8009c8c:	2202      	movs	r2, #2
 8009c8e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009c90:	193b      	adds	r3, r7, r4
 8009c92:	2200      	movs	r2, #0
 8009c94:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009c96:	193b      	adds	r3, r7, r4
 8009c98:	2203      	movs	r2, #3
 8009c9a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = BUS_USART2_TX_GPIO_AF;
 8009c9c:	193b      	adds	r3, r7, r4
 8009c9e:	2204      	movs	r2, #4
 8009ca0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(BUS_USART2_TX_GPIO_PORT, &GPIO_InitStruct);
 8009ca2:	193a      	adds	r2, r7, r4
 8009ca4:	23a0      	movs	r3, #160	; 0xa0
 8009ca6:	05db      	lsls	r3, r3, #23
 8009ca8:	0011      	movs	r1, r2
 8009caa:	0018      	movs	r0, r3
 8009cac:	f000 fc9e 	bl	800a5ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_USART2_RX_GPIO_PIN;
 8009cb0:	0021      	movs	r1, r4
 8009cb2:	187b      	adds	r3, r7, r1
 8009cb4:	2208      	movs	r2, #8
 8009cb6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009cb8:	187b      	adds	r3, r7, r1
 8009cba:	2202      	movs	r2, #2
 8009cbc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009cbe:	187b      	adds	r3, r7, r1
 8009cc0:	2200      	movs	r2, #0
 8009cc2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009cc4:	187b      	adds	r3, r7, r1
 8009cc6:	2203      	movs	r2, #3
 8009cc8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = BUS_USART2_RX_GPIO_AF;
 8009cca:	187b      	adds	r3, r7, r1
 8009ccc:	2204      	movs	r2, #4
 8009cce:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(BUS_USART2_RX_GPIO_PORT, &GPIO_InitStruct);
 8009cd0:	187a      	adds	r2, r7, r1
 8009cd2:	23a0      	movs	r3, #160	; 0xa0
 8009cd4:	05db      	lsls	r3, r3, #23
 8009cd6:	0011      	movs	r1, r2
 8009cd8:	0018      	movs	r0, r3
 8009cda:	f000 fc87 	bl	800a5ec <HAL_GPIO_Init>

    /* Peripheral DMA init*/

    hdma_usart2_rx.Instance = DMA1_Channel5;
 8009cde:	4b15      	ldr	r3, [pc, #84]	; (8009d34 <USART2_MspInit+0xe0>)
 8009ce0:	4a15      	ldr	r2, [pc, #84]	; (8009d38 <USART2_MspInit+0xe4>)
 8009ce2:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_4;
 8009ce4:	4b13      	ldr	r3, [pc, #76]	; (8009d34 <USART2_MspInit+0xe0>)
 8009ce6:	2204      	movs	r2, #4
 8009ce8:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8009cea:	4b12      	ldr	r3, [pc, #72]	; (8009d34 <USART2_MspInit+0xe0>)
 8009cec:	2200      	movs	r2, #0
 8009cee:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8009cf0:	4b10      	ldr	r3, [pc, #64]	; (8009d34 <USART2_MspInit+0xe0>)
 8009cf2:	2200      	movs	r2, #0
 8009cf4:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8009cf6:	4b0f      	ldr	r3, [pc, #60]	; (8009d34 <USART2_MspInit+0xe0>)
 8009cf8:	2280      	movs	r2, #128	; 0x80
 8009cfa:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8009cfc:	4b0d      	ldr	r3, [pc, #52]	; (8009d34 <USART2_MspInit+0xe0>)
 8009cfe:	2200      	movs	r2, #0
 8009d00:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8009d02:	4b0c      	ldr	r3, [pc, #48]	; (8009d34 <USART2_MspInit+0xe0>)
 8009d04:	2200      	movs	r2, #0
 8009d06:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8009d08:	4b0a      	ldr	r3, [pc, #40]	; (8009d34 <USART2_MspInit+0xe0>)
 8009d0a:	2220      	movs	r2, #32
 8009d0c:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8009d0e:	4b09      	ldr	r3, [pc, #36]	; (8009d34 <USART2_MspInit+0xe0>)
 8009d10:	2200      	movs	r2, #0
 8009d12:	621a      	str	r2, [r3, #32]
    HAL_DMA_Init(&hdma_usart2_rx);
 8009d14:	4b07      	ldr	r3, [pc, #28]	; (8009d34 <USART2_MspInit+0xe0>)
 8009d16:	0018      	movs	r0, r3
 8009d18:	f000 fa56 	bl	800a1c8 <HAL_DMA_Init>

  __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	4a05      	ldr	r2, [pc, #20]	; (8009d34 <USART2_MspInit+0xe0>)
 8009d20:	671a      	str	r2, [r3, #112]	; 0x70
 8009d22:	4b04      	ldr	r3, [pc, #16]	; (8009d34 <USART2_MspInit+0xe0>)
 8009d24:	687a      	ldr	r2, [r7, #4]
 8009d26:	629a      	str	r2, [r3, #40]	; 0x28

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
}
 8009d28:	46c0      	nop			; (mov r8, r8)
 8009d2a:	46bd      	mov	sp, r7
 8009d2c:	b009      	add	sp, #36	; 0x24
 8009d2e:	bd90      	pop	{r4, r7, pc}
 8009d30:	40021000 	.word	0x40021000
 8009d34:	20000dc8 	.word	0x20000dc8
 8009d38:	40020058 	.word	0x40020058

08009d3c <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8009d3c:	b580      	push	{r7, lr}
 8009d3e:	b082      	sub	sp, #8
 8009d40:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8009d42:	1dfb      	adds	r3, r7, #7
 8009d44:	2200      	movs	r2, #0
 8009d46:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8009d48:	4b0b      	ldr	r3, [pc, #44]	; (8009d78 <HAL_Init+0x3c>)
 8009d4a:	681a      	ldr	r2, [r3, #0]
 8009d4c:	4b0a      	ldr	r3, [pc, #40]	; (8009d78 <HAL_Init+0x3c>)
 8009d4e:	2140      	movs	r1, #64	; 0x40
 8009d50:	430a      	orrs	r2, r1
 8009d52:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8009d54:	2000      	movs	r0, #0
 8009d56:	f000 f811 	bl	8009d7c <HAL_InitTick>
 8009d5a:	1e03      	subs	r3, r0, #0
 8009d5c:	d003      	beq.n	8009d66 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8009d5e:	1dfb      	adds	r3, r7, #7
 8009d60:	2201      	movs	r2, #1
 8009d62:	701a      	strb	r2, [r3, #0]
 8009d64:	e001      	b.n	8009d6a <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8009d66:	f7f7 fdc3 	bl	80018f0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8009d6a:	1dfb      	adds	r3, r7, #7
 8009d6c:	781b      	ldrb	r3, [r3, #0]
}
 8009d6e:	0018      	movs	r0, r3
 8009d70:	46bd      	mov	sp, r7
 8009d72:	b002      	add	sp, #8
 8009d74:	bd80      	pop	{r7, pc}
 8009d76:	46c0      	nop			; (mov r8, r8)
 8009d78:	40022000 	.word	0x40022000

08009d7c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8009d7c:	b590      	push	{r4, r7, lr}
 8009d7e:	b083      	sub	sp, #12
 8009d80:	af00      	add	r7, sp, #0
 8009d82:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8009d84:	4b14      	ldr	r3, [pc, #80]	; (8009dd8 <HAL_InitTick+0x5c>)
 8009d86:	681c      	ldr	r4, [r3, #0]
 8009d88:	4b14      	ldr	r3, [pc, #80]	; (8009ddc <HAL_InitTick+0x60>)
 8009d8a:	781b      	ldrb	r3, [r3, #0]
 8009d8c:	0019      	movs	r1, r3
 8009d8e:	23fa      	movs	r3, #250	; 0xfa
 8009d90:	0098      	lsls	r0, r3, #2
 8009d92:	f7f6 f9c3 	bl	800011c <__udivsi3>
 8009d96:	0003      	movs	r3, r0
 8009d98:	0019      	movs	r1, r3
 8009d9a:	0020      	movs	r0, r4
 8009d9c:	f7f6 f9be 	bl	800011c <__udivsi3>
 8009da0:	0003      	movs	r3, r0
 8009da2:	0018      	movs	r0, r3
 8009da4:	f000 f92f 	bl	800a006 <HAL_SYSTICK_Config>
 8009da8:	1e03      	subs	r3, r0, #0
 8009daa:	d001      	beq.n	8009db0 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8009dac:	2301      	movs	r3, #1
 8009dae:	e00f      	b.n	8009dd0 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	2b03      	cmp	r3, #3
 8009db4:	d80b      	bhi.n	8009dce <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8009db6:	6879      	ldr	r1, [r7, #4]
 8009db8:	2301      	movs	r3, #1
 8009dba:	425b      	negs	r3, r3
 8009dbc:	2200      	movs	r2, #0
 8009dbe:	0018      	movs	r0, r3
 8009dc0:	f000 f8fc 	bl	8009fbc <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8009dc4:	4b06      	ldr	r3, [pc, #24]	; (8009de0 <HAL_InitTick+0x64>)
 8009dc6:	687a      	ldr	r2, [r7, #4]
 8009dc8:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8009dca:	2300      	movs	r3, #0
 8009dcc:	e000      	b.n	8009dd0 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8009dce:	2301      	movs	r3, #1
}
 8009dd0:	0018      	movs	r0, r3
 8009dd2:	46bd      	mov	sp, r7
 8009dd4:	b003      	add	sp, #12
 8009dd6:	bd90      	pop	{r4, r7, pc}
 8009dd8:	200000cc 	.word	0x200000cc
 8009ddc:	20000264 	.word	0x20000264
 8009de0:	20000260 	.word	0x20000260

08009de4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8009de4:	b580      	push	{r7, lr}
 8009de6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8009de8:	4b05      	ldr	r3, [pc, #20]	; (8009e00 <HAL_IncTick+0x1c>)
 8009dea:	781b      	ldrb	r3, [r3, #0]
 8009dec:	001a      	movs	r2, r3
 8009dee:	4b05      	ldr	r3, [pc, #20]	; (8009e04 <HAL_IncTick+0x20>)
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	18d2      	adds	r2, r2, r3
 8009df4:	4b03      	ldr	r3, [pc, #12]	; (8009e04 <HAL_IncTick+0x20>)
 8009df6:	601a      	str	r2, [r3, #0]
}
 8009df8:	46c0      	nop			; (mov r8, r8)
 8009dfa:	46bd      	mov	sp, r7
 8009dfc:	bd80      	pop	{r7, pc}
 8009dfe:	46c0      	nop			; (mov r8, r8)
 8009e00:	20000264 	.word	0x20000264
 8009e04:	20000e10 	.word	0x20000e10

08009e08 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8009e08:	b580      	push	{r7, lr}
 8009e0a:	af00      	add	r7, sp, #0
  return uwTick;
 8009e0c:	4b02      	ldr	r3, [pc, #8]	; (8009e18 <HAL_GetTick+0x10>)
 8009e0e:	681b      	ldr	r3, [r3, #0]
}
 8009e10:	0018      	movs	r0, r3
 8009e12:	46bd      	mov	sp, r7
 8009e14:	bd80      	pop	{r7, pc}
 8009e16:	46c0      	nop			; (mov r8, r8)
 8009e18:	20000e10 	.word	0x20000e10

08009e1c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8009e1c:	b580      	push	{r7, lr}
 8009e1e:	b084      	sub	sp, #16
 8009e20:	af00      	add	r7, sp, #0
 8009e22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8009e24:	f7ff fff0 	bl	8009e08 <HAL_GetTick>
 8009e28:	0003      	movs	r3, r0
 8009e2a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	3301      	adds	r3, #1
 8009e34:	d005      	beq.n	8009e42 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8009e36:	4b0a      	ldr	r3, [pc, #40]	; (8009e60 <HAL_Delay+0x44>)
 8009e38:	781b      	ldrb	r3, [r3, #0]
 8009e3a:	001a      	movs	r2, r3
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	189b      	adds	r3, r3, r2
 8009e40:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8009e42:	46c0      	nop			; (mov r8, r8)
 8009e44:	f7ff ffe0 	bl	8009e08 <HAL_GetTick>
 8009e48:	0002      	movs	r2, r0
 8009e4a:	68bb      	ldr	r3, [r7, #8]
 8009e4c:	1ad3      	subs	r3, r2, r3
 8009e4e:	68fa      	ldr	r2, [r7, #12]
 8009e50:	429a      	cmp	r2, r3
 8009e52:	d8f7      	bhi.n	8009e44 <HAL_Delay+0x28>
  {
  }
}
 8009e54:	46c0      	nop			; (mov r8, r8)
 8009e56:	46c0      	nop			; (mov r8, r8)
 8009e58:	46bd      	mov	sp, r7
 8009e5a:	b004      	add	sp, #16
 8009e5c:	bd80      	pop	{r7, pc}
 8009e5e:	46c0      	nop			; (mov r8, r8)
 8009e60:	20000264 	.word	0x20000264

08009e64 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009e64:	b580      	push	{r7, lr}
 8009e66:	b082      	sub	sp, #8
 8009e68:	af00      	add	r7, sp, #0
 8009e6a:	0002      	movs	r2, r0
 8009e6c:	1dfb      	adds	r3, r7, #7
 8009e6e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8009e70:	1dfb      	adds	r3, r7, #7
 8009e72:	781b      	ldrb	r3, [r3, #0]
 8009e74:	2b7f      	cmp	r3, #127	; 0x7f
 8009e76:	d809      	bhi.n	8009e8c <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8009e78:	1dfb      	adds	r3, r7, #7
 8009e7a:	781b      	ldrb	r3, [r3, #0]
 8009e7c:	001a      	movs	r2, r3
 8009e7e:	231f      	movs	r3, #31
 8009e80:	401a      	ands	r2, r3
 8009e82:	4b04      	ldr	r3, [pc, #16]	; (8009e94 <__NVIC_EnableIRQ+0x30>)
 8009e84:	2101      	movs	r1, #1
 8009e86:	4091      	lsls	r1, r2
 8009e88:	000a      	movs	r2, r1
 8009e8a:	601a      	str	r2, [r3, #0]
  }
}
 8009e8c:	46c0      	nop			; (mov r8, r8)
 8009e8e:	46bd      	mov	sp, r7
 8009e90:	b002      	add	sp, #8
 8009e92:	bd80      	pop	{r7, pc}
 8009e94:	e000e100 	.word	0xe000e100

08009e98 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8009e98:	b590      	push	{r4, r7, lr}
 8009e9a:	b083      	sub	sp, #12
 8009e9c:	af00      	add	r7, sp, #0
 8009e9e:	0002      	movs	r2, r0
 8009ea0:	6039      	str	r1, [r7, #0]
 8009ea2:	1dfb      	adds	r3, r7, #7
 8009ea4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8009ea6:	1dfb      	adds	r3, r7, #7
 8009ea8:	781b      	ldrb	r3, [r3, #0]
 8009eaa:	2b7f      	cmp	r3, #127	; 0x7f
 8009eac:	d828      	bhi.n	8009f00 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8009eae:	4a2f      	ldr	r2, [pc, #188]	; (8009f6c <__NVIC_SetPriority+0xd4>)
 8009eb0:	1dfb      	adds	r3, r7, #7
 8009eb2:	781b      	ldrb	r3, [r3, #0]
 8009eb4:	b25b      	sxtb	r3, r3
 8009eb6:	089b      	lsrs	r3, r3, #2
 8009eb8:	33c0      	adds	r3, #192	; 0xc0
 8009eba:	009b      	lsls	r3, r3, #2
 8009ebc:	589b      	ldr	r3, [r3, r2]
 8009ebe:	1dfa      	adds	r2, r7, #7
 8009ec0:	7812      	ldrb	r2, [r2, #0]
 8009ec2:	0011      	movs	r1, r2
 8009ec4:	2203      	movs	r2, #3
 8009ec6:	400a      	ands	r2, r1
 8009ec8:	00d2      	lsls	r2, r2, #3
 8009eca:	21ff      	movs	r1, #255	; 0xff
 8009ecc:	4091      	lsls	r1, r2
 8009ece:	000a      	movs	r2, r1
 8009ed0:	43d2      	mvns	r2, r2
 8009ed2:	401a      	ands	r2, r3
 8009ed4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8009ed6:	683b      	ldr	r3, [r7, #0]
 8009ed8:	019b      	lsls	r3, r3, #6
 8009eda:	22ff      	movs	r2, #255	; 0xff
 8009edc:	401a      	ands	r2, r3
 8009ede:	1dfb      	adds	r3, r7, #7
 8009ee0:	781b      	ldrb	r3, [r3, #0]
 8009ee2:	0018      	movs	r0, r3
 8009ee4:	2303      	movs	r3, #3
 8009ee6:	4003      	ands	r3, r0
 8009ee8:	00db      	lsls	r3, r3, #3
 8009eea:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8009eec:	481f      	ldr	r0, [pc, #124]	; (8009f6c <__NVIC_SetPriority+0xd4>)
 8009eee:	1dfb      	adds	r3, r7, #7
 8009ef0:	781b      	ldrb	r3, [r3, #0]
 8009ef2:	b25b      	sxtb	r3, r3
 8009ef4:	089b      	lsrs	r3, r3, #2
 8009ef6:	430a      	orrs	r2, r1
 8009ef8:	33c0      	adds	r3, #192	; 0xc0
 8009efa:	009b      	lsls	r3, r3, #2
 8009efc:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8009efe:	e031      	b.n	8009f64 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8009f00:	4a1b      	ldr	r2, [pc, #108]	; (8009f70 <__NVIC_SetPriority+0xd8>)
 8009f02:	1dfb      	adds	r3, r7, #7
 8009f04:	781b      	ldrb	r3, [r3, #0]
 8009f06:	0019      	movs	r1, r3
 8009f08:	230f      	movs	r3, #15
 8009f0a:	400b      	ands	r3, r1
 8009f0c:	3b08      	subs	r3, #8
 8009f0e:	089b      	lsrs	r3, r3, #2
 8009f10:	3306      	adds	r3, #6
 8009f12:	009b      	lsls	r3, r3, #2
 8009f14:	18d3      	adds	r3, r2, r3
 8009f16:	3304      	adds	r3, #4
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	1dfa      	adds	r2, r7, #7
 8009f1c:	7812      	ldrb	r2, [r2, #0]
 8009f1e:	0011      	movs	r1, r2
 8009f20:	2203      	movs	r2, #3
 8009f22:	400a      	ands	r2, r1
 8009f24:	00d2      	lsls	r2, r2, #3
 8009f26:	21ff      	movs	r1, #255	; 0xff
 8009f28:	4091      	lsls	r1, r2
 8009f2a:	000a      	movs	r2, r1
 8009f2c:	43d2      	mvns	r2, r2
 8009f2e:	401a      	ands	r2, r3
 8009f30:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8009f32:	683b      	ldr	r3, [r7, #0]
 8009f34:	019b      	lsls	r3, r3, #6
 8009f36:	22ff      	movs	r2, #255	; 0xff
 8009f38:	401a      	ands	r2, r3
 8009f3a:	1dfb      	adds	r3, r7, #7
 8009f3c:	781b      	ldrb	r3, [r3, #0]
 8009f3e:	0018      	movs	r0, r3
 8009f40:	2303      	movs	r3, #3
 8009f42:	4003      	ands	r3, r0
 8009f44:	00db      	lsls	r3, r3, #3
 8009f46:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8009f48:	4809      	ldr	r0, [pc, #36]	; (8009f70 <__NVIC_SetPriority+0xd8>)
 8009f4a:	1dfb      	adds	r3, r7, #7
 8009f4c:	781b      	ldrb	r3, [r3, #0]
 8009f4e:	001c      	movs	r4, r3
 8009f50:	230f      	movs	r3, #15
 8009f52:	4023      	ands	r3, r4
 8009f54:	3b08      	subs	r3, #8
 8009f56:	089b      	lsrs	r3, r3, #2
 8009f58:	430a      	orrs	r2, r1
 8009f5a:	3306      	adds	r3, #6
 8009f5c:	009b      	lsls	r3, r3, #2
 8009f5e:	18c3      	adds	r3, r0, r3
 8009f60:	3304      	adds	r3, #4
 8009f62:	601a      	str	r2, [r3, #0]
}
 8009f64:	46c0      	nop			; (mov r8, r8)
 8009f66:	46bd      	mov	sp, r7
 8009f68:	b003      	add	sp, #12
 8009f6a:	bd90      	pop	{r4, r7, pc}
 8009f6c:	e000e100 	.word	0xe000e100
 8009f70:	e000ed00 	.word	0xe000ed00

08009f74 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8009f74:	b580      	push	{r7, lr}
 8009f76:	b082      	sub	sp, #8
 8009f78:	af00      	add	r7, sp, #0
 8009f7a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	1e5a      	subs	r2, r3, #1
 8009f80:	2380      	movs	r3, #128	; 0x80
 8009f82:	045b      	lsls	r3, r3, #17
 8009f84:	429a      	cmp	r2, r3
 8009f86:	d301      	bcc.n	8009f8c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8009f88:	2301      	movs	r3, #1
 8009f8a:	e010      	b.n	8009fae <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8009f8c:	4b0a      	ldr	r3, [pc, #40]	; (8009fb8 <SysTick_Config+0x44>)
 8009f8e:	687a      	ldr	r2, [r7, #4]
 8009f90:	3a01      	subs	r2, #1
 8009f92:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8009f94:	2301      	movs	r3, #1
 8009f96:	425b      	negs	r3, r3
 8009f98:	2103      	movs	r1, #3
 8009f9a:	0018      	movs	r0, r3
 8009f9c:	f7ff ff7c 	bl	8009e98 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8009fa0:	4b05      	ldr	r3, [pc, #20]	; (8009fb8 <SysTick_Config+0x44>)
 8009fa2:	2200      	movs	r2, #0
 8009fa4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8009fa6:	4b04      	ldr	r3, [pc, #16]	; (8009fb8 <SysTick_Config+0x44>)
 8009fa8:	2207      	movs	r2, #7
 8009faa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8009fac:	2300      	movs	r3, #0
}
 8009fae:	0018      	movs	r0, r3
 8009fb0:	46bd      	mov	sp, r7
 8009fb2:	b002      	add	sp, #8
 8009fb4:	bd80      	pop	{r7, pc}
 8009fb6:	46c0      	nop			; (mov r8, r8)
 8009fb8:	e000e010 	.word	0xe000e010

08009fbc <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8009fbc:	b580      	push	{r7, lr}
 8009fbe:	b084      	sub	sp, #16
 8009fc0:	af00      	add	r7, sp, #0
 8009fc2:	60b9      	str	r1, [r7, #8]
 8009fc4:	607a      	str	r2, [r7, #4]
 8009fc6:	210f      	movs	r1, #15
 8009fc8:	187b      	adds	r3, r7, r1
 8009fca:	1c02      	adds	r2, r0, #0
 8009fcc:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8009fce:	68ba      	ldr	r2, [r7, #8]
 8009fd0:	187b      	adds	r3, r7, r1
 8009fd2:	781b      	ldrb	r3, [r3, #0]
 8009fd4:	b25b      	sxtb	r3, r3
 8009fd6:	0011      	movs	r1, r2
 8009fd8:	0018      	movs	r0, r3
 8009fda:	f7ff ff5d 	bl	8009e98 <__NVIC_SetPriority>
}
 8009fde:	46c0      	nop			; (mov r8, r8)
 8009fe0:	46bd      	mov	sp, r7
 8009fe2:	b004      	add	sp, #16
 8009fe4:	bd80      	pop	{r7, pc}

08009fe6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009fe6:	b580      	push	{r7, lr}
 8009fe8:	b082      	sub	sp, #8
 8009fea:	af00      	add	r7, sp, #0
 8009fec:	0002      	movs	r2, r0
 8009fee:	1dfb      	adds	r3, r7, #7
 8009ff0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8009ff2:	1dfb      	adds	r3, r7, #7
 8009ff4:	781b      	ldrb	r3, [r3, #0]
 8009ff6:	b25b      	sxtb	r3, r3
 8009ff8:	0018      	movs	r0, r3
 8009ffa:	f7ff ff33 	bl	8009e64 <__NVIC_EnableIRQ>
}
 8009ffe:	46c0      	nop			; (mov r8, r8)
 800a000:	46bd      	mov	sp, r7
 800a002:	b002      	add	sp, #8
 800a004:	bd80      	pop	{r7, pc}

0800a006 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800a006:	b580      	push	{r7, lr}
 800a008:	b082      	sub	sp, #8
 800a00a:	af00      	add	r7, sp, #0
 800a00c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	0018      	movs	r0, r3
 800a012:	f7ff ffaf 	bl	8009f74 <SysTick_Config>
 800a016:	0003      	movs	r3, r0
}
 800a018:	0018      	movs	r0, r3
 800a01a:	46bd      	mov	sp, r7
 800a01c:	b002      	add	sp, #8
 800a01e:	bd80      	pop	{r7, pc}

0800a020 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800a020:	b580      	push	{r7, lr}
 800a022:	b082      	sub	sp, #8
 800a024:	af00      	add	r7, sp, #0
 800a026:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	2b00      	cmp	r3, #0
 800a02c:	d101      	bne.n	800a032 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800a02e:	2301      	movs	r3, #1
 800a030:	e056      	b.n	800a0e0 <HAL_CRC_Init+0xc0>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	7f5b      	ldrb	r3, [r3, #29]
 800a036:	b2db      	uxtb	r3, r3
 800a038:	2b00      	cmp	r3, #0
 800a03a:	d106      	bne.n	800a04a <HAL_CRC_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	2200      	movs	r2, #0
 800a040:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	0018      	movs	r0, r3
 800a046:	f7f7 fc67 	bl	8001918 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	2202      	movs	r2, #2
 800a04e:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	791b      	ldrb	r3, [r3, #4]
 800a054:	2b00      	cmp	r3, #0
 800a056:	d10c      	bne.n	800a072 <HAL_CRC_Init+0x52>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	4a22      	ldr	r2, [pc, #136]	; (800a0e8 <HAL_CRC_Init+0xc8>)
 800a05e:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	689a      	ldr	r2, [r3, #8]
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	2118      	movs	r1, #24
 800a06c:	438a      	bics	r2, r1
 800a06e:	609a      	str	r2, [r3, #8]
 800a070:	e00b      	b.n	800a08a <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	6899      	ldr	r1, [r3, #8]
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	68da      	ldr	r2, [r3, #12]
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	0018      	movs	r0, r3
 800a07e:	f000 f835 	bl	800a0ec <HAL_CRCEx_Polynomial_Set>
 800a082:	1e03      	subs	r3, r0, #0
 800a084:	d001      	beq.n	800a08a <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 800a086:	2301      	movs	r3, #1
 800a088:	e02a      	b.n	800a0e0 <HAL_CRC_Init+0xc0>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	795b      	ldrb	r3, [r3, #5]
 800a08e:	2b00      	cmp	r3, #0
 800a090:	d105      	bne.n	800a09e <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	2201      	movs	r2, #1
 800a098:	4252      	negs	r2, r2
 800a09a:	611a      	str	r2, [r3, #16]
 800a09c:	e004      	b.n	800a0a8 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	687a      	ldr	r2, [r7, #4]
 800a0a4:	6912      	ldr	r2, [r2, #16]
 800a0a6:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	689b      	ldr	r3, [r3, #8]
 800a0ae:	2260      	movs	r2, #96	; 0x60
 800a0b0:	4393      	bics	r3, r2
 800a0b2:	0019      	movs	r1, r3
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	695a      	ldr	r2, [r3, #20]
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	430a      	orrs	r2, r1
 800a0be:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	689b      	ldr	r3, [r3, #8]
 800a0c6:	2280      	movs	r2, #128	; 0x80
 800a0c8:	4393      	bics	r3, r2
 800a0ca:	0019      	movs	r1, r3
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	699a      	ldr	r2, [r3, #24]
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	430a      	orrs	r2, r1
 800a0d6:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	2201      	movs	r2, #1
 800a0dc:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 800a0de:	2300      	movs	r3, #0
}
 800a0e0:	0018      	movs	r0, r3
 800a0e2:	46bd      	mov	sp, r7
 800a0e4:	b002      	add	sp, #8
 800a0e6:	bd80      	pop	{r7, pc}
 800a0e8:	04c11db7 	.word	0x04c11db7

0800a0ec <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 800a0ec:	b580      	push	{r7, lr}
 800a0ee:	b086      	sub	sp, #24
 800a0f0:	af00      	add	r7, sp, #0
 800a0f2:	60f8      	str	r0, [r7, #12]
 800a0f4:	60b9      	str	r1, [r7, #8]
 800a0f6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a0f8:	2317      	movs	r3, #23
 800a0fa:	18fb      	adds	r3, r7, r3
 800a0fc:	2200      	movs	r2, #0
 800a0fe:	701a      	strb	r2, [r3, #0]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 800a100:	231f      	movs	r3, #31
 800a102:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 800a104:	46c0      	nop			; (mov r8, r8)
 800a106:	693b      	ldr	r3, [r7, #16]
 800a108:	1e5a      	subs	r2, r3, #1
 800a10a:	613a      	str	r2, [r7, #16]
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	d008      	beq.n	800a122 <HAL_CRCEx_Polynomial_Set+0x36>
 800a110:	693b      	ldr	r3, [r7, #16]
 800a112:	221f      	movs	r2, #31
 800a114:	4013      	ands	r3, r2
 800a116:	68ba      	ldr	r2, [r7, #8]
 800a118:	40da      	lsrs	r2, r3
 800a11a:	0013      	movs	r3, r2
 800a11c:	2201      	movs	r2, #1
 800a11e:	4013      	ands	r3, r2
 800a120:	d0f1      	beq.n	800a106 <HAL_CRCEx_Polynomial_Set+0x1a>
  {
  }

  switch (PolyLength)
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	2b18      	cmp	r3, #24
 800a126:	d00f      	beq.n	800a148 <HAL_CRCEx_Polynomial_Set+0x5c>
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	2b18      	cmp	r3, #24
 800a12c:	d824      	bhi.n	800a178 <HAL_CRCEx_Polynomial_Set+0x8c>
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	2b10      	cmp	r3, #16
 800a132:	d011      	beq.n	800a158 <HAL_CRCEx_Polynomial_Set+0x6c>
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	2b10      	cmp	r3, #16
 800a138:	d81e      	bhi.n	800a178 <HAL_CRCEx_Polynomial_Set+0x8c>
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	2b00      	cmp	r3, #0
 800a13e:	d020      	beq.n	800a182 <HAL_CRCEx_Polynomial_Set+0x96>
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	2b08      	cmp	r3, #8
 800a144:	d010      	beq.n	800a168 <HAL_CRCEx_Polynomial_Set+0x7c>
 800a146:	e017      	b.n	800a178 <HAL_CRCEx_Polynomial_Set+0x8c>
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 800a148:	693b      	ldr	r3, [r7, #16]
 800a14a:	2b06      	cmp	r3, #6
 800a14c:	d91b      	bls.n	800a186 <HAL_CRCEx_Polynomial_Set+0x9a>
      {
        status =   HAL_ERROR;
 800a14e:	2317      	movs	r3, #23
 800a150:	18fb      	adds	r3, r7, r3
 800a152:	2201      	movs	r2, #1
 800a154:	701a      	strb	r2, [r3, #0]
      }
      break;
 800a156:	e016      	b.n	800a186 <HAL_CRCEx_Polynomial_Set+0x9a>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 800a158:	693b      	ldr	r3, [r7, #16]
 800a15a:	2b07      	cmp	r3, #7
 800a15c:	d915      	bls.n	800a18a <HAL_CRCEx_Polynomial_Set+0x9e>
      {
        status =   HAL_ERROR;
 800a15e:	2317      	movs	r3, #23
 800a160:	18fb      	adds	r3, r7, r3
 800a162:	2201      	movs	r2, #1
 800a164:	701a      	strb	r2, [r3, #0]
      }
      break;
 800a166:	e010      	b.n	800a18a <HAL_CRCEx_Polynomial_Set+0x9e>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 800a168:	693b      	ldr	r3, [r7, #16]
 800a16a:	2b0f      	cmp	r3, #15
 800a16c:	d90f      	bls.n	800a18e <HAL_CRCEx_Polynomial_Set+0xa2>
      {
        status =   HAL_ERROR;
 800a16e:	2317      	movs	r3, #23
 800a170:	18fb      	adds	r3, r7, r3
 800a172:	2201      	movs	r2, #1
 800a174:	701a      	strb	r2, [r3, #0]
      }
      break;
 800a176:	e00a      	b.n	800a18e <HAL_CRCEx_Polynomial_Set+0xa2>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 800a178:	2317      	movs	r3, #23
 800a17a:	18fb      	adds	r3, r7, r3
 800a17c:	2201      	movs	r2, #1
 800a17e:	701a      	strb	r2, [r3, #0]
      break;
 800a180:	e006      	b.n	800a190 <HAL_CRCEx_Polynomial_Set+0xa4>
      break;
 800a182:	46c0      	nop			; (mov r8, r8)
 800a184:	e004      	b.n	800a190 <HAL_CRCEx_Polynomial_Set+0xa4>
      break;
 800a186:	46c0      	nop			; (mov r8, r8)
 800a188:	e002      	b.n	800a190 <HAL_CRCEx_Polynomial_Set+0xa4>
      break;
 800a18a:	46c0      	nop			; (mov r8, r8)
 800a18c:	e000      	b.n	800a190 <HAL_CRCEx_Polynomial_Set+0xa4>
      break;
 800a18e:	46c0      	nop			; (mov r8, r8)
  }
  if (status == HAL_OK)
 800a190:	2317      	movs	r3, #23
 800a192:	18fb      	adds	r3, r7, r3
 800a194:	781b      	ldrb	r3, [r3, #0]
 800a196:	2b00      	cmp	r3, #0
 800a198:	d10e      	bne.n	800a1b8 <HAL_CRCEx_Polynomial_Set+0xcc>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 800a19a:	68fb      	ldr	r3, [r7, #12]
 800a19c:	681b      	ldr	r3, [r3, #0]
 800a19e:	68ba      	ldr	r2, [r7, #8]
 800a1a0:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800a1a2:	68fb      	ldr	r3, [r7, #12]
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	689b      	ldr	r3, [r3, #8]
 800a1a8:	2218      	movs	r2, #24
 800a1aa:	4393      	bics	r3, r2
 800a1ac:	0019      	movs	r1, r3
 800a1ae:	68fb      	ldr	r3, [r7, #12]
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	687a      	ldr	r2, [r7, #4]
 800a1b4:	430a      	orrs	r2, r1
 800a1b6:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 800a1b8:	2317      	movs	r3, #23
 800a1ba:	18fb      	adds	r3, r7, r3
 800a1bc:	781b      	ldrb	r3, [r3, #0]
}
 800a1be:	0018      	movs	r0, r3
 800a1c0:	46bd      	mov	sp, r7
 800a1c2:	b006      	add	sp, #24
 800a1c4:	bd80      	pop	{r7, pc}
	...

0800a1c8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800a1c8:	b580      	push	{r7, lr}
 800a1ca:	b084      	sub	sp, #16
 800a1cc:	af00      	add	r7, sp, #0
 800a1ce:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	d101      	bne.n	800a1da <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800a1d6:	2301      	movs	r3, #1
 800a1d8:	e061      	b.n	800a29e <HAL_DMA_Init+0xd6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	4a32      	ldr	r2, [pc, #200]	; (800a2a8 <HAL_DMA_Init+0xe0>)
 800a1e0:	4694      	mov	ip, r2
 800a1e2:	4463      	add	r3, ip
 800a1e4:	2114      	movs	r1, #20
 800a1e6:	0018      	movs	r0, r3
 800a1e8:	f7f5 ff98 	bl	800011c <__udivsi3>
 800a1ec:	0003      	movs	r3, r0
 800a1ee:	009a      	lsls	r2, r3, #2
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->DmaBaseAddress = DMA1;
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	4a2d      	ldr	r2, [pc, #180]	; (800a2ac <HAL_DMA_Init+0xe4>)
 800a1f8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	2225      	movs	r2, #37	; 0x25
 800a1fe:	2102      	movs	r1, #2
 800a200:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800a20a:	68fb      	ldr	r3, [r7, #12]
 800a20c:	4a28      	ldr	r2, [pc, #160]	; (800a2b0 <HAL_DMA_Init+0xe8>)
 800a20e:	4013      	ands	r3, r2
 800a210:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800a21a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	691b      	ldr	r3, [r3, #16]
 800a220:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a226:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	699b      	ldr	r3, [r3, #24]
 800a22c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a232:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	6a1b      	ldr	r3, [r3, #32]
 800a238:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800a23a:	68fa      	ldr	r2, [r7, #12]
 800a23c:	4313      	orrs	r3, r2
 800a23e:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	68fa      	ldr	r2, [r7, #12]
 800a246:	601a      	str	r2, [r3, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	689a      	ldr	r2, [r3, #8]
 800a24c:	2380      	movs	r3, #128	; 0x80
 800a24e:	01db      	lsls	r3, r3, #7
 800a250:	429a      	cmp	r2, r3
 800a252:	d018      	beq.n	800a286 <HAL_DMA_Init+0xbe>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800a254:	4b17      	ldr	r3, [pc, #92]	; (800a2b4 <HAL_DMA_Init+0xec>)
 800a256:	681a      	ldr	r2, [r3, #0]
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a25c:	211c      	movs	r1, #28
 800a25e:	400b      	ands	r3, r1
 800a260:	210f      	movs	r1, #15
 800a262:	4099      	lsls	r1, r3
 800a264:	000b      	movs	r3, r1
 800a266:	43d9      	mvns	r1, r3
 800a268:	4b12      	ldr	r3, [pc, #72]	; (800a2b4 <HAL_DMA_Init+0xec>)
 800a26a:	400a      	ands	r2, r1
 800a26c:	601a      	str	r2, [r3, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800a26e:	4b11      	ldr	r3, [pc, #68]	; (800a2b4 <HAL_DMA_Init+0xec>)
 800a270:	6819      	ldr	r1, [r3, #0]
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	685a      	ldr	r2, [r3, #4]
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a27a:	201c      	movs	r0, #28
 800a27c:	4003      	ands	r3, r0
 800a27e:	409a      	lsls	r2, r3
 800a280:	4b0c      	ldr	r3, [pc, #48]	; (800a2b4 <HAL_DMA_Init+0xec>)
 800a282:	430a      	orrs	r2, r1
 800a284:	601a      	str	r2, [r3, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	2200      	movs	r2, #0
 800a28a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	2225      	movs	r2, #37	; 0x25
 800a290:	2101      	movs	r1, #1
 800a292:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	2224      	movs	r2, #36	; 0x24
 800a298:	2100      	movs	r1, #0
 800a29a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800a29c:	2300      	movs	r3, #0
}
 800a29e:	0018      	movs	r0, r3
 800a2a0:	46bd      	mov	sp, r7
 800a2a2:	b004      	add	sp, #16
 800a2a4:	bd80      	pop	{r7, pc}
 800a2a6:	46c0      	nop			; (mov r8, r8)
 800a2a8:	bffdfff8 	.word	0xbffdfff8
 800a2ac:	40020000 	.word	0x40020000
 800a2b0:	ffff800f 	.word	0xffff800f
 800a2b4:	400200a8 	.word	0x400200a8

0800a2b8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800a2b8:	b580      	push	{r7, lr}
 800a2ba:	b086      	sub	sp, #24
 800a2bc:	af00      	add	r7, sp, #0
 800a2be:	60f8      	str	r0, [r7, #12]
 800a2c0:	60b9      	str	r1, [r7, #8]
 800a2c2:	607a      	str	r2, [r7, #4]
 800a2c4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a2c6:	2317      	movs	r3, #23
 800a2c8:	18fb      	adds	r3, r7, r3
 800a2ca:	2200      	movs	r2, #0
 800a2cc:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800a2ce:	68fb      	ldr	r3, [r7, #12]
 800a2d0:	2224      	movs	r2, #36	; 0x24
 800a2d2:	5c9b      	ldrb	r3, [r3, r2]
 800a2d4:	2b01      	cmp	r3, #1
 800a2d6:	d101      	bne.n	800a2dc <HAL_DMA_Start_IT+0x24>
 800a2d8:	2302      	movs	r3, #2
 800a2da:	e04f      	b.n	800a37c <HAL_DMA_Start_IT+0xc4>
 800a2dc:	68fb      	ldr	r3, [r7, #12]
 800a2de:	2224      	movs	r2, #36	; 0x24
 800a2e0:	2101      	movs	r1, #1
 800a2e2:	5499      	strb	r1, [r3, r2]

  if(HAL_DMA_STATE_READY == hdma->State)
 800a2e4:	68fb      	ldr	r3, [r7, #12]
 800a2e6:	2225      	movs	r2, #37	; 0x25
 800a2e8:	5c9b      	ldrb	r3, [r3, r2]
 800a2ea:	b2db      	uxtb	r3, r3
 800a2ec:	2b01      	cmp	r3, #1
 800a2ee:	d13a      	bne.n	800a366 <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800a2f0:	68fb      	ldr	r3, [r7, #12]
 800a2f2:	2225      	movs	r2, #37	; 0x25
 800a2f4:	2102      	movs	r1, #2
 800a2f6:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800a2f8:	68fb      	ldr	r3, [r7, #12]
 800a2fa:	2200      	movs	r2, #0
 800a2fc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800a2fe:	68fb      	ldr	r3, [r7, #12]
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	681a      	ldr	r2, [r3, #0]
 800a304:	68fb      	ldr	r3, [r7, #12]
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	2101      	movs	r1, #1
 800a30a:	438a      	bics	r2, r1
 800a30c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800a30e:	683b      	ldr	r3, [r7, #0]
 800a310:	687a      	ldr	r2, [r7, #4]
 800a312:	68b9      	ldr	r1, [r7, #8]
 800a314:	68f8      	ldr	r0, [r7, #12]
 800a316:	f000 f8e3 	bl	800a4e0 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 800a31a:	68fb      	ldr	r3, [r7, #12]
 800a31c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a31e:	2b00      	cmp	r3, #0
 800a320:	d008      	beq.n	800a334 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800a322:	68fb      	ldr	r3, [r7, #12]
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	681a      	ldr	r2, [r3, #0]
 800a328:	68fb      	ldr	r3, [r7, #12]
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	210e      	movs	r1, #14
 800a32e:	430a      	orrs	r2, r1
 800a330:	601a      	str	r2, [r3, #0]
 800a332:	e00f      	b.n	800a354 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	681a      	ldr	r2, [r3, #0]
 800a33a:	68fb      	ldr	r3, [r7, #12]
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	2104      	movs	r1, #4
 800a340:	438a      	bics	r2, r1
 800a342:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800a344:	68fb      	ldr	r3, [r7, #12]
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	681a      	ldr	r2, [r3, #0]
 800a34a:	68fb      	ldr	r3, [r7, #12]
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	210a      	movs	r1, #10
 800a350:	430a      	orrs	r2, r1
 800a352:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	681a      	ldr	r2, [r3, #0]
 800a35a:	68fb      	ldr	r3, [r7, #12]
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	2101      	movs	r1, #1
 800a360:	430a      	orrs	r2, r1
 800a362:	601a      	str	r2, [r3, #0]
 800a364:	e007      	b.n	800a376 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800a366:	68fb      	ldr	r3, [r7, #12]
 800a368:	2224      	movs	r2, #36	; 0x24
 800a36a:	2100      	movs	r1, #0
 800a36c:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 800a36e:	2317      	movs	r3, #23
 800a370:	18fb      	adds	r3, r7, r3
 800a372:	2202      	movs	r2, #2
 800a374:	701a      	strb	r2, [r3, #0]
  }
  return status;
 800a376:	2317      	movs	r3, #23
 800a378:	18fb      	adds	r3, r7, r3
 800a37a:	781b      	ldrb	r3, [r3, #0]
}
 800a37c:	0018      	movs	r0, r3
 800a37e:	46bd      	mov	sp, r7
 800a380:	b006      	add	sp, #24
 800a382:	bd80      	pop	{r7, pc}

0800a384 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800a384:	b580      	push	{r7, lr}
 800a386:	b084      	sub	sp, #16
 800a388:	af00      	add	r7, sp, #0
 800a38a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a3a0:	221c      	movs	r2, #28
 800a3a2:	4013      	ands	r3, r2
 800a3a4:	2204      	movs	r2, #4
 800a3a6:	409a      	lsls	r2, r3
 800a3a8:	0013      	movs	r3, r2
 800a3aa:	68fa      	ldr	r2, [r7, #12]
 800a3ac:	4013      	ands	r3, r2
 800a3ae:	d026      	beq.n	800a3fe <HAL_DMA_IRQHandler+0x7a>
 800a3b0:	68bb      	ldr	r3, [r7, #8]
 800a3b2:	2204      	movs	r2, #4
 800a3b4:	4013      	ands	r3, r2
 800a3b6:	d022      	beq.n	800a3fe <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	2220      	movs	r2, #32
 800a3c0:	4013      	ands	r3, r2
 800a3c2:	d107      	bne.n	800a3d4 <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	681a      	ldr	r2, [r3, #0]
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	2104      	movs	r1, #4
 800a3d0:	438a      	bics	r2, r1
 800a3d2:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a3d8:	221c      	movs	r2, #28
 800a3da:	401a      	ands	r2, r3
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3e0:	2104      	movs	r1, #4
 800a3e2:	4091      	lsls	r1, r2
 800a3e4:	000a      	movs	r2, r1
 800a3e6:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	d100      	bne.n	800a3f2 <HAL_DMA_IRQHandler+0x6e>
 800a3f0:	e071      	b.n	800a4d6 <HAL_DMA_IRQHandler+0x152>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a3f6:	687a      	ldr	r2, [r7, #4]
 800a3f8:	0010      	movs	r0, r2
 800a3fa:	4798      	blx	r3
     if(hdma->XferHalfCpltCallback != NULL)
 800a3fc:	e06b      	b.n	800a4d6 <HAL_DMA_IRQHandler+0x152>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a402:	221c      	movs	r2, #28
 800a404:	4013      	ands	r3, r2
 800a406:	2202      	movs	r2, #2
 800a408:	409a      	lsls	r2, r3
 800a40a:	0013      	movs	r3, r2
 800a40c:	68fa      	ldr	r2, [r7, #12]
 800a40e:	4013      	ands	r3, r2
 800a410:	d02d      	beq.n	800a46e <HAL_DMA_IRQHandler+0xea>
 800a412:	68bb      	ldr	r3, [r7, #8]
 800a414:	2202      	movs	r2, #2
 800a416:	4013      	ands	r3, r2
 800a418:	d029      	beq.n	800a46e <HAL_DMA_IRQHandler+0xea>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	2220      	movs	r2, #32
 800a422:	4013      	ands	r3, r2
 800a424:	d10b      	bne.n	800a43e <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	681a      	ldr	r2, [r3, #0]
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	210a      	movs	r1, #10
 800a432:	438a      	bics	r2, r1
 800a434:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	2225      	movs	r2, #37	; 0x25
 800a43a:	2101      	movs	r1, #1
 800a43c:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a442:	221c      	movs	r2, #28
 800a444:	401a      	ands	r2, r3
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a44a:	2102      	movs	r1, #2
 800a44c:	4091      	lsls	r1, r2
 800a44e:	000a      	movs	r2, r1
 800a450:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	2224      	movs	r2, #36	; 0x24
 800a456:	2100      	movs	r1, #0
 800a458:	5499      	strb	r1, [r3, r2]

    if(hdma->XferCpltCallback != NULL)
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a45e:	2b00      	cmp	r3, #0
 800a460:	d039      	beq.n	800a4d6 <HAL_DMA_IRQHandler+0x152>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a466:	687a      	ldr	r2, [r7, #4]
 800a468:	0010      	movs	r0, r2
 800a46a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800a46c:	e033      	b.n	800a4d6 <HAL_DMA_IRQHandler+0x152>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a472:	221c      	movs	r2, #28
 800a474:	4013      	ands	r3, r2
 800a476:	2208      	movs	r2, #8
 800a478:	409a      	lsls	r2, r3
 800a47a:	0013      	movs	r3, r2
 800a47c:	68fa      	ldr	r2, [r7, #12]
 800a47e:	4013      	ands	r3, r2
 800a480:	d02a      	beq.n	800a4d8 <HAL_DMA_IRQHandler+0x154>
 800a482:	68bb      	ldr	r3, [r7, #8]
 800a484:	2208      	movs	r2, #8
 800a486:	4013      	ands	r3, r2
 800a488:	d026      	beq.n	800a4d8 <HAL_DMA_IRQHandler+0x154>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	681a      	ldr	r2, [r3, #0]
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	210e      	movs	r1, #14
 800a496:	438a      	bics	r2, r1
 800a498:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a49e:	221c      	movs	r2, #28
 800a4a0:	401a      	ands	r2, r3
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a4a6:	2101      	movs	r1, #1
 800a4a8:	4091      	lsls	r1, r2
 800a4aa:	000a      	movs	r2, r1
 800a4ac:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	2201      	movs	r2, #1
 800a4b2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	2225      	movs	r2, #37	; 0x25
 800a4b8:	2101      	movs	r1, #1
 800a4ba:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	2224      	movs	r2, #36	; 0x24
 800a4c0:	2100      	movs	r1, #0
 800a4c2:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	d005      	beq.n	800a4d8 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a4d0:	687a      	ldr	r2, [r7, #4]
 800a4d2:	0010      	movs	r0, r2
 800a4d4:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800a4d6:	46c0      	nop			; (mov r8, r8)
 800a4d8:	46c0      	nop			; (mov r8, r8)
}
 800a4da:	46bd      	mov	sp, r7
 800a4dc:	b004      	add	sp, #16
 800a4de:	bd80      	pop	{r7, pc}

0800a4e0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800a4e0:	b580      	push	{r7, lr}
 800a4e2:	b084      	sub	sp, #16
 800a4e4:	af00      	add	r7, sp, #0
 800a4e6:	60f8      	str	r0, [r7, #12]
 800a4e8:	60b9      	str	r1, [r7, #8]
 800a4ea:	607a      	str	r2, [r7, #4]
 800a4ec:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800a4ee:	68fb      	ldr	r3, [r7, #12]
 800a4f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a4f2:	221c      	movs	r2, #28
 800a4f4:	401a      	ands	r2, r3
 800a4f6:	68fb      	ldr	r3, [r7, #12]
 800a4f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a4fa:	2101      	movs	r1, #1
 800a4fc:	4091      	lsls	r1, r2
 800a4fe:	000a      	movs	r2, r1
 800a500:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800a502:	68fb      	ldr	r3, [r7, #12]
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	683a      	ldr	r2, [r7, #0]
 800a508:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800a50a:	68fb      	ldr	r3, [r7, #12]
 800a50c:	689b      	ldr	r3, [r3, #8]
 800a50e:	2b10      	cmp	r3, #16
 800a510:	d108      	bne.n	800a524 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800a512:	68fb      	ldr	r3, [r7, #12]
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	687a      	ldr	r2, [r7, #4]
 800a518:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800a51a:	68fb      	ldr	r3, [r7, #12]
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	68ba      	ldr	r2, [r7, #8]
 800a520:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800a522:	e007      	b.n	800a534 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 800a524:	68fb      	ldr	r3, [r7, #12]
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	68ba      	ldr	r2, [r7, #8]
 800a52a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800a52c:	68fb      	ldr	r3, [r7, #12]
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	687a      	ldr	r2, [r7, #4]
 800a532:	60da      	str	r2, [r3, #12]
}
 800a534:	46c0      	nop			; (mov r8, r8)
 800a536:	46bd      	mov	sp, r7
 800a538:	b004      	add	sp, #16
 800a53a:	bd80      	pop	{r7, pc}

0800a53c <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 800a53c:	b580      	push	{r7, lr}
 800a53e:	b086      	sub	sp, #24
 800a540:	af00      	add	r7, sp, #0
 800a542:	60f8      	str	r0, [r7, #12]
 800a544:	607a      	str	r2, [r7, #4]
 800a546:	200b      	movs	r0, #11
 800a548:	183b      	adds	r3, r7, r0
 800a54a:	1c0a      	adds	r2, r1, #0
 800a54c:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a54e:	2317      	movs	r3, #23
 800a550:	18fb      	adds	r3, r7, r3
 800a552:	2200      	movs	r2, #0
 800a554:	701a      	strb	r2, [r3, #0]

  switch (CallbackID)
 800a556:	183b      	adds	r3, r7, r0
 800a558:	781b      	ldrb	r3, [r3, #0]
 800a55a:	2b00      	cmp	r3, #0
 800a55c:	d103      	bne.n	800a566 <HAL_EXTI_RegisterCallback+0x2a>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 800a55e:	68fb      	ldr	r3, [r7, #12]
 800a560:	687a      	ldr	r2, [r7, #4]
 800a562:	605a      	str	r2, [r3, #4]
      break;
 800a564:	e004      	b.n	800a570 <HAL_EXTI_RegisterCallback+0x34>

    default:
      status = HAL_ERROR;
 800a566:	2317      	movs	r3, #23
 800a568:	18fb      	adds	r3, r7, r3
 800a56a:	2201      	movs	r2, #1
 800a56c:	701a      	strb	r2, [r3, #0]
      break;
 800a56e:	46c0      	nop			; (mov r8, r8)
  }

  return status;
 800a570:	2317      	movs	r3, #23
 800a572:	18fb      	adds	r3, r7, r3
 800a574:	781b      	ldrb	r3, [r3, #0]
}
 800a576:	0018      	movs	r0, r3
 800a578:	46bd      	mov	sp, r7
 800a57a:	b006      	add	sp, #24
 800a57c:	bd80      	pop	{r7, pc}

0800a57e <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 800a57e:	b580      	push	{r7, lr}
 800a580:	b082      	sub	sp, #8
 800a582:	af00      	add	r7, sp, #0
 800a584:	6078      	str	r0, [r7, #4]
 800a586:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	d101      	bne.n	800a592 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 800a58e:	2301      	movs	r3, #1
 800a590:	e003      	b.n	800a59a <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	683a      	ldr	r2, [r7, #0]
 800a596:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 800a598:	2300      	movs	r3, #0
  }
}
 800a59a:	0018      	movs	r0, r3
 800a59c:	46bd      	mov	sp, r7
 800a59e:	b002      	add	sp, #8
 800a5a0:	bd80      	pop	{r7, pc}
	...

0800a5a4 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 800a5a4:	b580      	push	{r7, lr}
 800a5a6:	b084      	sub	sp, #16
 800a5a8:	af00      	add	r7, sp, #0
 800a5aa:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;

  /* Compute line mask */
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	221f      	movs	r2, #31
 800a5b2:	4013      	ands	r3, r2
 800a5b4:	2201      	movs	r2, #1
 800a5b6:	409a      	lsls	r2, r3
 800a5b8:	0013      	movs	r3, r2
 800a5ba:	60fb      	str	r3, [r7, #12]

  /* Get pending bit  */
  regval = (EXTI->PR & maskline);
 800a5bc:	4b0a      	ldr	r3, [pc, #40]	; (800a5e8 <HAL_EXTI_IRQHandler+0x44>)
 800a5be:	695a      	ldr	r2, [r3, #20]
 800a5c0:	68fb      	ldr	r3, [r7, #12]
 800a5c2:	4013      	ands	r3, r2
 800a5c4:	60bb      	str	r3, [r7, #8]
  if (regval != 0x00u)
 800a5c6:	68bb      	ldr	r3, [r7, #8]
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	d009      	beq.n	800a5e0 <HAL_EXTI_IRQHandler+0x3c>
  {
    /* Clear pending bit */
    EXTI->PR = maskline;
 800a5cc:	4b06      	ldr	r3, [pc, #24]	; (800a5e8 <HAL_EXTI_IRQHandler+0x44>)
 800a5ce:	68fa      	ldr	r2, [r7, #12]
 800a5d0:	615a      	str	r2, [r3, #20]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	685b      	ldr	r3, [r3, #4]
 800a5d6:	2b00      	cmp	r3, #0
 800a5d8:	d002      	beq.n	800a5e0 <HAL_EXTI_IRQHandler+0x3c>
    {
      hexti->PendingCallback();
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	685b      	ldr	r3, [r3, #4]
 800a5de:	4798      	blx	r3
    }
  }
}
 800a5e0:	46c0      	nop			; (mov r8, r8)
 800a5e2:	46bd      	mov	sp, r7
 800a5e4:	b004      	add	sp, #16
 800a5e6:	bd80      	pop	{r7, pc}
 800a5e8:	40010400 	.word	0x40010400

0800a5ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800a5ec:	b580      	push	{r7, lr}
 800a5ee:	b086      	sub	sp, #24
 800a5f0:	af00      	add	r7, sp, #0
 800a5f2:	6078      	str	r0, [r7, #4]
 800a5f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800a5f6:	2300      	movs	r3, #0
 800a5f8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800a5fa:	2300      	movs	r3, #0
 800a5fc:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 800a5fe:	2300      	movs	r3, #0
 800a600:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 800a602:	e155      	b.n	800a8b0 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 800a604:	683b      	ldr	r3, [r7, #0]
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	2101      	movs	r1, #1
 800a60a:	697a      	ldr	r2, [r7, #20]
 800a60c:	4091      	lsls	r1, r2
 800a60e:	000a      	movs	r2, r1
 800a610:	4013      	ands	r3, r2
 800a612:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	2b00      	cmp	r3, #0
 800a618:	d100      	bne.n	800a61c <HAL_GPIO_Init+0x30>
 800a61a:	e146      	b.n	800a8aa <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800a61c:	683b      	ldr	r3, [r7, #0]
 800a61e:	685b      	ldr	r3, [r3, #4]
 800a620:	2203      	movs	r2, #3
 800a622:	4013      	ands	r3, r2
 800a624:	2b01      	cmp	r3, #1
 800a626:	d005      	beq.n	800a634 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800a628:	683b      	ldr	r3, [r7, #0]
 800a62a:	685b      	ldr	r3, [r3, #4]
 800a62c:	2203      	movs	r2, #3
 800a62e:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800a630:	2b02      	cmp	r3, #2
 800a632:	d130      	bne.n	800a696 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	689b      	ldr	r3, [r3, #8]
 800a638:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 800a63a:	697b      	ldr	r3, [r7, #20]
 800a63c:	005b      	lsls	r3, r3, #1
 800a63e:	2203      	movs	r2, #3
 800a640:	409a      	lsls	r2, r3
 800a642:	0013      	movs	r3, r2
 800a644:	43da      	mvns	r2, r3
 800a646:	693b      	ldr	r3, [r7, #16]
 800a648:	4013      	ands	r3, r2
 800a64a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800a64c:	683b      	ldr	r3, [r7, #0]
 800a64e:	68da      	ldr	r2, [r3, #12]
 800a650:	697b      	ldr	r3, [r7, #20]
 800a652:	005b      	lsls	r3, r3, #1
 800a654:	409a      	lsls	r2, r3
 800a656:	0013      	movs	r3, r2
 800a658:	693a      	ldr	r2, [r7, #16]
 800a65a:	4313      	orrs	r3, r2
 800a65c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	693a      	ldr	r2, [r7, #16]
 800a662:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	685b      	ldr	r3, [r3, #4]
 800a668:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800a66a:	2201      	movs	r2, #1
 800a66c:	697b      	ldr	r3, [r7, #20]
 800a66e:	409a      	lsls	r2, r3
 800a670:	0013      	movs	r3, r2
 800a672:	43da      	mvns	r2, r3
 800a674:	693b      	ldr	r3, [r7, #16]
 800a676:	4013      	ands	r3, r2
 800a678:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800a67a:	683b      	ldr	r3, [r7, #0]
 800a67c:	685b      	ldr	r3, [r3, #4]
 800a67e:	091b      	lsrs	r3, r3, #4
 800a680:	2201      	movs	r2, #1
 800a682:	401a      	ands	r2, r3
 800a684:	697b      	ldr	r3, [r7, #20]
 800a686:	409a      	lsls	r2, r3
 800a688:	0013      	movs	r3, r2
 800a68a:	693a      	ldr	r2, [r7, #16]
 800a68c:	4313      	orrs	r3, r2
 800a68e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	693a      	ldr	r2, [r7, #16]
 800a694:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800a696:	683b      	ldr	r3, [r7, #0]
 800a698:	685b      	ldr	r3, [r3, #4]
 800a69a:	2203      	movs	r2, #3
 800a69c:	4013      	ands	r3, r2
 800a69e:	2b03      	cmp	r3, #3
 800a6a0:	d017      	beq.n	800a6d2 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	68db      	ldr	r3, [r3, #12]
 800a6a6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800a6a8:	697b      	ldr	r3, [r7, #20]
 800a6aa:	005b      	lsls	r3, r3, #1
 800a6ac:	2203      	movs	r2, #3
 800a6ae:	409a      	lsls	r2, r3
 800a6b0:	0013      	movs	r3, r2
 800a6b2:	43da      	mvns	r2, r3
 800a6b4:	693b      	ldr	r3, [r7, #16]
 800a6b6:	4013      	ands	r3, r2
 800a6b8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800a6ba:	683b      	ldr	r3, [r7, #0]
 800a6bc:	689a      	ldr	r2, [r3, #8]
 800a6be:	697b      	ldr	r3, [r7, #20]
 800a6c0:	005b      	lsls	r3, r3, #1
 800a6c2:	409a      	lsls	r2, r3
 800a6c4:	0013      	movs	r3, r2
 800a6c6:	693a      	ldr	r2, [r7, #16]
 800a6c8:	4313      	orrs	r3, r2
 800a6ca:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	693a      	ldr	r2, [r7, #16]
 800a6d0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800a6d2:	683b      	ldr	r3, [r7, #0]
 800a6d4:	685b      	ldr	r3, [r3, #4]
 800a6d6:	2203      	movs	r2, #3
 800a6d8:	4013      	ands	r3, r2
 800a6da:	2b02      	cmp	r3, #2
 800a6dc:	d123      	bne.n	800a726 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800a6de:	697b      	ldr	r3, [r7, #20]
 800a6e0:	08da      	lsrs	r2, r3, #3
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	3208      	adds	r2, #8
 800a6e6:	0092      	lsls	r2, r2, #2
 800a6e8:	58d3      	ldr	r3, [r2, r3]
 800a6ea:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 800a6ec:	697b      	ldr	r3, [r7, #20]
 800a6ee:	2207      	movs	r2, #7
 800a6f0:	4013      	ands	r3, r2
 800a6f2:	009b      	lsls	r3, r3, #2
 800a6f4:	220f      	movs	r2, #15
 800a6f6:	409a      	lsls	r2, r3
 800a6f8:	0013      	movs	r3, r2
 800a6fa:	43da      	mvns	r2, r3
 800a6fc:	693b      	ldr	r3, [r7, #16]
 800a6fe:	4013      	ands	r3, r2
 800a700:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 800a702:	683b      	ldr	r3, [r7, #0]
 800a704:	691a      	ldr	r2, [r3, #16]
 800a706:	697b      	ldr	r3, [r7, #20]
 800a708:	2107      	movs	r1, #7
 800a70a:	400b      	ands	r3, r1
 800a70c:	009b      	lsls	r3, r3, #2
 800a70e:	409a      	lsls	r2, r3
 800a710:	0013      	movs	r3, r2
 800a712:	693a      	ldr	r2, [r7, #16]
 800a714:	4313      	orrs	r3, r2
 800a716:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800a718:	697b      	ldr	r3, [r7, #20]
 800a71a:	08da      	lsrs	r2, r3, #3
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	3208      	adds	r2, #8
 800a720:	0092      	lsls	r2, r2, #2
 800a722:	6939      	ldr	r1, [r7, #16]
 800a724:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	681b      	ldr	r3, [r3, #0]
 800a72a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800a72c:	697b      	ldr	r3, [r7, #20]
 800a72e:	005b      	lsls	r3, r3, #1
 800a730:	2203      	movs	r2, #3
 800a732:	409a      	lsls	r2, r3
 800a734:	0013      	movs	r3, r2
 800a736:	43da      	mvns	r2, r3
 800a738:	693b      	ldr	r3, [r7, #16]
 800a73a:	4013      	ands	r3, r2
 800a73c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800a73e:	683b      	ldr	r3, [r7, #0]
 800a740:	685b      	ldr	r3, [r3, #4]
 800a742:	2203      	movs	r2, #3
 800a744:	401a      	ands	r2, r3
 800a746:	697b      	ldr	r3, [r7, #20]
 800a748:	005b      	lsls	r3, r3, #1
 800a74a:	409a      	lsls	r2, r3
 800a74c:	0013      	movs	r3, r2
 800a74e:	693a      	ldr	r2, [r7, #16]
 800a750:	4313      	orrs	r3, r2
 800a752:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	693a      	ldr	r2, [r7, #16]
 800a758:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800a75a:	683b      	ldr	r3, [r7, #0]
 800a75c:	685a      	ldr	r2, [r3, #4]
 800a75e:	23c0      	movs	r3, #192	; 0xc0
 800a760:	029b      	lsls	r3, r3, #10
 800a762:	4013      	ands	r3, r2
 800a764:	d100      	bne.n	800a768 <HAL_GPIO_Init+0x17c>
 800a766:	e0a0      	b.n	800a8aa <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a768:	4b57      	ldr	r3, [pc, #348]	; (800a8c8 <HAL_GPIO_Init+0x2dc>)
 800a76a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a76c:	4b56      	ldr	r3, [pc, #344]	; (800a8c8 <HAL_GPIO_Init+0x2dc>)
 800a76e:	2101      	movs	r1, #1
 800a770:	430a      	orrs	r2, r1
 800a772:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 800a774:	4a55      	ldr	r2, [pc, #340]	; (800a8cc <HAL_GPIO_Init+0x2e0>)
 800a776:	697b      	ldr	r3, [r7, #20]
 800a778:	089b      	lsrs	r3, r3, #2
 800a77a:	3302      	adds	r3, #2
 800a77c:	009b      	lsls	r3, r3, #2
 800a77e:	589b      	ldr	r3, [r3, r2]
 800a780:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 800a782:	697b      	ldr	r3, [r7, #20]
 800a784:	2203      	movs	r2, #3
 800a786:	4013      	ands	r3, r2
 800a788:	009b      	lsls	r3, r3, #2
 800a78a:	220f      	movs	r2, #15
 800a78c:	409a      	lsls	r2, r3
 800a78e:	0013      	movs	r3, r2
 800a790:	43da      	mvns	r2, r3
 800a792:	693b      	ldr	r3, [r7, #16]
 800a794:	4013      	ands	r3, r2
 800a796:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 800a798:	687a      	ldr	r2, [r7, #4]
 800a79a:	23a0      	movs	r3, #160	; 0xa0
 800a79c:	05db      	lsls	r3, r3, #23
 800a79e:	429a      	cmp	r2, r3
 800a7a0:	d01f      	beq.n	800a7e2 <HAL_GPIO_Init+0x1f6>
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	4a4a      	ldr	r2, [pc, #296]	; (800a8d0 <HAL_GPIO_Init+0x2e4>)
 800a7a6:	4293      	cmp	r3, r2
 800a7a8:	d019      	beq.n	800a7de <HAL_GPIO_Init+0x1f2>
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	4a49      	ldr	r2, [pc, #292]	; (800a8d4 <HAL_GPIO_Init+0x2e8>)
 800a7ae:	4293      	cmp	r3, r2
 800a7b0:	d013      	beq.n	800a7da <HAL_GPIO_Init+0x1ee>
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	4a48      	ldr	r2, [pc, #288]	; (800a8d8 <HAL_GPIO_Init+0x2ec>)
 800a7b6:	4293      	cmp	r3, r2
 800a7b8:	d00d      	beq.n	800a7d6 <HAL_GPIO_Init+0x1ea>
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	4a47      	ldr	r2, [pc, #284]	; (800a8dc <HAL_GPIO_Init+0x2f0>)
 800a7be:	4293      	cmp	r3, r2
 800a7c0:	d007      	beq.n	800a7d2 <HAL_GPIO_Init+0x1e6>
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	4a46      	ldr	r2, [pc, #280]	; (800a8e0 <HAL_GPIO_Init+0x2f4>)
 800a7c6:	4293      	cmp	r3, r2
 800a7c8:	d101      	bne.n	800a7ce <HAL_GPIO_Init+0x1e2>
 800a7ca:	2305      	movs	r3, #5
 800a7cc:	e00a      	b.n	800a7e4 <HAL_GPIO_Init+0x1f8>
 800a7ce:	2306      	movs	r3, #6
 800a7d0:	e008      	b.n	800a7e4 <HAL_GPIO_Init+0x1f8>
 800a7d2:	2304      	movs	r3, #4
 800a7d4:	e006      	b.n	800a7e4 <HAL_GPIO_Init+0x1f8>
 800a7d6:	2303      	movs	r3, #3
 800a7d8:	e004      	b.n	800a7e4 <HAL_GPIO_Init+0x1f8>
 800a7da:	2302      	movs	r3, #2
 800a7dc:	e002      	b.n	800a7e4 <HAL_GPIO_Init+0x1f8>
 800a7de:	2301      	movs	r3, #1
 800a7e0:	e000      	b.n	800a7e4 <HAL_GPIO_Init+0x1f8>
 800a7e2:	2300      	movs	r3, #0
 800a7e4:	697a      	ldr	r2, [r7, #20]
 800a7e6:	2103      	movs	r1, #3
 800a7e8:	400a      	ands	r2, r1
 800a7ea:	0092      	lsls	r2, r2, #2
 800a7ec:	4093      	lsls	r3, r2
 800a7ee:	693a      	ldr	r2, [r7, #16]
 800a7f0:	4313      	orrs	r3, r2
 800a7f2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800a7f4:	4935      	ldr	r1, [pc, #212]	; (800a8cc <HAL_GPIO_Init+0x2e0>)
 800a7f6:	697b      	ldr	r3, [r7, #20]
 800a7f8:	089b      	lsrs	r3, r3, #2
 800a7fa:	3302      	adds	r3, #2
 800a7fc:	009b      	lsls	r3, r3, #2
 800a7fe:	693a      	ldr	r2, [r7, #16]
 800a800:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800a802:	4b38      	ldr	r3, [pc, #224]	; (800a8e4 <HAL_GPIO_Init+0x2f8>)
 800a804:	681b      	ldr	r3, [r3, #0]
 800a806:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800a808:	68fb      	ldr	r3, [r7, #12]
 800a80a:	43da      	mvns	r2, r3
 800a80c:	693b      	ldr	r3, [r7, #16]
 800a80e:	4013      	ands	r3, r2
 800a810:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800a812:	683b      	ldr	r3, [r7, #0]
 800a814:	685a      	ldr	r2, [r3, #4]
 800a816:	2380      	movs	r3, #128	; 0x80
 800a818:	025b      	lsls	r3, r3, #9
 800a81a:	4013      	ands	r3, r2
 800a81c:	d003      	beq.n	800a826 <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 800a81e:	693a      	ldr	r2, [r7, #16]
 800a820:	68fb      	ldr	r3, [r7, #12]
 800a822:	4313      	orrs	r3, r2
 800a824:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800a826:	4b2f      	ldr	r3, [pc, #188]	; (800a8e4 <HAL_GPIO_Init+0x2f8>)
 800a828:	693a      	ldr	r2, [r7, #16]
 800a82a:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 800a82c:	4b2d      	ldr	r3, [pc, #180]	; (800a8e4 <HAL_GPIO_Init+0x2f8>)
 800a82e:	685b      	ldr	r3, [r3, #4]
 800a830:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800a832:	68fb      	ldr	r3, [r7, #12]
 800a834:	43da      	mvns	r2, r3
 800a836:	693b      	ldr	r3, [r7, #16]
 800a838:	4013      	ands	r3, r2
 800a83a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800a83c:	683b      	ldr	r3, [r7, #0]
 800a83e:	685a      	ldr	r2, [r3, #4]
 800a840:	2380      	movs	r3, #128	; 0x80
 800a842:	029b      	lsls	r3, r3, #10
 800a844:	4013      	ands	r3, r2
 800a846:	d003      	beq.n	800a850 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 800a848:	693a      	ldr	r2, [r7, #16]
 800a84a:	68fb      	ldr	r3, [r7, #12]
 800a84c:	4313      	orrs	r3, r2
 800a84e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800a850:	4b24      	ldr	r3, [pc, #144]	; (800a8e4 <HAL_GPIO_Init+0x2f8>)
 800a852:	693a      	ldr	r2, [r7, #16]
 800a854:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800a856:	4b23      	ldr	r3, [pc, #140]	; (800a8e4 <HAL_GPIO_Init+0x2f8>)
 800a858:	689b      	ldr	r3, [r3, #8]
 800a85a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800a85c:	68fb      	ldr	r3, [r7, #12]
 800a85e:	43da      	mvns	r2, r3
 800a860:	693b      	ldr	r3, [r7, #16]
 800a862:	4013      	ands	r3, r2
 800a864:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800a866:	683b      	ldr	r3, [r7, #0]
 800a868:	685a      	ldr	r2, [r3, #4]
 800a86a:	2380      	movs	r3, #128	; 0x80
 800a86c:	035b      	lsls	r3, r3, #13
 800a86e:	4013      	ands	r3, r2
 800a870:	d003      	beq.n	800a87a <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 800a872:	693a      	ldr	r2, [r7, #16]
 800a874:	68fb      	ldr	r3, [r7, #12]
 800a876:	4313      	orrs	r3, r2
 800a878:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800a87a:	4b1a      	ldr	r3, [pc, #104]	; (800a8e4 <HAL_GPIO_Init+0x2f8>)
 800a87c:	693a      	ldr	r2, [r7, #16]
 800a87e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 800a880:	4b18      	ldr	r3, [pc, #96]	; (800a8e4 <HAL_GPIO_Init+0x2f8>)
 800a882:	68db      	ldr	r3, [r3, #12]
 800a884:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800a886:	68fb      	ldr	r3, [r7, #12]
 800a888:	43da      	mvns	r2, r3
 800a88a:	693b      	ldr	r3, [r7, #16]
 800a88c:	4013      	ands	r3, r2
 800a88e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800a890:	683b      	ldr	r3, [r7, #0]
 800a892:	685a      	ldr	r2, [r3, #4]
 800a894:	2380      	movs	r3, #128	; 0x80
 800a896:	039b      	lsls	r3, r3, #14
 800a898:	4013      	ands	r3, r2
 800a89a:	d003      	beq.n	800a8a4 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 800a89c:	693a      	ldr	r2, [r7, #16]
 800a89e:	68fb      	ldr	r3, [r7, #12]
 800a8a0:	4313      	orrs	r3, r2
 800a8a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800a8a4:	4b0f      	ldr	r3, [pc, #60]	; (800a8e4 <HAL_GPIO_Init+0x2f8>)
 800a8a6:	693a      	ldr	r2, [r7, #16]
 800a8a8:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 800a8aa:	697b      	ldr	r3, [r7, #20]
 800a8ac:	3301      	adds	r3, #1
 800a8ae:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 800a8b0:	683b      	ldr	r3, [r7, #0]
 800a8b2:	681a      	ldr	r2, [r3, #0]
 800a8b4:	697b      	ldr	r3, [r7, #20]
 800a8b6:	40da      	lsrs	r2, r3
 800a8b8:	1e13      	subs	r3, r2, #0
 800a8ba:	d000      	beq.n	800a8be <HAL_GPIO_Init+0x2d2>
 800a8bc:	e6a2      	b.n	800a604 <HAL_GPIO_Init+0x18>
  }
}
 800a8be:	46c0      	nop			; (mov r8, r8)
 800a8c0:	46c0      	nop			; (mov r8, r8)
 800a8c2:	46bd      	mov	sp, r7
 800a8c4:	b006      	add	sp, #24
 800a8c6:	bd80      	pop	{r7, pc}
 800a8c8:	40021000 	.word	0x40021000
 800a8cc:	40010000 	.word	0x40010000
 800a8d0:	50000400 	.word	0x50000400
 800a8d4:	50000800 	.word	0x50000800
 800a8d8:	50000c00 	.word	0x50000c00
 800a8dc:	50001000 	.word	0x50001000
 800a8e0:	50001c00 	.word	0x50001c00
 800a8e4:	40010400 	.word	0x40010400

0800a8e8 <HAL_GPIO_DeInit>:
  *                   This parameter can be one of GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800a8e8:	b580      	push	{r7, lr}
 800a8ea:	b086      	sub	sp, #24
 800a8ec:	af00      	add	r7, sp, #0
 800a8ee:	6078      	str	r0, [r7, #4]
 800a8f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800a8f2:	2300      	movs	r3, #0
 800a8f4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800a8f6:	2300      	movs	r3, #0
 800a8f8:	613b      	str	r3, [r7, #16]
  uint32_t tmp = 0x00U;
 800a8fa:	2300      	movs	r3, #0
 800a8fc:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0)
 800a8fe:	e0bc      	b.n	800aa7a <HAL_GPIO_DeInit+0x192>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Pin) & (1U << position);
 800a900:	2201      	movs	r2, #1
 800a902:	697b      	ldr	r3, [r7, #20]
 800a904:	409a      	lsls	r2, r3
 800a906:	683b      	ldr	r3, [r7, #0]
 800a908:	4013      	ands	r3, r2
 800a90a:	613b      	str	r3, [r7, #16]

    if (iocurrent)
 800a90c:	693b      	ldr	r3, [r7, #16]
 800a90e:	2b00      	cmp	r3, #0
 800a910:	d100      	bne.n	800a914 <HAL_GPIO_DeInit+0x2c>
 800a912:	e0af      	b.n	800aa74 <HAL_GPIO_DeInit+0x18c>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2U];
 800a914:	4a5e      	ldr	r2, [pc, #376]	; (800aa90 <HAL_GPIO_DeInit+0x1a8>)
 800a916:	697b      	ldr	r3, [r7, #20]
 800a918:	089b      	lsrs	r3, r3, #2
 800a91a:	3302      	adds	r3, #2
 800a91c:	009b      	lsls	r3, r3, #2
 800a91e:	589b      	ldr	r3, [r3, r2]
 800a920:	60fb      	str	r3, [r7, #12]
      tmp &= ((0x0FUL) << (4U * (position & 0x03U)));
 800a922:	697b      	ldr	r3, [r7, #20]
 800a924:	2203      	movs	r2, #3
 800a926:	4013      	ands	r3, r2
 800a928:	009b      	lsls	r3, r3, #2
 800a92a:	220f      	movs	r2, #15
 800a92c:	409a      	lsls	r2, r3
 800a92e:	68fb      	ldr	r3, [r7, #12]
 800a930:	4013      	ands	r3, r2
 800a932:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 800a934:	687a      	ldr	r2, [r7, #4]
 800a936:	23a0      	movs	r3, #160	; 0xa0
 800a938:	05db      	lsls	r3, r3, #23
 800a93a:	429a      	cmp	r2, r3
 800a93c:	d01f      	beq.n	800a97e <HAL_GPIO_DeInit+0x96>
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	4a54      	ldr	r2, [pc, #336]	; (800aa94 <HAL_GPIO_DeInit+0x1ac>)
 800a942:	4293      	cmp	r3, r2
 800a944:	d019      	beq.n	800a97a <HAL_GPIO_DeInit+0x92>
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	4a53      	ldr	r2, [pc, #332]	; (800aa98 <HAL_GPIO_DeInit+0x1b0>)
 800a94a:	4293      	cmp	r3, r2
 800a94c:	d013      	beq.n	800a976 <HAL_GPIO_DeInit+0x8e>
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	4a52      	ldr	r2, [pc, #328]	; (800aa9c <HAL_GPIO_DeInit+0x1b4>)
 800a952:	4293      	cmp	r3, r2
 800a954:	d00d      	beq.n	800a972 <HAL_GPIO_DeInit+0x8a>
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	4a51      	ldr	r2, [pc, #324]	; (800aaa0 <HAL_GPIO_DeInit+0x1b8>)
 800a95a:	4293      	cmp	r3, r2
 800a95c:	d007      	beq.n	800a96e <HAL_GPIO_DeInit+0x86>
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	4a50      	ldr	r2, [pc, #320]	; (800aaa4 <HAL_GPIO_DeInit+0x1bc>)
 800a962:	4293      	cmp	r3, r2
 800a964:	d101      	bne.n	800a96a <HAL_GPIO_DeInit+0x82>
 800a966:	2305      	movs	r3, #5
 800a968:	e00a      	b.n	800a980 <HAL_GPIO_DeInit+0x98>
 800a96a:	2306      	movs	r3, #6
 800a96c:	e008      	b.n	800a980 <HAL_GPIO_DeInit+0x98>
 800a96e:	2304      	movs	r3, #4
 800a970:	e006      	b.n	800a980 <HAL_GPIO_DeInit+0x98>
 800a972:	2303      	movs	r3, #3
 800a974:	e004      	b.n	800a980 <HAL_GPIO_DeInit+0x98>
 800a976:	2302      	movs	r3, #2
 800a978:	e002      	b.n	800a980 <HAL_GPIO_DeInit+0x98>
 800a97a:	2301      	movs	r3, #1
 800a97c:	e000      	b.n	800a980 <HAL_GPIO_DeInit+0x98>
 800a97e:	2300      	movs	r3, #0
 800a980:	697a      	ldr	r2, [r7, #20]
 800a982:	2103      	movs	r1, #3
 800a984:	400a      	ands	r2, r1
 800a986:	0092      	lsls	r2, r2, #2
 800a988:	4093      	lsls	r3, r2
 800a98a:	68fa      	ldr	r2, [r7, #12]
 800a98c:	429a      	cmp	r2, r3
 800a98e:	d132      	bne.n	800a9f6 <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800a990:	4b45      	ldr	r3, [pc, #276]	; (800aaa8 <HAL_GPIO_DeInit+0x1c0>)
 800a992:	681a      	ldr	r2, [r3, #0]
 800a994:	693b      	ldr	r3, [r7, #16]
 800a996:	43d9      	mvns	r1, r3
 800a998:	4b43      	ldr	r3, [pc, #268]	; (800aaa8 <HAL_GPIO_DeInit+0x1c0>)
 800a99a:	400a      	ands	r2, r1
 800a99c:	601a      	str	r2, [r3, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800a99e:	4b42      	ldr	r3, [pc, #264]	; (800aaa8 <HAL_GPIO_DeInit+0x1c0>)
 800a9a0:	685a      	ldr	r2, [r3, #4]
 800a9a2:	693b      	ldr	r3, [r7, #16]
 800a9a4:	43d9      	mvns	r1, r3
 800a9a6:	4b40      	ldr	r3, [pc, #256]	; (800aaa8 <HAL_GPIO_DeInit+0x1c0>)
 800a9a8:	400a      	ands	r2, r1
 800a9aa:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800a9ac:	4b3e      	ldr	r3, [pc, #248]	; (800aaa8 <HAL_GPIO_DeInit+0x1c0>)
 800a9ae:	689a      	ldr	r2, [r3, #8]
 800a9b0:	693b      	ldr	r3, [r7, #16]
 800a9b2:	43d9      	mvns	r1, r3
 800a9b4:	4b3c      	ldr	r3, [pc, #240]	; (800aaa8 <HAL_GPIO_DeInit+0x1c0>)
 800a9b6:	400a      	ands	r2, r1
 800a9b8:	609a      	str	r2, [r3, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 800a9ba:	4b3b      	ldr	r3, [pc, #236]	; (800aaa8 <HAL_GPIO_DeInit+0x1c0>)
 800a9bc:	68da      	ldr	r2, [r3, #12]
 800a9be:	693b      	ldr	r3, [r7, #16]
 800a9c0:	43d9      	mvns	r1, r3
 800a9c2:	4b39      	ldr	r3, [pc, #228]	; (800aaa8 <HAL_GPIO_DeInit+0x1c0>)
 800a9c4:	400a      	ands	r2, r1
 800a9c6:	60da      	str	r2, [r3, #12]
        
        tmp = (0x0FUL) << (4U * (position & 0x03U));
 800a9c8:	697b      	ldr	r3, [r7, #20]
 800a9ca:	2203      	movs	r2, #3
 800a9cc:	4013      	ands	r3, r2
 800a9ce:	009b      	lsls	r3, r3, #2
 800a9d0:	220f      	movs	r2, #15
 800a9d2:	409a      	lsls	r2, r3
 800a9d4:	0013      	movs	r3, r2
 800a9d6:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800a9d8:	4a2d      	ldr	r2, [pc, #180]	; (800aa90 <HAL_GPIO_DeInit+0x1a8>)
 800a9da:	697b      	ldr	r3, [r7, #20]
 800a9dc:	089b      	lsrs	r3, r3, #2
 800a9de:	3302      	adds	r3, #2
 800a9e0:	009b      	lsls	r3, r3, #2
 800a9e2:	589a      	ldr	r2, [r3, r2]
 800a9e4:	68fb      	ldr	r3, [r7, #12]
 800a9e6:	43d9      	mvns	r1, r3
 800a9e8:	4829      	ldr	r0, [pc, #164]	; (800aa90 <HAL_GPIO_DeInit+0x1a8>)
 800a9ea:	697b      	ldr	r3, [r7, #20]
 800a9ec:	089b      	lsrs	r3, r3, #2
 800a9ee:	400a      	ands	r2, r1
 800a9f0:	3302      	adds	r3, #2
 800a9f2:	009b      	lsls	r3, r3, #2
 800a9f4:	501a      	str	r2, [r3, r0]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floting Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	681a      	ldr	r2, [r3, #0]
 800a9fa:	697b      	ldr	r3, [r7, #20]
 800a9fc:	005b      	lsls	r3, r3, #1
 800a9fe:	2103      	movs	r1, #3
 800aa00:	4099      	lsls	r1, r3
 800aa02:	000b      	movs	r3, r1
 800aa04:	431a      	orrs	r2, r3
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 800aa0a:	697b      	ldr	r3, [r7, #20]
 800aa0c:	08da      	lsrs	r2, r3, #3
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	3208      	adds	r2, #8
 800aa12:	0092      	lsls	r2, r2, #2
 800aa14:	58d3      	ldr	r3, [r2, r3]
 800aa16:	697a      	ldr	r2, [r7, #20]
 800aa18:	2107      	movs	r1, #7
 800aa1a:	400a      	ands	r2, r1
 800aa1c:	0092      	lsls	r2, r2, #2
 800aa1e:	210f      	movs	r1, #15
 800aa20:	4091      	lsls	r1, r2
 800aa22:	000a      	movs	r2, r1
 800aa24:	43d1      	mvns	r1, r2
 800aa26:	697a      	ldr	r2, [r7, #20]
 800aa28:	08d2      	lsrs	r2, r2, #3
 800aa2a:	4019      	ands	r1, r3
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	3208      	adds	r2, #8
 800aa30:	0092      	lsls	r2, r2, #2
 800aa32:	50d1      	str	r1, [r2, r3]

      /* Deactivate the Pull-up oand Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	68db      	ldr	r3, [r3, #12]
 800aa38:	697a      	ldr	r2, [r7, #20]
 800aa3a:	0052      	lsls	r2, r2, #1
 800aa3c:	2103      	movs	r1, #3
 800aa3e:	4091      	lsls	r1, r2
 800aa40:	000a      	movs	r2, r1
 800aa42:	43d2      	mvns	r2, r2
 800aa44:	401a      	ands	r2, r3
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position);
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	685b      	ldr	r3, [r3, #4]
 800aa4e:	2101      	movs	r1, #1
 800aa50:	697a      	ldr	r2, [r7, #20]
 800aa52:	4091      	lsls	r1, r2
 800aa54:	000a      	movs	r2, r1
 800aa56:	43d2      	mvns	r2, r2
 800aa58:	401a      	ands	r2, r3
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	689b      	ldr	r3, [r3, #8]
 800aa62:	697a      	ldr	r2, [r7, #20]
 800aa64:	0052      	lsls	r2, r2, #1
 800aa66:	2103      	movs	r1, #3
 800aa68:	4091      	lsls	r1, r2
 800aa6a:	000a      	movs	r2, r1
 800aa6c:	43d2      	mvns	r2, r2
 800aa6e:	401a      	ands	r2, r3
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	609a      	str	r2, [r3, #8]
    }
    position++;
 800aa74:	697b      	ldr	r3, [r7, #20]
 800aa76:	3301      	adds	r3, #1
 800aa78:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0)
 800aa7a:	683a      	ldr	r2, [r7, #0]
 800aa7c:	697b      	ldr	r3, [r7, #20]
 800aa7e:	40da      	lsrs	r2, r3
 800aa80:	1e13      	subs	r3, r2, #0
 800aa82:	d000      	beq.n	800aa86 <HAL_GPIO_DeInit+0x19e>
 800aa84:	e73c      	b.n	800a900 <HAL_GPIO_DeInit+0x18>
  }
}
 800aa86:	46c0      	nop			; (mov r8, r8)
 800aa88:	46c0      	nop			; (mov r8, r8)
 800aa8a:	46bd      	mov	sp, r7
 800aa8c:	b006      	add	sp, #24
 800aa8e:	bd80      	pop	{r7, pc}
 800aa90:	40010000 	.word	0x40010000
 800aa94:	50000400 	.word	0x50000400
 800aa98:	50000800 	.word	0x50000800
 800aa9c:	50000c00 	.word	0x50000c00
 800aaa0:	50001000 	.word	0x50001000
 800aaa4:	50001c00 	.word	0x50001c00
 800aaa8:	40010400 	.word	0x40010400

0800aaac <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800aaac:	b580      	push	{r7, lr}
 800aaae:	b084      	sub	sp, #16
 800aab0:	af00      	add	r7, sp, #0
 800aab2:	6078      	str	r0, [r7, #4]
 800aab4:	000a      	movs	r2, r1
 800aab6:	1cbb      	adds	r3, r7, #2
 800aab8:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	691b      	ldr	r3, [r3, #16]
 800aabe:	1cba      	adds	r2, r7, #2
 800aac0:	8812      	ldrh	r2, [r2, #0]
 800aac2:	4013      	ands	r3, r2
 800aac4:	d004      	beq.n	800aad0 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 800aac6:	230f      	movs	r3, #15
 800aac8:	18fb      	adds	r3, r7, r3
 800aaca:	2201      	movs	r2, #1
 800aacc:	701a      	strb	r2, [r3, #0]
 800aace:	e003      	b.n	800aad8 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800aad0:	230f      	movs	r3, #15
 800aad2:	18fb      	adds	r3, r7, r3
 800aad4:	2200      	movs	r2, #0
 800aad6:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 800aad8:	230f      	movs	r3, #15
 800aada:	18fb      	adds	r3, r7, r3
 800aadc:	781b      	ldrb	r3, [r3, #0]
}
 800aade:	0018      	movs	r0, r3
 800aae0:	46bd      	mov	sp, r7
 800aae2:	b004      	add	sp, #16
 800aae4:	bd80      	pop	{r7, pc}

0800aae6 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800aae6:	b580      	push	{r7, lr}
 800aae8:	b082      	sub	sp, #8
 800aaea:	af00      	add	r7, sp, #0
 800aaec:	6078      	str	r0, [r7, #4]
 800aaee:	0008      	movs	r0, r1
 800aaf0:	0011      	movs	r1, r2
 800aaf2:	1cbb      	adds	r3, r7, #2
 800aaf4:	1c02      	adds	r2, r0, #0
 800aaf6:	801a      	strh	r2, [r3, #0]
 800aaf8:	1c7b      	adds	r3, r7, #1
 800aafa:	1c0a      	adds	r2, r1, #0
 800aafc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800aafe:	1c7b      	adds	r3, r7, #1
 800ab00:	781b      	ldrb	r3, [r3, #0]
 800ab02:	2b00      	cmp	r3, #0
 800ab04:	d004      	beq.n	800ab10 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 800ab06:	1cbb      	adds	r3, r7, #2
 800ab08:	881a      	ldrh	r2, [r3, #0]
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 800ab0e:	e003      	b.n	800ab18 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 800ab10:	1cbb      	adds	r3, r7, #2
 800ab12:	881a      	ldrh	r2, [r3, #0]
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	629a      	str	r2, [r3, #40]	; 0x28
}
 800ab18:	46c0      	nop			; (mov r8, r8)
 800ab1a:	46bd      	mov	sp, r7
 800ab1c:	b002      	add	sp, #8
 800ab1e:	bd80      	pop	{r7, pc}

0800ab20 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800ab20:	b580      	push	{r7, lr}
 800ab22:	b082      	sub	sp, #8
 800ab24:	af00      	add	r7, sp, #0
 800ab26:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	2b00      	cmp	r3, #0
 800ab2c:	d101      	bne.n	800ab32 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800ab2e:	2301      	movs	r3, #1
 800ab30:	e082      	b.n	800ac38 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	2241      	movs	r2, #65	; 0x41
 800ab36:	5c9b      	ldrb	r3, [r3, r2]
 800ab38:	b2db      	uxtb	r3, r3
 800ab3a:	2b00      	cmp	r3, #0
 800ab3c:	d107      	bne.n	800ab4e <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	2240      	movs	r2, #64	; 0x40
 800ab42:	2100      	movs	r1, #0
 800ab44:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	0018      	movs	r0, r3
 800ab4a:	f000 f8af 	bl	800acac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	2241      	movs	r2, #65	; 0x41
 800ab52:	2124      	movs	r1, #36	; 0x24
 800ab54:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	681b      	ldr	r3, [r3, #0]
 800ab5a:	681a      	ldr	r2, [r3, #0]
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	681b      	ldr	r3, [r3, #0]
 800ab60:	2101      	movs	r1, #1
 800ab62:	438a      	bics	r2, r1
 800ab64:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	685a      	ldr	r2, [r3, #4]
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	4934      	ldr	r1, [pc, #208]	; (800ac40 <HAL_I2C_Init+0x120>)
 800ab70:	400a      	ands	r2, r1
 800ab72:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	689a      	ldr	r2, [r3, #8]
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	681b      	ldr	r3, [r3, #0]
 800ab7e:	4931      	ldr	r1, [pc, #196]	; (800ac44 <HAL_I2C_Init+0x124>)
 800ab80:	400a      	ands	r2, r1
 800ab82:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	68db      	ldr	r3, [r3, #12]
 800ab88:	2b01      	cmp	r3, #1
 800ab8a:	d108      	bne.n	800ab9e <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	689a      	ldr	r2, [r3, #8]
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	681b      	ldr	r3, [r3, #0]
 800ab94:	2180      	movs	r1, #128	; 0x80
 800ab96:	0209      	lsls	r1, r1, #8
 800ab98:	430a      	orrs	r2, r1
 800ab9a:	609a      	str	r2, [r3, #8]
 800ab9c:	e007      	b.n	800abae <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	689a      	ldr	r2, [r3, #8]
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	681b      	ldr	r3, [r3, #0]
 800aba6:	2184      	movs	r1, #132	; 0x84
 800aba8:	0209      	lsls	r1, r1, #8
 800abaa:	430a      	orrs	r2, r1
 800abac:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	68db      	ldr	r3, [r3, #12]
 800abb2:	2b02      	cmp	r3, #2
 800abb4:	d104      	bne.n	800abc0 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	681b      	ldr	r3, [r3, #0]
 800abba:	2280      	movs	r2, #128	; 0x80
 800abbc:	0112      	lsls	r2, r2, #4
 800abbe:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	681b      	ldr	r3, [r3, #0]
 800abc4:	685a      	ldr	r2, [r3, #4]
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	681b      	ldr	r3, [r3, #0]
 800abca:	491f      	ldr	r1, [pc, #124]	; (800ac48 <HAL_I2C_Init+0x128>)
 800abcc:	430a      	orrs	r2, r1
 800abce:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	681b      	ldr	r3, [r3, #0]
 800abd4:	68da      	ldr	r2, [r3, #12]
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	681b      	ldr	r3, [r3, #0]
 800abda:	491a      	ldr	r1, [pc, #104]	; (800ac44 <HAL_I2C_Init+0x124>)
 800abdc:	400a      	ands	r2, r1
 800abde:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	691a      	ldr	r2, [r3, #16]
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	695b      	ldr	r3, [r3, #20]
 800abe8:	431a      	orrs	r2, r3
 800abea:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	699b      	ldr	r3, [r3, #24]
 800abf0:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	681b      	ldr	r3, [r3, #0]
 800abf6:	430a      	orrs	r2, r1
 800abf8:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	69d9      	ldr	r1, [r3, #28]
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	6a1a      	ldr	r2, [r3, #32]
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	681b      	ldr	r3, [r3, #0]
 800ac06:	430a      	orrs	r2, r1
 800ac08:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	681b      	ldr	r3, [r3, #0]
 800ac0e:	681a      	ldr	r2, [r3, #0]
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	2101      	movs	r1, #1
 800ac16:	430a      	orrs	r2, r1
 800ac18:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	2200      	movs	r2, #0
 800ac1e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	2241      	movs	r2, #65	; 0x41
 800ac24:	2120      	movs	r1, #32
 800ac26:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	2200      	movs	r2, #0
 800ac2c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	2242      	movs	r2, #66	; 0x42
 800ac32:	2100      	movs	r1, #0
 800ac34:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800ac36:	2300      	movs	r3, #0
}
 800ac38:	0018      	movs	r0, r3
 800ac3a:	46bd      	mov	sp, r7
 800ac3c:	b002      	add	sp, #8
 800ac3e:	bd80      	pop	{r7, pc}
 800ac40:	f0ffffff 	.word	0xf0ffffff
 800ac44:	ffff7fff 	.word	0xffff7fff
 800ac48:	02008000 	.word	0x02008000

0800ac4c <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800ac4c:	b580      	push	{r7, lr}
 800ac4e:	b082      	sub	sp, #8
 800ac50:	af00      	add	r7, sp, #0
 800ac52:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	d101      	bne.n	800ac5e <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800ac5a:	2301      	movs	r3, #1
 800ac5c:	e022      	b.n	800aca4 <HAL_I2C_DeInit+0x58>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	2241      	movs	r2, #65	; 0x41
 800ac62:	2124      	movs	r1, #36	; 0x24
 800ac64:	5499      	strb	r1, [r3, r2]

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	681b      	ldr	r3, [r3, #0]
 800ac6a:	681a      	ldr	r2, [r3, #0]
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	681b      	ldr	r3, [r3, #0]
 800ac70:	2101      	movs	r1, #1
 800ac72:	438a      	bics	r2, r1
 800ac74:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	0018      	movs	r0, r3
 800ac7a:	f000 f81f 	bl	800acbc <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	2200      	movs	r2, #0
 800ac82:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	2241      	movs	r2, #65	; 0x41
 800ac88:	2100      	movs	r1, #0
 800ac8a:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	2200      	movs	r2, #0
 800ac90:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	2242      	movs	r2, #66	; 0x42
 800ac96:	2100      	movs	r1, #0
 800ac98:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	2240      	movs	r2, #64	; 0x40
 800ac9e:	2100      	movs	r1, #0
 800aca0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800aca2:	2300      	movs	r3, #0
}
 800aca4:	0018      	movs	r0, r3
 800aca6:	46bd      	mov	sp, r7
 800aca8:	b002      	add	sp, #8
 800acaa:	bd80      	pop	{r7, pc}

0800acac <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 800acac:	b580      	push	{r7, lr}
 800acae:	b082      	sub	sp, #8
 800acb0:	af00      	add	r7, sp, #0
 800acb2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 800acb4:	46c0      	nop			; (mov r8, r8)
 800acb6:	46bd      	mov	sp, r7
 800acb8:	b002      	add	sp, #8
 800acba:	bd80      	pop	{r7, pc}

0800acbc <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 800acbc:	b580      	push	{r7, lr}
 800acbe:	b082      	sub	sp, #8
 800acc0:	af00      	add	r7, sp, #0
 800acc2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 800acc4:	46c0      	nop			; (mov r8, r8)
 800acc6:	46bd      	mov	sp, r7
 800acc8:	b002      	add	sp, #8
 800acca:	bd80      	pop	{r7, pc}

0800accc <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800accc:	b590      	push	{r4, r7, lr}
 800acce:	b089      	sub	sp, #36	; 0x24
 800acd0:	af02      	add	r7, sp, #8
 800acd2:	60f8      	str	r0, [r7, #12]
 800acd4:	000c      	movs	r4, r1
 800acd6:	0010      	movs	r0, r2
 800acd8:	0019      	movs	r1, r3
 800acda:	230a      	movs	r3, #10
 800acdc:	18fb      	adds	r3, r7, r3
 800acde:	1c22      	adds	r2, r4, #0
 800ace0:	801a      	strh	r2, [r3, #0]
 800ace2:	2308      	movs	r3, #8
 800ace4:	18fb      	adds	r3, r7, r3
 800ace6:	1c02      	adds	r2, r0, #0
 800ace8:	801a      	strh	r2, [r3, #0]
 800acea:	1dbb      	adds	r3, r7, #6
 800acec:	1c0a      	adds	r2, r1, #0
 800acee:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800acf0:	68fb      	ldr	r3, [r7, #12]
 800acf2:	2241      	movs	r2, #65	; 0x41
 800acf4:	5c9b      	ldrb	r3, [r3, r2]
 800acf6:	b2db      	uxtb	r3, r3
 800acf8:	2b20      	cmp	r3, #32
 800acfa:	d000      	beq.n	800acfe <HAL_I2C_Mem_Write+0x32>
 800acfc:	e10c      	b.n	800af18 <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 800acfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad00:	2b00      	cmp	r3, #0
 800ad02:	d004      	beq.n	800ad0e <HAL_I2C_Mem_Write+0x42>
 800ad04:	232c      	movs	r3, #44	; 0x2c
 800ad06:	18fb      	adds	r3, r7, r3
 800ad08:	881b      	ldrh	r3, [r3, #0]
 800ad0a:	2b00      	cmp	r3, #0
 800ad0c:	d105      	bne.n	800ad1a <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800ad0e:	68fb      	ldr	r3, [r7, #12]
 800ad10:	2280      	movs	r2, #128	; 0x80
 800ad12:	0092      	lsls	r2, r2, #2
 800ad14:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800ad16:	2301      	movs	r3, #1
 800ad18:	e0ff      	b.n	800af1a <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800ad1a:	68fb      	ldr	r3, [r7, #12]
 800ad1c:	2240      	movs	r2, #64	; 0x40
 800ad1e:	5c9b      	ldrb	r3, [r3, r2]
 800ad20:	2b01      	cmp	r3, #1
 800ad22:	d101      	bne.n	800ad28 <HAL_I2C_Mem_Write+0x5c>
 800ad24:	2302      	movs	r3, #2
 800ad26:	e0f8      	b.n	800af1a <HAL_I2C_Mem_Write+0x24e>
 800ad28:	68fb      	ldr	r3, [r7, #12]
 800ad2a:	2240      	movs	r2, #64	; 0x40
 800ad2c:	2101      	movs	r1, #1
 800ad2e:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800ad30:	f7ff f86a 	bl	8009e08 <HAL_GetTick>
 800ad34:	0003      	movs	r3, r0
 800ad36:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800ad38:	2380      	movs	r3, #128	; 0x80
 800ad3a:	0219      	lsls	r1, r3, #8
 800ad3c:	68f8      	ldr	r0, [r7, #12]
 800ad3e:	697b      	ldr	r3, [r7, #20]
 800ad40:	9300      	str	r3, [sp, #0]
 800ad42:	2319      	movs	r3, #25
 800ad44:	2201      	movs	r2, #1
 800ad46:	f000 fb21 	bl	800b38c <I2C_WaitOnFlagUntilTimeout>
 800ad4a:	1e03      	subs	r3, r0, #0
 800ad4c:	d001      	beq.n	800ad52 <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 800ad4e:	2301      	movs	r3, #1
 800ad50:	e0e3      	b.n	800af1a <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800ad52:	68fb      	ldr	r3, [r7, #12]
 800ad54:	2241      	movs	r2, #65	; 0x41
 800ad56:	2121      	movs	r1, #33	; 0x21
 800ad58:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800ad5a:	68fb      	ldr	r3, [r7, #12]
 800ad5c:	2242      	movs	r2, #66	; 0x42
 800ad5e:	2140      	movs	r1, #64	; 0x40
 800ad60:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800ad62:	68fb      	ldr	r3, [r7, #12]
 800ad64:	2200      	movs	r2, #0
 800ad66:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800ad68:	68fb      	ldr	r3, [r7, #12]
 800ad6a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ad6c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800ad6e:	68fb      	ldr	r3, [r7, #12]
 800ad70:	222c      	movs	r2, #44	; 0x2c
 800ad72:	18ba      	adds	r2, r7, r2
 800ad74:	8812      	ldrh	r2, [r2, #0]
 800ad76:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800ad78:	68fb      	ldr	r3, [r7, #12]
 800ad7a:	2200      	movs	r2, #0
 800ad7c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800ad7e:	1dbb      	adds	r3, r7, #6
 800ad80:	881c      	ldrh	r4, [r3, #0]
 800ad82:	2308      	movs	r3, #8
 800ad84:	18fb      	adds	r3, r7, r3
 800ad86:	881a      	ldrh	r2, [r3, #0]
 800ad88:	230a      	movs	r3, #10
 800ad8a:	18fb      	adds	r3, r7, r3
 800ad8c:	8819      	ldrh	r1, [r3, #0]
 800ad8e:	68f8      	ldr	r0, [r7, #12]
 800ad90:	697b      	ldr	r3, [r7, #20]
 800ad92:	9301      	str	r3, [sp, #4]
 800ad94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad96:	9300      	str	r3, [sp, #0]
 800ad98:	0023      	movs	r3, r4
 800ad9a:	f000 fa0f 	bl	800b1bc <I2C_RequestMemoryWrite>
 800ad9e:	1e03      	subs	r3, r0, #0
 800ada0:	d005      	beq.n	800adae <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800ada2:	68fb      	ldr	r3, [r7, #12]
 800ada4:	2240      	movs	r2, #64	; 0x40
 800ada6:	2100      	movs	r1, #0
 800ada8:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 800adaa:	2301      	movs	r3, #1
 800adac:	e0b5      	b.n	800af1a <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800adae:	68fb      	ldr	r3, [r7, #12]
 800adb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800adb2:	b29b      	uxth	r3, r3
 800adb4:	2bff      	cmp	r3, #255	; 0xff
 800adb6:	d911      	bls.n	800addc <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800adb8:	68fb      	ldr	r3, [r7, #12]
 800adba:	22ff      	movs	r2, #255	; 0xff
 800adbc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800adbe:	68fb      	ldr	r3, [r7, #12]
 800adc0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800adc2:	b2da      	uxtb	r2, r3
 800adc4:	2380      	movs	r3, #128	; 0x80
 800adc6:	045c      	lsls	r4, r3, #17
 800adc8:	230a      	movs	r3, #10
 800adca:	18fb      	adds	r3, r7, r3
 800adcc:	8819      	ldrh	r1, [r3, #0]
 800adce:	68f8      	ldr	r0, [r7, #12]
 800add0:	2300      	movs	r3, #0
 800add2:	9300      	str	r3, [sp, #0]
 800add4:	0023      	movs	r3, r4
 800add6:	f000 fc0d 	bl	800b5f4 <I2C_TransferConfig>
 800adda:	e012      	b.n	800ae02 <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800addc:	68fb      	ldr	r3, [r7, #12]
 800adde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ade0:	b29a      	uxth	r2, r3
 800ade2:	68fb      	ldr	r3, [r7, #12]
 800ade4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800ade6:	68fb      	ldr	r3, [r7, #12]
 800ade8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800adea:	b2da      	uxtb	r2, r3
 800adec:	2380      	movs	r3, #128	; 0x80
 800adee:	049c      	lsls	r4, r3, #18
 800adf0:	230a      	movs	r3, #10
 800adf2:	18fb      	adds	r3, r7, r3
 800adf4:	8819      	ldrh	r1, [r3, #0]
 800adf6:	68f8      	ldr	r0, [r7, #12]
 800adf8:	2300      	movs	r3, #0
 800adfa:	9300      	str	r3, [sp, #0]
 800adfc:	0023      	movs	r3, r4
 800adfe:	f000 fbf9 	bl	800b5f4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800ae02:	697a      	ldr	r2, [r7, #20]
 800ae04:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ae06:	68fb      	ldr	r3, [r7, #12]
 800ae08:	0018      	movs	r0, r3
 800ae0a:	f000 fafe 	bl	800b40a <I2C_WaitOnTXISFlagUntilTimeout>
 800ae0e:	1e03      	subs	r3, r0, #0
 800ae10:	d001      	beq.n	800ae16 <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 800ae12:	2301      	movs	r3, #1
 800ae14:	e081      	b.n	800af1a <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800ae16:	68fb      	ldr	r3, [r7, #12]
 800ae18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae1a:	781a      	ldrb	r2, [r3, #0]
 800ae1c:	68fb      	ldr	r3, [r7, #12]
 800ae1e:	681b      	ldr	r3, [r3, #0]
 800ae20:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800ae22:	68fb      	ldr	r3, [r7, #12]
 800ae24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae26:	1c5a      	adds	r2, r3, #1
 800ae28:	68fb      	ldr	r3, [r7, #12]
 800ae2a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800ae2c:	68fb      	ldr	r3, [r7, #12]
 800ae2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ae30:	b29b      	uxth	r3, r3
 800ae32:	3b01      	subs	r3, #1
 800ae34:	b29a      	uxth	r2, r3
 800ae36:	68fb      	ldr	r3, [r7, #12]
 800ae38:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800ae3a:	68fb      	ldr	r3, [r7, #12]
 800ae3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ae3e:	3b01      	subs	r3, #1
 800ae40:	b29a      	uxth	r2, r3
 800ae42:	68fb      	ldr	r3, [r7, #12]
 800ae44:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800ae46:	68fb      	ldr	r3, [r7, #12]
 800ae48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ae4a:	b29b      	uxth	r3, r3
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	d03a      	beq.n	800aec6 <HAL_I2C_Mem_Write+0x1fa>
 800ae50:	68fb      	ldr	r3, [r7, #12]
 800ae52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ae54:	2b00      	cmp	r3, #0
 800ae56:	d136      	bne.n	800aec6 <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800ae58:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ae5a:	68f8      	ldr	r0, [r7, #12]
 800ae5c:	697b      	ldr	r3, [r7, #20]
 800ae5e:	9300      	str	r3, [sp, #0]
 800ae60:	0013      	movs	r3, r2
 800ae62:	2200      	movs	r2, #0
 800ae64:	2180      	movs	r1, #128	; 0x80
 800ae66:	f000 fa91 	bl	800b38c <I2C_WaitOnFlagUntilTimeout>
 800ae6a:	1e03      	subs	r3, r0, #0
 800ae6c:	d001      	beq.n	800ae72 <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 800ae6e:	2301      	movs	r3, #1
 800ae70:	e053      	b.n	800af1a <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800ae72:	68fb      	ldr	r3, [r7, #12]
 800ae74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ae76:	b29b      	uxth	r3, r3
 800ae78:	2bff      	cmp	r3, #255	; 0xff
 800ae7a:	d911      	bls.n	800aea0 <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800ae7c:	68fb      	ldr	r3, [r7, #12]
 800ae7e:	22ff      	movs	r2, #255	; 0xff
 800ae80:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800ae82:	68fb      	ldr	r3, [r7, #12]
 800ae84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ae86:	b2da      	uxtb	r2, r3
 800ae88:	2380      	movs	r3, #128	; 0x80
 800ae8a:	045c      	lsls	r4, r3, #17
 800ae8c:	230a      	movs	r3, #10
 800ae8e:	18fb      	adds	r3, r7, r3
 800ae90:	8819      	ldrh	r1, [r3, #0]
 800ae92:	68f8      	ldr	r0, [r7, #12]
 800ae94:	2300      	movs	r3, #0
 800ae96:	9300      	str	r3, [sp, #0]
 800ae98:	0023      	movs	r3, r4
 800ae9a:	f000 fbab 	bl	800b5f4 <I2C_TransferConfig>
 800ae9e:	e012      	b.n	800aec6 <HAL_I2C_Mem_Write+0x1fa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800aea0:	68fb      	ldr	r3, [r7, #12]
 800aea2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800aea4:	b29a      	uxth	r2, r3
 800aea6:	68fb      	ldr	r3, [r7, #12]
 800aea8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800aeaa:	68fb      	ldr	r3, [r7, #12]
 800aeac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800aeae:	b2da      	uxtb	r2, r3
 800aeb0:	2380      	movs	r3, #128	; 0x80
 800aeb2:	049c      	lsls	r4, r3, #18
 800aeb4:	230a      	movs	r3, #10
 800aeb6:	18fb      	adds	r3, r7, r3
 800aeb8:	8819      	ldrh	r1, [r3, #0]
 800aeba:	68f8      	ldr	r0, [r7, #12]
 800aebc:	2300      	movs	r3, #0
 800aebe:	9300      	str	r3, [sp, #0]
 800aec0:	0023      	movs	r3, r4
 800aec2:	f000 fb97 	bl	800b5f4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800aec6:	68fb      	ldr	r3, [r7, #12]
 800aec8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800aeca:	b29b      	uxth	r3, r3
 800aecc:	2b00      	cmp	r3, #0
 800aece:	d198      	bne.n	800ae02 <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800aed0:	697a      	ldr	r2, [r7, #20]
 800aed2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800aed4:	68fb      	ldr	r3, [r7, #12]
 800aed6:	0018      	movs	r0, r3
 800aed8:	f000 fad6 	bl	800b488 <I2C_WaitOnSTOPFlagUntilTimeout>
 800aedc:	1e03      	subs	r3, r0, #0
 800aede:	d001      	beq.n	800aee4 <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 800aee0:	2301      	movs	r3, #1
 800aee2:	e01a      	b.n	800af1a <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800aee4:	68fb      	ldr	r3, [r7, #12]
 800aee6:	681b      	ldr	r3, [r3, #0]
 800aee8:	2220      	movs	r2, #32
 800aeea:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800aeec:	68fb      	ldr	r3, [r7, #12]
 800aeee:	681b      	ldr	r3, [r3, #0]
 800aef0:	685a      	ldr	r2, [r3, #4]
 800aef2:	68fb      	ldr	r3, [r7, #12]
 800aef4:	681b      	ldr	r3, [r3, #0]
 800aef6:	490b      	ldr	r1, [pc, #44]	; (800af24 <HAL_I2C_Mem_Write+0x258>)
 800aef8:	400a      	ands	r2, r1
 800aefa:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800aefc:	68fb      	ldr	r3, [r7, #12]
 800aefe:	2241      	movs	r2, #65	; 0x41
 800af00:	2120      	movs	r1, #32
 800af02:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800af04:	68fb      	ldr	r3, [r7, #12]
 800af06:	2242      	movs	r2, #66	; 0x42
 800af08:	2100      	movs	r1, #0
 800af0a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800af0c:	68fb      	ldr	r3, [r7, #12]
 800af0e:	2240      	movs	r2, #64	; 0x40
 800af10:	2100      	movs	r1, #0
 800af12:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800af14:	2300      	movs	r3, #0
 800af16:	e000      	b.n	800af1a <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 800af18:	2302      	movs	r3, #2
  }
}
 800af1a:	0018      	movs	r0, r3
 800af1c:	46bd      	mov	sp, r7
 800af1e:	b007      	add	sp, #28
 800af20:	bd90      	pop	{r4, r7, pc}
 800af22:	46c0      	nop			; (mov r8, r8)
 800af24:	fe00e800 	.word	0xfe00e800

0800af28 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800af28:	b590      	push	{r4, r7, lr}
 800af2a:	b089      	sub	sp, #36	; 0x24
 800af2c:	af02      	add	r7, sp, #8
 800af2e:	60f8      	str	r0, [r7, #12]
 800af30:	000c      	movs	r4, r1
 800af32:	0010      	movs	r0, r2
 800af34:	0019      	movs	r1, r3
 800af36:	230a      	movs	r3, #10
 800af38:	18fb      	adds	r3, r7, r3
 800af3a:	1c22      	adds	r2, r4, #0
 800af3c:	801a      	strh	r2, [r3, #0]
 800af3e:	2308      	movs	r3, #8
 800af40:	18fb      	adds	r3, r7, r3
 800af42:	1c02      	adds	r2, r0, #0
 800af44:	801a      	strh	r2, [r3, #0]
 800af46:	1dbb      	adds	r3, r7, #6
 800af48:	1c0a      	adds	r2, r1, #0
 800af4a:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800af4c:	68fb      	ldr	r3, [r7, #12]
 800af4e:	2241      	movs	r2, #65	; 0x41
 800af50:	5c9b      	ldrb	r3, [r3, r2]
 800af52:	b2db      	uxtb	r3, r3
 800af54:	2b20      	cmp	r3, #32
 800af56:	d000      	beq.n	800af5a <HAL_I2C_Mem_Read+0x32>
 800af58:	e110      	b.n	800b17c <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 800af5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af5c:	2b00      	cmp	r3, #0
 800af5e:	d004      	beq.n	800af6a <HAL_I2C_Mem_Read+0x42>
 800af60:	232c      	movs	r3, #44	; 0x2c
 800af62:	18fb      	adds	r3, r7, r3
 800af64:	881b      	ldrh	r3, [r3, #0]
 800af66:	2b00      	cmp	r3, #0
 800af68:	d105      	bne.n	800af76 <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800af6a:	68fb      	ldr	r3, [r7, #12]
 800af6c:	2280      	movs	r2, #128	; 0x80
 800af6e:	0092      	lsls	r2, r2, #2
 800af70:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800af72:	2301      	movs	r3, #1
 800af74:	e103      	b.n	800b17e <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800af76:	68fb      	ldr	r3, [r7, #12]
 800af78:	2240      	movs	r2, #64	; 0x40
 800af7a:	5c9b      	ldrb	r3, [r3, r2]
 800af7c:	2b01      	cmp	r3, #1
 800af7e:	d101      	bne.n	800af84 <HAL_I2C_Mem_Read+0x5c>
 800af80:	2302      	movs	r3, #2
 800af82:	e0fc      	b.n	800b17e <HAL_I2C_Mem_Read+0x256>
 800af84:	68fb      	ldr	r3, [r7, #12]
 800af86:	2240      	movs	r2, #64	; 0x40
 800af88:	2101      	movs	r1, #1
 800af8a:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800af8c:	f7fe ff3c 	bl	8009e08 <HAL_GetTick>
 800af90:	0003      	movs	r3, r0
 800af92:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800af94:	2380      	movs	r3, #128	; 0x80
 800af96:	0219      	lsls	r1, r3, #8
 800af98:	68f8      	ldr	r0, [r7, #12]
 800af9a:	697b      	ldr	r3, [r7, #20]
 800af9c:	9300      	str	r3, [sp, #0]
 800af9e:	2319      	movs	r3, #25
 800afa0:	2201      	movs	r2, #1
 800afa2:	f000 f9f3 	bl	800b38c <I2C_WaitOnFlagUntilTimeout>
 800afa6:	1e03      	subs	r3, r0, #0
 800afa8:	d001      	beq.n	800afae <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 800afaa:	2301      	movs	r3, #1
 800afac:	e0e7      	b.n	800b17e <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800afae:	68fb      	ldr	r3, [r7, #12]
 800afb0:	2241      	movs	r2, #65	; 0x41
 800afb2:	2122      	movs	r1, #34	; 0x22
 800afb4:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800afb6:	68fb      	ldr	r3, [r7, #12]
 800afb8:	2242      	movs	r2, #66	; 0x42
 800afba:	2140      	movs	r1, #64	; 0x40
 800afbc:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800afbe:	68fb      	ldr	r3, [r7, #12]
 800afc0:	2200      	movs	r2, #0
 800afc2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800afc4:	68fb      	ldr	r3, [r7, #12]
 800afc6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800afc8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800afca:	68fb      	ldr	r3, [r7, #12]
 800afcc:	222c      	movs	r2, #44	; 0x2c
 800afce:	18ba      	adds	r2, r7, r2
 800afd0:	8812      	ldrh	r2, [r2, #0]
 800afd2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800afd4:	68fb      	ldr	r3, [r7, #12]
 800afd6:	2200      	movs	r2, #0
 800afd8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800afda:	1dbb      	adds	r3, r7, #6
 800afdc:	881c      	ldrh	r4, [r3, #0]
 800afde:	2308      	movs	r3, #8
 800afe0:	18fb      	adds	r3, r7, r3
 800afe2:	881a      	ldrh	r2, [r3, #0]
 800afe4:	230a      	movs	r3, #10
 800afe6:	18fb      	adds	r3, r7, r3
 800afe8:	8819      	ldrh	r1, [r3, #0]
 800afea:	68f8      	ldr	r0, [r7, #12]
 800afec:	697b      	ldr	r3, [r7, #20]
 800afee:	9301      	str	r3, [sp, #4]
 800aff0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aff2:	9300      	str	r3, [sp, #0]
 800aff4:	0023      	movs	r3, r4
 800aff6:	f000 f945 	bl	800b284 <I2C_RequestMemoryRead>
 800affa:	1e03      	subs	r3, r0, #0
 800affc:	d005      	beq.n	800b00a <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800affe:	68fb      	ldr	r3, [r7, #12]
 800b000:	2240      	movs	r2, #64	; 0x40
 800b002:	2100      	movs	r1, #0
 800b004:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 800b006:	2301      	movs	r3, #1
 800b008:	e0b9      	b.n	800b17e <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b00a:	68fb      	ldr	r3, [r7, #12]
 800b00c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b00e:	b29b      	uxth	r3, r3
 800b010:	2bff      	cmp	r3, #255	; 0xff
 800b012:	d911      	bls.n	800b038 <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800b014:	68fb      	ldr	r3, [r7, #12]
 800b016:	22ff      	movs	r2, #255	; 0xff
 800b018:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800b01a:	68fb      	ldr	r3, [r7, #12]
 800b01c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b01e:	b2da      	uxtb	r2, r3
 800b020:	2380      	movs	r3, #128	; 0x80
 800b022:	045c      	lsls	r4, r3, #17
 800b024:	230a      	movs	r3, #10
 800b026:	18fb      	adds	r3, r7, r3
 800b028:	8819      	ldrh	r1, [r3, #0]
 800b02a:	68f8      	ldr	r0, [r7, #12]
 800b02c:	4b56      	ldr	r3, [pc, #344]	; (800b188 <HAL_I2C_Mem_Read+0x260>)
 800b02e:	9300      	str	r3, [sp, #0]
 800b030:	0023      	movs	r3, r4
 800b032:	f000 fadf 	bl	800b5f4 <I2C_TransferConfig>
 800b036:	e012      	b.n	800b05e <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800b038:	68fb      	ldr	r3, [r7, #12]
 800b03a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b03c:	b29a      	uxth	r2, r3
 800b03e:	68fb      	ldr	r3, [r7, #12]
 800b040:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800b042:	68fb      	ldr	r3, [r7, #12]
 800b044:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b046:	b2da      	uxtb	r2, r3
 800b048:	2380      	movs	r3, #128	; 0x80
 800b04a:	049c      	lsls	r4, r3, #18
 800b04c:	230a      	movs	r3, #10
 800b04e:	18fb      	adds	r3, r7, r3
 800b050:	8819      	ldrh	r1, [r3, #0]
 800b052:	68f8      	ldr	r0, [r7, #12]
 800b054:	4b4c      	ldr	r3, [pc, #304]	; (800b188 <HAL_I2C_Mem_Read+0x260>)
 800b056:	9300      	str	r3, [sp, #0]
 800b058:	0023      	movs	r3, r4
 800b05a:	f000 facb 	bl	800b5f4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800b05e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b060:	68f8      	ldr	r0, [r7, #12]
 800b062:	697b      	ldr	r3, [r7, #20]
 800b064:	9300      	str	r3, [sp, #0]
 800b066:	0013      	movs	r3, r2
 800b068:	2200      	movs	r2, #0
 800b06a:	2104      	movs	r1, #4
 800b06c:	f000 f98e 	bl	800b38c <I2C_WaitOnFlagUntilTimeout>
 800b070:	1e03      	subs	r3, r0, #0
 800b072:	d001      	beq.n	800b078 <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 800b074:	2301      	movs	r3, #1
 800b076:	e082      	b.n	800b17e <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800b078:	68fb      	ldr	r3, [r7, #12]
 800b07a:	681b      	ldr	r3, [r3, #0]
 800b07c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b07e:	68fb      	ldr	r3, [r7, #12]
 800b080:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b082:	b2d2      	uxtb	r2, r2
 800b084:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800b086:	68fb      	ldr	r3, [r7, #12]
 800b088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b08a:	1c5a      	adds	r2, r3, #1
 800b08c:	68fb      	ldr	r3, [r7, #12]
 800b08e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800b090:	68fb      	ldr	r3, [r7, #12]
 800b092:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b094:	3b01      	subs	r3, #1
 800b096:	b29a      	uxth	r2, r3
 800b098:	68fb      	ldr	r3, [r7, #12]
 800b09a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800b09c:	68fb      	ldr	r3, [r7, #12]
 800b09e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b0a0:	b29b      	uxth	r3, r3
 800b0a2:	3b01      	subs	r3, #1
 800b0a4:	b29a      	uxth	r2, r3
 800b0a6:	68fb      	ldr	r3, [r7, #12]
 800b0a8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800b0aa:	68fb      	ldr	r3, [r7, #12]
 800b0ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b0ae:	b29b      	uxth	r3, r3
 800b0b0:	2b00      	cmp	r3, #0
 800b0b2:	d03a      	beq.n	800b12a <HAL_I2C_Mem_Read+0x202>
 800b0b4:	68fb      	ldr	r3, [r7, #12]
 800b0b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b0b8:	2b00      	cmp	r3, #0
 800b0ba:	d136      	bne.n	800b12a <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800b0bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b0be:	68f8      	ldr	r0, [r7, #12]
 800b0c0:	697b      	ldr	r3, [r7, #20]
 800b0c2:	9300      	str	r3, [sp, #0]
 800b0c4:	0013      	movs	r3, r2
 800b0c6:	2200      	movs	r2, #0
 800b0c8:	2180      	movs	r1, #128	; 0x80
 800b0ca:	f000 f95f 	bl	800b38c <I2C_WaitOnFlagUntilTimeout>
 800b0ce:	1e03      	subs	r3, r0, #0
 800b0d0:	d001      	beq.n	800b0d6 <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 800b0d2:	2301      	movs	r3, #1
 800b0d4:	e053      	b.n	800b17e <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b0d6:	68fb      	ldr	r3, [r7, #12]
 800b0d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b0da:	b29b      	uxth	r3, r3
 800b0dc:	2bff      	cmp	r3, #255	; 0xff
 800b0de:	d911      	bls.n	800b104 <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800b0e0:	68fb      	ldr	r3, [r7, #12]
 800b0e2:	22ff      	movs	r2, #255	; 0xff
 800b0e4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800b0e6:	68fb      	ldr	r3, [r7, #12]
 800b0e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b0ea:	b2da      	uxtb	r2, r3
 800b0ec:	2380      	movs	r3, #128	; 0x80
 800b0ee:	045c      	lsls	r4, r3, #17
 800b0f0:	230a      	movs	r3, #10
 800b0f2:	18fb      	adds	r3, r7, r3
 800b0f4:	8819      	ldrh	r1, [r3, #0]
 800b0f6:	68f8      	ldr	r0, [r7, #12]
 800b0f8:	2300      	movs	r3, #0
 800b0fa:	9300      	str	r3, [sp, #0]
 800b0fc:	0023      	movs	r3, r4
 800b0fe:	f000 fa79 	bl	800b5f4 <I2C_TransferConfig>
 800b102:	e012      	b.n	800b12a <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800b104:	68fb      	ldr	r3, [r7, #12]
 800b106:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b108:	b29a      	uxth	r2, r3
 800b10a:	68fb      	ldr	r3, [r7, #12]
 800b10c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800b10e:	68fb      	ldr	r3, [r7, #12]
 800b110:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b112:	b2da      	uxtb	r2, r3
 800b114:	2380      	movs	r3, #128	; 0x80
 800b116:	049c      	lsls	r4, r3, #18
 800b118:	230a      	movs	r3, #10
 800b11a:	18fb      	adds	r3, r7, r3
 800b11c:	8819      	ldrh	r1, [r3, #0]
 800b11e:	68f8      	ldr	r0, [r7, #12]
 800b120:	2300      	movs	r3, #0
 800b122:	9300      	str	r3, [sp, #0]
 800b124:	0023      	movs	r3, r4
 800b126:	f000 fa65 	bl	800b5f4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800b12a:	68fb      	ldr	r3, [r7, #12]
 800b12c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b12e:	b29b      	uxth	r3, r3
 800b130:	2b00      	cmp	r3, #0
 800b132:	d194      	bne.n	800b05e <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b134:	697a      	ldr	r2, [r7, #20]
 800b136:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b138:	68fb      	ldr	r3, [r7, #12]
 800b13a:	0018      	movs	r0, r3
 800b13c:	f000 f9a4 	bl	800b488 <I2C_WaitOnSTOPFlagUntilTimeout>
 800b140:	1e03      	subs	r3, r0, #0
 800b142:	d001      	beq.n	800b148 <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 800b144:	2301      	movs	r3, #1
 800b146:	e01a      	b.n	800b17e <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b148:	68fb      	ldr	r3, [r7, #12]
 800b14a:	681b      	ldr	r3, [r3, #0]
 800b14c:	2220      	movs	r2, #32
 800b14e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800b150:	68fb      	ldr	r3, [r7, #12]
 800b152:	681b      	ldr	r3, [r3, #0]
 800b154:	685a      	ldr	r2, [r3, #4]
 800b156:	68fb      	ldr	r3, [r7, #12]
 800b158:	681b      	ldr	r3, [r3, #0]
 800b15a:	490c      	ldr	r1, [pc, #48]	; (800b18c <HAL_I2C_Mem_Read+0x264>)
 800b15c:	400a      	ands	r2, r1
 800b15e:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800b160:	68fb      	ldr	r3, [r7, #12]
 800b162:	2241      	movs	r2, #65	; 0x41
 800b164:	2120      	movs	r1, #32
 800b166:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800b168:	68fb      	ldr	r3, [r7, #12]
 800b16a:	2242      	movs	r2, #66	; 0x42
 800b16c:	2100      	movs	r1, #0
 800b16e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b170:	68fb      	ldr	r3, [r7, #12]
 800b172:	2240      	movs	r2, #64	; 0x40
 800b174:	2100      	movs	r1, #0
 800b176:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800b178:	2300      	movs	r3, #0
 800b17a:	e000      	b.n	800b17e <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 800b17c:	2302      	movs	r3, #2
  }
}
 800b17e:	0018      	movs	r0, r3
 800b180:	46bd      	mov	sp, r7
 800b182:	b007      	add	sp, #28
 800b184:	bd90      	pop	{r4, r7, pc}
 800b186:	46c0      	nop			; (mov r8, r8)
 800b188:	80002400 	.word	0x80002400
 800b18c:	fe00e800 	.word	0xfe00e800

0800b190 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 800b190:	b580      	push	{r7, lr}
 800b192:	b082      	sub	sp, #8
 800b194:	af00      	add	r7, sp, #0
 800b196:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	2241      	movs	r2, #65	; 0x41
 800b19c:	5c9b      	ldrb	r3, [r3, r2]
 800b19e:	b2db      	uxtb	r3, r3
}
 800b1a0:	0018      	movs	r0, r3
 800b1a2:	46bd      	mov	sp, r7
 800b1a4:	b002      	add	sp, #8
 800b1a6:	bd80      	pop	{r7, pc}

0800b1a8 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 800b1a8:	b580      	push	{r7, lr}
 800b1aa:	b082      	sub	sp, #8
 800b1ac:	af00      	add	r7, sp, #0
 800b1ae:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 800b1b4:	0018      	movs	r0, r3
 800b1b6:	46bd      	mov	sp, r7
 800b1b8:	b002      	add	sp, #8
 800b1ba:	bd80      	pop	{r7, pc}

0800b1bc <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800b1bc:	b5b0      	push	{r4, r5, r7, lr}
 800b1be:	b086      	sub	sp, #24
 800b1c0:	af02      	add	r7, sp, #8
 800b1c2:	60f8      	str	r0, [r7, #12]
 800b1c4:	000c      	movs	r4, r1
 800b1c6:	0010      	movs	r0, r2
 800b1c8:	0019      	movs	r1, r3
 800b1ca:	250a      	movs	r5, #10
 800b1cc:	197b      	adds	r3, r7, r5
 800b1ce:	1c22      	adds	r2, r4, #0
 800b1d0:	801a      	strh	r2, [r3, #0]
 800b1d2:	2308      	movs	r3, #8
 800b1d4:	18fb      	adds	r3, r7, r3
 800b1d6:	1c02      	adds	r2, r0, #0
 800b1d8:	801a      	strh	r2, [r3, #0]
 800b1da:	1dbb      	adds	r3, r7, #6
 800b1dc:	1c0a      	adds	r2, r1, #0
 800b1de:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800b1e0:	1dbb      	adds	r3, r7, #6
 800b1e2:	881b      	ldrh	r3, [r3, #0]
 800b1e4:	b2da      	uxtb	r2, r3
 800b1e6:	2380      	movs	r3, #128	; 0x80
 800b1e8:	045c      	lsls	r4, r3, #17
 800b1ea:	197b      	adds	r3, r7, r5
 800b1ec:	8819      	ldrh	r1, [r3, #0]
 800b1ee:	68f8      	ldr	r0, [r7, #12]
 800b1f0:	4b23      	ldr	r3, [pc, #140]	; (800b280 <I2C_RequestMemoryWrite+0xc4>)
 800b1f2:	9300      	str	r3, [sp, #0]
 800b1f4:	0023      	movs	r3, r4
 800b1f6:	f000 f9fd 	bl	800b5f4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b1fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b1fc:	6a39      	ldr	r1, [r7, #32]
 800b1fe:	68fb      	ldr	r3, [r7, #12]
 800b200:	0018      	movs	r0, r3
 800b202:	f000 f902 	bl	800b40a <I2C_WaitOnTXISFlagUntilTimeout>
 800b206:	1e03      	subs	r3, r0, #0
 800b208:	d001      	beq.n	800b20e <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 800b20a:	2301      	movs	r3, #1
 800b20c:	e033      	b.n	800b276 <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800b20e:	1dbb      	adds	r3, r7, #6
 800b210:	881b      	ldrh	r3, [r3, #0]
 800b212:	2b01      	cmp	r3, #1
 800b214:	d107      	bne.n	800b226 <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800b216:	2308      	movs	r3, #8
 800b218:	18fb      	adds	r3, r7, r3
 800b21a:	881b      	ldrh	r3, [r3, #0]
 800b21c:	b2da      	uxtb	r2, r3
 800b21e:	68fb      	ldr	r3, [r7, #12]
 800b220:	681b      	ldr	r3, [r3, #0]
 800b222:	629a      	str	r2, [r3, #40]	; 0x28
 800b224:	e019      	b.n	800b25a <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800b226:	2308      	movs	r3, #8
 800b228:	18fb      	adds	r3, r7, r3
 800b22a:	881b      	ldrh	r3, [r3, #0]
 800b22c:	0a1b      	lsrs	r3, r3, #8
 800b22e:	b29b      	uxth	r3, r3
 800b230:	b2da      	uxtb	r2, r3
 800b232:	68fb      	ldr	r3, [r7, #12]
 800b234:	681b      	ldr	r3, [r3, #0]
 800b236:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b238:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b23a:	6a39      	ldr	r1, [r7, #32]
 800b23c:	68fb      	ldr	r3, [r7, #12]
 800b23e:	0018      	movs	r0, r3
 800b240:	f000 f8e3 	bl	800b40a <I2C_WaitOnTXISFlagUntilTimeout>
 800b244:	1e03      	subs	r3, r0, #0
 800b246:	d001      	beq.n	800b24c <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 800b248:	2301      	movs	r3, #1
 800b24a:	e014      	b.n	800b276 <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800b24c:	2308      	movs	r3, #8
 800b24e:	18fb      	adds	r3, r7, r3
 800b250:	881b      	ldrh	r3, [r3, #0]
 800b252:	b2da      	uxtb	r2, r3
 800b254:	68fb      	ldr	r3, [r7, #12]
 800b256:	681b      	ldr	r3, [r3, #0]
 800b258:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800b25a:	6a3a      	ldr	r2, [r7, #32]
 800b25c:	68f8      	ldr	r0, [r7, #12]
 800b25e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b260:	9300      	str	r3, [sp, #0]
 800b262:	0013      	movs	r3, r2
 800b264:	2200      	movs	r2, #0
 800b266:	2180      	movs	r1, #128	; 0x80
 800b268:	f000 f890 	bl	800b38c <I2C_WaitOnFlagUntilTimeout>
 800b26c:	1e03      	subs	r3, r0, #0
 800b26e:	d001      	beq.n	800b274 <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 800b270:	2301      	movs	r3, #1
 800b272:	e000      	b.n	800b276 <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 800b274:	2300      	movs	r3, #0
}
 800b276:	0018      	movs	r0, r3
 800b278:	46bd      	mov	sp, r7
 800b27a:	b004      	add	sp, #16
 800b27c:	bdb0      	pop	{r4, r5, r7, pc}
 800b27e:	46c0      	nop			; (mov r8, r8)
 800b280:	80002000 	.word	0x80002000

0800b284 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800b284:	b5b0      	push	{r4, r5, r7, lr}
 800b286:	b086      	sub	sp, #24
 800b288:	af02      	add	r7, sp, #8
 800b28a:	60f8      	str	r0, [r7, #12]
 800b28c:	000c      	movs	r4, r1
 800b28e:	0010      	movs	r0, r2
 800b290:	0019      	movs	r1, r3
 800b292:	250a      	movs	r5, #10
 800b294:	197b      	adds	r3, r7, r5
 800b296:	1c22      	adds	r2, r4, #0
 800b298:	801a      	strh	r2, [r3, #0]
 800b29a:	2308      	movs	r3, #8
 800b29c:	18fb      	adds	r3, r7, r3
 800b29e:	1c02      	adds	r2, r0, #0
 800b2a0:	801a      	strh	r2, [r3, #0]
 800b2a2:	1dbb      	adds	r3, r7, #6
 800b2a4:	1c0a      	adds	r2, r1, #0
 800b2a6:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800b2a8:	1dbb      	adds	r3, r7, #6
 800b2aa:	881b      	ldrh	r3, [r3, #0]
 800b2ac:	b2da      	uxtb	r2, r3
 800b2ae:	197b      	adds	r3, r7, r5
 800b2b0:	8819      	ldrh	r1, [r3, #0]
 800b2b2:	68f8      	ldr	r0, [r7, #12]
 800b2b4:	4b23      	ldr	r3, [pc, #140]	; (800b344 <I2C_RequestMemoryRead+0xc0>)
 800b2b6:	9300      	str	r3, [sp, #0]
 800b2b8:	2300      	movs	r3, #0
 800b2ba:	f000 f99b 	bl	800b5f4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b2be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b2c0:	6a39      	ldr	r1, [r7, #32]
 800b2c2:	68fb      	ldr	r3, [r7, #12]
 800b2c4:	0018      	movs	r0, r3
 800b2c6:	f000 f8a0 	bl	800b40a <I2C_WaitOnTXISFlagUntilTimeout>
 800b2ca:	1e03      	subs	r3, r0, #0
 800b2cc:	d001      	beq.n	800b2d2 <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 800b2ce:	2301      	movs	r3, #1
 800b2d0:	e033      	b.n	800b33a <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800b2d2:	1dbb      	adds	r3, r7, #6
 800b2d4:	881b      	ldrh	r3, [r3, #0]
 800b2d6:	2b01      	cmp	r3, #1
 800b2d8:	d107      	bne.n	800b2ea <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800b2da:	2308      	movs	r3, #8
 800b2dc:	18fb      	adds	r3, r7, r3
 800b2de:	881b      	ldrh	r3, [r3, #0]
 800b2e0:	b2da      	uxtb	r2, r3
 800b2e2:	68fb      	ldr	r3, [r7, #12]
 800b2e4:	681b      	ldr	r3, [r3, #0]
 800b2e6:	629a      	str	r2, [r3, #40]	; 0x28
 800b2e8:	e019      	b.n	800b31e <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800b2ea:	2308      	movs	r3, #8
 800b2ec:	18fb      	adds	r3, r7, r3
 800b2ee:	881b      	ldrh	r3, [r3, #0]
 800b2f0:	0a1b      	lsrs	r3, r3, #8
 800b2f2:	b29b      	uxth	r3, r3
 800b2f4:	b2da      	uxtb	r2, r3
 800b2f6:	68fb      	ldr	r3, [r7, #12]
 800b2f8:	681b      	ldr	r3, [r3, #0]
 800b2fa:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b2fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b2fe:	6a39      	ldr	r1, [r7, #32]
 800b300:	68fb      	ldr	r3, [r7, #12]
 800b302:	0018      	movs	r0, r3
 800b304:	f000 f881 	bl	800b40a <I2C_WaitOnTXISFlagUntilTimeout>
 800b308:	1e03      	subs	r3, r0, #0
 800b30a:	d001      	beq.n	800b310 <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 800b30c:	2301      	movs	r3, #1
 800b30e:	e014      	b.n	800b33a <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800b310:	2308      	movs	r3, #8
 800b312:	18fb      	adds	r3, r7, r3
 800b314:	881b      	ldrh	r3, [r3, #0]
 800b316:	b2da      	uxtb	r2, r3
 800b318:	68fb      	ldr	r3, [r7, #12]
 800b31a:	681b      	ldr	r3, [r3, #0]
 800b31c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800b31e:	6a3a      	ldr	r2, [r7, #32]
 800b320:	68f8      	ldr	r0, [r7, #12]
 800b322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b324:	9300      	str	r3, [sp, #0]
 800b326:	0013      	movs	r3, r2
 800b328:	2200      	movs	r2, #0
 800b32a:	2140      	movs	r1, #64	; 0x40
 800b32c:	f000 f82e 	bl	800b38c <I2C_WaitOnFlagUntilTimeout>
 800b330:	1e03      	subs	r3, r0, #0
 800b332:	d001      	beq.n	800b338 <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 800b334:	2301      	movs	r3, #1
 800b336:	e000      	b.n	800b33a <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 800b338:	2300      	movs	r3, #0
}
 800b33a:	0018      	movs	r0, r3
 800b33c:	46bd      	mov	sp, r7
 800b33e:	b004      	add	sp, #16
 800b340:	bdb0      	pop	{r4, r5, r7, pc}
 800b342:	46c0      	nop			; (mov r8, r8)
 800b344:	80002000 	.word	0x80002000

0800b348 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800b348:	b580      	push	{r7, lr}
 800b34a:	b082      	sub	sp, #8
 800b34c:	af00      	add	r7, sp, #0
 800b34e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	681b      	ldr	r3, [r3, #0]
 800b354:	699b      	ldr	r3, [r3, #24]
 800b356:	2202      	movs	r2, #2
 800b358:	4013      	ands	r3, r2
 800b35a:	2b02      	cmp	r3, #2
 800b35c:	d103      	bne.n	800b366 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	681b      	ldr	r3, [r3, #0]
 800b362:	2200      	movs	r2, #0
 800b364:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	681b      	ldr	r3, [r3, #0]
 800b36a:	699b      	ldr	r3, [r3, #24]
 800b36c:	2201      	movs	r2, #1
 800b36e:	4013      	ands	r3, r2
 800b370:	2b01      	cmp	r3, #1
 800b372:	d007      	beq.n	800b384 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	681b      	ldr	r3, [r3, #0]
 800b378:	699a      	ldr	r2, [r3, #24]
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	681b      	ldr	r3, [r3, #0]
 800b37e:	2101      	movs	r1, #1
 800b380:	430a      	orrs	r2, r1
 800b382:	619a      	str	r2, [r3, #24]
  }
}
 800b384:	46c0      	nop			; (mov r8, r8)
 800b386:	46bd      	mov	sp, r7
 800b388:	b002      	add	sp, #8
 800b38a:	bd80      	pop	{r7, pc}

0800b38c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800b38c:	b580      	push	{r7, lr}
 800b38e:	b084      	sub	sp, #16
 800b390:	af00      	add	r7, sp, #0
 800b392:	60f8      	str	r0, [r7, #12]
 800b394:	60b9      	str	r1, [r7, #8]
 800b396:	603b      	str	r3, [r7, #0]
 800b398:	1dfb      	adds	r3, r7, #7
 800b39a:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800b39c:	e021      	b.n	800b3e2 <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b39e:	683b      	ldr	r3, [r7, #0]
 800b3a0:	3301      	adds	r3, #1
 800b3a2:	d01e      	beq.n	800b3e2 <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b3a4:	f7fe fd30 	bl	8009e08 <HAL_GetTick>
 800b3a8:	0002      	movs	r2, r0
 800b3aa:	69bb      	ldr	r3, [r7, #24]
 800b3ac:	1ad3      	subs	r3, r2, r3
 800b3ae:	683a      	ldr	r2, [r7, #0]
 800b3b0:	429a      	cmp	r2, r3
 800b3b2:	d302      	bcc.n	800b3ba <I2C_WaitOnFlagUntilTimeout+0x2e>
 800b3b4:	683b      	ldr	r3, [r7, #0]
 800b3b6:	2b00      	cmp	r3, #0
 800b3b8:	d113      	bne.n	800b3e2 <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b3ba:	68fb      	ldr	r3, [r7, #12]
 800b3bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b3be:	2220      	movs	r2, #32
 800b3c0:	431a      	orrs	r2, r3
 800b3c2:	68fb      	ldr	r3, [r7, #12]
 800b3c4:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800b3c6:	68fb      	ldr	r3, [r7, #12]
 800b3c8:	2241      	movs	r2, #65	; 0x41
 800b3ca:	2120      	movs	r1, #32
 800b3cc:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800b3ce:	68fb      	ldr	r3, [r7, #12]
 800b3d0:	2242      	movs	r2, #66	; 0x42
 800b3d2:	2100      	movs	r1, #0
 800b3d4:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b3d6:	68fb      	ldr	r3, [r7, #12]
 800b3d8:	2240      	movs	r2, #64	; 0x40
 800b3da:	2100      	movs	r1, #0
 800b3dc:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 800b3de:	2301      	movs	r3, #1
 800b3e0:	e00f      	b.n	800b402 <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800b3e2:	68fb      	ldr	r3, [r7, #12]
 800b3e4:	681b      	ldr	r3, [r3, #0]
 800b3e6:	699b      	ldr	r3, [r3, #24]
 800b3e8:	68ba      	ldr	r2, [r7, #8]
 800b3ea:	4013      	ands	r3, r2
 800b3ec:	68ba      	ldr	r2, [r7, #8]
 800b3ee:	1ad3      	subs	r3, r2, r3
 800b3f0:	425a      	negs	r2, r3
 800b3f2:	4153      	adcs	r3, r2
 800b3f4:	b2db      	uxtb	r3, r3
 800b3f6:	001a      	movs	r2, r3
 800b3f8:	1dfb      	adds	r3, r7, #7
 800b3fa:	781b      	ldrb	r3, [r3, #0]
 800b3fc:	429a      	cmp	r2, r3
 800b3fe:	d0ce      	beq.n	800b39e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800b400:	2300      	movs	r3, #0
}
 800b402:	0018      	movs	r0, r3
 800b404:	46bd      	mov	sp, r7
 800b406:	b004      	add	sp, #16
 800b408:	bd80      	pop	{r7, pc}

0800b40a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800b40a:	b580      	push	{r7, lr}
 800b40c:	b084      	sub	sp, #16
 800b40e:	af00      	add	r7, sp, #0
 800b410:	60f8      	str	r0, [r7, #12]
 800b412:	60b9      	str	r1, [r7, #8]
 800b414:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800b416:	e02b      	b.n	800b470 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800b418:	687a      	ldr	r2, [r7, #4]
 800b41a:	68b9      	ldr	r1, [r7, #8]
 800b41c:	68fb      	ldr	r3, [r7, #12]
 800b41e:	0018      	movs	r0, r3
 800b420:	f000 f86e 	bl	800b500 <I2C_IsAcknowledgeFailed>
 800b424:	1e03      	subs	r3, r0, #0
 800b426:	d001      	beq.n	800b42c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800b428:	2301      	movs	r3, #1
 800b42a:	e029      	b.n	800b480 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b42c:	68bb      	ldr	r3, [r7, #8]
 800b42e:	3301      	adds	r3, #1
 800b430:	d01e      	beq.n	800b470 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b432:	f7fe fce9 	bl	8009e08 <HAL_GetTick>
 800b436:	0002      	movs	r2, r0
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	1ad3      	subs	r3, r2, r3
 800b43c:	68ba      	ldr	r2, [r7, #8]
 800b43e:	429a      	cmp	r2, r3
 800b440:	d302      	bcc.n	800b448 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 800b442:	68bb      	ldr	r3, [r7, #8]
 800b444:	2b00      	cmp	r3, #0
 800b446:	d113      	bne.n	800b470 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b448:	68fb      	ldr	r3, [r7, #12]
 800b44a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b44c:	2220      	movs	r2, #32
 800b44e:	431a      	orrs	r2, r3
 800b450:	68fb      	ldr	r3, [r7, #12]
 800b452:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800b454:	68fb      	ldr	r3, [r7, #12]
 800b456:	2241      	movs	r2, #65	; 0x41
 800b458:	2120      	movs	r1, #32
 800b45a:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800b45c:	68fb      	ldr	r3, [r7, #12]
 800b45e:	2242      	movs	r2, #66	; 0x42
 800b460:	2100      	movs	r1, #0
 800b462:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b464:	68fb      	ldr	r3, [r7, #12]
 800b466:	2240      	movs	r2, #64	; 0x40
 800b468:	2100      	movs	r1, #0
 800b46a:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800b46c:	2301      	movs	r3, #1
 800b46e:	e007      	b.n	800b480 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800b470:	68fb      	ldr	r3, [r7, #12]
 800b472:	681b      	ldr	r3, [r3, #0]
 800b474:	699b      	ldr	r3, [r3, #24]
 800b476:	2202      	movs	r2, #2
 800b478:	4013      	ands	r3, r2
 800b47a:	2b02      	cmp	r3, #2
 800b47c:	d1cc      	bne.n	800b418 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800b47e:	2300      	movs	r3, #0
}
 800b480:	0018      	movs	r0, r3
 800b482:	46bd      	mov	sp, r7
 800b484:	b004      	add	sp, #16
 800b486:	bd80      	pop	{r7, pc}

0800b488 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800b488:	b580      	push	{r7, lr}
 800b48a:	b084      	sub	sp, #16
 800b48c:	af00      	add	r7, sp, #0
 800b48e:	60f8      	str	r0, [r7, #12]
 800b490:	60b9      	str	r1, [r7, #8]
 800b492:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800b494:	e028      	b.n	800b4e8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800b496:	687a      	ldr	r2, [r7, #4]
 800b498:	68b9      	ldr	r1, [r7, #8]
 800b49a:	68fb      	ldr	r3, [r7, #12]
 800b49c:	0018      	movs	r0, r3
 800b49e:	f000 f82f 	bl	800b500 <I2C_IsAcknowledgeFailed>
 800b4a2:	1e03      	subs	r3, r0, #0
 800b4a4:	d001      	beq.n	800b4aa <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800b4a6:	2301      	movs	r3, #1
 800b4a8:	e026      	b.n	800b4f8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b4aa:	f7fe fcad 	bl	8009e08 <HAL_GetTick>
 800b4ae:	0002      	movs	r2, r0
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	1ad3      	subs	r3, r2, r3
 800b4b4:	68ba      	ldr	r2, [r7, #8]
 800b4b6:	429a      	cmp	r2, r3
 800b4b8:	d302      	bcc.n	800b4c0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800b4ba:	68bb      	ldr	r3, [r7, #8]
 800b4bc:	2b00      	cmp	r3, #0
 800b4be:	d113      	bne.n	800b4e8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b4c0:	68fb      	ldr	r3, [r7, #12]
 800b4c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b4c4:	2220      	movs	r2, #32
 800b4c6:	431a      	orrs	r2, r3
 800b4c8:	68fb      	ldr	r3, [r7, #12]
 800b4ca:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800b4cc:	68fb      	ldr	r3, [r7, #12]
 800b4ce:	2241      	movs	r2, #65	; 0x41
 800b4d0:	2120      	movs	r1, #32
 800b4d2:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800b4d4:	68fb      	ldr	r3, [r7, #12]
 800b4d6:	2242      	movs	r2, #66	; 0x42
 800b4d8:	2100      	movs	r1, #0
 800b4da:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800b4dc:	68fb      	ldr	r3, [r7, #12]
 800b4de:	2240      	movs	r2, #64	; 0x40
 800b4e0:	2100      	movs	r1, #0
 800b4e2:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 800b4e4:	2301      	movs	r3, #1
 800b4e6:	e007      	b.n	800b4f8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800b4e8:	68fb      	ldr	r3, [r7, #12]
 800b4ea:	681b      	ldr	r3, [r3, #0]
 800b4ec:	699b      	ldr	r3, [r3, #24]
 800b4ee:	2220      	movs	r2, #32
 800b4f0:	4013      	ands	r3, r2
 800b4f2:	2b20      	cmp	r3, #32
 800b4f4:	d1cf      	bne.n	800b496 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800b4f6:	2300      	movs	r3, #0
}
 800b4f8:	0018      	movs	r0, r3
 800b4fa:	46bd      	mov	sp, r7
 800b4fc:	b004      	add	sp, #16
 800b4fe:	bd80      	pop	{r7, pc}

0800b500 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800b500:	b580      	push	{r7, lr}
 800b502:	b084      	sub	sp, #16
 800b504:	af00      	add	r7, sp, #0
 800b506:	60f8      	str	r0, [r7, #12]
 800b508:	60b9      	str	r1, [r7, #8]
 800b50a:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800b50c:	68fb      	ldr	r3, [r7, #12]
 800b50e:	681b      	ldr	r3, [r3, #0]
 800b510:	699b      	ldr	r3, [r3, #24]
 800b512:	2210      	movs	r2, #16
 800b514:	4013      	ands	r3, r2
 800b516:	2b10      	cmp	r3, #16
 800b518:	d164      	bne.n	800b5e4 <I2C_IsAcknowledgeFailed+0xe4>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800b51a:	68fb      	ldr	r3, [r7, #12]
 800b51c:	681b      	ldr	r3, [r3, #0]
 800b51e:	685a      	ldr	r2, [r3, #4]
 800b520:	2380      	movs	r3, #128	; 0x80
 800b522:	049b      	lsls	r3, r3, #18
 800b524:	401a      	ands	r2, r3
 800b526:	2380      	movs	r3, #128	; 0x80
 800b528:	049b      	lsls	r3, r3, #18
 800b52a:	429a      	cmp	r2, r3
 800b52c:	d02b      	beq.n	800b586 <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800b52e:	68fb      	ldr	r3, [r7, #12]
 800b530:	681b      	ldr	r3, [r3, #0]
 800b532:	685a      	ldr	r2, [r3, #4]
 800b534:	68fb      	ldr	r3, [r7, #12]
 800b536:	681b      	ldr	r3, [r3, #0]
 800b538:	2180      	movs	r1, #128	; 0x80
 800b53a:	01c9      	lsls	r1, r1, #7
 800b53c:	430a      	orrs	r2, r1
 800b53e:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800b540:	e021      	b.n	800b586 <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800b542:	68bb      	ldr	r3, [r7, #8]
 800b544:	3301      	adds	r3, #1
 800b546:	d01e      	beq.n	800b586 <I2C_IsAcknowledgeFailed+0x86>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b548:	f7fe fc5e 	bl	8009e08 <HAL_GetTick>
 800b54c:	0002      	movs	r2, r0
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	1ad3      	subs	r3, r2, r3
 800b552:	68ba      	ldr	r2, [r7, #8]
 800b554:	429a      	cmp	r2, r3
 800b556:	d302      	bcc.n	800b55e <I2C_IsAcknowledgeFailed+0x5e>
 800b558:	68bb      	ldr	r3, [r7, #8]
 800b55a:	2b00      	cmp	r3, #0
 800b55c:	d113      	bne.n	800b586 <I2C_IsAcknowledgeFailed+0x86>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b55e:	68fb      	ldr	r3, [r7, #12]
 800b560:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b562:	2220      	movs	r2, #32
 800b564:	431a      	orrs	r2, r3
 800b566:	68fb      	ldr	r3, [r7, #12]
 800b568:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800b56a:	68fb      	ldr	r3, [r7, #12]
 800b56c:	2241      	movs	r2, #65	; 0x41
 800b56e:	2120      	movs	r1, #32
 800b570:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800b572:	68fb      	ldr	r3, [r7, #12]
 800b574:	2242      	movs	r2, #66	; 0x42
 800b576:	2100      	movs	r1, #0
 800b578:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800b57a:	68fb      	ldr	r3, [r7, #12]
 800b57c:	2240      	movs	r2, #64	; 0x40
 800b57e:	2100      	movs	r1, #0
 800b580:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 800b582:	2301      	movs	r3, #1
 800b584:	e02f      	b.n	800b5e6 <I2C_IsAcknowledgeFailed+0xe6>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800b586:	68fb      	ldr	r3, [r7, #12]
 800b588:	681b      	ldr	r3, [r3, #0]
 800b58a:	699b      	ldr	r3, [r3, #24]
 800b58c:	2220      	movs	r2, #32
 800b58e:	4013      	ands	r3, r2
 800b590:	2b20      	cmp	r3, #32
 800b592:	d1d6      	bne.n	800b542 <I2C_IsAcknowledgeFailed+0x42>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b594:	68fb      	ldr	r3, [r7, #12]
 800b596:	681b      	ldr	r3, [r3, #0]
 800b598:	2210      	movs	r2, #16
 800b59a:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b59c:	68fb      	ldr	r3, [r7, #12]
 800b59e:	681b      	ldr	r3, [r3, #0]
 800b5a0:	2220      	movs	r2, #32
 800b5a2:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800b5a4:	68fb      	ldr	r3, [r7, #12]
 800b5a6:	0018      	movs	r0, r3
 800b5a8:	f7ff fece 	bl	800b348 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800b5ac:	68fb      	ldr	r3, [r7, #12]
 800b5ae:	681b      	ldr	r3, [r3, #0]
 800b5b0:	685a      	ldr	r2, [r3, #4]
 800b5b2:	68fb      	ldr	r3, [r7, #12]
 800b5b4:	681b      	ldr	r3, [r3, #0]
 800b5b6:	490e      	ldr	r1, [pc, #56]	; (800b5f0 <I2C_IsAcknowledgeFailed+0xf0>)
 800b5b8:	400a      	ands	r2, r1
 800b5ba:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800b5bc:	68fb      	ldr	r3, [r7, #12]
 800b5be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b5c0:	2204      	movs	r2, #4
 800b5c2:	431a      	orrs	r2, r3
 800b5c4:	68fb      	ldr	r3, [r7, #12]
 800b5c6:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800b5c8:	68fb      	ldr	r3, [r7, #12]
 800b5ca:	2241      	movs	r2, #65	; 0x41
 800b5cc:	2120      	movs	r1, #32
 800b5ce:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800b5d0:	68fb      	ldr	r3, [r7, #12]
 800b5d2:	2242      	movs	r2, #66	; 0x42
 800b5d4:	2100      	movs	r1, #0
 800b5d6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b5d8:	68fb      	ldr	r3, [r7, #12]
 800b5da:	2240      	movs	r2, #64	; 0x40
 800b5dc:	2100      	movs	r1, #0
 800b5de:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 800b5e0:	2301      	movs	r3, #1
 800b5e2:	e000      	b.n	800b5e6 <I2C_IsAcknowledgeFailed+0xe6>
  }
  return HAL_OK;
 800b5e4:	2300      	movs	r3, #0
}
 800b5e6:	0018      	movs	r0, r3
 800b5e8:	46bd      	mov	sp, r7
 800b5ea:	b004      	add	sp, #16
 800b5ec:	bd80      	pop	{r7, pc}
 800b5ee:	46c0      	nop			; (mov r8, r8)
 800b5f0:	fe00e800 	.word	0xfe00e800

0800b5f4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800b5f4:	b590      	push	{r4, r7, lr}
 800b5f6:	b085      	sub	sp, #20
 800b5f8:	af00      	add	r7, sp, #0
 800b5fa:	60f8      	str	r0, [r7, #12]
 800b5fc:	0008      	movs	r0, r1
 800b5fe:	0011      	movs	r1, r2
 800b600:	607b      	str	r3, [r7, #4]
 800b602:	240a      	movs	r4, #10
 800b604:	193b      	adds	r3, r7, r4
 800b606:	1c02      	adds	r2, r0, #0
 800b608:	801a      	strh	r2, [r3, #0]
 800b60a:	2009      	movs	r0, #9
 800b60c:	183b      	adds	r3, r7, r0
 800b60e:	1c0a      	adds	r2, r1, #0
 800b610:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 800b612:	68fb      	ldr	r3, [r7, #12]
 800b614:	681b      	ldr	r3, [r3, #0]
 800b616:	685b      	ldr	r3, [r3, #4]
 800b618:	6a3a      	ldr	r2, [r7, #32]
 800b61a:	0d51      	lsrs	r1, r2, #21
 800b61c:	2280      	movs	r2, #128	; 0x80
 800b61e:	00d2      	lsls	r2, r2, #3
 800b620:	400a      	ands	r2, r1
 800b622:	490e      	ldr	r1, [pc, #56]	; (800b65c <I2C_TransferConfig+0x68>)
 800b624:	430a      	orrs	r2, r1
 800b626:	43d2      	mvns	r2, r2
 800b628:	401a      	ands	r2, r3
 800b62a:	0011      	movs	r1, r2
 800b62c:	193b      	adds	r3, r7, r4
 800b62e:	881b      	ldrh	r3, [r3, #0]
 800b630:	059b      	lsls	r3, r3, #22
 800b632:	0d9a      	lsrs	r2, r3, #22
 800b634:	183b      	adds	r3, r7, r0
 800b636:	781b      	ldrb	r3, [r3, #0]
 800b638:	0418      	lsls	r0, r3, #16
 800b63a:	23ff      	movs	r3, #255	; 0xff
 800b63c:	041b      	lsls	r3, r3, #16
 800b63e:	4003      	ands	r3, r0
 800b640:	431a      	orrs	r2, r3
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	431a      	orrs	r2, r3
 800b646:	6a3b      	ldr	r3, [r7, #32]
 800b648:	431a      	orrs	r2, r3
 800b64a:	68fb      	ldr	r3, [r7, #12]
 800b64c:	681b      	ldr	r3, [r3, #0]
 800b64e:	430a      	orrs	r2, r1
 800b650:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 800b652:	46c0      	nop			; (mov r8, r8)
 800b654:	46bd      	mov	sp, r7
 800b656:	b005      	add	sp, #20
 800b658:	bd90      	pop	{r4, r7, pc}
 800b65a:	46c0      	nop			; (mov r8, r8)
 800b65c:	03ff63ff 	.word	0x03ff63ff

0800b660 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800b660:	b580      	push	{r7, lr}
 800b662:	b082      	sub	sp, #8
 800b664:	af00      	add	r7, sp, #0
 800b666:	6078      	str	r0, [r7, #4]
 800b668:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	2241      	movs	r2, #65	; 0x41
 800b66e:	5c9b      	ldrb	r3, [r3, r2]
 800b670:	b2db      	uxtb	r3, r3
 800b672:	2b20      	cmp	r3, #32
 800b674:	d138      	bne.n	800b6e8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	2240      	movs	r2, #64	; 0x40
 800b67a:	5c9b      	ldrb	r3, [r3, r2]
 800b67c:	2b01      	cmp	r3, #1
 800b67e:	d101      	bne.n	800b684 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800b680:	2302      	movs	r3, #2
 800b682:	e032      	b.n	800b6ea <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	2240      	movs	r2, #64	; 0x40
 800b688:	2101      	movs	r1, #1
 800b68a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	2241      	movs	r2, #65	; 0x41
 800b690:	2124      	movs	r1, #36	; 0x24
 800b692:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	681b      	ldr	r3, [r3, #0]
 800b698:	681a      	ldr	r2, [r3, #0]
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	681b      	ldr	r3, [r3, #0]
 800b69e:	2101      	movs	r1, #1
 800b6a0:	438a      	bics	r2, r1
 800b6a2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	681b      	ldr	r3, [r3, #0]
 800b6a8:	681a      	ldr	r2, [r3, #0]
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	681b      	ldr	r3, [r3, #0]
 800b6ae:	4911      	ldr	r1, [pc, #68]	; (800b6f4 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 800b6b0:	400a      	ands	r2, r1
 800b6b2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	681b      	ldr	r3, [r3, #0]
 800b6b8:	6819      	ldr	r1, [r3, #0]
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	681b      	ldr	r3, [r3, #0]
 800b6be:	683a      	ldr	r2, [r7, #0]
 800b6c0:	430a      	orrs	r2, r1
 800b6c2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	681b      	ldr	r3, [r3, #0]
 800b6c8:	681a      	ldr	r2, [r3, #0]
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	681b      	ldr	r3, [r3, #0]
 800b6ce:	2101      	movs	r1, #1
 800b6d0:	430a      	orrs	r2, r1
 800b6d2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	2241      	movs	r2, #65	; 0x41
 800b6d8:	2120      	movs	r1, #32
 800b6da:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	2240      	movs	r2, #64	; 0x40
 800b6e0:	2100      	movs	r1, #0
 800b6e2:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800b6e4:	2300      	movs	r3, #0
 800b6e6:	e000      	b.n	800b6ea <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800b6e8:	2302      	movs	r3, #2
  }
}
 800b6ea:	0018      	movs	r0, r3
 800b6ec:	46bd      	mov	sp, r7
 800b6ee:	b002      	add	sp, #8
 800b6f0:	bd80      	pop	{r7, pc}
 800b6f2:	46c0      	nop			; (mov r8, r8)
 800b6f4:	ffffefff 	.word	0xffffefff

0800b6f8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800b6f8:	b580      	push	{r7, lr}
 800b6fa:	b084      	sub	sp, #16
 800b6fc:	af00      	add	r7, sp, #0
 800b6fe:	6078      	str	r0, [r7, #4]
 800b700:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	2241      	movs	r2, #65	; 0x41
 800b706:	5c9b      	ldrb	r3, [r3, r2]
 800b708:	b2db      	uxtb	r3, r3
 800b70a:	2b20      	cmp	r3, #32
 800b70c:	d139      	bne.n	800b782 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	2240      	movs	r2, #64	; 0x40
 800b712:	5c9b      	ldrb	r3, [r3, r2]
 800b714:	2b01      	cmp	r3, #1
 800b716:	d101      	bne.n	800b71c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800b718:	2302      	movs	r3, #2
 800b71a:	e033      	b.n	800b784 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	2240      	movs	r2, #64	; 0x40
 800b720:	2101      	movs	r1, #1
 800b722:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	2241      	movs	r2, #65	; 0x41
 800b728:	2124      	movs	r1, #36	; 0x24
 800b72a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	681b      	ldr	r3, [r3, #0]
 800b730:	681a      	ldr	r2, [r3, #0]
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	681b      	ldr	r3, [r3, #0]
 800b736:	2101      	movs	r1, #1
 800b738:	438a      	bics	r2, r1
 800b73a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	681b      	ldr	r3, [r3, #0]
 800b740:	681b      	ldr	r3, [r3, #0]
 800b742:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800b744:	68fb      	ldr	r3, [r7, #12]
 800b746:	4a11      	ldr	r2, [pc, #68]	; (800b78c <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 800b748:	4013      	ands	r3, r2
 800b74a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800b74c:	683b      	ldr	r3, [r7, #0]
 800b74e:	021b      	lsls	r3, r3, #8
 800b750:	68fa      	ldr	r2, [r7, #12]
 800b752:	4313      	orrs	r3, r2
 800b754:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	681b      	ldr	r3, [r3, #0]
 800b75a:	68fa      	ldr	r2, [r7, #12]
 800b75c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	681b      	ldr	r3, [r3, #0]
 800b762:	681a      	ldr	r2, [r3, #0]
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	681b      	ldr	r3, [r3, #0]
 800b768:	2101      	movs	r1, #1
 800b76a:	430a      	orrs	r2, r1
 800b76c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	2241      	movs	r2, #65	; 0x41
 800b772:	2120      	movs	r1, #32
 800b774:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	2240      	movs	r2, #64	; 0x40
 800b77a:	2100      	movs	r1, #0
 800b77c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800b77e:	2300      	movs	r3, #0
 800b780:	e000      	b.n	800b784 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800b782:	2302      	movs	r3, #2
  }
}
 800b784:	0018      	movs	r0, r3
 800b786:	46bd      	mov	sp, r7
 800b788:	b004      	add	sp, #16
 800b78a:	bd80      	pop	{r7, pc}
 800b78c:	fffff0ff 	.word	0xfffff0ff

0800b790 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800b790:	b5b0      	push	{r4, r5, r7, lr}
 800b792:	b08a      	sub	sp, #40	; 0x28
 800b794:	af00      	add	r7, sp, #0
 800b796:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	2b00      	cmp	r3, #0
 800b79c:	d102      	bne.n	800b7a4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800b79e:	2301      	movs	r3, #1
 800b7a0:	f000 fbbf 	bl	800bf22 <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b7a4:	4bc9      	ldr	r3, [pc, #804]	; (800bacc <HAL_RCC_OscConfig+0x33c>)
 800b7a6:	68db      	ldr	r3, [r3, #12]
 800b7a8:	220c      	movs	r2, #12
 800b7aa:	4013      	ands	r3, r2
 800b7ac:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800b7ae:	4bc7      	ldr	r3, [pc, #796]	; (800bacc <HAL_RCC_OscConfig+0x33c>)
 800b7b0:	68da      	ldr	r2, [r3, #12]
 800b7b2:	2380      	movs	r3, #128	; 0x80
 800b7b4:	025b      	lsls	r3, r3, #9
 800b7b6:	4013      	ands	r3, r2
 800b7b8:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	681b      	ldr	r3, [r3, #0]
 800b7be:	2201      	movs	r2, #1
 800b7c0:	4013      	ands	r3, r2
 800b7c2:	d100      	bne.n	800b7c6 <HAL_RCC_OscConfig+0x36>
 800b7c4:	e07e      	b.n	800b8c4 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800b7c6:	69fb      	ldr	r3, [r7, #28]
 800b7c8:	2b08      	cmp	r3, #8
 800b7ca:	d007      	beq.n	800b7dc <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800b7cc:	69fb      	ldr	r3, [r7, #28]
 800b7ce:	2b0c      	cmp	r3, #12
 800b7d0:	d112      	bne.n	800b7f8 <HAL_RCC_OscConfig+0x68>
 800b7d2:	69ba      	ldr	r2, [r7, #24]
 800b7d4:	2380      	movs	r3, #128	; 0x80
 800b7d6:	025b      	lsls	r3, r3, #9
 800b7d8:	429a      	cmp	r2, r3
 800b7da:	d10d      	bne.n	800b7f8 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b7dc:	4bbb      	ldr	r3, [pc, #748]	; (800bacc <HAL_RCC_OscConfig+0x33c>)
 800b7de:	681a      	ldr	r2, [r3, #0]
 800b7e0:	2380      	movs	r3, #128	; 0x80
 800b7e2:	029b      	lsls	r3, r3, #10
 800b7e4:	4013      	ands	r3, r2
 800b7e6:	d100      	bne.n	800b7ea <HAL_RCC_OscConfig+0x5a>
 800b7e8:	e06b      	b.n	800b8c2 <HAL_RCC_OscConfig+0x132>
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	685b      	ldr	r3, [r3, #4]
 800b7ee:	2b00      	cmp	r3, #0
 800b7f0:	d167      	bne.n	800b8c2 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 800b7f2:	2301      	movs	r3, #1
 800b7f4:	f000 fb95 	bl	800bf22 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	685a      	ldr	r2, [r3, #4]
 800b7fc:	2380      	movs	r3, #128	; 0x80
 800b7fe:	025b      	lsls	r3, r3, #9
 800b800:	429a      	cmp	r2, r3
 800b802:	d107      	bne.n	800b814 <HAL_RCC_OscConfig+0x84>
 800b804:	4bb1      	ldr	r3, [pc, #708]	; (800bacc <HAL_RCC_OscConfig+0x33c>)
 800b806:	681a      	ldr	r2, [r3, #0]
 800b808:	4bb0      	ldr	r3, [pc, #704]	; (800bacc <HAL_RCC_OscConfig+0x33c>)
 800b80a:	2180      	movs	r1, #128	; 0x80
 800b80c:	0249      	lsls	r1, r1, #9
 800b80e:	430a      	orrs	r2, r1
 800b810:	601a      	str	r2, [r3, #0]
 800b812:	e027      	b.n	800b864 <HAL_RCC_OscConfig+0xd4>
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	685a      	ldr	r2, [r3, #4]
 800b818:	23a0      	movs	r3, #160	; 0xa0
 800b81a:	02db      	lsls	r3, r3, #11
 800b81c:	429a      	cmp	r2, r3
 800b81e:	d10e      	bne.n	800b83e <HAL_RCC_OscConfig+0xae>
 800b820:	4baa      	ldr	r3, [pc, #680]	; (800bacc <HAL_RCC_OscConfig+0x33c>)
 800b822:	681a      	ldr	r2, [r3, #0]
 800b824:	4ba9      	ldr	r3, [pc, #676]	; (800bacc <HAL_RCC_OscConfig+0x33c>)
 800b826:	2180      	movs	r1, #128	; 0x80
 800b828:	02c9      	lsls	r1, r1, #11
 800b82a:	430a      	orrs	r2, r1
 800b82c:	601a      	str	r2, [r3, #0]
 800b82e:	4ba7      	ldr	r3, [pc, #668]	; (800bacc <HAL_RCC_OscConfig+0x33c>)
 800b830:	681a      	ldr	r2, [r3, #0]
 800b832:	4ba6      	ldr	r3, [pc, #664]	; (800bacc <HAL_RCC_OscConfig+0x33c>)
 800b834:	2180      	movs	r1, #128	; 0x80
 800b836:	0249      	lsls	r1, r1, #9
 800b838:	430a      	orrs	r2, r1
 800b83a:	601a      	str	r2, [r3, #0]
 800b83c:	e012      	b.n	800b864 <HAL_RCC_OscConfig+0xd4>
 800b83e:	4ba3      	ldr	r3, [pc, #652]	; (800bacc <HAL_RCC_OscConfig+0x33c>)
 800b840:	681a      	ldr	r2, [r3, #0]
 800b842:	4ba2      	ldr	r3, [pc, #648]	; (800bacc <HAL_RCC_OscConfig+0x33c>)
 800b844:	49a2      	ldr	r1, [pc, #648]	; (800bad0 <HAL_RCC_OscConfig+0x340>)
 800b846:	400a      	ands	r2, r1
 800b848:	601a      	str	r2, [r3, #0]
 800b84a:	4ba0      	ldr	r3, [pc, #640]	; (800bacc <HAL_RCC_OscConfig+0x33c>)
 800b84c:	681a      	ldr	r2, [r3, #0]
 800b84e:	2380      	movs	r3, #128	; 0x80
 800b850:	025b      	lsls	r3, r3, #9
 800b852:	4013      	ands	r3, r2
 800b854:	60fb      	str	r3, [r7, #12]
 800b856:	68fb      	ldr	r3, [r7, #12]
 800b858:	4b9c      	ldr	r3, [pc, #624]	; (800bacc <HAL_RCC_OscConfig+0x33c>)
 800b85a:	681a      	ldr	r2, [r3, #0]
 800b85c:	4b9b      	ldr	r3, [pc, #620]	; (800bacc <HAL_RCC_OscConfig+0x33c>)
 800b85e:	499d      	ldr	r1, [pc, #628]	; (800bad4 <HAL_RCC_OscConfig+0x344>)
 800b860:	400a      	ands	r2, r1
 800b862:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	685b      	ldr	r3, [r3, #4]
 800b868:	2b00      	cmp	r3, #0
 800b86a:	d015      	beq.n	800b898 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b86c:	f7fe facc 	bl	8009e08 <HAL_GetTick>
 800b870:	0003      	movs	r3, r0
 800b872:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800b874:	e009      	b.n	800b88a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800b876:	f7fe fac7 	bl	8009e08 <HAL_GetTick>
 800b87a:	0002      	movs	r2, r0
 800b87c:	697b      	ldr	r3, [r7, #20]
 800b87e:	1ad3      	subs	r3, r2, r3
 800b880:	2b64      	cmp	r3, #100	; 0x64
 800b882:	d902      	bls.n	800b88a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800b884:	2303      	movs	r3, #3
 800b886:	f000 fb4c 	bl	800bf22 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800b88a:	4b90      	ldr	r3, [pc, #576]	; (800bacc <HAL_RCC_OscConfig+0x33c>)
 800b88c:	681a      	ldr	r2, [r3, #0]
 800b88e:	2380      	movs	r3, #128	; 0x80
 800b890:	029b      	lsls	r3, r3, #10
 800b892:	4013      	ands	r3, r2
 800b894:	d0ef      	beq.n	800b876 <HAL_RCC_OscConfig+0xe6>
 800b896:	e015      	b.n	800b8c4 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b898:	f7fe fab6 	bl	8009e08 <HAL_GetTick>
 800b89c:	0003      	movs	r3, r0
 800b89e:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800b8a0:	e008      	b.n	800b8b4 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800b8a2:	f7fe fab1 	bl	8009e08 <HAL_GetTick>
 800b8a6:	0002      	movs	r2, r0
 800b8a8:	697b      	ldr	r3, [r7, #20]
 800b8aa:	1ad3      	subs	r3, r2, r3
 800b8ac:	2b64      	cmp	r3, #100	; 0x64
 800b8ae:	d901      	bls.n	800b8b4 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 800b8b0:	2303      	movs	r3, #3
 800b8b2:	e336      	b.n	800bf22 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800b8b4:	4b85      	ldr	r3, [pc, #532]	; (800bacc <HAL_RCC_OscConfig+0x33c>)
 800b8b6:	681a      	ldr	r2, [r3, #0]
 800b8b8:	2380      	movs	r3, #128	; 0x80
 800b8ba:	029b      	lsls	r3, r3, #10
 800b8bc:	4013      	ands	r3, r2
 800b8be:	d1f0      	bne.n	800b8a2 <HAL_RCC_OscConfig+0x112>
 800b8c0:	e000      	b.n	800b8c4 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b8c2:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	681b      	ldr	r3, [r3, #0]
 800b8c8:	2202      	movs	r2, #2
 800b8ca:	4013      	ands	r3, r2
 800b8cc:	d100      	bne.n	800b8d0 <HAL_RCC_OscConfig+0x140>
 800b8ce:	e099      	b.n	800ba04 <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	68db      	ldr	r3, [r3, #12]
 800b8d4:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 800b8d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8d8:	2220      	movs	r2, #32
 800b8da:	4013      	ands	r3, r2
 800b8dc:	d009      	beq.n	800b8f2 <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 800b8de:	4b7b      	ldr	r3, [pc, #492]	; (800bacc <HAL_RCC_OscConfig+0x33c>)
 800b8e0:	681a      	ldr	r2, [r3, #0]
 800b8e2:	4b7a      	ldr	r3, [pc, #488]	; (800bacc <HAL_RCC_OscConfig+0x33c>)
 800b8e4:	2120      	movs	r1, #32
 800b8e6:	430a      	orrs	r2, r1
 800b8e8:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 800b8ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8ec:	2220      	movs	r2, #32
 800b8ee:	4393      	bics	r3, r2
 800b8f0:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800b8f2:	69fb      	ldr	r3, [r7, #28]
 800b8f4:	2b04      	cmp	r3, #4
 800b8f6:	d005      	beq.n	800b904 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800b8f8:	69fb      	ldr	r3, [r7, #28]
 800b8fa:	2b0c      	cmp	r3, #12
 800b8fc:	d13e      	bne.n	800b97c <HAL_RCC_OscConfig+0x1ec>
 800b8fe:	69bb      	ldr	r3, [r7, #24]
 800b900:	2b00      	cmp	r3, #0
 800b902:	d13b      	bne.n	800b97c <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 800b904:	4b71      	ldr	r3, [pc, #452]	; (800bacc <HAL_RCC_OscConfig+0x33c>)
 800b906:	681b      	ldr	r3, [r3, #0]
 800b908:	2204      	movs	r2, #4
 800b90a:	4013      	ands	r3, r2
 800b90c:	d004      	beq.n	800b918 <HAL_RCC_OscConfig+0x188>
 800b90e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b910:	2b00      	cmp	r3, #0
 800b912:	d101      	bne.n	800b918 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 800b914:	2301      	movs	r3, #1
 800b916:	e304      	b.n	800bf22 <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b918:	4b6c      	ldr	r3, [pc, #432]	; (800bacc <HAL_RCC_OscConfig+0x33c>)
 800b91a:	685b      	ldr	r3, [r3, #4]
 800b91c:	4a6e      	ldr	r2, [pc, #440]	; (800bad8 <HAL_RCC_OscConfig+0x348>)
 800b91e:	4013      	ands	r3, r2
 800b920:	0019      	movs	r1, r3
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	691b      	ldr	r3, [r3, #16]
 800b926:	021a      	lsls	r2, r3, #8
 800b928:	4b68      	ldr	r3, [pc, #416]	; (800bacc <HAL_RCC_OscConfig+0x33c>)
 800b92a:	430a      	orrs	r2, r1
 800b92c:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800b92e:	4b67      	ldr	r3, [pc, #412]	; (800bacc <HAL_RCC_OscConfig+0x33c>)
 800b930:	681b      	ldr	r3, [r3, #0]
 800b932:	2209      	movs	r2, #9
 800b934:	4393      	bics	r3, r2
 800b936:	0019      	movs	r1, r3
 800b938:	4b64      	ldr	r3, [pc, #400]	; (800bacc <HAL_RCC_OscConfig+0x33c>)
 800b93a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b93c:	430a      	orrs	r2, r1
 800b93e:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800b940:	f000 fc42 	bl	800c1c8 <HAL_RCC_GetSysClockFreq>
 800b944:	0001      	movs	r1, r0
 800b946:	4b61      	ldr	r3, [pc, #388]	; (800bacc <HAL_RCC_OscConfig+0x33c>)
 800b948:	68db      	ldr	r3, [r3, #12]
 800b94a:	091b      	lsrs	r3, r3, #4
 800b94c:	220f      	movs	r2, #15
 800b94e:	4013      	ands	r3, r2
 800b950:	4a62      	ldr	r2, [pc, #392]	; (800badc <HAL_RCC_OscConfig+0x34c>)
 800b952:	5cd3      	ldrb	r3, [r2, r3]
 800b954:	000a      	movs	r2, r1
 800b956:	40da      	lsrs	r2, r3
 800b958:	4b61      	ldr	r3, [pc, #388]	; (800bae0 <HAL_RCC_OscConfig+0x350>)
 800b95a:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 800b95c:	4b61      	ldr	r3, [pc, #388]	; (800bae4 <HAL_RCC_OscConfig+0x354>)
 800b95e:	681b      	ldr	r3, [r3, #0]
 800b960:	2513      	movs	r5, #19
 800b962:	197c      	adds	r4, r7, r5
 800b964:	0018      	movs	r0, r3
 800b966:	f7fe fa09 	bl	8009d7c <HAL_InitTick>
 800b96a:	0003      	movs	r3, r0
 800b96c:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 800b96e:	197b      	adds	r3, r7, r5
 800b970:	781b      	ldrb	r3, [r3, #0]
 800b972:	2b00      	cmp	r3, #0
 800b974:	d046      	beq.n	800ba04 <HAL_RCC_OscConfig+0x274>
      {
        return status;
 800b976:	197b      	adds	r3, r7, r5
 800b978:	781b      	ldrb	r3, [r3, #0]
 800b97a:	e2d2      	b.n	800bf22 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 800b97c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b97e:	2b00      	cmp	r3, #0
 800b980:	d027      	beq.n	800b9d2 <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800b982:	4b52      	ldr	r3, [pc, #328]	; (800bacc <HAL_RCC_OscConfig+0x33c>)
 800b984:	681b      	ldr	r3, [r3, #0]
 800b986:	2209      	movs	r2, #9
 800b988:	4393      	bics	r3, r2
 800b98a:	0019      	movs	r1, r3
 800b98c:	4b4f      	ldr	r3, [pc, #316]	; (800bacc <HAL_RCC_OscConfig+0x33c>)
 800b98e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b990:	430a      	orrs	r2, r1
 800b992:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b994:	f7fe fa38 	bl	8009e08 <HAL_GetTick>
 800b998:	0003      	movs	r3, r0
 800b99a:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800b99c:	e008      	b.n	800b9b0 <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800b99e:	f7fe fa33 	bl	8009e08 <HAL_GetTick>
 800b9a2:	0002      	movs	r2, r0
 800b9a4:	697b      	ldr	r3, [r7, #20]
 800b9a6:	1ad3      	subs	r3, r2, r3
 800b9a8:	2b02      	cmp	r3, #2
 800b9aa:	d901      	bls.n	800b9b0 <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 800b9ac:	2303      	movs	r3, #3
 800b9ae:	e2b8      	b.n	800bf22 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800b9b0:	4b46      	ldr	r3, [pc, #280]	; (800bacc <HAL_RCC_OscConfig+0x33c>)
 800b9b2:	681b      	ldr	r3, [r3, #0]
 800b9b4:	2204      	movs	r2, #4
 800b9b6:	4013      	ands	r3, r2
 800b9b8:	d0f1      	beq.n	800b99e <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b9ba:	4b44      	ldr	r3, [pc, #272]	; (800bacc <HAL_RCC_OscConfig+0x33c>)
 800b9bc:	685b      	ldr	r3, [r3, #4]
 800b9be:	4a46      	ldr	r2, [pc, #280]	; (800bad8 <HAL_RCC_OscConfig+0x348>)
 800b9c0:	4013      	ands	r3, r2
 800b9c2:	0019      	movs	r1, r3
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	691b      	ldr	r3, [r3, #16]
 800b9c8:	021a      	lsls	r2, r3, #8
 800b9ca:	4b40      	ldr	r3, [pc, #256]	; (800bacc <HAL_RCC_OscConfig+0x33c>)
 800b9cc:	430a      	orrs	r2, r1
 800b9ce:	605a      	str	r2, [r3, #4]
 800b9d0:	e018      	b.n	800ba04 <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800b9d2:	4b3e      	ldr	r3, [pc, #248]	; (800bacc <HAL_RCC_OscConfig+0x33c>)
 800b9d4:	681a      	ldr	r2, [r3, #0]
 800b9d6:	4b3d      	ldr	r3, [pc, #244]	; (800bacc <HAL_RCC_OscConfig+0x33c>)
 800b9d8:	2101      	movs	r1, #1
 800b9da:	438a      	bics	r2, r1
 800b9dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b9de:	f7fe fa13 	bl	8009e08 <HAL_GetTick>
 800b9e2:	0003      	movs	r3, r0
 800b9e4:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800b9e6:	e008      	b.n	800b9fa <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800b9e8:	f7fe fa0e 	bl	8009e08 <HAL_GetTick>
 800b9ec:	0002      	movs	r2, r0
 800b9ee:	697b      	ldr	r3, [r7, #20]
 800b9f0:	1ad3      	subs	r3, r2, r3
 800b9f2:	2b02      	cmp	r3, #2
 800b9f4:	d901      	bls.n	800b9fa <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 800b9f6:	2303      	movs	r3, #3
 800b9f8:	e293      	b.n	800bf22 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800b9fa:	4b34      	ldr	r3, [pc, #208]	; (800bacc <HAL_RCC_OscConfig+0x33c>)
 800b9fc:	681b      	ldr	r3, [r3, #0]
 800b9fe:	2204      	movs	r2, #4
 800ba00:	4013      	ands	r3, r2
 800ba02:	d1f1      	bne.n	800b9e8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	681b      	ldr	r3, [r3, #0]
 800ba08:	2210      	movs	r2, #16
 800ba0a:	4013      	ands	r3, r2
 800ba0c:	d100      	bne.n	800ba10 <HAL_RCC_OscConfig+0x280>
 800ba0e:	e0a2      	b.n	800bb56 <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800ba10:	69fb      	ldr	r3, [r7, #28]
 800ba12:	2b00      	cmp	r3, #0
 800ba14:	d140      	bne.n	800ba98 <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800ba16:	4b2d      	ldr	r3, [pc, #180]	; (800bacc <HAL_RCC_OscConfig+0x33c>)
 800ba18:	681a      	ldr	r2, [r3, #0]
 800ba1a:	2380      	movs	r3, #128	; 0x80
 800ba1c:	009b      	lsls	r3, r3, #2
 800ba1e:	4013      	ands	r3, r2
 800ba20:	d005      	beq.n	800ba2e <HAL_RCC_OscConfig+0x29e>
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	69db      	ldr	r3, [r3, #28]
 800ba26:	2b00      	cmp	r3, #0
 800ba28:	d101      	bne.n	800ba2e <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 800ba2a:	2301      	movs	r3, #1
 800ba2c:	e279      	b.n	800bf22 <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800ba2e:	4b27      	ldr	r3, [pc, #156]	; (800bacc <HAL_RCC_OscConfig+0x33c>)
 800ba30:	685b      	ldr	r3, [r3, #4]
 800ba32:	4a2d      	ldr	r2, [pc, #180]	; (800bae8 <HAL_RCC_OscConfig+0x358>)
 800ba34:	4013      	ands	r3, r2
 800ba36:	0019      	movs	r1, r3
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ba3c:	4b23      	ldr	r3, [pc, #140]	; (800bacc <HAL_RCC_OscConfig+0x33c>)
 800ba3e:	430a      	orrs	r2, r1
 800ba40:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800ba42:	4b22      	ldr	r3, [pc, #136]	; (800bacc <HAL_RCC_OscConfig+0x33c>)
 800ba44:	685b      	ldr	r3, [r3, #4]
 800ba46:	021b      	lsls	r3, r3, #8
 800ba48:	0a19      	lsrs	r1, r3, #8
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	6a1b      	ldr	r3, [r3, #32]
 800ba4e:	061a      	lsls	r2, r3, #24
 800ba50:	4b1e      	ldr	r3, [pc, #120]	; (800bacc <HAL_RCC_OscConfig+0x33c>)
 800ba52:	430a      	orrs	r2, r1
 800ba54:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba5a:	0b5b      	lsrs	r3, r3, #13
 800ba5c:	3301      	adds	r3, #1
 800ba5e:	2280      	movs	r2, #128	; 0x80
 800ba60:	0212      	lsls	r2, r2, #8
 800ba62:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800ba64:	4b19      	ldr	r3, [pc, #100]	; (800bacc <HAL_RCC_OscConfig+0x33c>)
 800ba66:	68db      	ldr	r3, [r3, #12]
 800ba68:	091b      	lsrs	r3, r3, #4
 800ba6a:	210f      	movs	r1, #15
 800ba6c:	400b      	ands	r3, r1
 800ba6e:	491b      	ldr	r1, [pc, #108]	; (800badc <HAL_RCC_OscConfig+0x34c>)
 800ba70:	5ccb      	ldrb	r3, [r1, r3]
 800ba72:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800ba74:	4b1a      	ldr	r3, [pc, #104]	; (800bae0 <HAL_RCC_OscConfig+0x350>)
 800ba76:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 800ba78:	4b1a      	ldr	r3, [pc, #104]	; (800bae4 <HAL_RCC_OscConfig+0x354>)
 800ba7a:	681b      	ldr	r3, [r3, #0]
 800ba7c:	2513      	movs	r5, #19
 800ba7e:	197c      	adds	r4, r7, r5
 800ba80:	0018      	movs	r0, r3
 800ba82:	f7fe f97b 	bl	8009d7c <HAL_InitTick>
 800ba86:	0003      	movs	r3, r0
 800ba88:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 800ba8a:	197b      	adds	r3, r7, r5
 800ba8c:	781b      	ldrb	r3, [r3, #0]
 800ba8e:	2b00      	cmp	r3, #0
 800ba90:	d061      	beq.n	800bb56 <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 800ba92:	197b      	adds	r3, r7, r5
 800ba94:	781b      	ldrb	r3, [r3, #0]
 800ba96:	e244      	b.n	800bf22 <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	69db      	ldr	r3, [r3, #28]
 800ba9c:	2b00      	cmp	r3, #0
 800ba9e:	d040      	beq.n	800bb22 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800baa0:	4b0a      	ldr	r3, [pc, #40]	; (800bacc <HAL_RCC_OscConfig+0x33c>)
 800baa2:	681a      	ldr	r2, [r3, #0]
 800baa4:	4b09      	ldr	r3, [pc, #36]	; (800bacc <HAL_RCC_OscConfig+0x33c>)
 800baa6:	2180      	movs	r1, #128	; 0x80
 800baa8:	0049      	lsls	r1, r1, #1
 800baaa:	430a      	orrs	r2, r1
 800baac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800baae:	f7fe f9ab 	bl	8009e08 <HAL_GetTick>
 800bab2:	0003      	movs	r3, r0
 800bab4:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800bab6:	e019      	b.n	800baec <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800bab8:	f7fe f9a6 	bl	8009e08 <HAL_GetTick>
 800babc:	0002      	movs	r2, r0
 800babe:	697b      	ldr	r3, [r7, #20]
 800bac0:	1ad3      	subs	r3, r2, r3
 800bac2:	2b02      	cmp	r3, #2
 800bac4:	d912      	bls.n	800baec <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 800bac6:	2303      	movs	r3, #3
 800bac8:	e22b      	b.n	800bf22 <HAL_RCC_OscConfig+0x792>
 800baca:	46c0      	nop			; (mov r8, r8)
 800bacc:	40021000 	.word	0x40021000
 800bad0:	fffeffff 	.word	0xfffeffff
 800bad4:	fffbffff 	.word	0xfffbffff
 800bad8:	ffffe0ff 	.word	0xffffe0ff
 800badc:	08015c0c 	.word	0x08015c0c
 800bae0:	200000cc 	.word	0x200000cc
 800bae4:	20000260 	.word	0x20000260
 800bae8:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800baec:	4bca      	ldr	r3, [pc, #808]	; (800be18 <HAL_RCC_OscConfig+0x688>)
 800baee:	681a      	ldr	r2, [r3, #0]
 800baf0:	2380      	movs	r3, #128	; 0x80
 800baf2:	009b      	lsls	r3, r3, #2
 800baf4:	4013      	ands	r3, r2
 800baf6:	d0df      	beq.n	800bab8 <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800baf8:	4bc7      	ldr	r3, [pc, #796]	; (800be18 <HAL_RCC_OscConfig+0x688>)
 800bafa:	685b      	ldr	r3, [r3, #4]
 800bafc:	4ac7      	ldr	r2, [pc, #796]	; (800be1c <HAL_RCC_OscConfig+0x68c>)
 800bafe:	4013      	ands	r3, r2
 800bb00:	0019      	movs	r1, r3
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bb06:	4bc4      	ldr	r3, [pc, #784]	; (800be18 <HAL_RCC_OscConfig+0x688>)
 800bb08:	430a      	orrs	r2, r1
 800bb0a:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800bb0c:	4bc2      	ldr	r3, [pc, #776]	; (800be18 <HAL_RCC_OscConfig+0x688>)
 800bb0e:	685b      	ldr	r3, [r3, #4]
 800bb10:	021b      	lsls	r3, r3, #8
 800bb12:	0a19      	lsrs	r1, r3, #8
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	6a1b      	ldr	r3, [r3, #32]
 800bb18:	061a      	lsls	r2, r3, #24
 800bb1a:	4bbf      	ldr	r3, [pc, #764]	; (800be18 <HAL_RCC_OscConfig+0x688>)
 800bb1c:	430a      	orrs	r2, r1
 800bb1e:	605a      	str	r2, [r3, #4]
 800bb20:	e019      	b.n	800bb56 <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800bb22:	4bbd      	ldr	r3, [pc, #756]	; (800be18 <HAL_RCC_OscConfig+0x688>)
 800bb24:	681a      	ldr	r2, [r3, #0]
 800bb26:	4bbc      	ldr	r3, [pc, #752]	; (800be18 <HAL_RCC_OscConfig+0x688>)
 800bb28:	49bd      	ldr	r1, [pc, #756]	; (800be20 <HAL_RCC_OscConfig+0x690>)
 800bb2a:	400a      	ands	r2, r1
 800bb2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800bb2e:	f7fe f96b 	bl	8009e08 <HAL_GetTick>
 800bb32:	0003      	movs	r3, r0
 800bb34:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800bb36:	e008      	b.n	800bb4a <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800bb38:	f7fe f966 	bl	8009e08 <HAL_GetTick>
 800bb3c:	0002      	movs	r2, r0
 800bb3e:	697b      	ldr	r3, [r7, #20]
 800bb40:	1ad3      	subs	r3, r2, r3
 800bb42:	2b02      	cmp	r3, #2
 800bb44:	d901      	bls.n	800bb4a <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 800bb46:	2303      	movs	r3, #3
 800bb48:	e1eb      	b.n	800bf22 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800bb4a:	4bb3      	ldr	r3, [pc, #716]	; (800be18 <HAL_RCC_OscConfig+0x688>)
 800bb4c:	681a      	ldr	r2, [r3, #0]
 800bb4e:	2380      	movs	r3, #128	; 0x80
 800bb50:	009b      	lsls	r3, r3, #2
 800bb52:	4013      	ands	r3, r2
 800bb54:	d1f0      	bne.n	800bb38 <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	681b      	ldr	r3, [r3, #0]
 800bb5a:	2208      	movs	r2, #8
 800bb5c:	4013      	ands	r3, r2
 800bb5e:	d036      	beq.n	800bbce <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	695b      	ldr	r3, [r3, #20]
 800bb64:	2b00      	cmp	r3, #0
 800bb66:	d019      	beq.n	800bb9c <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800bb68:	4bab      	ldr	r3, [pc, #684]	; (800be18 <HAL_RCC_OscConfig+0x688>)
 800bb6a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800bb6c:	4baa      	ldr	r3, [pc, #680]	; (800be18 <HAL_RCC_OscConfig+0x688>)
 800bb6e:	2101      	movs	r1, #1
 800bb70:	430a      	orrs	r2, r1
 800bb72:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800bb74:	f7fe f948 	bl	8009e08 <HAL_GetTick>
 800bb78:	0003      	movs	r3, r0
 800bb7a:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800bb7c:	e008      	b.n	800bb90 <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800bb7e:	f7fe f943 	bl	8009e08 <HAL_GetTick>
 800bb82:	0002      	movs	r2, r0
 800bb84:	697b      	ldr	r3, [r7, #20]
 800bb86:	1ad3      	subs	r3, r2, r3
 800bb88:	2b02      	cmp	r3, #2
 800bb8a:	d901      	bls.n	800bb90 <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 800bb8c:	2303      	movs	r3, #3
 800bb8e:	e1c8      	b.n	800bf22 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800bb90:	4ba1      	ldr	r3, [pc, #644]	; (800be18 <HAL_RCC_OscConfig+0x688>)
 800bb92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bb94:	2202      	movs	r2, #2
 800bb96:	4013      	ands	r3, r2
 800bb98:	d0f1      	beq.n	800bb7e <HAL_RCC_OscConfig+0x3ee>
 800bb9a:	e018      	b.n	800bbce <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800bb9c:	4b9e      	ldr	r3, [pc, #632]	; (800be18 <HAL_RCC_OscConfig+0x688>)
 800bb9e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800bba0:	4b9d      	ldr	r3, [pc, #628]	; (800be18 <HAL_RCC_OscConfig+0x688>)
 800bba2:	2101      	movs	r1, #1
 800bba4:	438a      	bics	r2, r1
 800bba6:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800bba8:	f7fe f92e 	bl	8009e08 <HAL_GetTick>
 800bbac:	0003      	movs	r3, r0
 800bbae:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800bbb0:	e008      	b.n	800bbc4 <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800bbb2:	f7fe f929 	bl	8009e08 <HAL_GetTick>
 800bbb6:	0002      	movs	r2, r0
 800bbb8:	697b      	ldr	r3, [r7, #20]
 800bbba:	1ad3      	subs	r3, r2, r3
 800bbbc:	2b02      	cmp	r3, #2
 800bbbe:	d901      	bls.n	800bbc4 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 800bbc0:	2303      	movs	r3, #3
 800bbc2:	e1ae      	b.n	800bf22 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800bbc4:	4b94      	ldr	r3, [pc, #592]	; (800be18 <HAL_RCC_OscConfig+0x688>)
 800bbc6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bbc8:	2202      	movs	r2, #2
 800bbca:	4013      	ands	r3, r2
 800bbcc:	d1f1      	bne.n	800bbb2 <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	681b      	ldr	r3, [r3, #0]
 800bbd2:	2204      	movs	r2, #4
 800bbd4:	4013      	ands	r3, r2
 800bbd6:	d100      	bne.n	800bbda <HAL_RCC_OscConfig+0x44a>
 800bbd8:	e0ae      	b.n	800bd38 <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800bbda:	2023      	movs	r0, #35	; 0x23
 800bbdc:	183b      	adds	r3, r7, r0
 800bbde:	2200      	movs	r2, #0
 800bbe0:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800bbe2:	4b8d      	ldr	r3, [pc, #564]	; (800be18 <HAL_RCC_OscConfig+0x688>)
 800bbe4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bbe6:	2380      	movs	r3, #128	; 0x80
 800bbe8:	055b      	lsls	r3, r3, #21
 800bbea:	4013      	ands	r3, r2
 800bbec:	d109      	bne.n	800bc02 <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800bbee:	4b8a      	ldr	r3, [pc, #552]	; (800be18 <HAL_RCC_OscConfig+0x688>)
 800bbf0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bbf2:	4b89      	ldr	r3, [pc, #548]	; (800be18 <HAL_RCC_OscConfig+0x688>)
 800bbf4:	2180      	movs	r1, #128	; 0x80
 800bbf6:	0549      	lsls	r1, r1, #21
 800bbf8:	430a      	orrs	r2, r1
 800bbfa:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 800bbfc:	183b      	adds	r3, r7, r0
 800bbfe:	2201      	movs	r2, #1
 800bc00:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800bc02:	4b88      	ldr	r3, [pc, #544]	; (800be24 <HAL_RCC_OscConfig+0x694>)
 800bc04:	681a      	ldr	r2, [r3, #0]
 800bc06:	2380      	movs	r3, #128	; 0x80
 800bc08:	005b      	lsls	r3, r3, #1
 800bc0a:	4013      	ands	r3, r2
 800bc0c:	d11a      	bne.n	800bc44 <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800bc0e:	4b85      	ldr	r3, [pc, #532]	; (800be24 <HAL_RCC_OscConfig+0x694>)
 800bc10:	681a      	ldr	r2, [r3, #0]
 800bc12:	4b84      	ldr	r3, [pc, #528]	; (800be24 <HAL_RCC_OscConfig+0x694>)
 800bc14:	2180      	movs	r1, #128	; 0x80
 800bc16:	0049      	lsls	r1, r1, #1
 800bc18:	430a      	orrs	r2, r1
 800bc1a:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800bc1c:	f7fe f8f4 	bl	8009e08 <HAL_GetTick>
 800bc20:	0003      	movs	r3, r0
 800bc22:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800bc24:	e008      	b.n	800bc38 <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800bc26:	f7fe f8ef 	bl	8009e08 <HAL_GetTick>
 800bc2a:	0002      	movs	r2, r0
 800bc2c:	697b      	ldr	r3, [r7, #20]
 800bc2e:	1ad3      	subs	r3, r2, r3
 800bc30:	2b64      	cmp	r3, #100	; 0x64
 800bc32:	d901      	bls.n	800bc38 <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 800bc34:	2303      	movs	r3, #3
 800bc36:	e174      	b.n	800bf22 <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800bc38:	4b7a      	ldr	r3, [pc, #488]	; (800be24 <HAL_RCC_OscConfig+0x694>)
 800bc3a:	681a      	ldr	r2, [r3, #0]
 800bc3c:	2380      	movs	r3, #128	; 0x80
 800bc3e:	005b      	lsls	r3, r3, #1
 800bc40:	4013      	ands	r3, r2
 800bc42:	d0f0      	beq.n	800bc26 <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	689a      	ldr	r2, [r3, #8]
 800bc48:	2380      	movs	r3, #128	; 0x80
 800bc4a:	005b      	lsls	r3, r3, #1
 800bc4c:	429a      	cmp	r2, r3
 800bc4e:	d107      	bne.n	800bc60 <HAL_RCC_OscConfig+0x4d0>
 800bc50:	4b71      	ldr	r3, [pc, #452]	; (800be18 <HAL_RCC_OscConfig+0x688>)
 800bc52:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800bc54:	4b70      	ldr	r3, [pc, #448]	; (800be18 <HAL_RCC_OscConfig+0x688>)
 800bc56:	2180      	movs	r1, #128	; 0x80
 800bc58:	0049      	lsls	r1, r1, #1
 800bc5a:	430a      	orrs	r2, r1
 800bc5c:	651a      	str	r2, [r3, #80]	; 0x50
 800bc5e:	e031      	b.n	800bcc4 <HAL_RCC_OscConfig+0x534>
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	689b      	ldr	r3, [r3, #8]
 800bc64:	2b00      	cmp	r3, #0
 800bc66:	d10c      	bne.n	800bc82 <HAL_RCC_OscConfig+0x4f2>
 800bc68:	4b6b      	ldr	r3, [pc, #428]	; (800be18 <HAL_RCC_OscConfig+0x688>)
 800bc6a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800bc6c:	4b6a      	ldr	r3, [pc, #424]	; (800be18 <HAL_RCC_OscConfig+0x688>)
 800bc6e:	496c      	ldr	r1, [pc, #432]	; (800be20 <HAL_RCC_OscConfig+0x690>)
 800bc70:	400a      	ands	r2, r1
 800bc72:	651a      	str	r2, [r3, #80]	; 0x50
 800bc74:	4b68      	ldr	r3, [pc, #416]	; (800be18 <HAL_RCC_OscConfig+0x688>)
 800bc76:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800bc78:	4b67      	ldr	r3, [pc, #412]	; (800be18 <HAL_RCC_OscConfig+0x688>)
 800bc7a:	496b      	ldr	r1, [pc, #428]	; (800be28 <HAL_RCC_OscConfig+0x698>)
 800bc7c:	400a      	ands	r2, r1
 800bc7e:	651a      	str	r2, [r3, #80]	; 0x50
 800bc80:	e020      	b.n	800bcc4 <HAL_RCC_OscConfig+0x534>
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	689a      	ldr	r2, [r3, #8]
 800bc86:	23a0      	movs	r3, #160	; 0xa0
 800bc88:	00db      	lsls	r3, r3, #3
 800bc8a:	429a      	cmp	r2, r3
 800bc8c:	d10e      	bne.n	800bcac <HAL_RCC_OscConfig+0x51c>
 800bc8e:	4b62      	ldr	r3, [pc, #392]	; (800be18 <HAL_RCC_OscConfig+0x688>)
 800bc90:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800bc92:	4b61      	ldr	r3, [pc, #388]	; (800be18 <HAL_RCC_OscConfig+0x688>)
 800bc94:	2180      	movs	r1, #128	; 0x80
 800bc96:	00c9      	lsls	r1, r1, #3
 800bc98:	430a      	orrs	r2, r1
 800bc9a:	651a      	str	r2, [r3, #80]	; 0x50
 800bc9c:	4b5e      	ldr	r3, [pc, #376]	; (800be18 <HAL_RCC_OscConfig+0x688>)
 800bc9e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800bca0:	4b5d      	ldr	r3, [pc, #372]	; (800be18 <HAL_RCC_OscConfig+0x688>)
 800bca2:	2180      	movs	r1, #128	; 0x80
 800bca4:	0049      	lsls	r1, r1, #1
 800bca6:	430a      	orrs	r2, r1
 800bca8:	651a      	str	r2, [r3, #80]	; 0x50
 800bcaa:	e00b      	b.n	800bcc4 <HAL_RCC_OscConfig+0x534>
 800bcac:	4b5a      	ldr	r3, [pc, #360]	; (800be18 <HAL_RCC_OscConfig+0x688>)
 800bcae:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800bcb0:	4b59      	ldr	r3, [pc, #356]	; (800be18 <HAL_RCC_OscConfig+0x688>)
 800bcb2:	495b      	ldr	r1, [pc, #364]	; (800be20 <HAL_RCC_OscConfig+0x690>)
 800bcb4:	400a      	ands	r2, r1
 800bcb6:	651a      	str	r2, [r3, #80]	; 0x50
 800bcb8:	4b57      	ldr	r3, [pc, #348]	; (800be18 <HAL_RCC_OscConfig+0x688>)
 800bcba:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800bcbc:	4b56      	ldr	r3, [pc, #344]	; (800be18 <HAL_RCC_OscConfig+0x688>)
 800bcbe:	495a      	ldr	r1, [pc, #360]	; (800be28 <HAL_RCC_OscConfig+0x698>)
 800bcc0:	400a      	ands	r2, r1
 800bcc2:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	689b      	ldr	r3, [r3, #8]
 800bcc8:	2b00      	cmp	r3, #0
 800bcca:	d015      	beq.n	800bcf8 <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800bccc:	f7fe f89c 	bl	8009e08 <HAL_GetTick>
 800bcd0:	0003      	movs	r3, r0
 800bcd2:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800bcd4:	e009      	b.n	800bcea <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800bcd6:	f7fe f897 	bl	8009e08 <HAL_GetTick>
 800bcda:	0002      	movs	r2, r0
 800bcdc:	697b      	ldr	r3, [r7, #20]
 800bcde:	1ad3      	subs	r3, r2, r3
 800bce0:	4a52      	ldr	r2, [pc, #328]	; (800be2c <HAL_RCC_OscConfig+0x69c>)
 800bce2:	4293      	cmp	r3, r2
 800bce4:	d901      	bls.n	800bcea <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 800bce6:	2303      	movs	r3, #3
 800bce8:	e11b      	b.n	800bf22 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800bcea:	4b4b      	ldr	r3, [pc, #300]	; (800be18 <HAL_RCC_OscConfig+0x688>)
 800bcec:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800bcee:	2380      	movs	r3, #128	; 0x80
 800bcf0:	009b      	lsls	r3, r3, #2
 800bcf2:	4013      	ands	r3, r2
 800bcf4:	d0ef      	beq.n	800bcd6 <HAL_RCC_OscConfig+0x546>
 800bcf6:	e014      	b.n	800bd22 <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800bcf8:	f7fe f886 	bl	8009e08 <HAL_GetTick>
 800bcfc:	0003      	movs	r3, r0
 800bcfe:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800bd00:	e009      	b.n	800bd16 <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800bd02:	f7fe f881 	bl	8009e08 <HAL_GetTick>
 800bd06:	0002      	movs	r2, r0
 800bd08:	697b      	ldr	r3, [r7, #20]
 800bd0a:	1ad3      	subs	r3, r2, r3
 800bd0c:	4a47      	ldr	r2, [pc, #284]	; (800be2c <HAL_RCC_OscConfig+0x69c>)
 800bd0e:	4293      	cmp	r3, r2
 800bd10:	d901      	bls.n	800bd16 <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 800bd12:	2303      	movs	r3, #3
 800bd14:	e105      	b.n	800bf22 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800bd16:	4b40      	ldr	r3, [pc, #256]	; (800be18 <HAL_RCC_OscConfig+0x688>)
 800bd18:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800bd1a:	2380      	movs	r3, #128	; 0x80
 800bd1c:	009b      	lsls	r3, r3, #2
 800bd1e:	4013      	ands	r3, r2
 800bd20:	d1ef      	bne.n	800bd02 <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800bd22:	2323      	movs	r3, #35	; 0x23
 800bd24:	18fb      	adds	r3, r7, r3
 800bd26:	781b      	ldrb	r3, [r3, #0]
 800bd28:	2b01      	cmp	r3, #1
 800bd2a:	d105      	bne.n	800bd38 <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800bd2c:	4b3a      	ldr	r3, [pc, #232]	; (800be18 <HAL_RCC_OscConfig+0x688>)
 800bd2e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bd30:	4b39      	ldr	r3, [pc, #228]	; (800be18 <HAL_RCC_OscConfig+0x688>)
 800bd32:	493f      	ldr	r1, [pc, #252]	; (800be30 <HAL_RCC_OscConfig+0x6a0>)
 800bd34:	400a      	ands	r2, r1
 800bd36:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	681b      	ldr	r3, [r3, #0]
 800bd3c:	2220      	movs	r2, #32
 800bd3e:	4013      	ands	r3, r2
 800bd40:	d049      	beq.n	800bdd6 <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	699b      	ldr	r3, [r3, #24]
 800bd46:	2b00      	cmp	r3, #0
 800bd48:	d026      	beq.n	800bd98 <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 800bd4a:	4b33      	ldr	r3, [pc, #204]	; (800be18 <HAL_RCC_OscConfig+0x688>)
 800bd4c:	689a      	ldr	r2, [r3, #8]
 800bd4e:	4b32      	ldr	r3, [pc, #200]	; (800be18 <HAL_RCC_OscConfig+0x688>)
 800bd50:	2101      	movs	r1, #1
 800bd52:	430a      	orrs	r2, r1
 800bd54:	609a      	str	r2, [r3, #8]
 800bd56:	4b30      	ldr	r3, [pc, #192]	; (800be18 <HAL_RCC_OscConfig+0x688>)
 800bd58:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bd5a:	4b2f      	ldr	r3, [pc, #188]	; (800be18 <HAL_RCC_OscConfig+0x688>)
 800bd5c:	2101      	movs	r1, #1
 800bd5e:	430a      	orrs	r2, r1
 800bd60:	635a      	str	r2, [r3, #52]	; 0x34
 800bd62:	4b34      	ldr	r3, [pc, #208]	; (800be34 <HAL_RCC_OscConfig+0x6a4>)
 800bd64:	6a1a      	ldr	r2, [r3, #32]
 800bd66:	4b33      	ldr	r3, [pc, #204]	; (800be34 <HAL_RCC_OscConfig+0x6a4>)
 800bd68:	2180      	movs	r1, #128	; 0x80
 800bd6a:	0189      	lsls	r1, r1, #6
 800bd6c:	430a      	orrs	r2, r1
 800bd6e:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800bd70:	f7fe f84a 	bl	8009e08 <HAL_GetTick>
 800bd74:	0003      	movs	r3, r0
 800bd76:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800bd78:	e008      	b.n	800bd8c <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800bd7a:	f7fe f845 	bl	8009e08 <HAL_GetTick>
 800bd7e:	0002      	movs	r2, r0
 800bd80:	697b      	ldr	r3, [r7, #20]
 800bd82:	1ad3      	subs	r3, r2, r3
 800bd84:	2b02      	cmp	r3, #2
 800bd86:	d901      	bls.n	800bd8c <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 800bd88:	2303      	movs	r3, #3
 800bd8a:	e0ca      	b.n	800bf22 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800bd8c:	4b22      	ldr	r3, [pc, #136]	; (800be18 <HAL_RCC_OscConfig+0x688>)
 800bd8e:	689b      	ldr	r3, [r3, #8]
 800bd90:	2202      	movs	r2, #2
 800bd92:	4013      	ands	r3, r2
 800bd94:	d0f1      	beq.n	800bd7a <HAL_RCC_OscConfig+0x5ea>
 800bd96:	e01e      	b.n	800bdd6 <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 800bd98:	4b1f      	ldr	r3, [pc, #124]	; (800be18 <HAL_RCC_OscConfig+0x688>)
 800bd9a:	689a      	ldr	r2, [r3, #8]
 800bd9c:	4b1e      	ldr	r3, [pc, #120]	; (800be18 <HAL_RCC_OscConfig+0x688>)
 800bd9e:	2101      	movs	r1, #1
 800bda0:	438a      	bics	r2, r1
 800bda2:	609a      	str	r2, [r3, #8]
 800bda4:	4b23      	ldr	r3, [pc, #140]	; (800be34 <HAL_RCC_OscConfig+0x6a4>)
 800bda6:	6a1a      	ldr	r2, [r3, #32]
 800bda8:	4b22      	ldr	r3, [pc, #136]	; (800be34 <HAL_RCC_OscConfig+0x6a4>)
 800bdaa:	4923      	ldr	r1, [pc, #140]	; (800be38 <HAL_RCC_OscConfig+0x6a8>)
 800bdac:	400a      	ands	r2, r1
 800bdae:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800bdb0:	f7fe f82a 	bl	8009e08 <HAL_GetTick>
 800bdb4:	0003      	movs	r3, r0
 800bdb6:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800bdb8:	e008      	b.n	800bdcc <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800bdba:	f7fe f825 	bl	8009e08 <HAL_GetTick>
 800bdbe:	0002      	movs	r2, r0
 800bdc0:	697b      	ldr	r3, [r7, #20]
 800bdc2:	1ad3      	subs	r3, r2, r3
 800bdc4:	2b02      	cmp	r3, #2
 800bdc6:	d901      	bls.n	800bdcc <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 800bdc8:	2303      	movs	r3, #3
 800bdca:	e0aa      	b.n	800bf22 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800bdcc:	4b12      	ldr	r3, [pc, #72]	; (800be18 <HAL_RCC_OscConfig+0x688>)
 800bdce:	689b      	ldr	r3, [r3, #8]
 800bdd0:	2202      	movs	r2, #2
 800bdd2:	4013      	ands	r3, r2
 800bdd4:	d1f1      	bne.n	800bdba <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bdda:	2b00      	cmp	r3, #0
 800bddc:	d100      	bne.n	800bde0 <HAL_RCC_OscConfig+0x650>
 800bdde:	e09f      	b.n	800bf20 <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800bde0:	69fb      	ldr	r3, [r7, #28]
 800bde2:	2b0c      	cmp	r3, #12
 800bde4:	d100      	bne.n	800bde8 <HAL_RCC_OscConfig+0x658>
 800bde6:	e078      	b.n	800beda <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bdec:	2b02      	cmp	r3, #2
 800bdee:	d159      	bne.n	800bea4 <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800bdf0:	4b09      	ldr	r3, [pc, #36]	; (800be18 <HAL_RCC_OscConfig+0x688>)
 800bdf2:	681a      	ldr	r2, [r3, #0]
 800bdf4:	4b08      	ldr	r3, [pc, #32]	; (800be18 <HAL_RCC_OscConfig+0x688>)
 800bdf6:	4911      	ldr	r1, [pc, #68]	; (800be3c <HAL_RCC_OscConfig+0x6ac>)
 800bdf8:	400a      	ands	r2, r1
 800bdfa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800bdfc:	f7fe f804 	bl	8009e08 <HAL_GetTick>
 800be00:	0003      	movs	r3, r0
 800be02:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800be04:	e01c      	b.n	800be40 <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800be06:	f7fd ffff 	bl	8009e08 <HAL_GetTick>
 800be0a:	0002      	movs	r2, r0
 800be0c:	697b      	ldr	r3, [r7, #20]
 800be0e:	1ad3      	subs	r3, r2, r3
 800be10:	2b02      	cmp	r3, #2
 800be12:	d915      	bls.n	800be40 <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 800be14:	2303      	movs	r3, #3
 800be16:	e084      	b.n	800bf22 <HAL_RCC_OscConfig+0x792>
 800be18:	40021000 	.word	0x40021000
 800be1c:	ffff1fff 	.word	0xffff1fff
 800be20:	fffffeff 	.word	0xfffffeff
 800be24:	40007000 	.word	0x40007000
 800be28:	fffffbff 	.word	0xfffffbff
 800be2c:	00001388 	.word	0x00001388
 800be30:	efffffff 	.word	0xefffffff
 800be34:	40010000 	.word	0x40010000
 800be38:	ffffdfff 	.word	0xffffdfff
 800be3c:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800be40:	4b3a      	ldr	r3, [pc, #232]	; (800bf2c <HAL_RCC_OscConfig+0x79c>)
 800be42:	681a      	ldr	r2, [r3, #0]
 800be44:	2380      	movs	r3, #128	; 0x80
 800be46:	049b      	lsls	r3, r3, #18
 800be48:	4013      	ands	r3, r2
 800be4a:	d1dc      	bne.n	800be06 <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800be4c:	4b37      	ldr	r3, [pc, #220]	; (800bf2c <HAL_RCC_OscConfig+0x79c>)
 800be4e:	68db      	ldr	r3, [r3, #12]
 800be50:	4a37      	ldr	r2, [pc, #220]	; (800bf30 <HAL_RCC_OscConfig+0x7a0>)
 800be52:	4013      	ands	r3, r2
 800be54:	0019      	movs	r1, r3
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800be5e:	431a      	orrs	r2, r3
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800be64:	431a      	orrs	r2, r3
 800be66:	4b31      	ldr	r3, [pc, #196]	; (800bf2c <HAL_RCC_OscConfig+0x79c>)
 800be68:	430a      	orrs	r2, r1
 800be6a:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800be6c:	4b2f      	ldr	r3, [pc, #188]	; (800bf2c <HAL_RCC_OscConfig+0x79c>)
 800be6e:	681a      	ldr	r2, [r3, #0]
 800be70:	4b2e      	ldr	r3, [pc, #184]	; (800bf2c <HAL_RCC_OscConfig+0x79c>)
 800be72:	2180      	movs	r1, #128	; 0x80
 800be74:	0449      	lsls	r1, r1, #17
 800be76:	430a      	orrs	r2, r1
 800be78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800be7a:	f7fd ffc5 	bl	8009e08 <HAL_GetTick>
 800be7e:	0003      	movs	r3, r0
 800be80:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800be82:	e008      	b.n	800be96 <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800be84:	f7fd ffc0 	bl	8009e08 <HAL_GetTick>
 800be88:	0002      	movs	r2, r0
 800be8a:	697b      	ldr	r3, [r7, #20]
 800be8c:	1ad3      	subs	r3, r2, r3
 800be8e:	2b02      	cmp	r3, #2
 800be90:	d901      	bls.n	800be96 <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 800be92:	2303      	movs	r3, #3
 800be94:	e045      	b.n	800bf22 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800be96:	4b25      	ldr	r3, [pc, #148]	; (800bf2c <HAL_RCC_OscConfig+0x79c>)
 800be98:	681a      	ldr	r2, [r3, #0]
 800be9a:	2380      	movs	r3, #128	; 0x80
 800be9c:	049b      	lsls	r3, r3, #18
 800be9e:	4013      	ands	r3, r2
 800bea0:	d0f0      	beq.n	800be84 <HAL_RCC_OscConfig+0x6f4>
 800bea2:	e03d      	b.n	800bf20 <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800bea4:	4b21      	ldr	r3, [pc, #132]	; (800bf2c <HAL_RCC_OscConfig+0x79c>)
 800bea6:	681a      	ldr	r2, [r3, #0]
 800bea8:	4b20      	ldr	r3, [pc, #128]	; (800bf2c <HAL_RCC_OscConfig+0x79c>)
 800beaa:	4922      	ldr	r1, [pc, #136]	; (800bf34 <HAL_RCC_OscConfig+0x7a4>)
 800beac:	400a      	ands	r2, r1
 800beae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800beb0:	f7fd ffaa 	bl	8009e08 <HAL_GetTick>
 800beb4:	0003      	movs	r3, r0
 800beb6:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800beb8:	e008      	b.n	800becc <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800beba:	f7fd ffa5 	bl	8009e08 <HAL_GetTick>
 800bebe:	0002      	movs	r2, r0
 800bec0:	697b      	ldr	r3, [r7, #20]
 800bec2:	1ad3      	subs	r3, r2, r3
 800bec4:	2b02      	cmp	r3, #2
 800bec6:	d901      	bls.n	800becc <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 800bec8:	2303      	movs	r3, #3
 800beca:	e02a      	b.n	800bf22 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800becc:	4b17      	ldr	r3, [pc, #92]	; (800bf2c <HAL_RCC_OscConfig+0x79c>)
 800bece:	681a      	ldr	r2, [r3, #0]
 800bed0:	2380      	movs	r3, #128	; 0x80
 800bed2:	049b      	lsls	r3, r3, #18
 800bed4:	4013      	ands	r3, r2
 800bed6:	d1f0      	bne.n	800beba <HAL_RCC_OscConfig+0x72a>
 800bed8:	e022      	b.n	800bf20 <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bede:	2b01      	cmp	r3, #1
 800bee0:	d101      	bne.n	800bee6 <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 800bee2:	2301      	movs	r3, #1
 800bee4:	e01d      	b.n	800bf22 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800bee6:	4b11      	ldr	r3, [pc, #68]	; (800bf2c <HAL_RCC_OscConfig+0x79c>)
 800bee8:	68db      	ldr	r3, [r3, #12]
 800beea:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800beec:	69ba      	ldr	r2, [r7, #24]
 800beee:	2380      	movs	r3, #128	; 0x80
 800bef0:	025b      	lsls	r3, r3, #9
 800bef2:	401a      	ands	r2, r3
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bef8:	429a      	cmp	r2, r3
 800befa:	d10f      	bne.n	800bf1c <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800befc:	69ba      	ldr	r2, [r7, #24]
 800befe:	23f0      	movs	r3, #240	; 0xf0
 800bf00:	039b      	lsls	r3, r3, #14
 800bf02:	401a      	ands	r2, r3
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800bf08:	429a      	cmp	r2, r3
 800bf0a:	d107      	bne.n	800bf1c <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 800bf0c:	69ba      	ldr	r2, [r7, #24]
 800bf0e:	23c0      	movs	r3, #192	; 0xc0
 800bf10:	041b      	lsls	r3, r3, #16
 800bf12:	401a      	ands	r2, r3
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800bf18:	429a      	cmp	r2, r3
 800bf1a:	d001      	beq.n	800bf20 <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 800bf1c:	2301      	movs	r3, #1
 800bf1e:	e000      	b.n	800bf22 <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 800bf20:	2300      	movs	r3, #0
}
 800bf22:	0018      	movs	r0, r3
 800bf24:	46bd      	mov	sp, r7
 800bf26:	b00a      	add	sp, #40	; 0x28
 800bf28:	bdb0      	pop	{r4, r5, r7, pc}
 800bf2a:	46c0      	nop			; (mov r8, r8)
 800bf2c:	40021000 	.word	0x40021000
 800bf30:	ff02ffff 	.word	0xff02ffff
 800bf34:	feffffff 	.word	0xfeffffff

0800bf38 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800bf38:	b5b0      	push	{r4, r5, r7, lr}
 800bf3a:	b084      	sub	sp, #16
 800bf3c:	af00      	add	r7, sp, #0
 800bf3e:	6078      	str	r0, [r7, #4]
 800bf40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	2b00      	cmp	r3, #0
 800bf46:	d101      	bne.n	800bf4c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800bf48:	2301      	movs	r3, #1
 800bf4a:	e128      	b.n	800c19e <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800bf4c:	4b96      	ldr	r3, [pc, #600]	; (800c1a8 <HAL_RCC_ClockConfig+0x270>)
 800bf4e:	681b      	ldr	r3, [r3, #0]
 800bf50:	2201      	movs	r2, #1
 800bf52:	4013      	ands	r3, r2
 800bf54:	683a      	ldr	r2, [r7, #0]
 800bf56:	429a      	cmp	r2, r3
 800bf58:	d91e      	bls.n	800bf98 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800bf5a:	4b93      	ldr	r3, [pc, #588]	; (800c1a8 <HAL_RCC_ClockConfig+0x270>)
 800bf5c:	681b      	ldr	r3, [r3, #0]
 800bf5e:	2201      	movs	r2, #1
 800bf60:	4393      	bics	r3, r2
 800bf62:	0019      	movs	r1, r3
 800bf64:	4b90      	ldr	r3, [pc, #576]	; (800c1a8 <HAL_RCC_ClockConfig+0x270>)
 800bf66:	683a      	ldr	r2, [r7, #0]
 800bf68:	430a      	orrs	r2, r1
 800bf6a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800bf6c:	f7fd ff4c 	bl	8009e08 <HAL_GetTick>
 800bf70:	0003      	movs	r3, r0
 800bf72:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800bf74:	e009      	b.n	800bf8a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800bf76:	f7fd ff47 	bl	8009e08 <HAL_GetTick>
 800bf7a:	0002      	movs	r2, r0
 800bf7c:	68fb      	ldr	r3, [r7, #12]
 800bf7e:	1ad3      	subs	r3, r2, r3
 800bf80:	4a8a      	ldr	r2, [pc, #552]	; (800c1ac <HAL_RCC_ClockConfig+0x274>)
 800bf82:	4293      	cmp	r3, r2
 800bf84:	d901      	bls.n	800bf8a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800bf86:	2303      	movs	r3, #3
 800bf88:	e109      	b.n	800c19e <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800bf8a:	4b87      	ldr	r3, [pc, #540]	; (800c1a8 <HAL_RCC_ClockConfig+0x270>)
 800bf8c:	681b      	ldr	r3, [r3, #0]
 800bf8e:	2201      	movs	r2, #1
 800bf90:	4013      	ands	r3, r2
 800bf92:	683a      	ldr	r2, [r7, #0]
 800bf94:	429a      	cmp	r2, r3
 800bf96:	d1ee      	bne.n	800bf76 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	681b      	ldr	r3, [r3, #0]
 800bf9c:	2202      	movs	r2, #2
 800bf9e:	4013      	ands	r3, r2
 800bfa0:	d009      	beq.n	800bfb6 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800bfa2:	4b83      	ldr	r3, [pc, #524]	; (800c1b0 <HAL_RCC_ClockConfig+0x278>)
 800bfa4:	68db      	ldr	r3, [r3, #12]
 800bfa6:	22f0      	movs	r2, #240	; 0xf0
 800bfa8:	4393      	bics	r3, r2
 800bfaa:	0019      	movs	r1, r3
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	689a      	ldr	r2, [r3, #8]
 800bfb0:	4b7f      	ldr	r3, [pc, #508]	; (800c1b0 <HAL_RCC_ClockConfig+0x278>)
 800bfb2:	430a      	orrs	r2, r1
 800bfb4:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	681b      	ldr	r3, [r3, #0]
 800bfba:	2201      	movs	r2, #1
 800bfbc:	4013      	ands	r3, r2
 800bfbe:	d100      	bne.n	800bfc2 <HAL_RCC_ClockConfig+0x8a>
 800bfc0:	e089      	b.n	800c0d6 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	685b      	ldr	r3, [r3, #4]
 800bfc6:	2b02      	cmp	r3, #2
 800bfc8:	d107      	bne.n	800bfda <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800bfca:	4b79      	ldr	r3, [pc, #484]	; (800c1b0 <HAL_RCC_ClockConfig+0x278>)
 800bfcc:	681a      	ldr	r2, [r3, #0]
 800bfce:	2380      	movs	r3, #128	; 0x80
 800bfd0:	029b      	lsls	r3, r3, #10
 800bfd2:	4013      	ands	r3, r2
 800bfd4:	d120      	bne.n	800c018 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800bfd6:	2301      	movs	r3, #1
 800bfd8:	e0e1      	b.n	800c19e <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	685b      	ldr	r3, [r3, #4]
 800bfde:	2b03      	cmp	r3, #3
 800bfe0:	d107      	bne.n	800bff2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800bfe2:	4b73      	ldr	r3, [pc, #460]	; (800c1b0 <HAL_RCC_ClockConfig+0x278>)
 800bfe4:	681a      	ldr	r2, [r3, #0]
 800bfe6:	2380      	movs	r3, #128	; 0x80
 800bfe8:	049b      	lsls	r3, r3, #18
 800bfea:	4013      	ands	r3, r2
 800bfec:	d114      	bne.n	800c018 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800bfee:	2301      	movs	r3, #1
 800bff0:	e0d5      	b.n	800c19e <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	685b      	ldr	r3, [r3, #4]
 800bff6:	2b01      	cmp	r3, #1
 800bff8:	d106      	bne.n	800c008 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800bffa:	4b6d      	ldr	r3, [pc, #436]	; (800c1b0 <HAL_RCC_ClockConfig+0x278>)
 800bffc:	681b      	ldr	r3, [r3, #0]
 800bffe:	2204      	movs	r2, #4
 800c000:	4013      	ands	r3, r2
 800c002:	d109      	bne.n	800c018 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800c004:	2301      	movs	r3, #1
 800c006:	e0ca      	b.n	800c19e <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800c008:	4b69      	ldr	r3, [pc, #420]	; (800c1b0 <HAL_RCC_ClockConfig+0x278>)
 800c00a:	681a      	ldr	r2, [r3, #0]
 800c00c:	2380      	movs	r3, #128	; 0x80
 800c00e:	009b      	lsls	r3, r3, #2
 800c010:	4013      	ands	r3, r2
 800c012:	d101      	bne.n	800c018 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800c014:	2301      	movs	r3, #1
 800c016:	e0c2      	b.n	800c19e <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800c018:	4b65      	ldr	r3, [pc, #404]	; (800c1b0 <HAL_RCC_ClockConfig+0x278>)
 800c01a:	68db      	ldr	r3, [r3, #12]
 800c01c:	2203      	movs	r2, #3
 800c01e:	4393      	bics	r3, r2
 800c020:	0019      	movs	r1, r3
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	685a      	ldr	r2, [r3, #4]
 800c026:	4b62      	ldr	r3, [pc, #392]	; (800c1b0 <HAL_RCC_ClockConfig+0x278>)
 800c028:	430a      	orrs	r2, r1
 800c02a:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800c02c:	f7fd feec 	bl	8009e08 <HAL_GetTick>
 800c030:	0003      	movs	r3, r0
 800c032:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	685b      	ldr	r3, [r3, #4]
 800c038:	2b02      	cmp	r3, #2
 800c03a:	d111      	bne.n	800c060 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800c03c:	e009      	b.n	800c052 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800c03e:	f7fd fee3 	bl	8009e08 <HAL_GetTick>
 800c042:	0002      	movs	r2, r0
 800c044:	68fb      	ldr	r3, [r7, #12]
 800c046:	1ad3      	subs	r3, r2, r3
 800c048:	4a58      	ldr	r2, [pc, #352]	; (800c1ac <HAL_RCC_ClockConfig+0x274>)
 800c04a:	4293      	cmp	r3, r2
 800c04c:	d901      	bls.n	800c052 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 800c04e:	2303      	movs	r3, #3
 800c050:	e0a5      	b.n	800c19e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800c052:	4b57      	ldr	r3, [pc, #348]	; (800c1b0 <HAL_RCC_ClockConfig+0x278>)
 800c054:	68db      	ldr	r3, [r3, #12]
 800c056:	220c      	movs	r2, #12
 800c058:	4013      	ands	r3, r2
 800c05a:	2b08      	cmp	r3, #8
 800c05c:	d1ef      	bne.n	800c03e <HAL_RCC_ClockConfig+0x106>
 800c05e:	e03a      	b.n	800c0d6 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	685b      	ldr	r3, [r3, #4]
 800c064:	2b03      	cmp	r3, #3
 800c066:	d111      	bne.n	800c08c <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800c068:	e009      	b.n	800c07e <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800c06a:	f7fd fecd 	bl	8009e08 <HAL_GetTick>
 800c06e:	0002      	movs	r2, r0
 800c070:	68fb      	ldr	r3, [r7, #12]
 800c072:	1ad3      	subs	r3, r2, r3
 800c074:	4a4d      	ldr	r2, [pc, #308]	; (800c1ac <HAL_RCC_ClockConfig+0x274>)
 800c076:	4293      	cmp	r3, r2
 800c078:	d901      	bls.n	800c07e <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 800c07a:	2303      	movs	r3, #3
 800c07c:	e08f      	b.n	800c19e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800c07e:	4b4c      	ldr	r3, [pc, #304]	; (800c1b0 <HAL_RCC_ClockConfig+0x278>)
 800c080:	68db      	ldr	r3, [r3, #12]
 800c082:	220c      	movs	r2, #12
 800c084:	4013      	ands	r3, r2
 800c086:	2b0c      	cmp	r3, #12
 800c088:	d1ef      	bne.n	800c06a <HAL_RCC_ClockConfig+0x132>
 800c08a:	e024      	b.n	800c0d6 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	685b      	ldr	r3, [r3, #4]
 800c090:	2b01      	cmp	r3, #1
 800c092:	d11b      	bne.n	800c0cc <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800c094:	e009      	b.n	800c0aa <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800c096:	f7fd feb7 	bl	8009e08 <HAL_GetTick>
 800c09a:	0002      	movs	r2, r0
 800c09c:	68fb      	ldr	r3, [r7, #12]
 800c09e:	1ad3      	subs	r3, r2, r3
 800c0a0:	4a42      	ldr	r2, [pc, #264]	; (800c1ac <HAL_RCC_ClockConfig+0x274>)
 800c0a2:	4293      	cmp	r3, r2
 800c0a4:	d901      	bls.n	800c0aa <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 800c0a6:	2303      	movs	r3, #3
 800c0a8:	e079      	b.n	800c19e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800c0aa:	4b41      	ldr	r3, [pc, #260]	; (800c1b0 <HAL_RCC_ClockConfig+0x278>)
 800c0ac:	68db      	ldr	r3, [r3, #12]
 800c0ae:	220c      	movs	r2, #12
 800c0b0:	4013      	ands	r3, r2
 800c0b2:	2b04      	cmp	r3, #4
 800c0b4:	d1ef      	bne.n	800c096 <HAL_RCC_ClockConfig+0x15e>
 800c0b6:	e00e      	b.n	800c0d6 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800c0b8:	f7fd fea6 	bl	8009e08 <HAL_GetTick>
 800c0bc:	0002      	movs	r2, r0
 800c0be:	68fb      	ldr	r3, [r7, #12]
 800c0c0:	1ad3      	subs	r3, r2, r3
 800c0c2:	4a3a      	ldr	r2, [pc, #232]	; (800c1ac <HAL_RCC_ClockConfig+0x274>)
 800c0c4:	4293      	cmp	r3, r2
 800c0c6:	d901      	bls.n	800c0cc <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 800c0c8:	2303      	movs	r3, #3
 800c0ca:	e068      	b.n	800c19e <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800c0cc:	4b38      	ldr	r3, [pc, #224]	; (800c1b0 <HAL_RCC_ClockConfig+0x278>)
 800c0ce:	68db      	ldr	r3, [r3, #12]
 800c0d0:	220c      	movs	r2, #12
 800c0d2:	4013      	ands	r3, r2
 800c0d4:	d1f0      	bne.n	800c0b8 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800c0d6:	4b34      	ldr	r3, [pc, #208]	; (800c1a8 <HAL_RCC_ClockConfig+0x270>)
 800c0d8:	681b      	ldr	r3, [r3, #0]
 800c0da:	2201      	movs	r2, #1
 800c0dc:	4013      	ands	r3, r2
 800c0de:	683a      	ldr	r2, [r7, #0]
 800c0e0:	429a      	cmp	r2, r3
 800c0e2:	d21e      	bcs.n	800c122 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c0e4:	4b30      	ldr	r3, [pc, #192]	; (800c1a8 <HAL_RCC_ClockConfig+0x270>)
 800c0e6:	681b      	ldr	r3, [r3, #0]
 800c0e8:	2201      	movs	r2, #1
 800c0ea:	4393      	bics	r3, r2
 800c0ec:	0019      	movs	r1, r3
 800c0ee:	4b2e      	ldr	r3, [pc, #184]	; (800c1a8 <HAL_RCC_ClockConfig+0x270>)
 800c0f0:	683a      	ldr	r2, [r7, #0]
 800c0f2:	430a      	orrs	r2, r1
 800c0f4:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800c0f6:	f7fd fe87 	bl	8009e08 <HAL_GetTick>
 800c0fa:	0003      	movs	r3, r0
 800c0fc:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800c0fe:	e009      	b.n	800c114 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800c100:	f7fd fe82 	bl	8009e08 <HAL_GetTick>
 800c104:	0002      	movs	r2, r0
 800c106:	68fb      	ldr	r3, [r7, #12]
 800c108:	1ad3      	subs	r3, r2, r3
 800c10a:	4a28      	ldr	r2, [pc, #160]	; (800c1ac <HAL_RCC_ClockConfig+0x274>)
 800c10c:	4293      	cmp	r3, r2
 800c10e:	d901      	bls.n	800c114 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 800c110:	2303      	movs	r3, #3
 800c112:	e044      	b.n	800c19e <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800c114:	4b24      	ldr	r3, [pc, #144]	; (800c1a8 <HAL_RCC_ClockConfig+0x270>)
 800c116:	681b      	ldr	r3, [r3, #0]
 800c118:	2201      	movs	r2, #1
 800c11a:	4013      	ands	r3, r2
 800c11c:	683a      	ldr	r2, [r7, #0]
 800c11e:	429a      	cmp	r2, r3
 800c120:	d1ee      	bne.n	800c100 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	681b      	ldr	r3, [r3, #0]
 800c126:	2204      	movs	r2, #4
 800c128:	4013      	ands	r3, r2
 800c12a:	d009      	beq.n	800c140 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800c12c:	4b20      	ldr	r3, [pc, #128]	; (800c1b0 <HAL_RCC_ClockConfig+0x278>)
 800c12e:	68db      	ldr	r3, [r3, #12]
 800c130:	4a20      	ldr	r2, [pc, #128]	; (800c1b4 <HAL_RCC_ClockConfig+0x27c>)
 800c132:	4013      	ands	r3, r2
 800c134:	0019      	movs	r1, r3
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	68da      	ldr	r2, [r3, #12]
 800c13a:	4b1d      	ldr	r3, [pc, #116]	; (800c1b0 <HAL_RCC_ClockConfig+0x278>)
 800c13c:	430a      	orrs	r2, r1
 800c13e:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	681b      	ldr	r3, [r3, #0]
 800c144:	2208      	movs	r2, #8
 800c146:	4013      	ands	r3, r2
 800c148:	d00a      	beq.n	800c160 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800c14a:	4b19      	ldr	r3, [pc, #100]	; (800c1b0 <HAL_RCC_ClockConfig+0x278>)
 800c14c:	68db      	ldr	r3, [r3, #12]
 800c14e:	4a1a      	ldr	r2, [pc, #104]	; (800c1b8 <HAL_RCC_ClockConfig+0x280>)
 800c150:	4013      	ands	r3, r2
 800c152:	0019      	movs	r1, r3
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	691b      	ldr	r3, [r3, #16]
 800c158:	00da      	lsls	r2, r3, #3
 800c15a:	4b15      	ldr	r3, [pc, #84]	; (800c1b0 <HAL_RCC_ClockConfig+0x278>)
 800c15c:	430a      	orrs	r2, r1
 800c15e:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800c160:	f000 f832 	bl	800c1c8 <HAL_RCC_GetSysClockFreq>
 800c164:	0001      	movs	r1, r0
 800c166:	4b12      	ldr	r3, [pc, #72]	; (800c1b0 <HAL_RCC_ClockConfig+0x278>)
 800c168:	68db      	ldr	r3, [r3, #12]
 800c16a:	091b      	lsrs	r3, r3, #4
 800c16c:	220f      	movs	r2, #15
 800c16e:	4013      	ands	r3, r2
 800c170:	4a12      	ldr	r2, [pc, #72]	; (800c1bc <HAL_RCC_ClockConfig+0x284>)
 800c172:	5cd3      	ldrb	r3, [r2, r3]
 800c174:	000a      	movs	r2, r1
 800c176:	40da      	lsrs	r2, r3
 800c178:	4b11      	ldr	r3, [pc, #68]	; (800c1c0 <HAL_RCC_ClockConfig+0x288>)
 800c17a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800c17c:	4b11      	ldr	r3, [pc, #68]	; (800c1c4 <HAL_RCC_ClockConfig+0x28c>)
 800c17e:	681b      	ldr	r3, [r3, #0]
 800c180:	250b      	movs	r5, #11
 800c182:	197c      	adds	r4, r7, r5
 800c184:	0018      	movs	r0, r3
 800c186:	f7fd fdf9 	bl	8009d7c <HAL_InitTick>
 800c18a:	0003      	movs	r3, r0
 800c18c:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 800c18e:	197b      	adds	r3, r7, r5
 800c190:	781b      	ldrb	r3, [r3, #0]
 800c192:	2b00      	cmp	r3, #0
 800c194:	d002      	beq.n	800c19c <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 800c196:	197b      	adds	r3, r7, r5
 800c198:	781b      	ldrb	r3, [r3, #0]
 800c19a:	e000      	b.n	800c19e <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 800c19c:	2300      	movs	r3, #0
}
 800c19e:	0018      	movs	r0, r3
 800c1a0:	46bd      	mov	sp, r7
 800c1a2:	b004      	add	sp, #16
 800c1a4:	bdb0      	pop	{r4, r5, r7, pc}
 800c1a6:	46c0      	nop			; (mov r8, r8)
 800c1a8:	40022000 	.word	0x40022000
 800c1ac:	00001388 	.word	0x00001388
 800c1b0:	40021000 	.word	0x40021000
 800c1b4:	fffff8ff 	.word	0xfffff8ff
 800c1b8:	ffffc7ff 	.word	0xffffc7ff
 800c1bc:	08015c0c 	.word	0x08015c0c
 800c1c0:	200000cc 	.word	0x200000cc
 800c1c4:	20000260 	.word	0x20000260

0800c1c8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800c1c8:	b5b0      	push	{r4, r5, r7, lr}
 800c1ca:	b08e      	sub	sp, #56	; 0x38
 800c1cc:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 800c1ce:	4b4c      	ldr	r3, [pc, #304]	; (800c300 <HAL_RCC_GetSysClockFreq+0x138>)
 800c1d0:	68db      	ldr	r3, [r3, #12]
 800c1d2:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800c1d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c1d6:	230c      	movs	r3, #12
 800c1d8:	4013      	ands	r3, r2
 800c1da:	2b0c      	cmp	r3, #12
 800c1dc:	d014      	beq.n	800c208 <HAL_RCC_GetSysClockFreq+0x40>
 800c1de:	d900      	bls.n	800c1e2 <HAL_RCC_GetSysClockFreq+0x1a>
 800c1e0:	e07b      	b.n	800c2da <HAL_RCC_GetSysClockFreq+0x112>
 800c1e2:	2b04      	cmp	r3, #4
 800c1e4:	d002      	beq.n	800c1ec <HAL_RCC_GetSysClockFreq+0x24>
 800c1e6:	2b08      	cmp	r3, #8
 800c1e8:	d00b      	beq.n	800c202 <HAL_RCC_GetSysClockFreq+0x3a>
 800c1ea:	e076      	b.n	800c2da <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800c1ec:	4b44      	ldr	r3, [pc, #272]	; (800c300 <HAL_RCC_GetSysClockFreq+0x138>)
 800c1ee:	681b      	ldr	r3, [r3, #0]
 800c1f0:	2210      	movs	r2, #16
 800c1f2:	4013      	ands	r3, r2
 800c1f4:	d002      	beq.n	800c1fc <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 800c1f6:	4b43      	ldr	r3, [pc, #268]	; (800c304 <HAL_RCC_GetSysClockFreq+0x13c>)
 800c1f8:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 800c1fa:	e07c      	b.n	800c2f6 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 800c1fc:	4b42      	ldr	r3, [pc, #264]	; (800c308 <HAL_RCC_GetSysClockFreq+0x140>)
 800c1fe:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800c200:	e079      	b.n	800c2f6 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800c202:	4b42      	ldr	r3, [pc, #264]	; (800c30c <HAL_RCC_GetSysClockFreq+0x144>)
 800c204:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800c206:	e076      	b.n	800c2f6 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800c208:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c20a:	0c9a      	lsrs	r2, r3, #18
 800c20c:	230f      	movs	r3, #15
 800c20e:	401a      	ands	r2, r3
 800c210:	4b3f      	ldr	r3, [pc, #252]	; (800c310 <HAL_RCC_GetSysClockFreq+0x148>)
 800c212:	5c9b      	ldrb	r3, [r3, r2]
 800c214:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800c216:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c218:	0d9a      	lsrs	r2, r3, #22
 800c21a:	2303      	movs	r3, #3
 800c21c:	4013      	ands	r3, r2
 800c21e:	3301      	adds	r3, #1
 800c220:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800c222:	4b37      	ldr	r3, [pc, #220]	; (800c300 <HAL_RCC_GetSysClockFreq+0x138>)
 800c224:	68da      	ldr	r2, [r3, #12]
 800c226:	2380      	movs	r3, #128	; 0x80
 800c228:	025b      	lsls	r3, r3, #9
 800c22a:	4013      	ands	r3, r2
 800c22c:	d01a      	beq.n	800c264 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800c22e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c230:	61bb      	str	r3, [r7, #24]
 800c232:	2300      	movs	r3, #0
 800c234:	61fb      	str	r3, [r7, #28]
 800c236:	4a35      	ldr	r2, [pc, #212]	; (800c30c <HAL_RCC_GetSysClockFreq+0x144>)
 800c238:	2300      	movs	r3, #0
 800c23a:	69b8      	ldr	r0, [r7, #24]
 800c23c:	69f9      	ldr	r1, [r7, #28]
 800c23e:	f7f4 f93d 	bl	80004bc <__aeabi_lmul>
 800c242:	0002      	movs	r2, r0
 800c244:	000b      	movs	r3, r1
 800c246:	0010      	movs	r0, r2
 800c248:	0019      	movs	r1, r3
 800c24a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c24c:	613b      	str	r3, [r7, #16]
 800c24e:	2300      	movs	r3, #0
 800c250:	617b      	str	r3, [r7, #20]
 800c252:	693a      	ldr	r2, [r7, #16]
 800c254:	697b      	ldr	r3, [r7, #20]
 800c256:	f7f4 f911 	bl	800047c <__aeabi_uldivmod>
 800c25a:	0002      	movs	r2, r0
 800c25c:	000b      	movs	r3, r1
 800c25e:	0013      	movs	r3, r2
 800c260:	637b      	str	r3, [r7, #52]	; 0x34
 800c262:	e037      	b.n	800c2d4 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800c264:	4b26      	ldr	r3, [pc, #152]	; (800c300 <HAL_RCC_GetSysClockFreq+0x138>)
 800c266:	681b      	ldr	r3, [r3, #0]
 800c268:	2210      	movs	r2, #16
 800c26a:	4013      	ands	r3, r2
 800c26c:	d01a      	beq.n	800c2a4 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 800c26e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c270:	60bb      	str	r3, [r7, #8]
 800c272:	2300      	movs	r3, #0
 800c274:	60fb      	str	r3, [r7, #12]
 800c276:	4a23      	ldr	r2, [pc, #140]	; (800c304 <HAL_RCC_GetSysClockFreq+0x13c>)
 800c278:	2300      	movs	r3, #0
 800c27a:	68b8      	ldr	r0, [r7, #8]
 800c27c:	68f9      	ldr	r1, [r7, #12]
 800c27e:	f7f4 f91d 	bl	80004bc <__aeabi_lmul>
 800c282:	0002      	movs	r2, r0
 800c284:	000b      	movs	r3, r1
 800c286:	0010      	movs	r0, r2
 800c288:	0019      	movs	r1, r3
 800c28a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c28c:	603b      	str	r3, [r7, #0]
 800c28e:	2300      	movs	r3, #0
 800c290:	607b      	str	r3, [r7, #4]
 800c292:	683a      	ldr	r2, [r7, #0]
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	f7f4 f8f1 	bl	800047c <__aeabi_uldivmod>
 800c29a:	0002      	movs	r2, r0
 800c29c:	000b      	movs	r3, r1
 800c29e:	0013      	movs	r3, r2
 800c2a0:	637b      	str	r3, [r7, #52]	; 0x34
 800c2a2:	e017      	b.n	800c2d4 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800c2a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2a6:	0018      	movs	r0, r3
 800c2a8:	2300      	movs	r3, #0
 800c2aa:	0019      	movs	r1, r3
 800c2ac:	4a16      	ldr	r2, [pc, #88]	; (800c308 <HAL_RCC_GetSysClockFreq+0x140>)
 800c2ae:	2300      	movs	r3, #0
 800c2b0:	f7f4 f904 	bl	80004bc <__aeabi_lmul>
 800c2b4:	0002      	movs	r2, r0
 800c2b6:	000b      	movs	r3, r1
 800c2b8:	0010      	movs	r0, r2
 800c2ba:	0019      	movs	r1, r3
 800c2bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2be:	001c      	movs	r4, r3
 800c2c0:	2300      	movs	r3, #0
 800c2c2:	001d      	movs	r5, r3
 800c2c4:	0022      	movs	r2, r4
 800c2c6:	002b      	movs	r3, r5
 800c2c8:	f7f4 f8d8 	bl	800047c <__aeabi_uldivmod>
 800c2cc:	0002      	movs	r2, r0
 800c2ce:	000b      	movs	r3, r1
 800c2d0:	0013      	movs	r3, r2
 800c2d2:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 800c2d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c2d6:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800c2d8:	e00d      	b.n	800c2f6 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800c2da:	4b09      	ldr	r3, [pc, #36]	; (800c300 <HAL_RCC_GetSysClockFreq+0x138>)
 800c2dc:	685b      	ldr	r3, [r3, #4]
 800c2de:	0b5b      	lsrs	r3, r3, #13
 800c2e0:	2207      	movs	r2, #7
 800c2e2:	4013      	ands	r3, r2
 800c2e4:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800c2e6:	6a3b      	ldr	r3, [r7, #32]
 800c2e8:	3301      	adds	r3, #1
 800c2ea:	2280      	movs	r2, #128	; 0x80
 800c2ec:	0212      	lsls	r2, r2, #8
 800c2ee:	409a      	lsls	r2, r3
 800c2f0:	0013      	movs	r3, r2
 800c2f2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800c2f4:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 800c2f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800c2f8:	0018      	movs	r0, r3
 800c2fa:	46bd      	mov	sp, r7
 800c2fc:	b00e      	add	sp, #56	; 0x38
 800c2fe:	bdb0      	pop	{r4, r5, r7, pc}
 800c300:	40021000 	.word	0x40021000
 800c304:	003d0900 	.word	0x003d0900
 800c308:	00f42400 	.word	0x00f42400
 800c30c:	007a1200 	.word	0x007a1200
 800c310:	08015c24 	.word	0x08015c24

0800c314 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800c314:	b580      	push	{r7, lr}
 800c316:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800c318:	4b02      	ldr	r3, [pc, #8]	; (800c324 <HAL_RCC_GetHCLKFreq+0x10>)
 800c31a:	681b      	ldr	r3, [r3, #0]
}
 800c31c:	0018      	movs	r0, r3
 800c31e:	46bd      	mov	sp, r7
 800c320:	bd80      	pop	{r7, pc}
 800c322:	46c0      	nop			; (mov r8, r8)
 800c324:	200000cc 	.word	0x200000cc

0800c328 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800c328:	b580      	push	{r7, lr}
 800c32a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800c32c:	f7ff fff2 	bl	800c314 <HAL_RCC_GetHCLKFreq>
 800c330:	0001      	movs	r1, r0
 800c332:	4b06      	ldr	r3, [pc, #24]	; (800c34c <HAL_RCC_GetPCLK1Freq+0x24>)
 800c334:	68db      	ldr	r3, [r3, #12]
 800c336:	0a1b      	lsrs	r3, r3, #8
 800c338:	2207      	movs	r2, #7
 800c33a:	4013      	ands	r3, r2
 800c33c:	4a04      	ldr	r2, [pc, #16]	; (800c350 <HAL_RCC_GetPCLK1Freq+0x28>)
 800c33e:	5cd3      	ldrb	r3, [r2, r3]
 800c340:	40d9      	lsrs	r1, r3
 800c342:	000b      	movs	r3, r1
}
 800c344:	0018      	movs	r0, r3
 800c346:	46bd      	mov	sp, r7
 800c348:	bd80      	pop	{r7, pc}
 800c34a:	46c0      	nop			; (mov r8, r8)
 800c34c:	40021000 	.word	0x40021000
 800c350:	08015c1c 	.word	0x08015c1c

0800c354 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800c354:	b580      	push	{r7, lr}
 800c356:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800c358:	f7ff ffdc 	bl	800c314 <HAL_RCC_GetHCLKFreq>
 800c35c:	0001      	movs	r1, r0
 800c35e:	4b06      	ldr	r3, [pc, #24]	; (800c378 <HAL_RCC_GetPCLK2Freq+0x24>)
 800c360:	68db      	ldr	r3, [r3, #12]
 800c362:	0adb      	lsrs	r3, r3, #11
 800c364:	2207      	movs	r2, #7
 800c366:	4013      	ands	r3, r2
 800c368:	4a04      	ldr	r2, [pc, #16]	; (800c37c <HAL_RCC_GetPCLK2Freq+0x28>)
 800c36a:	5cd3      	ldrb	r3, [r2, r3]
 800c36c:	40d9      	lsrs	r1, r3
 800c36e:	000b      	movs	r3, r1
}
 800c370:	0018      	movs	r0, r3
 800c372:	46bd      	mov	sp, r7
 800c374:	bd80      	pop	{r7, pc}
 800c376:	46c0      	nop			; (mov r8, r8)
 800c378:	40021000 	.word	0x40021000
 800c37c:	08015c1c 	.word	0x08015c1c

0800c380 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800c380:	b580      	push	{r7, lr}
 800c382:	b086      	sub	sp, #24
 800c384:	af00      	add	r7, sp, #0
 800c386:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 800c388:	2317      	movs	r3, #23
 800c38a:	18fb      	adds	r3, r7, r3
 800c38c:	2200      	movs	r2, #0
 800c38e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	681b      	ldr	r3, [r3, #0]
 800c394:	2220      	movs	r2, #32
 800c396:	4013      	ands	r3, r2
 800c398:	d106      	bne.n	800c3a8 <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	681a      	ldr	r2, [r3, #0]
 800c39e:	2380      	movs	r3, #128	; 0x80
 800c3a0:	011b      	lsls	r3, r3, #4
 800c3a2:	4013      	ands	r3, r2
 800c3a4:	d100      	bne.n	800c3a8 <HAL_RCCEx_PeriphCLKConfig+0x28>
 800c3a6:	e0d9      	b.n	800c55c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800c3a8:	4ba4      	ldr	r3, [pc, #656]	; (800c63c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800c3aa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c3ac:	2380      	movs	r3, #128	; 0x80
 800c3ae:	055b      	lsls	r3, r3, #21
 800c3b0:	4013      	ands	r3, r2
 800c3b2:	d10a      	bne.n	800c3ca <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800c3b4:	4ba1      	ldr	r3, [pc, #644]	; (800c63c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800c3b6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c3b8:	4ba0      	ldr	r3, [pc, #640]	; (800c63c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800c3ba:	2180      	movs	r1, #128	; 0x80
 800c3bc:	0549      	lsls	r1, r1, #21
 800c3be:	430a      	orrs	r2, r1
 800c3c0:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 800c3c2:	2317      	movs	r3, #23
 800c3c4:	18fb      	adds	r3, r7, r3
 800c3c6:	2201      	movs	r2, #1
 800c3c8:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800c3ca:	4b9d      	ldr	r3, [pc, #628]	; (800c640 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 800c3cc:	681a      	ldr	r2, [r3, #0]
 800c3ce:	2380      	movs	r3, #128	; 0x80
 800c3d0:	005b      	lsls	r3, r3, #1
 800c3d2:	4013      	ands	r3, r2
 800c3d4:	d11a      	bne.n	800c40c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800c3d6:	4b9a      	ldr	r3, [pc, #616]	; (800c640 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 800c3d8:	681a      	ldr	r2, [r3, #0]
 800c3da:	4b99      	ldr	r3, [pc, #612]	; (800c640 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 800c3dc:	2180      	movs	r1, #128	; 0x80
 800c3de:	0049      	lsls	r1, r1, #1
 800c3e0:	430a      	orrs	r2, r1
 800c3e2:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800c3e4:	f7fd fd10 	bl	8009e08 <HAL_GetTick>
 800c3e8:	0003      	movs	r3, r0
 800c3ea:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800c3ec:	e008      	b.n	800c400 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c3ee:	f7fd fd0b 	bl	8009e08 <HAL_GetTick>
 800c3f2:	0002      	movs	r2, r0
 800c3f4:	693b      	ldr	r3, [r7, #16]
 800c3f6:	1ad3      	subs	r3, r2, r3
 800c3f8:	2b64      	cmp	r3, #100	; 0x64
 800c3fa:	d901      	bls.n	800c400 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 800c3fc:	2303      	movs	r3, #3
 800c3fe:	e118      	b.n	800c632 <HAL_RCCEx_PeriphCLKConfig+0x2b2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800c400:	4b8f      	ldr	r3, [pc, #572]	; (800c640 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 800c402:	681a      	ldr	r2, [r3, #0]
 800c404:	2380      	movs	r3, #128	; 0x80
 800c406:	005b      	lsls	r3, r3, #1
 800c408:	4013      	ands	r3, r2
 800c40a:	d0f0      	beq.n	800c3ee <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 800c40c:	4b8b      	ldr	r3, [pc, #556]	; (800c63c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800c40e:	681a      	ldr	r2, [r3, #0]
 800c410:	23c0      	movs	r3, #192	; 0xc0
 800c412:	039b      	lsls	r3, r3, #14
 800c414:	4013      	ands	r3, r2
 800c416:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	685a      	ldr	r2, [r3, #4]
 800c41c:	23c0      	movs	r3, #192	; 0xc0
 800c41e:	039b      	lsls	r3, r3, #14
 800c420:	4013      	ands	r3, r2
 800c422:	68fa      	ldr	r2, [r7, #12]
 800c424:	429a      	cmp	r2, r3
 800c426:	d107      	bne.n	800c438 <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	689a      	ldr	r2, [r3, #8]
 800c42c:	23c0      	movs	r3, #192	; 0xc0
 800c42e:	039b      	lsls	r3, r3, #14
 800c430:	4013      	ands	r3, r2
 800c432:	68fa      	ldr	r2, [r7, #12]
 800c434:	429a      	cmp	r2, r3
 800c436:	d013      	beq.n	800c460 <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	685a      	ldr	r2, [r3, #4]
 800c43c:	23c0      	movs	r3, #192	; 0xc0
 800c43e:	029b      	lsls	r3, r3, #10
 800c440:	401a      	ands	r2, r3
 800c442:	23c0      	movs	r3, #192	; 0xc0
 800c444:	029b      	lsls	r3, r3, #10
 800c446:	429a      	cmp	r2, r3
 800c448:	d10a      	bne.n	800c460 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800c44a:	4b7c      	ldr	r3, [pc, #496]	; (800c63c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800c44c:	681a      	ldr	r2, [r3, #0]
 800c44e:	2380      	movs	r3, #128	; 0x80
 800c450:	029b      	lsls	r3, r3, #10
 800c452:	401a      	ands	r2, r3
 800c454:	2380      	movs	r3, #128	; 0x80
 800c456:	029b      	lsls	r3, r3, #10
 800c458:	429a      	cmp	r2, r3
 800c45a:	d101      	bne.n	800c460 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 800c45c:	2301      	movs	r3, #1
 800c45e:	e0e8      	b.n	800c632 <HAL_RCCEx_PeriphCLKConfig+0x2b2>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 800c460:	4b76      	ldr	r3, [pc, #472]	; (800c63c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800c462:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c464:	23c0      	movs	r3, #192	; 0xc0
 800c466:	029b      	lsls	r3, r3, #10
 800c468:	4013      	ands	r3, r2
 800c46a:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 800c46c:	68fb      	ldr	r3, [r7, #12]
 800c46e:	2b00      	cmp	r3, #0
 800c470:	d049      	beq.n	800c506 <HAL_RCCEx_PeriphCLKConfig+0x186>
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	685a      	ldr	r2, [r3, #4]
 800c476:	23c0      	movs	r3, #192	; 0xc0
 800c478:	029b      	lsls	r3, r3, #10
 800c47a:	4013      	ands	r3, r2
 800c47c:	68fa      	ldr	r2, [r7, #12]
 800c47e:	429a      	cmp	r2, r3
 800c480:	d004      	beq.n	800c48c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	681b      	ldr	r3, [r3, #0]
 800c486:	2220      	movs	r2, #32
 800c488:	4013      	ands	r3, r2
 800c48a:	d10d      	bne.n	800c4a8 <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	689a      	ldr	r2, [r3, #8]
 800c490:	23c0      	movs	r3, #192	; 0xc0
 800c492:	029b      	lsls	r3, r3, #10
 800c494:	4013      	ands	r3, r2
 800c496:	68fa      	ldr	r2, [r7, #12]
 800c498:	429a      	cmp	r2, r3
 800c49a:	d034      	beq.n	800c506 <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	681a      	ldr	r2, [r3, #0]
 800c4a0:	2380      	movs	r3, #128	; 0x80
 800c4a2:	011b      	lsls	r3, r3, #4
 800c4a4:	4013      	ands	r3, r2
 800c4a6:	d02e      	beq.n	800c506 <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 800c4a8:	4b64      	ldr	r3, [pc, #400]	; (800c63c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800c4aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c4ac:	4a65      	ldr	r2, [pc, #404]	; (800c644 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800c4ae:	4013      	ands	r3, r2
 800c4b0:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800c4b2:	4b62      	ldr	r3, [pc, #392]	; (800c63c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800c4b4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c4b6:	4b61      	ldr	r3, [pc, #388]	; (800c63c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800c4b8:	2180      	movs	r1, #128	; 0x80
 800c4ba:	0309      	lsls	r1, r1, #12
 800c4bc:	430a      	orrs	r2, r1
 800c4be:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 800c4c0:	4b5e      	ldr	r3, [pc, #376]	; (800c63c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800c4c2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c4c4:	4b5d      	ldr	r3, [pc, #372]	; (800c63c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800c4c6:	4960      	ldr	r1, [pc, #384]	; (800c648 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 800c4c8:	400a      	ands	r2, r1
 800c4ca:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 800c4cc:	4b5b      	ldr	r3, [pc, #364]	; (800c63c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800c4ce:	68fa      	ldr	r2, [r7, #12]
 800c4d0:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 800c4d2:	68fa      	ldr	r2, [r7, #12]
 800c4d4:	2380      	movs	r3, #128	; 0x80
 800c4d6:	005b      	lsls	r3, r3, #1
 800c4d8:	4013      	ands	r3, r2
 800c4da:	d014      	beq.n	800c506 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c4dc:	f7fd fc94 	bl	8009e08 <HAL_GetTick>
 800c4e0:	0003      	movs	r3, r0
 800c4e2:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800c4e4:	e009      	b.n	800c4fa <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800c4e6:	f7fd fc8f 	bl	8009e08 <HAL_GetTick>
 800c4ea:	0002      	movs	r2, r0
 800c4ec:	693b      	ldr	r3, [r7, #16]
 800c4ee:	1ad3      	subs	r3, r2, r3
 800c4f0:	4a56      	ldr	r2, [pc, #344]	; (800c64c <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 800c4f2:	4293      	cmp	r3, r2
 800c4f4:	d901      	bls.n	800c4fa <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 800c4f6:	2303      	movs	r3, #3
 800c4f8:	e09b      	b.n	800c632 <HAL_RCCEx_PeriphCLKConfig+0x2b2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800c4fa:	4b50      	ldr	r3, [pc, #320]	; (800c63c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800c4fc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c4fe:	2380      	movs	r3, #128	; 0x80
 800c500:	009b      	lsls	r3, r3, #2
 800c502:	4013      	ands	r3, r2
 800c504:	d0ef      	beq.n	800c4e6 <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	685a      	ldr	r2, [r3, #4]
 800c50a:	23c0      	movs	r3, #192	; 0xc0
 800c50c:	029b      	lsls	r3, r3, #10
 800c50e:	401a      	ands	r2, r3
 800c510:	23c0      	movs	r3, #192	; 0xc0
 800c512:	029b      	lsls	r3, r3, #10
 800c514:	429a      	cmp	r2, r3
 800c516:	d10c      	bne.n	800c532 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 800c518:	4b48      	ldr	r3, [pc, #288]	; (800c63c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800c51a:	681b      	ldr	r3, [r3, #0]
 800c51c:	4a4c      	ldr	r2, [pc, #304]	; (800c650 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 800c51e:	4013      	ands	r3, r2
 800c520:	0019      	movs	r1, r3
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	685a      	ldr	r2, [r3, #4]
 800c526:	23c0      	movs	r3, #192	; 0xc0
 800c528:	039b      	lsls	r3, r3, #14
 800c52a:	401a      	ands	r2, r3
 800c52c:	4b43      	ldr	r3, [pc, #268]	; (800c63c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800c52e:	430a      	orrs	r2, r1
 800c530:	601a      	str	r2, [r3, #0]
 800c532:	4b42      	ldr	r3, [pc, #264]	; (800c63c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800c534:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	685a      	ldr	r2, [r3, #4]
 800c53a:	23c0      	movs	r3, #192	; 0xc0
 800c53c:	029b      	lsls	r3, r3, #10
 800c53e:	401a      	ands	r2, r3
 800c540:	4b3e      	ldr	r3, [pc, #248]	; (800c63c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800c542:	430a      	orrs	r2, r1
 800c544:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800c546:	2317      	movs	r3, #23
 800c548:	18fb      	adds	r3, r7, r3
 800c54a:	781b      	ldrb	r3, [r3, #0]
 800c54c:	2b01      	cmp	r3, #1
 800c54e:	d105      	bne.n	800c55c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800c550:	4b3a      	ldr	r3, [pc, #232]	; (800c63c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800c552:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c554:	4b39      	ldr	r3, [pc, #228]	; (800c63c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800c556:	493f      	ldr	r1, [pc, #252]	; (800c654 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800c558:	400a      	ands	r2, r1
 800c55a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	681b      	ldr	r3, [r3, #0]
 800c560:	2201      	movs	r2, #1
 800c562:	4013      	ands	r3, r2
 800c564:	d009      	beq.n	800c57a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800c566:	4b35      	ldr	r3, [pc, #212]	; (800c63c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800c568:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c56a:	2203      	movs	r2, #3
 800c56c:	4393      	bics	r3, r2
 800c56e:	0019      	movs	r1, r3
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	68da      	ldr	r2, [r3, #12]
 800c574:	4b31      	ldr	r3, [pc, #196]	; (800c63c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800c576:	430a      	orrs	r2, r1
 800c578:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	681b      	ldr	r3, [r3, #0]
 800c57e:	2202      	movs	r2, #2
 800c580:	4013      	ands	r3, r2
 800c582:	d009      	beq.n	800c598 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800c584:	4b2d      	ldr	r3, [pc, #180]	; (800c63c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800c586:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c588:	220c      	movs	r2, #12
 800c58a:	4393      	bics	r3, r2
 800c58c:	0019      	movs	r1, r3
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	691a      	ldr	r2, [r3, #16]
 800c592:	4b2a      	ldr	r3, [pc, #168]	; (800c63c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800c594:	430a      	orrs	r2, r1
 800c596:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	681b      	ldr	r3, [r3, #0]
 800c59c:	2204      	movs	r2, #4
 800c59e:	4013      	ands	r3, r2
 800c5a0:	d009      	beq.n	800c5b6 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800c5a2:	4b26      	ldr	r3, [pc, #152]	; (800c63c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800c5a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c5a6:	4a2c      	ldr	r2, [pc, #176]	; (800c658 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800c5a8:	4013      	ands	r3, r2
 800c5aa:	0019      	movs	r1, r3
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	695a      	ldr	r2, [r3, #20]
 800c5b0:	4b22      	ldr	r3, [pc, #136]	; (800c63c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800c5b2:	430a      	orrs	r2, r1
 800c5b4:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	681b      	ldr	r3, [r3, #0]
 800c5ba:	2208      	movs	r2, #8
 800c5bc:	4013      	ands	r3, r2
 800c5be:	d009      	beq.n	800c5d4 <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800c5c0:	4b1e      	ldr	r3, [pc, #120]	; (800c63c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800c5c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c5c4:	4a25      	ldr	r2, [pc, #148]	; (800c65c <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 800c5c6:	4013      	ands	r3, r2
 800c5c8:	0019      	movs	r1, r3
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	699a      	ldr	r2, [r3, #24]
 800c5ce:	4b1b      	ldr	r3, [pc, #108]	; (800c63c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800c5d0:	430a      	orrs	r2, r1
 800c5d2:	64da      	str	r2, [r3, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	681a      	ldr	r2, [r3, #0]
 800c5d8:	2380      	movs	r3, #128	; 0x80
 800c5da:	005b      	lsls	r3, r3, #1
 800c5dc:	4013      	ands	r3, r2
 800c5de:	d009      	beq.n	800c5f4 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800c5e0:	4b16      	ldr	r3, [pc, #88]	; (800c63c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800c5e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c5e4:	4a17      	ldr	r2, [pc, #92]	; (800c644 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800c5e6:	4013      	ands	r3, r2
 800c5e8:	0019      	movs	r1, r3
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	69da      	ldr	r2, [r3, #28]
 800c5ee:	4b13      	ldr	r3, [pc, #76]	; (800c63c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800c5f0:	430a      	orrs	r2, r1
 800c5f2:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	681b      	ldr	r3, [r3, #0]
 800c5f8:	2240      	movs	r2, #64	; 0x40
 800c5fa:	4013      	ands	r3, r2
 800c5fc:	d009      	beq.n	800c612 <HAL_RCCEx_PeriphCLKConfig+0x292>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800c5fe:	4b0f      	ldr	r3, [pc, #60]	; (800c63c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800c600:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c602:	4a17      	ldr	r2, [pc, #92]	; (800c660 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 800c604:	4013      	ands	r3, r2
 800c606:	0019      	movs	r1, r3
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c60c:	4b0b      	ldr	r3, [pc, #44]	; (800c63c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800c60e:	430a      	orrs	r2, r1
 800c610:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	681b      	ldr	r3, [r3, #0]
 800c616:	2280      	movs	r2, #128	; 0x80
 800c618:	4013      	ands	r3, r2
 800c61a:	d009      	beq.n	800c630 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 800c61c:	4b07      	ldr	r3, [pc, #28]	; (800c63c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800c61e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c620:	4a10      	ldr	r2, [pc, #64]	; (800c664 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800c622:	4013      	ands	r3, r2
 800c624:	0019      	movs	r1, r3
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	6a1a      	ldr	r2, [r3, #32]
 800c62a:	4b04      	ldr	r3, [pc, #16]	; (800c63c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800c62c:	430a      	orrs	r2, r1
 800c62e:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800c630:	2300      	movs	r3, #0
}
 800c632:	0018      	movs	r0, r3
 800c634:	46bd      	mov	sp, r7
 800c636:	b006      	add	sp, #24
 800c638:	bd80      	pop	{r7, pc}
 800c63a:	46c0      	nop			; (mov r8, r8)
 800c63c:	40021000 	.word	0x40021000
 800c640:	40007000 	.word	0x40007000
 800c644:	fffcffff 	.word	0xfffcffff
 800c648:	fff7ffff 	.word	0xfff7ffff
 800c64c:	00001388 	.word	0x00001388
 800c650:	ffcfffff 	.word	0xffcfffff
 800c654:	efffffff 	.word	0xefffffff
 800c658:	fffff3ff 	.word	0xfffff3ff
 800c65c:	ffffcfff 	.word	0xffffcfff
 800c660:	fbffffff 	.word	0xfbffffff
 800c664:	fff3ffff 	.word	0xfff3ffff

0800c668 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800c668:	b580      	push	{r7, lr}
 800c66a:	b082      	sub	sp, #8
 800c66c:	af00      	add	r7, sp, #0
 800c66e:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	2b00      	cmp	r3, #0
 800c674:	d101      	bne.n	800c67a <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 800c676:	2301      	movs	r3, #1
 800c678:	e08e      	b.n	800c798 <HAL_RTC_Init+0x130>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	2221      	movs	r2, #33	; 0x21
 800c67e:	5c9b      	ldrb	r3, [r3, r2]
 800c680:	b2db      	uxtb	r3, r3
 800c682:	2b00      	cmp	r3, #0
 800c684:	d107      	bne.n	800c696 <HAL_RTC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	2220      	movs	r2, #32
 800c68a:	2100      	movs	r1, #0
 800c68c:	5499      	strb	r1, [r3, r2]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	0018      	movs	r0, r3
 800c692:	f7f5 f961 	bl	8001958 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	2221      	movs	r2, #33	; 0x21
 800c69a:	2102      	movs	r1, #2
 800c69c:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	681b      	ldr	r3, [r3, #0]
 800c6a2:	22ca      	movs	r2, #202	; 0xca
 800c6a4:	625a      	str	r2, [r3, #36]	; 0x24
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	681b      	ldr	r3, [r3, #0]
 800c6aa:	2253      	movs	r2, #83	; 0x53
 800c6ac:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	0018      	movs	r0, r3
 800c6b2:	f000 faba 	bl	800cc2a <RTC_EnterInitMode>
 800c6b6:	1e03      	subs	r3, r0, #0
 800c6b8:	d009      	beq.n	800c6ce <HAL_RTC_Init+0x66>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	681b      	ldr	r3, [r3, #0]
 800c6be:	22ff      	movs	r2, #255	; 0xff
 800c6c0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	2221      	movs	r2, #33	; 0x21
 800c6c6:	2104      	movs	r1, #4
 800c6c8:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 800c6ca:	2301      	movs	r3, #1
 800c6cc:	e064      	b.n	800c798 <HAL_RTC_Init+0x130>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	681b      	ldr	r3, [r3, #0]
 800c6d2:	689a      	ldr	r2, [r3, #8]
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	681b      	ldr	r3, [r3, #0]
 800c6d8:	4931      	ldr	r1, [pc, #196]	; (800c7a0 <HAL_RTC_Init+0x138>)
 800c6da:	400a      	ands	r2, r1
 800c6dc:	609a      	str	r2, [r3, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	681b      	ldr	r3, [r3, #0]
 800c6e2:	6899      	ldr	r1, [r3, #8]
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	685a      	ldr	r2, [r3, #4]
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	691b      	ldr	r3, [r3, #16]
 800c6ec:	431a      	orrs	r2, r3
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	699b      	ldr	r3, [r3, #24]
 800c6f2:	431a      	orrs	r2, r3
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	681b      	ldr	r3, [r3, #0]
 800c6f8:	430a      	orrs	r2, r1
 800c6fa:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	681b      	ldr	r3, [r3, #0]
 800c700:	687a      	ldr	r2, [r7, #4]
 800c702:	68d2      	ldr	r2, [r2, #12]
 800c704:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	681b      	ldr	r3, [r3, #0]
 800c70a:	6919      	ldr	r1, [r3, #16]
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	689b      	ldr	r3, [r3, #8]
 800c710:	041a      	lsls	r2, r3, #16
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	681b      	ldr	r3, [r3, #0]
 800c716:	430a      	orrs	r2, r1
 800c718:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	681b      	ldr	r3, [r3, #0]
 800c71e:	68da      	ldr	r2, [r3, #12]
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	681b      	ldr	r3, [r3, #0]
 800c724:	2180      	movs	r1, #128	; 0x80
 800c726:	438a      	bics	r2, r1
 800c728:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	681b      	ldr	r3, [r3, #0]
 800c72e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	681b      	ldr	r3, [r3, #0]
 800c734:	2103      	movs	r1, #3
 800c736:	438a      	bics	r2, r1
 800c738:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	681b      	ldr	r3, [r3, #0]
 800c73e:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	69da      	ldr	r2, [r3, #28]
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	695b      	ldr	r3, [r3, #20]
 800c748:	431a      	orrs	r2, r3
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	681b      	ldr	r3, [r3, #0]
 800c74e:	430a      	orrs	r2, r1
 800c750:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	681b      	ldr	r3, [r3, #0]
 800c756:	689b      	ldr	r3, [r3, #8]
 800c758:	2220      	movs	r2, #32
 800c75a:	4013      	ands	r3, r2
 800c75c:	d113      	bne.n	800c786 <HAL_RTC_Init+0x11e>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	0018      	movs	r0, r3
 800c762:	f000 fa3b 	bl	800cbdc <HAL_RTC_WaitForSynchro>
 800c766:	1e03      	subs	r3, r0, #0
 800c768:	d00d      	beq.n	800c786 <HAL_RTC_Init+0x11e>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	681b      	ldr	r3, [r3, #0]
 800c76e:	22ff      	movs	r2, #255	; 0xff
 800c770:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	2221      	movs	r2, #33	; 0x21
 800c776:	2104      	movs	r1, #4
 800c778:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	2220      	movs	r2, #32
 800c77e:	2100      	movs	r1, #0
 800c780:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800c782:	2301      	movs	r3, #1
 800c784:	e008      	b.n	800c798 <HAL_RTC_Init+0x130>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	681b      	ldr	r3, [r3, #0]
 800c78a:	22ff      	movs	r2, #255	; 0xff
 800c78c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	2221      	movs	r2, #33	; 0x21
 800c792:	2101      	movs	r1, #1
 800c794:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800c796:	2300      	movs	r3, #0
  }
}
 800c798:	0018      	movs	r0, r3
 800c79a:	46bd      	mov	sp, r7
 800c79c:	b002      	add	sp, #8
 800c79e:	bd80      	pop	{r7, pc}
 800c7a0:	ff8fffbf 	.word	0xff8fffbf

0800c7a4 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800c7a4:	b590      	push	{r4, r7, lr}
 800c7a6:	b087      	sub	sp, #28
 800c7a8:	af00      	add	r7, sp, #0
 800c7aa:	60f8      	str	r0, [r7, #12]
 800c7ac:	60b9      	str	r1, [r7, #8]
 800c7ae:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800c7b0:	68fb      	ldr	r3, [r7, #12]
 800c7b2:	2220      	movs	r2, #32
 800c7b4:	5c9b      	ldrb	r3, [r3, r2]
 800c7b6:	2b01      	cmp	r3, #1
 800c7b8:	d101      	bne.n	800c7be <HAL_RTC_SetTime+0x1a>
 800c7ba:	2302      	movs	r3, #2
 800c7bc:	e0ad      	b.n	800c91a <HAL_RTC_SetTime+0x176>
 800c7be:	68fb      	ldr	r3, [r7, #12]
 800c7c0:	2220      	movs	r2, #32
 800c7c2:	2101      	movs	r1, #1
 800c7c4:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800c7c6:	68fb      	ldr	r3, [r7, #12]
 800c7c8:	2221      	movs	r2, #33	; 0x21
 800c7ca:	2102      	movs	r1, #2
 800c7cc:	5499      	strb	r1, [r3, r2]

  if (Format == RTC_FORMAT_BIN)
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	2b00      	cmp	r3, #0
 800c7d2:	d125      	bne.n	800c820 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800c7d4:	68fb      	ldr	r3, [r7, #12]
 800c7d6:	681b      	ldr	r3, [r3, #0]
 800c7d8:	689b      	ldr	r3, [r3, #8]
 800c7da:	2240      	movs	r2, #64	; 0x40
 800c7dc:	4013      	ands	r3, r2
 800c7de:	d102      	bne.n	800c7e6 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800c7e0:	68bb      	ldr	r3, [r7, #8]
 800c7e2:	2200      	movs	r2, #0
 800c7e4:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800c7e6:	68bb      	ldr	r3, [r7, #8]
 800c7e8:	781b      	ldrb	r3, [r3, #0]
 800c7ea:	0018      	movs	r0, r3
 800c7ec:	f000 fa47 	bl	800cc7e <RTC_ByteToBcd2>
 800c7f0:	0003      	movs	r3, r0
 800c7f2:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800c7f4:	68bb      	ldr	r3, [r7, #8]
 800c7f6:	785b      	ldrb	r3, [r3, #1]
 800c7f8:	0018      	movs	r0, r3
 800c7fa:	f000 fa40 	bl	800cc7e <RTC_ByteToBcd2>
 800c7fe:	0003      	movs	r3, r0
 800c800:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800c802:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 800c804:	68bb      	ldr	r3, [r7, #8]
 800c806:	789b      	ldrb	r3, [r3, #2]
 800c808:	0018      	movs	r0, r3
 800c80a:	f000 fa38 	bl	800cc7e <RTC_ByteToBcd2>
 800c80e:	0003      	movs	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800c810:	0022      	movs	r2, r4
 800c812:	431a      	orrs	r2, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 800c814:	68bb      	ldr	r3, [r7, #8]
 800c816:	78db      	ldrb	r3, [r3, #3]
 800c818:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800c81a:	4313      	orrs	r3, r2
 800c81c:	617b      	str	r3, [r7, #20]
 800c81e:	e017      	b.n	800c850 <HAL_RTC_SetTime+0xac>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800c820:	68fb      	ldr	r3, [r7, #12]
 800c822:	681b      	ldr	r3, [r3, #0]
 800c824:	689b      	ldr	r3, [r3, #8]
 800c826:	2240      	movs	r2, #64	; 0x40
 800c828:	4013      	ands	r3, r2
 800c82a:	d102      	bne.n	800c832 <HAL_RTC_SetTime+0x8e>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800c82c:	68bb      	ldr	r3, [r7, #8]
 800c82e:	2200      	movs	r2, #0
 800c830:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800c832:	68bb      	ldr	r3, [r7, #8]
 800c834:	781b      	ldrb	r3, [r3, #0]
 800c836:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800c838:	68bb      	ldr	r3, [r7, #8]
 800c83a:	785b      	ldrb	r3, [r3, #1]
 800c83c:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800c83e:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 800c840:	68ba      	ldr	r2, [r7, #8]
 800c842:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800c844:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 800c846:	68bb      	ldr	r3, [r7, #8]
 800c848:	78db      	ldrb	r3, [r3, #3]
 800c84a:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800c84c:	4313      	orrs	r3, r2
 800c84e:	617b      	str	r3, [r7, #20]
  }
  UNUSED(tmpreg);
  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800c850:	68fb      	ldr	r3, [r7, #12]
 800c852:	681b      	ldr	r3, [r3, #0]
 800c854:	22ca      	movs	r2, #202	; 0xca
 800c856:	625a      	str	r2, [r3, #36]	; 0x24
 800c858:	68fb      	ldr	r3, [r7, #12]
 800c85a:	681b      	ldr	r3, [r3, #0]
 800c85c:	2253      	movs	r2, #83	; 0x53
 800c85e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800c860:	68fb      	ldr	r3, [r7, #12]
 800c862:	0018      	movs	r0, r3
 800c864:	f000 f9e1 	bl	800cc2a <RTC_EnterInitMode>
 800c868:	1e03      	subs	r3, r0, #0
 800c86a:	d00d      	beq.n	800c888 <HAL_RTC_SetTime+0xe4>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c86c:	68fb      	ldr	r3, [r7, #12]
 800c86e:	681b      	ldr	r3, [r3, #0]
 800c870:	22ff      	movs	r2, #255	; 0xff
 800c872:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800c874:	68fb      	ldr	r3, [r7, #12]
 800c876:	2221      	movs	r2, #33	; 0x21
 800c878:	2104      	movs	r1, #4
 800c87a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800c87c:	68fb      	ldr	r3, [r7, #12]
 800c87e:	2220      	movs	r2, #32
 800c880:	2100      	movs	r1, #0
 800c882:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 800c884:	2301      	movs	r3, #1
 800c886:	e048      	b.n	800c91a <HAL_RTC_SetTime+0x176>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800c888:	68fb      	ldr	r3, [r7, #12]
 800c88a:	681b      	ldr	r3, [r3, #0]
 800c88c:	697a      	ldr	r2, [r7, #20]
 800c88e:	4925      	ldr	r1, [pc, #148]	; (800c924 <HAL_RTC_SetTime+0x180>)
 800c890:	400a      	ands	r2, r1
 800c892:	601a      	str	r2, [r3, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 800c894:	68fb      	ldr	r3, [r7, #12]
 800c896:	681b      	ldr	r3, [r3, #0]
 800c898:	689a      	ldr	r2, [r3, #8]
 800c89a:	68fb      	ldr	r3, [r7, #12]
 800c89c:	681b      	ldr	r3, [r3, #0]
 800c89e:	4922      	ldr	r1, [pc, #136]	; (800c928 <HAL_RTC_SetTime+0x184>)
 800c8a0:	400a      	ands	r2, r1
 800c8a2:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800c8a4:	68fb      	ldr	r3, [r7, #12]
 800c8a6:	681b      	ldr	r3, [r3, #0]
 800c8a8:	6899      	ldr	r1, [r3, #8]
 800c8aa:	68bb      	ldr	r3, [r7, #8]
 800c8ac:	68da      	ldr	r2, [r3, #12]
 800c8ae:	68bb      	ldr	r3, [r7, #8]
 800c8b0:	691b      	ldr	r3, [r3, #16]
 800c8b2:	431a      	orrs	r2, r3
 800c8b4:	68fb      	ldr	r3, [r7, #12]
 800c8b6:	681b      	ldr	r3, [r3, #0]
 800c8b8:	430a      	orrs	r2, r1
 800c8ba:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800c8bc:	68fb      	ldr	r3, [r7, #12]
 800c8be:	681b      	ldr	r3, [r3, #0]
 800c8c0:	68da      	ldr	r2, [r3, #12]
 800c8c2:	68fb      	ldr	r3, [r7, #12]
 800c8c4:	681b      	ldr	r3, [r3, #0]
 800c8c6:	2180      	movs	r1, #128	; 0x80
 800c8c8:	438a      	bics	r2, r1
 800c8ca:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 800c8cc:	68fb      	ldr	r3, [r7, #12]
 800c8ce:	681b      	ldr	r3, [r3, #0]
 800c8d0:	689b      	ldr	r3, [r3, #8]
 800c8d2:	2220      	movs	r2, #32
 800c8d4:	4013      	ands	r3, r2
 800c8d6:	d113      	bne.n	800c900 <HAL_RTC_SetTime+0x15c>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800c8d8:	68fb      	ldr	r3, [r7, #12]
 800c8da:	0018      	movs	r0, r3
 800c8dc:	f000 f97e 	bl	800cbdc <HAL_RTC_WaitForSynchro>
 800c8e0:	1e03      	subs	r3, r0, #0
 800c8e2:	d00d      	beq.n	800c900 <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c8e4:	68fb      	ldr	r3, [r7, #12]
 800c8e6:	681b      	ldr	r3, [r3, #0]
 800c8e8:	22ff      	movs	r2, #255	; 0xff
 800c8ea:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800c8ec:	68fb      	ldr	r3, [r7, #12]
 800c8ee:	2221      	movs	r2, #33	; 0x21
 800c8f0:	2104      	movs	r1, #4
 800c8f2:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800c8f4:	68fb      	ldr	r3, [r7, #12]
 800c8f6:	2220      	movs	r2, #32
 800c8f8:	2100      	movs	r1, #0
 800c8fa:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800c8fc:	2301      	movs	r3, #1
 800c8fe:	e00c      	b.n	800c91a <HAL_RTC_SetTime+0x176>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c900:	68fb      	ldr	r3, [r7, #12]
 800c902:	681b      	ldr	r3, [r3, #0]
 800c904:	22ff      	movs	r2, #255	; 0xff
 800c906:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY;
 800c908:	68fb      	ldr	r3, [r7, #12]
 800c90a:	2221      	movs	r2, #33	; 0x21
 800c90c:	2101      	movs	r1, #1
 800c90e:	5499      	strb	r1, [r3, r2]

    __HAL_UNLOCK(hrtc);
 800c910:	68fb      	ldr	r3, [r7, #12]
 800c912:	2220      	movs	r2, #32
 800c914:	2100      	movs	r1, #0
 800c916:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800c918:	2300      	movs	r3, #0
  }
}
 800c91a:	0018      	movs	r0, r3
 800c91c:	46bd      	mov	sp, r7
 800c91e:	b007      	add	sp, #28
 800c920:	bd90      	pop	{r4, r7, pc}
 800c922:	46c0      	nop			; (mov r8, r8)
 800c924:	007f7f7f 	.word	0x007f7f7f
 800c928:	fffbffff 	.word	0xfffbffff

0800c92c <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800c92c:	b580      	push	{r7, lr}
 800c92e:	b086      	sub	sp, #24
 800c930:	af00      	add	r7, sp, #0
 800c932:	60f8      	str	r0, [r7, #12]
 800c934:	60b9      	str	r1, [r7, #8]
 800c936:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800c938:	68fb      	ldr	r3, [r7, #12]
 800c93a:	681b      	ldr	r3, [r3, #0]
 800c93c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c93e:	68bb      	ldr	r3, [r7, #8]
 800c940:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800c942:	68fb      	ldr	r3, [r7, #12]
 800c944:	681b      	ldr	r3, [r3, #0]
 800c946:	691b      	ldr	r3, [r3, #16]
 800c948:	045b      	lsls	r3, r3, #17
 800c94a:	0c5a      	lsrs	r2, r3, #17
 800c94c:	68bb      	ldr	r3, [r7, #8]
 800c94e:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800c950:	68fb      	ldr	r3, [r7, #12]
 800c952:	681b      	ldr	r3, [r3, #0]
 800c954:	681b      	ldr	r3, [r3, #0]
 800c956:	4a22      	ldr	r2, [pc, #136]	; (800c9e0 <HAL_RTC_GetTime+0xb4>)
 800c958:	4013      	ands	r3, r2
 800c95a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 800c95c:	697b      	ldr	r3, [r7, #20]
 800c95e:	0c1b      	lsrs	r3, r3, #16
 800c960:	b2db      	uxtb	r3, r3
 800c962:	223f      	movs	r2, #63	; 0x3f
 800c964:	4013      	ands	r3, r2
 800c966:	b2da      	uxtb	r2, r3
 800c968:	68bb      	ldr	r3, [r7, #8]
 800c96a:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 800c96c:	697b      	ldr	r3, [r7, #20]
 800c96e:	0a1b      	lsrs	r3, r3, #8
 800c970:	b2db      	uxtb	r3, r3
 800c972:	227f      	movs	r2, #127	; 0x7f
 800c974:	4013      	ands	r3, r2
 800c976:	b2da      	uxtb	r2, r3
 800c978:	68bb      	ldr	r3, [r7, #8]
 800c97a:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 800c97c:	697b      	ldr	r3, [r7, #20]
 800c97e:	b2db      	uxtb	r3, r3
 800c980:	227f      	movs	r2, #127	; 0x7f
 800c982:	4013      	ands	r3, r2
 800c984:	b2da      	uxtb	r2, r3
 800c986:	68bb      	ldr	r3, [r7, #8]
 800c988:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 800c98a:	697b      	ldr	r3, [r7, #20]
 800c98c:	0c1b      	lsrs	r3, r3, #16
 800c98e:	b2db      	uxtb	r3, r3
 800c990:	2240      	movs	r2, #64	; 0x40
 800c992:	4013      	ands	r3, r2
 800c994:	b2da      	uxtb	r2, r3
 800c996:	68bb      	ldr	r3, [r7, #8]
 800c998:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	2b00      	cmp	r3, #0
 800c99e:	d11a      	bne.n	800c9d6 <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800c9a0:	68bb      	ldr	r3, [r7, #8]
 800c9a2:	781b      	ldrb	r3, [r3, #0]
 800c9a4:	0018      	movs	r0, r3
 800c9a6:	f000 f992 	bl	800ccce <RTC_Bcd2ToByte>
 800c9aa:	0003      	movs	r3, r0
 800c9ac:	001a      	movs	r2, r3
 800c9ae:	68bb      	ldr	r3, [r7, #8]
 800c9b0:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800c9b2:	68bb      	ldr	r3, [r7, #8]
 800c9b4:	785b      	ldrb	r3, [r3, #1]
 800c9b6:	0018      	movs	r0, r3
 800c9b8:	f000 f989 	bl	800ccce <RTC_Bcd2ToByte>
 800c9bc:	0003      	movs	r3, r0
 800c9be:	001a      	movs	r2, r3
 800c9c0:	68bb      	ldr	r3, [r7, #8]
 800c9c2:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800c9c4:	68bb      	ldr	r3, [r7, #8]
 800c9c6:	789b      	ldrb	r3, [r3, #2]
 800c9c8:	0018      	movs	r0, r3
 800c9ca:	f000 f980 	bl	800ccce <RTC_Bcd2ToByte>
 800c9ce:	0003      	movs	r3, r0
 800c9d0:	001a      	movs	r2, r3
 800c9d2:	68bb      	ldr	r3, [r7, #8]
 800c9d4:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800c9d6:	2300      	movs	r3, #0
}
 800c9d8:	0018      	movs	r0, r3
 800c9da:	46bd      	mov	sp, r7
 800c9dc:	b006      	add	sp, #24
 800c9de:	bd80      	pop	{r7, pc}
 800c9e0:	007f7f7f 	.word	0x007f7f7f

0800c9e4 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800c9e4:	b590      	push	{r4, r7, lr}
 800c9e6:	b087      	sub	sp, #28
 800c9e8:	af00      	add	r7, sp, #0
 800c9ea:	60f8      	str	r0, [r7, #12]
 800c9ec:	60b9      	str	r1, [r7, #8]
 800c9ee:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800c9f0:	68fb      	ldr	r3, [r7, #12]
 800c9f2:	2220      	movs	r2, #32
 800c9f4:	5c9b      	ldrb	r3, [r3, r2]
 800c9f6:	2b01      	cmp	r3, #1
 800c9f8:	d101      	bne.n	800c9fe <HAL_RTC_SetDate+0x1a>
 800c9fa:	2302      	movs	r3, #2
 800c9fc:	e099      	b.n	800cb32 <HAL_RTC_SetDate+0x14e>
 800c9fe:	68fb      	ldr	r3, [r7, #12]
 800ca00:	2220      	movs	r2, #32
 800ca02:	2101      	movs	r1, #1
 800ca04:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800ca06:	68fb      	ldr	r3, [r7, #12]
 800ca08:	2221      	movs	r2, #33	; 0x21
 800ca0a:	2102      	movs	r1, #2
 800ca0c:	5499      	strb	r1, [r3, r2]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	2b00      	cmp	r3, #0
 800ca12:	d10e      	bne.n	800ca32 <HAL_RTC_SetDate+0x4e>
 800ca14:	68bb      	ldr	r3, [r7, #8]
 800ca16:	785b      	ldrb	r3, [r3, #1]
 800ca18:	001a      	movs	r2, r3
 800ca1a:	2310      	movs	r3, #16
 800ca1c:	4013      	ands	r3, r2
 800ca1e:	d008      	beq.n	800ca32 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800ca20:	68bb      	ldr	r3, [r7, #8]
 800ca22:	785b      	ldrb	r3, [r3, #1]
 800ca24:	2210      	movs	r2, #16
 800ca26:	4393      	bics	r3, r2
 800ca28:	b2db      	uxtb	r3, r3
 800ca2a:	330a      	adds	r3, #10
 800ca2c:	b2da      	uxtb	r2, r3
 800ca2e:	68bb      	ldr	r3, [r7, #8]
 800ca30:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	2b00      	cmp	r3, #0
 800ca36:	d11c      	bne.n	800ca72 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800ca38:	68bb      	ldr	r3, [r7, #8]
 800ca3a:	78db      	ldrb	r3, [r3, #3]
 800ca3c:	0018      	movs	r0, r3
 800ca3e:	f000 f91e 	bl	800cc7e <RTC_ByteToBcd2>
 800ca42:	0003      	movs	r3, r0
 800ca44:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800ca46:	68bb      	ldr	r3, [r7, #8]
 800ca48:	785b      	ldrb	r3, [r3, #1]
 800ca4a:	0018      	movs	r0, r3
 800ca4c:	f000 f917 	bl	800cc7e <RTC_ByteToBcd2>
 800ca50:	0003      	movs	r3, r0
 800ca52:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800ca54:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 800ca56:	68bb      	ldr	r3, [r7, #8]
 800ca58:	789b      	ldrb	r3, [r3, #2]
 800ca5a:	0018      	movs	r0, r3
 800ca5c:	f000 f90f 	bl	800cc7e <RTC_ByteToBcd2>
 800ca60:	0003      	movs	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800ca62:	0022      	movs	r2, r4
 800ca64:	431a      	orrs	r2, r3
                  ((uint32_t)sDate->WeekDay << 13U));
 800ca66:	68bb      	ldr	r3, [r7, #8]
 800ca68:	781b      	ldrb	r3, [r3, #0]
 800ca6a:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800ca6c:	4313      	orrs	r3, r2
 800ca6e:	617b      	str	r3, [r7, #20]
 800ca70:	e00e      	b.n	800ca90 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800ca72:	68bb      	ldr	r3, [r7, #8]
 800ca74:	78db      	ldrb	r3, [r3, #3]
 800ca76:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 800ca78:	68bb      	ldr	r3, [r7, #8]
 800ca7a:	785b      	ldrb	r3, [r3, #1]
 800ca7c:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800ca7e:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 800ca80:	68ba      	ldr	r2, [r7, #8]
 800ca82:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 800ca84:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 800ca86:	68bb      	ldr	r3, [r7, #8]
 800ca88:	781b      	ldrb	r3, [r3, #0]
 800ca8a:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800ca8c:	4313      	orrs	r3, r2
 800ca8e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800ca90:	68fb      	ldr	r3, [r7, #12]
 800ca92:	681b      	ldr	r3, [r3, #0]
 800ca94:	22ca      	movs	r2, #202	; 0xca
 800ca96:	625a      	str	r2, [r3, #36]	; 0x24
 800ca98:	68fb      	ldr	r3, [r7, #12]
 800ca9a:	681b      	ldr	r3, [r3, #0]
 800ca9c:	2253      	movs	r2, #83	; 0x53
 800ca9e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800caa0:	68fb      	ldr	r3, [r7, #12]
 800caa2:	0018      	movs	r0, r3
 800caa4:	f000 f8c1 	bl	800cc2a <RTC_EnterInitMode>
 800caa8:	1e03      	subs	r3, r0, #0
 800caaa:	d00d      	beq.n	800cac8 <HAL_RTC_SetDate+0xe4>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800caac:	68fb      	ldr	r3, [r7, #12]
 800caae:	681b      	ldr	r3, [r3, #0]
 800cab0:	22ff      	movs	r2, #255	; 0xff
 800cab2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 800cab4:	68fb      	ldr	r3, [r7, #12]
 800cab6:	2221      	movs	r2, #33	; 0x21
 800cab8:	2104      	movs	r1, #4
 800caba:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800cabc:	68fb      	ldr	r3, [r7, #12]
 800cabe:	2220      	movs	r2, #32
 800cac0:	2100      	movs	r1, #0
 800cac2:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 800cac4:	2301      	movs	r3, #1
 800cac6:	e034      	b.n	800cb32 <HAL_RTC_SetDate+0x14e>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800cac8:	68fb      	ldr	r3, [r7, #12]
 800caca:	681b      	ldr	r3, [r3, #0]
 800cacc:	697a      	ldr	r2, [r7, #20]
 800cace:	491b      	ldr	r1, [pc, #108]	; (800cb3c <HAL_RTC_SetDate+0x158>)
 800cad0:	400a      	ands	r2, r1
 800cad2:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800cad4:	68fb      	ldr	r3, [r7, #12]
 800cad6:	681b      	ldr	r3, [r3, #0]
 800cad8:	68da      	ldr	r2, [r3, #12]
 800cada:	68fb      	ldr	r3, [r7, #12]
 800cadc:	681b      	ldr	r3, [r3, #0]
 800cade:	2180      	movs	r1, #128	; 0x80
 800cae0:	438a      	bics	r2, r1
 800cae2:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 800cae4:	68fb      	ldr	r3, [r7, #12]
 800cae6:	681b      	ldr	r3, [r3, #0]
 800cae8:	689b      	ldr	r3, [r3, #8]
 800caea:	2220      	movs	r2, #32
 800caec:	4013      	ands	r3, r2
 800caee:	d113      	bne.n	800cb18 <HAL_RTC_SetDate+0x134>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800caf0:	68fb      	ldr	r3, [r7, #12]
 800caf2:	0018      	movs	r0, r3
 800caf4:	f000 f872 	bl	800cbdc <HAL_RTC_WaitForSynchro>
 800caf8:	1e03      	subs	r3, r0, #0
 800cafa:	d00d      	beq.n	800cb18 <HAL_RTC_SetDate+0x134>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800cafc:	68fb      	ldr	r3, [r7, #12]
 800cafe:	681b      	ldr	r3, [r3, #0]
 800cb00:	22ff      	movs	r2, #255	; 0xff
 800cb02:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800cb04:	68fb      	ldr	r3, [r7, #12]
 800cb06:	2221      	movs	r2, #33	; 0x21
 800cb08:	2104      	movs	r1, #4
 800cb0a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800cb0c:	68fb      	ldr	r3, [r7, #12]
 800cb0e:	2220      	movs	r2, #32
 800cb10:	2100      	movs	r1, #0
 800cb12:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800cb14:	2301      	movs	r3, #1
 800cb16:	e00c      	b.n	800cb32 <HAL_RTC_SetDate+0x14e>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800cb18:	68fb      	ldr	r3, [r7, #12]
 800cb1a:	681b      	ldr	r3, [r3, #0]
 800cb1c:	22ff      	movs	r2, #255	; 0xff
 800cb1e:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 800cb20:	68fb      	ldr	r3, [r7, #12]
 800cb22:	2221      	movs	r2, #33	; 0x21
 800cb24:	2101      	movs	r1, #1
 800cb26:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800cb28:	68fb      	ldr	r3, [r7, #12]
 800cb2a:	2220      	movs	r2, #32
 800cb2c:	2100      	movs	r1, #0
 800cb2e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800cb30:	2300      	movs	r3, #0
  }
}
 800cb32:	0018      	movs	r0, r3
 800cb34:	46bd      	mov	sp, r7
 800cb36:	b007      	add	sp, #28
 800cb38:	bd90      	pop	{r4, r7, pc}
 800cb3a:	46c0      	nop			; (mov r8, r8)
 800cb3c:	00ffff3f 	.word	0x00ffff3f

0800cb40 <HAL_RTC_GetDate>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800cb40:	b580      	push	{r7, lr}
 800cb42:	b086      	sub	sp, #24
 800cb44:	af00      	add	r7, sp, #0
 800cb46:	60f8      	str	r0, [r7, #12]
 800cb48:	60b9      	str	r1, [r7, #8]
 800cb4a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800cb4c:	68fb      	ldr	r3, [r7, #12]
 800cb4e:	681b      	ldr	r3, [r3, #0]
 800cb50:	685b      	ldr	r3, [r3, #4]
 800cb52:	4a21      	ldr	r2, [pc, #132]	; (800cbd8 <HAL_RTC_GetDate+0x98>)
 800cb54:	4013      	ands	r3, r2
 800cb56:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 800cb58:	697b      	ldr	r3, [r7, #20]
 800cb5a:	0c1b      	lsrs	r3, r3, #16
 800cb5c:	b2da      	uxtb	r2, r3
 800cb5e:	68bb      	ldr	r3, [r7, #8]
 800cb60:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 800cb62:	697b      	ldr	r3, [r7, #20]
 800cb64:	0a1b      	lsrs	r3, r3, #8
 800cb66:	b2db      	uxtb	r3, r3
 800cb68:	221f      	movs	r2, #31
 800cb6a:	4013      	ands	r3, r2
 800cb6c:	b2da      	uxtb	r2, r3
 800cb6e:	68bb      	ldr	r3, [r7, #8]
 800cb70:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800cb72:	697b      	ldr	r3, [r7, #20]
 800cb74:	b2db      	uxtb	r3, r3
 800cb76:	223f      	movs	r2, #63	; 0x3f
 800cb78:	4013      	ands	r3, r2
 800cb7a:	b2da      	uxtb	r2, r3
 800cb7c:	68bb      	ldr	r3, [r7, #8]
 800cb7e:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 800cb80:	697b      	ldr	r3, [r7, #20]
 800cb82:	0b5b      	lsrs	r3, r3, #13
 800cb84:	b2db      	uxtb	r3, r3
 800cb86:	2207      	movs	r2, #7
 800cb88:	4013      	ands	r3, r2
 800cb8a:	b2da      	uxtb	r2, r3
 800cb8c:	68bb      	ldr	r3, [r7, #8]
 800cb8e:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	2b00      	cmp	r3, #0
 800cb94:	d11a      	bne.n	800cbcc <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800cb96:	68bb      	ldr	r3, [r7, #8]
 800cb98:	78db      	ldrb	r3, [r3, #3]
 800cb9a:	0018      	movs	r0, r3
 800cb9c:	f000 f897 	bl	800ccce <RTC_Bcd2ToByte>
 800cba0:	0003      	movs	r3, r0
 800cba2:	001a      	movs	r2, r3
 800cba4:	68bb      	ldr	r3, [r7, #8]
 800cba6:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800cba8:	68bb      	ldr	r3, [r7, #8]
 800cbaa:	785b      	ldrb	r3, [r3, #1]
 800cbac:	0018      	movs	r0, r3
 800cbae:	f000 f88e 	bl	800ccce <RTC_Bcd2ToByte>
 800cbb2:	0003      	movs	r3, r0
 800cbb4:	001a      	movs	r2, r3
 800cbb6:	68bb      	ldr	r3, [r7, #8]
 800cbb8:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800cbba:	68bb      	ldr	r3, [r7, #8]
 800cbbc:	789b      	ldrb	r3, [r3, #2]
 800cbbe:	0018      	movs	r0, r3
 800cbc0:	f000 f885 	bl	800ccce <RTC_Bcd2ToByte>
 800cbc4:	0003      	movs	r3, r0
 800cbc6:	001a      	movs	r2, r3
 800cbc8:	68bb      	ldr	r3, [r7, #8]
 800cbca:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800cbcc:	2300      	movs	r3, #0
}
 800cbce:	0018      	movs	r0, r3
 800cbd0:	46bd      	mov	sp, r7
 800cbd2:	b006      	add	sp, #24
 800cbd4:	bd80      	pop	{r7, pc}
 800cbd6:	46c0      	nop			; (mov r8, r8)
 800cbd8:	00ffff3f 	.word	0x00ffff3f

0800cbdc <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800cbdc:	b580      	push	{r7, lr}
 800cbde:	b084      	sub	sp, #16
 800cbe0:	af00      	add	r7, sp, #0
 800cbe2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	681b      	ldr	r3, [r3, #0]
 800cbe8:	68da      	ldr	r2, [r3, #12]
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	681b      	ldr	r3, [r3, #0]
 800cbee:	21a0      	movs	r1, #160	; 0xa0
 800cbf0:	438a      	bics	r2, r1
 800cbf2:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 800cbf4:	f7fd f908 	bl	8009e08 <HAL_GetTick>
 800cbf8:	0003      	movs	r3, r0
 800cbfa:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800cbfc:	e00a      	b.n	800cc14 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800cbfe:	f7fd f903 	bl	8009e08 <HAL_GetTick>
 800cc02:	0002      	movs	r2, r0
 800cc04:	68fb      	ldr	r3, [r7, #12]
 800cc06:	1ad2      	subs	r2, r2, r3
 800cc08:	23fa      	movs	r3, #250	; 0xfa
 800cc0a:	009b      	lsls	r3, r3, #2
 800cc0c:	429a      	cmp	r2, r3
 800cc0e:	d901      	bls.n	800cc14 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800cc10:	2303      	movs	r3, #3
 800cc12:	e006      	b.n	800cc22 <HAL_RTC_WaitForSynchro+0x46>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	681b      	ldr	r3, [r3, #0]
 800cc18:	68db      	ldr	r3, [r3, #12]
 800cc1a:	2220      	movs	r2, #32
 800cc1c:	4013      	ands	r3, r2
 800cc1e:	d0ee      	beq.n	800cbfe <HAL_RTC_WaitForSynchro+0x22>
    }
  }

  return HAL_OK;
 800cc20:	2300      	movs	r3, #0
}
 800cc22:	0018      	movs	r0, r3
 800cc24:	46bd      	mov	sp, r7
 800cc26:	b004      	add	sp, #16
 800cc28:	bd80      	pop	{r7, pc}

0800cc2a <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800cc2a:	b580      	push	{r7, lr}
 800cc2c:	b084      	sub	sp, #16
 800cc2e:	af00      	add	r7, sp, #0
 800cc30:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800cc32:	687b      	ldr	r3, [r7, #4]
 800cc34:	681b      	ldr	r3, [r3, #0]
 800cc36:	68db      	ldr	r3, [r3, #12]
 800cc38:	2240      	movs	r2, #64	; 0x40
 800cc3a:	4013      	ands	r3, r2
 800cc3c:	d11a      	bne.n	800cc74 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	681b      	ldr	r3, [r3, #0]
 800cc42:	2201      	movs	r2, #1
 800cc44:	4252      	negs	r2, r2
 800cc46:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800cc48:	f7fd f8de 	bl	8009e08 <HAL_GetTick>
 800cc4c:	0003      	movs	r3, r0
 800cc4e:	60fb      	str	r3, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800cc50:	e00a      	b.n	800cc68 <RTC_EnterInitMode+0x3e>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800cc52:	f7fd f8d9 	bl	8009e08 <HAL_GetTick>
 800cc56:	0002      	movs	r2, r0
 800cc58:	68fb      	ldr	r3, [r7, #12]
 800cc5a:	1ad2      	subs	r2, r2, r3
 800cc5c:	23fa      	movs	r3, #250	; 0xfa
 800cc5e:	009b      	lsls	r3, r3, #2
 800cc60:	429a      	cmp	r2, r3
 800cc62:	d901      	bls.n	800cc68 <RTC_EnterInitMode+0x3e>
      {
        return HAL_TIMEOUT;
 800cc64:	2303      	movs	r3, #3
 800cc66:	e006      	b.n	800cc76 <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	681b      	ldr	r3, [r3, #0]
 800cc6c:	68db      	ldr	r3, [r3, #12]
 800cc6e:	2240      	movs	r2, #64	; 0x40
 800cc70:	4013      	ands	r3, r2
 800cc72:	d0ee      	beq.n	800cc52 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 800cc74:	2300      	movs	r3, #0
}
 800cc76:	0018      	movs	r0, r3
 800cc78:	46bd      	mov	sp, r7
 800cc7a:	b004      	add	sp, #16
 800cc7c:	bd80      	pop	{r7, pc}

0800cc7e <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800cc7e:	b580      	push	{r7, lr}
 800cc80:	b084      	sub	sp, #16
 800cc82:	af00      	add	r7, sp, #0
 800cc84:	0002      	movs	r2, r0
 800cc86:	1dfb      	adds	r3, r7, #7
 800cc88:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 800cc8a:	2300      	movs	r3, #0
 800cc8c:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 800cc8e:	230b      	movs	r3, #11
 800cc90:	18fb      	adds	r3, r7, r3
 800cc92:	1dfa      	adds	r2, r7, #7
 800cc94:	7812      	ldrb	r2, [r2, #0]
 800cc96:	701a      	strb	r2, [r3, #0]

  while (Param >= 10U)
 800cc98:	e008      	b.n	800ccac <RTC_ByteToBcd2+0x2e>
  {
    bcdhigh++;
 800cc9a:	68fb      	ldr	r3, [r7, #12]
 800cc9c:	3301      	adds	r3, #1
 800cc9e:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 800cca0:	220b      	movs	r2, #11
 800cca2:	18bb      	adds	r3, r7, r2
 800cca4:	18ba      	adds	r2, r7, r2
 800cca6:	7812      	ldrb	r2, [r2, #0]
 800cca8:	3a0a      	subs	r2, #10
 800ccaa:	701a      	strb	r2, [r3, #0]
  while (Param >= 10U)
 800ccac:	210b      	movs	r1, #11
 800ccae:	187b      	adds	r3, r7, r1
 800ccb0:	781b      	ldrb	r3, [r3, #0]
 800ccb2:	2b09      	cmp	r3, #9
 800ccb4:	d8f1      	bhi.n	800cc9a <RTC_ByteToBcd2+0x1c>
  }

  return ((uint8_t)(bcdhigh << 4U) | Param);
 800ccb6:	68fb      	ldr	r3, [r7, #12]
 800ccb8:	b2db      	uxtb	r3, r3
 800ccba:	011b      	lsls	r3, r3, #4
 800ccbc:	b2da      	uxtb	r2, r3
 800ccbe:	187b      	adds	r3, r7, r1
 800ccc0:	781b      	ldrb	r3, [r3, #0]
 800ccc2:	4313      	orrs	r3, r2
 800ccc4:	b2db      	uxtb	r3, r3
}
 800ccc6:	0018      	movs	r0, r3
 800ccc8:	46bd      	mov	sp, r7
 800ccca:	b004      	add	sp, #16
 800cccc:	bd80      	pop	{r7, pc}

0800ccce <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800ccce:	b580      	push	{r7, lr}
 800ccd0:	b084      	sub	sp, #16
 800ccd2:	af00      	add	r7, sp, #0
 800ccd4:	0002      	movs	r2, r0
 800ccd6:	1dfb      	adds	r3, r7, #7
 800ccd8:	701a      	strb	r2, [r3, #0]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 800ccda:	1dfb      	adds	r3, r7, #7
 800ccdc:	781b      	ldrb	r3, [r3, #0]
 800ccde:	091b      	lsrs	r3, r3, #4
 800cce0:	b2db      	uxtb	r3, r3
 800cce2:	001a      	movs	r2, r3
 800cce4:	0013      	movs	r3, r2
 800cce6:	009b      	lsls	r3, r3, #2
 800cce8:	189b      	adds	r3, r3, r2
 800ccea:	005b      	lsls	r3, r3, #1
 800ccec:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 800ccee:	68fb      	ldr	r3, [r7, #12]
 800ccf0:	b2da      	uxtb	r2, r3
 800ccf2:	1dfb      	adds	r3, r7, #7
 800ccf4:	781b      	ldrb	r3, [r3, #0]
 800ccf6:	210f      	movs	r1, #15
 800ccf8:	400b      	ands	r3, r1
 800ccfa:	b2db      	uxtb	r3, r3
 800ccfc:	18d3      	adds	r3, r2, r3
 800ccfe:	b2db      	uxtb	r3, r3
}
 800cd00:	0018      	movs	r0, r3
 800cd02:	46bd      	mov	sp, r7
 800cd04:	b004      	add	sp, #16
 800cd06:	bd80      	pop	{r7, pc}

0800cd08 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800cd08:	b580      	push	{r7, lr}
 800cd0a:	b082      	sub	sp, #8
 800cd0c:	af00      	add	r7, sp, #0
 800cd0e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	2b00      	cmp	r3, #0
 800cd14:	d101      	bne.n	800cd1a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800cd16:	2301      	movs	r3, #1
 800cd18:	e032      	b.n	800cd80 <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	2239      	movs	r2, #57	; 0x39
 800cd1e:	5c9b      	ldrb	r3, [r3, r2]
 800cd20:	b2db      	uxtb	r3, r3
 800cd22:	2b00      	cmp	r3, #0
 800cd24:	d107      	bne.n	800cd36 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	2238      	movs	r2, #56	; 0x38
 800cd2a:	2100      	movs	r1, #0
 800cd2c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800cd2e:	687b      	ldr	r3, [r7, #4]
 800cd30:	0018      	movs	r0, r3
 800cd32:	f7f4 fe29 	bl	8001988 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	2239      	movs	r2, #57	; 0x39
 800cd3a:	2102      	movs	r1, #2
 800cd3c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800cd3e:	687b      	ldr	r3, [r7, #4]
 800cd40:	681a      	ldr	r2, [r3, #0]
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	3304      	adds	r3, #4
 800cd46:	0019      	movs	r1, r3
 800cd48:	0010      	movs	r0, r2
 800cd4a:	f000 fa71 	bl	800d230 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	223e      	movs	r2, #62	; 0x3e
 800cd52:	2101      	movs	r1, #1
 800cd54:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	223a      	movs	r2, #58	; 0x3a
 800cd5a:	2101      	movs	r1, #1
 800cd5c:	5499      	strb	r1, [r3, r2]
 800cd5e:	687b      	ldr	r3, [r7, #4]
 800cd60:	223b      	movs	r2, #59	; 0x3b
 800cd62:	2101      	movs	r1, #1
 800cd64:	5499      	strb	r1, [r3, r2]
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	223c      	movs	r2, #60	; 0x3c
 800cd6a:	2101      	movs	r1, #1
 800cd6c:	5499      	strb	r1, [r3, r2]
 800cd6e:	687b      	ldr	r3, [r7, #4]
 800cd70:	223d      	movs	r2, #61	; 0x3d
 800cd72:	2101      	movs	r1, #1
 800cd74:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	2239      	movs	r2, #57	; 0x39
 800cd7a:	2101      	movs	r1, #1
 800cd7c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800cd7e:	2300      	movs	r3, #0
}
 800cd80:	0018      	movs	r0, r3
 800cd82:	46bd      	mov	sp, r7
 800cd84:	b002      	add	sp, #8
 800cd86:	bd80      	pop	{r7, pc}

0800cd88 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800cd88:	b580      	push	{r7, lr}
 800cd8a:	b084      	sub	sp, #16
 800cd8c:	af00      	add	r7, sp, #0
 800cd8e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	2239      	movs	r2, #57	; 0x39
 800cd94:	5c9b      	ldrb	r3, [r3, r2]
 800cd96:	b2db      	uxtb	r3, r3
 800cd98:	2b01      	cmp	r3, #1
 800cd9a:	d001      	beq.n	800cda0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800cd9c:	2301      	movs	r3, #1
 800cd9e:	e03b      	b.n	800ce18 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	2239      	movs	r2, #57	; 0x39
 800cda4:	2102      	movs	r1, #2
 800cda6:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800cda8:	687b      	ldr	r3, [r7, #4]
 800cdaa:	681b      	ldr	r3, [r3, #0]
 800cdac:	68da      	ldr	r2, [r3, #12]
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	681b      	ldr	r3, [r3, #0]
 800cdb2:	2101      	movs	r1, #1
 800cdb4:	430a      	orrs	r2, r1
 800cdb6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	681a      	ldr	r2, [r3, #0]
 800cdbc:	2380      	movs	r3, #128	; 0x80
 800cdbe:	05db      	lsls	r3, r3, #23
 800cdc0:	429a      	cmp	r2, r3
 800cdc2:	d00e      	beq.n	800cde2 <HAL_TIM_Base_Start_IT+0x5a>
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	681b      	ldr	r3, [r3, #0]
 800cdc8:	4a15      	ldr	r2, [pc, #84]	; (800ce20 <HAL_TIM_Base_Start_IT+0x98>)
 800cdca:	4293      	cmp	r3, r2
 800cdcc:	d009      	beq.n	800cde2 <HAL_TIM_Base_Start_IT+0x5a>
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	681b      	ldr	r3, [r3, #0]
 800cdd2:	4a14      	ldr	r2, [pc, #80]	; (800ce24 <HAL_TIM_Base_Start_IT+0x9c>)
 800cdd4:	4293      	cmp	r3, r2
 800cdd6:	d004      	beq.n	800cde2 <HAL_TIM_Base_Start_IT+0x5a>
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	681b      	ldr	r3, [r3, #0]
 800cddc:	4a12      	ldr	r2, [pc, #72]	; (800ce28 <HAL_TIM_Base_Start_IT+0xa0>)
 800cdde:	4293      	cmp	r3, r2
 800cde0:	d111      	bne.n	800ce06 <HAL_TIM_Base_Start_IT+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800cde2:	687b      	ldr	r3, [r7, #4]
 800cde4:	681b      	ldr	r3, [r3, #0]
 800cde6:	689b      	ldr	r3, [r3, #8]
 800cde8:	2207      	movs	r2, #7
 800cdea:	4013      	ands	r3, r2
 800cdec:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cdee:	68fb      	ldr	r3, [r7, #12]
 800cdf0:	2b06      	cmp	r3, #6
 800cdf2:	d010      	beq.n	800ce16 <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	681b      	ldr	r3, [r3, #0]
 800cdf8:	681a      	ldr	r2, [r3, #0]
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	681b      	ldr	r3, [r3, #0]
 800cdfe:	2101      	movs	r1, #1
 800ce00:	430a      	orrs	r2, r1
 800ce02:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ce04:	e007      	b.n	800ce16 <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ce06:	687b      	ldr	r3, [r7, #4]
 800ce08:	681b      	ldr	r3, [r3, #0]
 800ce0a:	681a      	ldr	r2, [r3, #0]
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	681b      	ldr	r3, [r3, #0]
 800ce10:	2101      	movs	r1, #1
 800ce12:	430a      	orrs	r2, r1
 800ce14:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800ce16:	2300      	movs	r3, #0
}
 800ce18:	0018      	movs	r0, r3
 800ce1a:	46bd      	mov	sp, r7
 800ce1c:	b004      	add	sp, #16
 800ce1e:	bd80      	pop	{r7, pc}
 800ce20:	40000400 	.word	0x40000400
 800ce24:	40010800 	.word	0x40010800
 800ce28:	40011400 	.word	0x40011400

0800ce2c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800ce2c:	b580      	push	{r7, lr}
 800ce2e:	b082      	sub	sp, #8
 800ce30:	af00      	add	r7, sp, #0
 800ce32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	681b      	ldr	r3, [r3, #0]
 800ce38:	68da      	ldr	r2, [r3, #12]
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	681b      	ldr	r3, [r3, #0]
 800ce3e:	2101      	movs	r1, #1
 800ce40:	438a      	bics	r2, r1
 800ce42:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	681b      	ldr	r3, [r3, #0]
 800ce48:	6a1b      	ldr	r3, [r3, #32]
 800ce4a:	4a0a      	ldr	r2, [pc, #40]	; (800ce74 <HAL_TIM_Base_Stop_IT+0x48>)
 800ce4c:	4013      	ands	r3, r2
 800ce4e:	d107      	bne.n	800ce60 <HAL_TIM_Base_Stop_IT+0x34>
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	681b      	ldr	r3, [r3, #0]
 800ce54:	681a      	ldr	r2, [r3, #0]
 800ce56:	687b      	ldr	r3, [r7, #4]
 800ce58:	681b      	ldr	r3, [r3, #0]
 800ce5a:	2101      	movs	r1, #1
 800ce5c:	438a      	bics	r2, r1
 800ce5e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	2239      	movs	r2, #57	; 0x39
 800ce64:	2101      	movs	r1, #1
 800ce66:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 800ce68:	2300      	movs	r3, #0
}
 800ce6a:	0018      	movs	r0, r3
 800ce6c:	46bd      	mov	sp, r7
 800ce6e:	b002      	add	sp, #8
 800ce70:	bd80      	pop	{r7, pc}
 800ce72:	46c0      	nop			; (mov r8, r8)
 800ce74:	00001111 	.word	0x00001111

0800ce78 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800ce78:	b580      	push	{r7, lr}
 800ce7a:	b082      	sub	sp, #8
 800ce7c:	af00      	add	r7, sp, #0
 800ce7e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	681b      	ldr	r3, [r3, #0]
 800ce84:	691b      	ldr	r3, [r3, #16]
 800ce86:	2202      	movs	r2, #2
 800ce88:	4013      	ands	r3, r2
 800ce8a:	2b02      	cmp	r3, #2
 800ce8c:	d124      	bne.n	800ced8 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	681b      	ldr	r3, [r3, #0]
 800ce92:	68db      	ldr	r3, [r3, #12]
 800ce94:	2202      	movs	r2, #2
 800ce96:	4013      	ands	r3, r2
 800ce98:	2b02      	cmp	r3, #2
 800ce9a:	d11d      	bne.n	800ced8 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	681b      	ldr	r3, [r3, #0]
 800cea0:	2203      	movs	r2, #3
 800cea2:	4252      	negs	r2, r2
 800cea4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	2201      	movs	r2, #1
 800ceaa:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	681b      	ldr	r3, [r3, #0]
 800ceb0:	699b      	ldr	r3, [r3, #24]
 800ceb2:	2203      	movs	r2, #3
 800ceb4:	4013      	ands	r3, r2
 800ceb6:	d004      	beq.n	800cec2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	0018      	movs	r0, r3
 800cebc:	f000 f9a0 	bl	800d200 <HAL_TIM_IC_CaptureCallback>
 800cec0:	e007      	b.n	800ced2 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800cec2:	687b      	ldr	r3, [r7, #4]
 800cec4:	0018      	movs	r0, r3
 800cec6:	f000 f993 	bl	800d1f0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	0018      	movs	r0, r3
 800cece:	f000 f99f 	bl	800d210 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ced2:	687b      	ldr	r3, [r7, #4]
 800ced4:	2200      	movs	r2, #0
 800ced6:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	681b      	ldr	r3, [r3, #0]
 800cedc:	691b      	ldr	r3, [r3, #16]
 800cede:	2204      	movs	r2, #4
 800cee0:	4013      	ands	r3, r2
 800cee2:	2b04      	cmp	r3, #4
 800cee4:	d125      	bne.n	800cf32 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800cee6:	687b      	ldr	r3, [r7, #4]
 800cee8:	681b      	ldr	r3, [r3, #0]
 800ceea:	68db      	ldr	r3, [r3, #12]
 800ceec:	2204      	movs	r2, #4
 800ceee:	4013      	ands	r3, r2
 800cef0:	2b04      	cmp	r3, #4
 800cef2:	d11e      	bne.n	800cf32 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	681b      	ldr	r3, [r3, #0]
 800cef8:	2205      	movs	r2, #5
 800cefa:	4252      	negs	r2, r2
 800cefc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800cefe:	687b      	ldr	r3, [r7, #4]
 800cf00:	2202      	movs	r2, #2
 800cf02:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800cf04:	687b      	ldr	r3, [r7, #4]
 800cf06:	681b      	ldr	r3, [r3, #0]
 800cf08:	699a      	ldr	r2, [r3, #24]
 800cf0a:	23c0      	movs	r3, #192	; 0xc0
 800cf0c:	009b      	lsls	r3, r3, #2
 800cf0e:	4013      	ands	r3, r2
 800cf10:	d004      	beq.n	800cf1c <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800cf12:	687b      	ldr	r3, [r7, #4]
 800cf14:	0018      	movs	r0, r3
 800cf16:	f000 f973 	bl	800d200 <HAL_TIM_IC_CaptureCallback>
 800cf1a:	e007      	b.n	800cf2c <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	0018      	movs	r0, r3
 800cf20:	f000 f966 	bl	800d1f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	0018      	movs	r0, r3
 800cf28:	f000 f972 	bl	800d210 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cf2c:	687b      	ldr	r3, [r7, #4]
 800cf2e:	2200      	movs	r2, #0
 800cf30:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800cf32:	687b      	ldr	r3, [r7, #4]
 800cf34:	681b      	ldr	r3, [r3, #0]
 800cf36:	691b      	ldr	r3, [r3, #16]
 800cf38:	2208      	movs	r2, #8
 800cf3a:	4013      	ands	r3, r2
 800cf3c:	2b08      	cmp	r3, #8
 800cf3e:	d124      	bne.n	800cf8a <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	681b      	ldr	r3, [r3, #0]
 800cf44:	68db      	ldr	r3, [r3, #12]
 800cf46:	2208      	movs	r2, #8
 800cf48:	4013      	ands	r3, r2
 800cf4a:	2b08      	cmp	r3, #8
 800cf4c:	d11d      	bne.n	800cf8a <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	681b      	ldr	r3, [r3, #0]
 800cf52:	2209      	movs	r2, #9
 800cf54:	4252      	negs	r2, r2
 800cf56:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	2204      	movs	r2, #4
 800cf5c:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800cf5e:	687b      	ldr	r3, [r7, #4]
 800cf60:	681b      	ldr	r3, [r3, #0]
 800cf62:	69db      	ldr	r3, [r3, #28]
 800cf64:	2203      	movs	r2, #3
 800cf66:	4013      	ands	r3, r2
 800cf68:	d004      	beq.n	800cf74 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	0018      	movs	r0, r3
 800cf6e:	f000 f947 	bl	800d200 <HAL_TIM_IC_CaptureCallback>
 800cf72:	e007      	b.n	800cf84 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800cf74:	687b      	ldr	r3, [r7, #4]
 800cf76:	0018      	movs	r0, r3
 800cf78:	f000 f93a 	bl	800d1f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	0018      	movs	r0, r3
 800cf80:	f000 f946 	bl	800d210 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	2200      	movs	r2, #0
 800cf88:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800cf8a:	687b      	ldr	r3, [r7, #4]
 800cf8c:	681b      	ldr	r3, [r3, #0]
 800cf8e:	691b      	ldr	r3, [r3, #16]
 800cf90:	2210      	movs	r2, #16
 800cf92:	4013      	ands	r3, r2
 800cf94:	2b10      	cmp	r3, #16
 800cf96:	d125      	bne.n	800cfe4 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	681b      	ldr	r3, [r3, #0]
 800cf9c:	68db      	ldr	r3, [r3, #12]
 800cf9e:	2210      	movs	r2, #16
 800cfa0:	4013      	ands	r3, r2
 800cfa2:	2b10      	cmp	r3, #16
 800cfa4:	d11e      	bne.n	800cfe4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800cfa6:	687b      	ldr	r3, [r7, #4]
 800cfa8:	681b      	ldr	r3, [r3, #0]
 800cfaa:	2211      	movs	r2, #17
 800cfac:	4252      	negs	r2, r2
 800cfae:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	2208      	movs	r2, #8
 800cfb4:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	681b      	ldr	r3, [r3, #0]
 800cfba:	69da      	ldr	r2, [r3, #28]
 800cfbc:	23c0      	movs	r3, #192	; 0xc0
 800cfbe:	009b      	lsls	r3, r3, #2
 800cfc0:	4013      	ands	r3, r2
 800cfc2:	d004      	beq.n	800cfce <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	0018      	movs	r0, r3
 800cfc8:	f000 f91a 	bl	800d200 <HAL_TIM_IC_CaptureCallback>
 800cfcc:	e007      	b.n	800cfde <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800cfce:	687b      	ldr	r3, [r7, #4]
 800cfd0:	0018      	movs	r0, r3
 800cfd2:	f000 f90d 	bl	800d1f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	0018      	movs	r0, r3
 800cfda:	f000 f919 	bl	800d210 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	2200      	movs	r2, #0
 800cfe2:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	681b      	ldr	r3, [r3, #0]
 800cfe8:	691b      	ldr	r3, [r3, #16]
 800cfea:	2201      	movs	r2, #1
 800cfec:	4013      	ands	r3, r2
 800cfee:	2b01      	cmp	r3, #1
 800cff0:	d10f      	bne.n	800d012 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800cff2:	687b      	ldr	r3, [r7, #4]
 800cff4:	681b      	ldr	r3, [r3, #0]
 800cff6:	68db      	ldr	r3, [r3, #12]
 800cff8:	2201      	movs	r2, #1
 800cffa:	4013      	ands	r3, r2
 800cffc:	2b01      	cmp	r3, #1
 800cffe:	d108      	bne.n	800d012 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	681b      	ldr	r3, [r3, #0]
 800d004:	2202      	movs	r2, #2
 800d006:	4252      	negs	r2, r2
 800d008:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800d00a:	687b      	ldr	r3, [r7, #4]
 800d00c:	0018      	movs	r0, r3
 800d00e:	f001 fa83 	bl	800e518 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800d012:	687b      	ldr	r3, [r7, #4]
 800d014:	681b      	ldr	r3, [r3, #0]
 800d016:	691b      	ldr	r3, [r3, #16]
 800d018:	2240      	movs	r2, #64	; 0x40
 800d01a:	4013      	ands	r3, r2
 800d01c:	2b40      	cmp	r3, #64	; 0x40
 800d01e:	d10f      	bne.n	800d040 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	681b      	ldr	r3, [r3, #0]
 800d024:	68db      	ldr	r3, [r3, #12]
 800d026:	2240      	movs	r2, #64	; 0x40
 800d028:	4013      	ands	r3, r2
 800d02a:	2b40      	cmp	r3, #64	; 0x40
 800d02c:	d108      	bne.n	800d040 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	681b      	ldr	r3, [r3, #0]
 800d032:	2241      	movs	r2, #65	; 0x41
 800d034:	4252      	negs	r2, r2
 800d036:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	0018      	movs	r0, r3
 800d03c:	f000 f8f0 	bl	800d220 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800d040:	46c0      	nop			; (mov r8, r8)
 800d042:	46bd      	mov	sp, r7
 800d044:	b002      	add	sp, #8
 800d046:	bd80      	pop	{r7, pc}

0800d048 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800d048:	b580      	push	{r7, lr}
 800d04a:	b084      	sub	sp, #16
 800d04c:	af00      	add	r7, sp, #0
 800d04e:	6078      	str	r0, [r7, #4]
 800d050:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800d052:	230f      	movs	r3, #15
 800d054:	18fb      	adds	r3, r7, r3
 800d056:	2200      	movs	r2, #0
 800d058:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	2238      	movs	r2, #56	; 0x38
 800d05e:	5c9b      	ldrb	r3, [r3, r2]
 800d060:	2b01      	cmp	r3, #1
 800d062:	d101      	bne.n	800d068 <HAL_TIM_ConfigClockSource+0x20>
 800d064:	2302      	movs	r3, #2
 800d066:	e0bc      	b.n	800d1e2 <HAL_TIM_ConfigClockSource+0x19a>
 800d068:	687b      	ldr	r3, [r7, #4]
 800d06a:	2238      	movs	r2, #56	; 0x38
 800d06c:	2101      	movs	r1, #1
 800d06e:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	2239      	movs	r2, #57	; 0x39
 800d074:	2102      	movs	r1, #2
 800d076:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	681b      	ldr	r3, [r3, #0]
 800d07c:	689b      	ldr	r3, [r3, #8]
 800d07e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800d080:	68bb      	ldr	r3, [r7, #8]
 800d082:	2277      	movs	r2, #119	; 0x77
 800d084:	4393      	bics	r3, r2
 800d086:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d088:	68bb      	ldr	r3, [r7, #8]
 800d08a:	4a58      	ldr	r2, [pc, #352]	; (800d1ec <HAL_TIM_ConfigClockSource+0x1a4>)
 800d08c:	4013      	ands	r3, r2
 800d08e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	681b      	ldr	r3, [r3, #0]
 800d094:	68ba      	ldr	r2, [r7, #8]
 800d096:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800d098:	683b      	ldr	r3, [r7, #0]
 800d09a:	681b      	ldr	r3, [r3, #0]
 800d09c:	2280      	movs	r2, #128	; 0x80
 800d09e:	0192      	lsls	r2, r2, #6
 800d0a0:	4293      	cmp	r3, r2
 800d0a2:	d040      	beq.n	800d126 <HAL_TIM_ConfigClockSource+0xde>
 800d0a4:	2280      	movs	r2, #128	; 0x80
 800d0a6:	0192      	lsls	r2, r2, #6
 800d0a8:	4293      	cmp	r3, r2
 800d0aa:	d900      	bls.n	800d0ae <HAL_TIM_ConfigClockSource+0x66>
 800d0ac:	e088      	b.n	800d1c0 <HAL_TIM_ConfigClockSource+0x178>
 800d0ae:	2280      	movs	r2, #128	; 0x80
 800d0b0:	0152      	lsls	r2, r2, #5
 800d0b2:	4293      	cmp	r3, r2
 800d0b4:	d100      	bne.n	800d0b8 <HAL_TIM_ConfigClockSource+0x70>
 800d0b6:	e088      	b.n	800d1ca <HAL_TIM_ConfigClockSource+0x182>
 800d0b8:	2280      	movs	r2, #128	; 0x80
 800d0ba:	0152      	lsls	r2, r2, #5
 800d0bc:	4293      	cmp	r3, r2
 800d0be:	d900      	bls.n	800d0c2 <HAL_TIM_ConfigClockSource+0x7a>
 800d0c0:	e07e      	b.n	800d1c0 <HAL_TIM_ConfigClockSource+0x178>
 800d0c2:	2b70      	cmp	r3, #112	; 0x70
 800d0c4:	d018      	beq.n	800d0f8 <HAL_TIM_ConfigClockSource+0xb0>
 800d0c6:	d900      	bls.n	800d0ca <HAL_TIM_ConfigClockSource+0x82>
 800d0c8:	e07a      	b.n	800d1c0 <HAL_TIM_ConfigClockSource+0x178>
 800d0ca:	2b60      	cmp	r3, #96	; 0x60
 800d0cc:	d04f      	beq.n	800d16e <HAL_TIM_ConfigClockSource+0x126>
 800d0ce:	d900      	bls.n	800d0d2 <HAL_TIM_ConfigClockSource+0x8a>
 800d0d0:	e076      	b.n	800d1c0 <HAL_TIM_ConfigClockSource+0x178>
 800d0d2:	2b50      	cmp	r3, #80	; 0x50
 800d0d4:	d03b      	beq.n	800d14e <HAL_TIM_ConfigClockSource+0x106>
 800d0d6:	d900      	bls.n	800d0da <HAL_TIM_ConfigClockSource+0x92>
 800d0d8:	e072      	b.n	800d1c0 <HAL_TIM_ConfigClockSource+0x178>
 800d0da:	2b40      	cmp	r3, #64	; 0x40
 800d0dc:	d057      	beq.n	800d18e <HAL_TIM_ConfigClockSource+0x146>
 800d0de:	d900      	bls.n	800d0e2 <HAL_TIM_ConfigClockSource+0x9a>
 800d0e0:	e06e      	b.n	800d1c0 <HAL_TIM_ConfigClockSource+0x178>
 800d0e2:	2b30      	cmp	r3, #48	; 0x30
 800d0e4:	d063      	beq.n	800d1ae <HAL_TIM_ConfigClockSource+0x166>
 800d0e6:	d86b      	bhi.n	800d1c0 <HAL_TIM_ConfigClockSource+0x178>
 800d0e8:	2b20      	cmp	r3, #32
 800d0ea:	d060      	beq.n	800d1ae <HAL_TIM_ConfigClockSource+0x166>
 800d0ec:	d868      	bhi.n	800d1c0 <HAL_TIM_ConfigClockSource+0x178>
 800d0ee:	2b00      	cmp	r3, #0
 800d0f0:	d05d      	beq.n	800d1ae <HAL_TIM_ConfigClockSource+0x166>
 800d0f2:	2b10      	cmp	r3, #16
 800d0f4:	d05b      	beq.n	800d1ae <HAL_TIM_ConfigClockSource+0x166>
 800d0f6:	e063      	b.n	800d1c0 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800d0f8:	687b      	ldr	r3, [r7, #4]
 800d0fa:	6818      	ldr	r0, [r3, #0]
 800d0fc:	683b      	ldr	r3, [r7, #0]
 800d0fe:	6899      	ldr	r1, [r3, #8]
 800d100:	683b      	ldr	r3, [r7, #0]
 800d102:	685a      	ldr	r2, [r3, #4]
 800d104:	683b      	ldr	r3, [r7, #0]
 800d106:	68db      	ldr	r3, [r3, #12]
 800d108:	f000 f96a 	bl	800d3e0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800d10c:	687b      	ldr	r3, [r7, #4]
 800d10e:	681b      	ldr	r3, [r3, #0]
 800d110:	689b      	ldr	r3, [r3, #8]
 800d112:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800d114:	68bb      	ldr	r3, [r7, #8]
 800d116:	2277      	movs	r2, #119	; 0x77
 800d118:	4313      	orrs	r3, r2
 800d11a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800d11c:	687b      	ldr	r3, [r7, #4]
 800d11e:	681b      	ldr	r3, [r3, #0]
 800d120:	68ba      	ldr	r2, [r7, #8]
 800d122:	609a      	str	r2, [r3, #8]
      break;
 800d124:	e052      	b.n	800d1cc <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	6818      	ldr	r0, [r3, #0]
 800d12a:	683b      	ldr	r3, [r7, #0]
 800d12c:	6899      	ldr	r1, [r3, #8]
 800d12e:	683b      	ldr	r3, [r7, #0]
 800d130:	685a      	ldr	r2, [r3, #4]
 800d132:	683b      	ldr	r3, [r7, #0]
 800d134:	68db      	ldr	r3, [r3, #12]
 800d136:	f000 f953 	bl	800d3e0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800d13a:	687b      	ldr	r3, [r7, #4]
 800d13c:	681b      	ldr	r3, [r3, #0]
 800d13e:	689a      	ldr	r2, [r3, #8]
 800d140:	687b      	ldr	r3, [r7, #4]
 800d142:	681b      	ldr	r3, [r3, #0]
 800d144:	2180      	movs	r1, #128	; 0x80
 800d146:	01c9      	lsls	r1, r1, #7
 800d148:	430a      	orrs	r2, r1
 800d14a:	609a      	str	r2, [r3, #8]
      break;
 800d14c:	e03e      	b.n	800d1cc <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800d14e:	687b      	ldr	r3, [r7, #4]
 800d150:	6818      	ldr	r0, [r3, #0]
 800d152:	683b      	ldr	r3, [r7, #0]
 800d154:	6859      	ldr	r1, [r3, #4]
 800d156:	683b      	ldr	r3, [r7, #0]
 800d158:	68db      	ldr	r3, [r3, #12]
 800d15a:	001a      	movs	r2, r3
 800d15c:	f000 f8c6 	bl	800d2ec <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800d160:	687b      	ldr	r3, [r7, #4]
 800d162:	681b      	ldr	r3, [r3, #0]
 800d164:	2150      	movs	r1, #80	; 0x50
 800d166:	0018      	movs	r0, r3
 800d168:	f000 f920 	bl	800d3ac <TIM_ITRx_SetConfig>
      break;
 800d16c:	e02e      	b.n	800d1cc <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800d16e:	687b      	ldr	r3, [r7, #4]
 800d170:	6818      	ldr	r0, [r3, #0]
 800d172:	683b      	ldr	r3, [r7, #0]
 800d174:	6859      	ldr	r1, [r3, #4]
 800d176:	683b      	ldr	r3, [r7, #0]
 800d178:	68db      	ldr	r3, [r3, #12]
 800d17a:	001a      	movs	r2, r3
 800d17c:	f000 f8e4 	bl	800d348 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	681b      	ldr	r3, [r3, #0]
 800d184:	2160      	movs	r1, #96	; 0x60
 800d186:	0018      	movs	r0, r3
 800d188:	f000 f910 	bl	800d3ac <TIM_ITRx_SetConfig>
      break;
 800d18c:	e01e      	b.n	800d1cc <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800d18e:	687b      	ldr	r3, [r7, #4]
 800d190:	6818      	ldr	r0, [r3, #0]
 800d192:	683b      	ldr	r3, [r7, #0]
 800d194:	6859      	ldr	r1, [r3, #4]
 800d196:	683b      	ldr	r3, [r7, #0]
 800d198:	68db      	ldr	r3, [r3, #12]
 800d19a:	001a      	movs	r2, r3
 800d19c:	f000 f8a6 	bl	800d2ec <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	681b      	ldr	r3, [r3, #0]
 800d1a4:	2140      	movs	r1, #64	; 0x40
 800d1a6:	0018      	movs	r0, r3
 800d1a8:	f000 f900 	bl	800d3ac <TIM_ITRx_SetConfig>
      break;
 800d1ac:	e00e      	b.n	800d1cc <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800d1ae:	687b      	ldr	r3, [r7, #4]
 800d1b0:	681a      	ldr	r2, [r3, #0]
 800d1b2:	683b      	ldr	r3, [r7, #0]
 800d1b4:	681b      	ldr	r3, [r3, #0]
 800d1b6:	0019      	movs	r1, r3
 800d1b8:	0010      	movs	r0, r2
 800d1ba:	f000 f8f7 	bl	800d3ac <TIM_ITRx_SetConfig>
      break;
 800d1be:	e005      	b.n	800d1cc <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 800d1c0:	230f      	movs	r3, #15
 800d1c2:	18fb      	adds	r3, r7, r3
 800d1c4:	2201      	movs	r2, #1
 800d1c6:	701a      	strb	r2, [r3, #0]
      break;
 800d1c8:	e000      	b.n	800d1cc <HAL_TIM_ConfigClockSource+0x184>
      break;
 800d1ca:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	2239      	movs	r2, #57	; 0x39
 800d1d0:	2101      	movs	r1, #1
 800d1d2:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800d1d4:	687b      	ldr	r3, [r7, #4]
 800d1d6:	2238      	movs	r2, #56	; 0x38
 800d1d8:	2100      	movs	r1, #0
 800d1da:	5499      	strb	r1, [r3, r2]

  return status;
 800d1dc:	230f      	movs	r3, #15
 800d1de:	18fb      	adds	r3, r7, r3
 800d1e0:	781b      	ldrb	r3, [r3, #0]
}
 800d1e2:	0018      	movs	r0, r3
 800d1e4:	46bd      	mov	sp, r7
 800d1e6:	b004      	add	sp, #16
 800d1e8:	bd80      	pop	{r7, pc}
 800d1ea:	46c0      	nop			; (mov r8, r8)
 800d1ec:	ffff00ff 	.word	0xffff00ff

0800d1f0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800d1f0:	b580      	push	{r7, lr}
 800d1f2:	b082      	sub	sp, #8
 800d1f4:	af00      	add	r7, sp, #0
 800d1f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800d1f8:	46c0      	nop			; (mov r8, r8)
 800d1fa:	46bd      	mov	sp, r7
 800d1fc:	b002      	add	sp, #8
 800d1fe:	bd80      	pop	{r7, pc}

0800d200 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800d200:	b580      	push	{r7, lr}
 800d202:	b082      	sub	sp, #8
 800d204:	af00      	add	r7, sp, #0
 800d206:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800d208:	46c0      	nop			; (mov r8, r8)
 800d20a:	46bd      	mov	sp, r7
 800d20c:	b002      	add	sp, #8
 800d20e:	bd80      	pop	{r7, pc}

0800d210 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800d210:	b580      	push	{r7, lr}
 800d212:	b082      	sub	sp, #8
 800d214:	af00      	add	r7, sp, #0
 800d216:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800d218:	46c0      	nop			; (mov r8, r8)
 800d21a:	46bd      	mov	sp, r7
 800d21c:	b002      	add	sp, #8
 800d21e:	bd80      	pop	{r7, pc}

0800d220 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800d220:	b580      	push	{r7, lr}
 800d222:	b082      	sub	sp, #8
 800d224:	af00      	add	r7, sp, #0
 800d226:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800d228:	46c0      	nop			; (mov r8, r8)
 800d22a:	46bd      	mov	sp, r7
 800d22c:	b002      	add	sp, #8
 800d22e:	bd80      	pop	{r7, pc}

0800d230 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800d230:	b580      	push	{r7, lr}
 800d232:	b084      	sub	sp, #16
 800d234:	af00      	add	r7, sp, #0
 800d236:	6078      	str	r0, [r7, #4]
 800d238:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800d23a:	687b      	ldr	r3, [r7, #4]
 800d23c:	681b      	ldr	r3, [r3, #0]
 800d23e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d240:	687a      	ldr	r2, [r7, #4]
 800d242:	2380      	movs	r3, #128	; 0x80
 800d244:	05db      	lsls	r3, r3, #23
 800d246:	429a      	cmp	r2, r3
 800d248:	d00b      	beq.n	800d262 <TIM_Base_SetConfig+0x32>
 800d24a:	687b      	ldr	r3, [r7, #4]
 800d24c:	4a23      	ldr	r2, [pc, #140]	; (800d2dc <TIM_Base_SetConfig+0xac>)
 800d24e:	4293      	cmp	r3, r2
 800d250:	d007      	beq.n	800d262 <TIM_Base_SetConfig+0x32>
 800d252:	687b      	ldr	r3, [r7, #4]
 800d254:	4a22      	ldr	r2, [pc, #136]	; (800d2e0 <TIM_Base_SetConfig+0xb0>)
 800d256:	4293      	cmp	r3, r2
 800d258:	d003      	beq.n	800d262 <TIM_Base_SetConfig+0x32>
 800d25a:	687b      	ldr	r3, [r7, #4]
 800d25c:	4a21      	ldr	r2, [pc, #132]	; (800d2e4 <TIM_Base_SetConfig+0xb4>)
 800d25e:	4293      	cmp	r3, r2
 800d260:	d108      	bne.n	800d274 <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800d262:	68fb      	ldr	r3, [r7, #12]
 800d264:	2270      	movs	r2, #112	; 0x70
 800d266:	4393      	bics	r3, r2
 800d268:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800d26a:	683b      	ldr	r3, [r7, #0]
 800d26c:	685b      	ldr	r3, [r3, #4]
 800d26e:	68fa      	ldr	r2, [r7, #12]
 800d270:	4313      	orrs	r3, r2
 800d272:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800d274:	687a      	ldr	r2, [r7, #4]
 800d276:	2380      	movs	r3, #128	; 0x80
 800d278:	05db      	lsls	r3, r3, #23
 800d27a:	429a      	cmp	r2, r3
 800d27c:	d00b      	beq.n	800d296 <TIM_Base_SetConfig+0x66>
 800d27e:	687b      	ldr	r3, [r7, #4]
 800d280:	4a16      	ldr	r2, [pc, #88]	; (800d2dc <TIM_Base_SetConfig+0xac>)
 800d282:	4293      	cmp	r3, r2
 800d284:	d007      	beq.n	800d296 <TIM_Base_SetConfig+0x66>
 800d286:	687b      	ldr	r3, [r7, #4]
 800d288:	4a15      	ldr	r2, [pc, #84]	; (800d2e0 <TIM_Base_SetConfig+0xb0>)
 800d28a:	4293      	cmp	r3, r2
 800d28c:	d003      	beq.n	800d296 <TIM_Base_SetConfig+0x66>
 800d28e:	687b      	ldr	r3, [r7, #4]
 800d290:	4a14      	ldr	r2, [pc, #80]	; (800d2e4 <TIM_Base_SetConfig+0xb4>)
 800d292:	4293      	cmp	r3, r2
 800d294:	d108      	bne.n	800d2a8 <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800d296:	68fb      	ldr	r3, [r7, #12]
 800d298:	4a13      	ldr	r2, [pc, #76]	; (800d2e8 <TIM_Base_SetConfig+0xb8>)
 800d29a:	4013      	ands	r3, r2
 800d29c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800d29e:	683b      	ldr	r3, [r7, #0]
 800d2a0:	68db      	ldr	r3, [r3, #12]
 800d2a2:	68fa      	ldr	r2, [r7, #12]
 800d2a4:	4313      	orrs	r3, r2
 800d2a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800d2a8:	68fb      	ldr	r3, [r7, #12]
 800d2aa:	2280      	movs	r2, #128	; 0x80
 800d2ac:	4393      	bics	r3, r2
 800d2ae:	001a      	movs	r2, r3
 800d2b0:	683b      	ldr	r3, [r7, #0]
 800d2b2:	691b      	ldr	r3, [r3, #16]
 800d2b4:	4313      	orrs	r3, r2
 800d2b6:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	68fa      	ldr	r2, [r7, #12]
 800d2bc:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800d2be:	683b      	ldr	r3, [r7, #0]
 800d2c0:	689a      	ldr	r2, [r3, #8]
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800d2c6:	683b      	ldr	r3, [r7, #0]
 800d2c8:	681a      	ldr	r2, [r3, #0]
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800d2ce:	687b      	ldr	r3, [r7, #4]
 800d2d0:	2201      	movs	r2, #1
 800d2d2:	615a      	str	r2, [r3, #20]
}
 800d2d4:	46c0      	nop			; (mov r8, r8)
 800d2d6:	46bd      	mov	sp, r7
 800d2d8:	b004      	add	sp, #16
 800d2da:	bd80      	pop	{r7, pc}
 800d2dc:	40000400 	.word	0x40000400
 800d2e0:	40010800 	.word	0x40010800
 800d2e4:	40011400 	.word	0x40011400
 800d2e8:	fffffcff 	.word	0xfffffcff

0800d2ec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d2ec:	b580      	push	{r7, lr}
 800d2ee:	b086      	sub	sp, #24
 800d2f0:	af00      	add	r7, sp, #0
 800d2f2:	60f8      	str	r0, [r7, #12]
 800d2f4:	60b9      	str	r1, [r7, #8]
 800d2f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800d2f8:	68fb      	ldr	r3, [r7, #12]
 800d2fa:	6a1b      	ldr	r3, [r3, #32]
 800d2fc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d2fe:	68fb      	ldr	r3, [r7, #12]
 800d300:	6a1b      	ldr	r3, [r3, #32]
 800d302:	2201      	movs	r2, #1
 800d304:	4393      	bics	r3, r2
 800d306:	001a      	movs	r2, r3
 800d308:	68fb      	ldr	r3, [r7, #12]
 800d30a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d30c:	68fb      	ldr	r3, [r7, #12]
 800d30e:	699b      	ldr	r3, [r3, #24]
 800d310:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800d312:	693b      	ldr	r3, [r7, #16]
 800d314:	22f0      	movs	r2, #240	; 0xf0
 800d316:	4393      	bics	r3, r2
 800d318:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	011b      	lsls	r3, r3, #4
 800d31e:	693a      	ldr	r2, [r7, #16]
 800d320:	4313      	orrs	r3, r2
 800d322:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800d324:	697b      	ldr	r3, [r7, #20]
 800d326:	220a      	movs	r2, #10
 800d328:	4393      	bics	r3, r2
 800d32a:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800d32c:	697a      	ldr	r2, [r7, #20]
 800d32e:	68bb      	ldr	r3, [r7, #8]
 800d330:	4313      	orrs	r3, r2
 800d332:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800d334:	68fb      	ldr	r3, [r7, #12]
 800d336:	693a      	ldr	r2, [r7, #16]
 800d338:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d33a:	68fb      	ldr	r3, [r7, #12]
 800d33c:	697a      	ldr	r2, [r7, #20]
 800d33e:	621a      	str	r2, [r3, #32]
}
 800d340:	46c0      	nop			; (mov r8, r8)
 800d342:	46bd      	mov	sp, r7
 800d344:	b006      	add	sp, #24
 800d346:	bd80      	pop	{r7, pc}

0800d348 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d348:	b580      	push	{r7, lr}
 800d34a:	b086      	sub	sp, #24
 800d34c:	af00      	add	r7, sp, #0
 800d34e:	60f8      	str	r0, [r7, #12]
 800d350:	60b9      	str	r1, [r7, #8]
 800d352:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d354:	68fb      	ldr	r3, [r7, #12]
 800d356:	6a1b      	ldr	r3, [r3, #32]
 800d358:	2210      	movs	r2, #16
 800d35a:	4393      	bics	r3, r2
 800d35c:	001a      	movs	r2, r3
 800d35e:	68fb      	ldr	r3, [r7, #12]
 800d360:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d362:	68fb      	ldr	r3, [r7, #12]
 800d364:	699b      	ldr	r3, [r3, #24]
 800d366:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800d368:	68fb      	ldr	r3, [r7, #12]
 800d36a:	6a1b      	ldr	r3, [r3, #32]
 800d36c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800d36e:	697b      	ldr	r3, [r7, #20]
 800d370:	4a0d      	ldr	r2, [pc, #52]	; (800d3a8 <TIM_TI2_ConfigInputStage+0x60>)
 800d372:	4013      	ands	r3, r2
 800d374:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800d376:	687b      	ldr	r3, [r7, #4]
 800d378:	031b      	lsls	r3, r3, #12
 800d37a:	697a      	ldr	r2, [r7, #20]
 800d37c:	4313      	orrs	r3, r2
 800d37e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800d380:	693b      	ldr	r3, [r7, #16]
 800d382:	22a0      	movs	r2, #160	; 0xa0
 800d384:	4393      	bics	r3, r2
 800d386:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800d388:	68bb      	ldr	r3, [r7, #8]
 800d38a:	011b      	lsls	r3, r3, #4
 800d38c:	693a      	ldr	r2, [r7, #16]
 800d38e:	4313      	orrs	r3, r2
 800d390:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800d392:	68fb      	ldr	r3, [r7, #12]
 800d394:	697a      	ldr	r2, [r7, #20]
 800d396:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d398:	68fb      	ldr	r3, [r7, #12]
 800d39a:	693a      	ldr	r2, [r7, #16]
 800d39c:	621a      	str	r2, [r3, #32]
}
 800d39e:	46c0      	nop			; (mov r8, r8)
 800d3a0:	46bd      	mov	sp, r7
 800d3a2:	b006      	add	sp, #24
 800d3a4:	bd80      	pop	{r7, pc}
 800d3a6:	46c0      	nop			; (mov r8, r8)
 800d3a8:	ffff0fff 	.word	0xffff0fff

0800d3ac <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800d3ac:	b580      	push	{r7, lr}
 800d3ae:	b084      	sub	sp, #16
 800d3b0:	af00      	add	r7, sp, #0
 800d3b2:	6078      	str	r0, [r7, #4]
 800d3b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800d3b6:	687b      	ldr	r3, [r7, #4]
 800d3b8:	689b      	ldr	r3, [r3, #8]
 800d3ba:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800d3bc:	68fb      	ldr	r3, [r7, #12]
 800d3be:	2270      	movs	r2, #112	; 0x70
 800d3c0:	4393      	bics	r3, r2
 800d3c2:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800d3c4:	683a      	ldr	r2, [r7, #0]
 800d3c6:	68fb      	ldr	r3, [r7, #12]
 800d3c8:	4313      	orrs	r3, r2
 800d3ca:	2207      	movs	r2, #7
 800d3cc:	4313      	orrs	r3, r2
 800d3ce:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d3d0:	687b      	ldr	r3, [r7, #4]
 800d3d2:	68fa      	ldr	r2, [r7, #12]
 800d3d4:	609a      	str	r2, [r3, #8]
}
 800d3d6:	46c0      	nop			; (mov r8, r8)
 800d3d8:	46bd      	mov	sp, r7
 800d3da:	b004      	add	sp, #16
 800d3dc:	bd80      	pop	{r7, pc}
	...

0800d3e0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800d3e0:	b580      	push	{r7, lr}
 800d3e2:	b086      	sub	sp, #24
 800d3e4:	af00      	add	r7, sp, #0
 800d3e6:	60f8      	str	r0, [r7, #12]
 800d3e8:	60b9      	str	r1, [r7, #8]
 800d3ea:	607a      	str	r2, [r7, #4]
 800d3ec:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800d3ee:	68fb      	ldr	r3, [r7, #12]
 800d3f0:	689b      	ldr	r3, [r3, #8]
 800d3f2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d3f4:	697b      	ldr	r3, [r7, #20]
 800d3f6:	4a09      	ldr	r2, [pc, #36]	; (800d41c <TIM_ETR_SetConfig+0x3c>)
 800d3f8:	4013      	ands	r3, r2
 800d3fa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800d3fc:	683b      	ldr	r3, [r7, #0]
 800d3fe:	021a      	lsls	r2, r3, #8
 800d400:	687b      	ldr	r3, [r7, #4]
 800d402:	431a      	orrs	r2, r3
 800d404:	68bb      	ldr	r3, [r7, #8]
 800d406:	4313      	orrs	r3, r2
 800d408:	697a      	ldr	r2, [r7, #20]
 800d40a:	4313      	orrs	r3, r2
 800d40c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d40e:	68fb      	ldr	r3, [r7, #12]
 800d410:	697a      	ldr	r2, [r7, #20]
 800d412:	609a      	str	r2, [r3, #8]
}
 800d414:	46c0      	nop			; (mov r8, r8)
 800d416:	46bd      	mov	sp, r7
 800d418:	b006      	add	sp, #24
 800d41a:	bd80      	pop	{r7, pc}
 800d41c:	ffff00ff 	.word	0xffff00ff

0800d420 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800d420:	b580      	push	{r7, lr}
 800d422:	b084      	sub	sp, #16
 800d424:	af00      	add	r7, sp, #0
 800d426:	6078      	str	r0, [r7, #4]
 800d428:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	2238      	movs	r2, #56	; 0x38
 800d42e:	5c9b      	ldrb	r3, [r3, r2]
 800d430:	2b01      	cmp	r3, #1
 800d432:	d101      	bne.n	800d438 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800d434:	2302      	movs	r3, #2
 800d436:	e047      	b.n	800d4c8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 800d438:	687b      	ldr	r3, [r7, #4]
 800d43a:	2238      	movs	r2, #56	; 0x38
 800d43c:	2101      	movs	r1, #1
 800d43e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d440:	687b      	ldr	r3, [r7, #4]
 800d442:	2239      	movs	r2, #57	; 0x39
 800d444:	2102      	movs	r1, #2
 800d446:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800d448:	687b      	ldr	r3, [r7, #4]
 800d44a:	681b      	ldr	r3, [r3, #0]
 800d44c:	685b      	ldr	r3, [r3, #4]
 800d44e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800d450:	687b      	ldr	r3, [r7, #4]
 800d452:	681b      	ldr	r3, [r3, #0]
 800d454:	689b      	ldr	r3, [r3, #8]
 800d456:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800d458:	68fb      	ldr	r3, [r7, #12]
 800d45a:	2270      	movs	r2, #112	; 0x70
 800d45c:	4393      	bics	r3, r2
 800d45e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800d460:	683b      	ldr	r3, [r7, #0]
 800d462:	681b      	ldr	r3, [r3, #0]
 800d464:	68fa      	ldr	r2, [r7, #12]
 800d466:	4313      	orrs	r3, r2
 800d468:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800d46a:	687b      	ldr	r3, [r7, #4]
 800d46c:	681b      	ldr	r3, [r3, #0]
 800d46e:	68fa      	ldr	r2, [r7, #12]
 800d470:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	681a      	ldr	r2, [r3, #0]
 800d476:	2380      	movs	r3, #128	; 0x80
 800d478:	05db      	lsls	r3, r3, #23
 800d47a:	429a      	cmp	r2, r3
 800d47c:	d00e      	beq.n	800d49c <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 800d47e:	687b      	ldr	r3, [r7, #4]
 800d480:	681b      	ldr	r3, [r3, #0]
 800d482:	4a13      	ldr	r2, [pc, #76]	; (800d4d0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800d484:	4293      	cmp	r3, r2
 800d486:	d009      	beq.n	800d49c <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	681b      	ldr	r3, [r3, #0]
 800d48c:	4a11      	ldr	r2, [pc, #68]	; (800d4d4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800d48e:	4293      	cmp	r3, r2
 800d490:	d004      	beq.n	800d49c <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 800d492:	687b      	ldr	r3, [r7, #4]
 800d494:	681b      	ldr	r3, [r3, #0]
 800d496:	4a10      	ldr	r2, [pc, #64]	; (800d4d8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800d498:	4293      	cmp	r3, r2
 800d49a:	d10c      	bne.n	800d4b6 <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800d49c:	68bb      	ldr	r3, [r7, #8]
 800d49e:	2280      	movs	r2, #128	; 0x80
 800d4a0:	4393      	bics	r3, r2
 800d4a2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800d4a4:	683b      	ldr	r3, [r7, #0]
 800d4a6:	685b      	ldr	r3, [r3, #4]
 800d4a8:	68ba      	ldr	r2, [r7, #8]
 800d4aa:	4313      	orrs	r3, r2
 800d4ac:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800d4ae:	687b      	ldr	r3, [r7, #4]
 800d4b0:	681b      	ldr	r3, [r3, #0]
 800d4b2:	68ba      	ldr	r2, [r7, #8]
 800d4b4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800d4b6:	687b      	ldr	r3, [r7, #4]
 800d4b8:	2239      	movs	r2, #57	; 0x39
 800d4ba:	2101      	movs	r1, #1
 800d4bc:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800d4be:	687b      	ldr	r3, [r7, #4]
 800d4c0:	2238      	movs	r2, #56	; 0x38
 800d4c2:	2100      	movs	r1, #0
 800d4c4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800d4c6:	2300      	movs	r3, #0
}
 800d4c8:	0018      	movs	r0, r3
 800d4ca:	46bd      	mov	sp, r7
 800d4cc:	b004      	add	sp, #16
 800d4ce:	bd80      	pop	{r7, pc}
 800d4d0:	40000400 	.word	0x40000400
 800d4d4:	40010800 	.word	0x40010800
 800d4d8:	40011400 	.word	0x40011400

0800d4dc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800d4dc:	b580      	push	{r7, lr}
 800d4de:	b082      	sub	sp, #8
 800d4e0:	af00      	add	r7, sp, #0
 800d4e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800d4e4:	687b      	ldr	r3, [r7, #4]
 800d4e6:	2b00      	cmp	r3, #0
 800d4e8:	d101      	bne.n	800d4ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800d4ea:	2301      	movs	r3, #1
 800d4ec:	e044      	b.n	800d578 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800d4ee:	687b      	ldr	r3, [r7, #4]
 800d4f0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d4f2:	2b00      	cmp	r3, #0
 800d4f4:	d107      	bne.n	800d506 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800d4f6:	687b      	ldr	r3, [r7, #4]
 800d4f8:	2274      	movs	r2, #116	; 0x74
 800d4fa:	2100      	movs	r1, #0
 800d4fc:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800d4fe:	687b      	ldr	r3, [r7, #4]
 800d500:	0018      	movs	r0, r3
 800d502:	f000 f83f 	bl	800d584 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800d506:	687b      	ldr	r3, [r7, #4]
 800d508:	2224      	movs	r2, #36	; 0x24
 800d50a:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800d50c:	687b      	ldr	r3, [r7, #4]
 800d50e:	681b      	ldr	r3, [r3, #0]
 800d510:	681a      	ldr	r2, [r3, #0]
 800d512:	687b      	ldr	r3, [r7, #4]
 800d514:	681b      	ldr	r3, [r3, #0]
 800d516:	2101      	movs	r1, #1
 800d518:	438a      	bics	r2, r1
 800d51a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800d51c:	687b      	ldr	r3, [r7, #4]
 800d51e:	0018      	movs	r0, r3
 800d520:	f000 f96c 	bl	800d7fc <UART_SetConfig>
 800d524:	0003      	movs	r3, r0
 800d526:	2b01      	cmp	r3, #1
 800d528:	d101      	bne.n	800d52e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800d52a:	2301      	movs	r3, #1
 800d52c:	e024      	b.n	800d578 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800d52e:	687b      	ldr	r3, [r7, #4]
 800d530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d532:	2b00      	cmp	r3, #0
 800d534:	d003      	beq.n	800d53e <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 800d536:	687b      	ldr	r3, [r7, #4]
 800d538:	0018      	movs	r0, r3
 800d53a:	f000 fbff 	bl	800dd3c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800d53e:	687b      	ldr	r3, [r7, #4]
 800d540:	681b      	ldr	r3, [r3, #0]
 800d542:	685a      	ldr	r2, [r3, #4]
 800d544:	687b      	ldr	r3, [r7, #4]
 800d546:	681b      	ldr	r3, [r3, #0]
 800d548:	490d      	ldr	r1, [pc, #52]	; (800d580 <HAL_UART_Init+0xa4>)
 800d54a:	400a      	ands	r2, r1
 800d54c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800d54e:	687b      	ldr	r3, [r7, #4]
 800d550:	681b      	ldr	r3, [r3, #0]
 800d552:	689a      	ldr	r2, [r3, #8]
 800d554:	687b      	ldr	r3, [r7, #4]
 800d556:	681b      	ldr	r3, [r3, #0]
 800d558:	212a      	movs	r1, #42	; 0x2a
 800d55a:	438a      	bics	r2, r1
 800d55c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800d55e:	687b      	ldr	r3, [r7, #4]
 800d560:	681b      	ldr	r3, [r3, #0]
 800d562:	681a      	ldr	r2, [r3, #0]
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	681b      	ldr	r3, [r3, #0]
 800d568:	2101      	movs	r1, #1
 800d56a:	430a      	orrs	r2, r1
 800d56c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800d56e:	687b      	ldr	r3, [r7, #4]
 800d570:	0018      	movs	r0, r3
 800d572:	f000 fc97 	bl	800dea4 <UART_CheckIdleState>
 800d576:	0003      	movs	r3, r0
}
 800d578:	0018      	movs	r0, r3
 800d57a:	46bd      	mov	sp, r7
 800d57c:	b002      	add	sp, #8
 800d57e:	bd80      	pop	{r7, pc}
 800d580:	ffffb7ff 	.word	0xffffb7ff

0800d584 <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 800d584:	b580      	push	{r7, lr}
 800d586:	b082      	sub	sp, #8
 800d588:	af00      	add	r7, sp, #0
 800d58a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 800d58c:	46c0      	nop			; (mov r8, r8)
 800d58e:	46bd      	mov	sp, r7
 800d590:	b002      	add	sp, #8
 800d592:	bd80      	pop	{r7, pc}

0800d594 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d594:	b580      	push	{r7, lr}
 800d596:	b08a      	sub	sp, #40	; 0x28
 800d598:	af02      	add	r7, sp, #8
 800d59a:	60f8      	str	r0, [r7, #12]
 800d59c:	60b9      	str	r1, [r7, #8]
 800d59e:	603b      	str	r3, [r7, #0]
 800d5a0:	1dbb      	adds	r3, r7, #6
 800d5a2:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800d5a4:	68fb      	ldr	r3, [r7, #12]
 800d5a6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d5a8:	2b20      	cmp	r3, #32
 800d5aa:	d000      	beq.n	800d5ae <HAL_UART_Transmit+0x1a>
 800d5ac:	e095      	b.n	800d6da <HAL_UART_Transmit+0x146>
  {
    if ((pData == NULL) || (Size == 0U))
 800d5ae:	68bb      	ldr	r3, [r7, #8]
 800d5b0:	2b00      	cmp	r3, #0
 800d5b2:	d003      	beq.n	800d5bc <HAL_UART_Transmit+0x28>
 800d5b4:	1dbb      	adds	r3, r7, #6
 800d5b6:	881b      	ldrh	r3, [r3, #0]
 800d5b8:	2b00      	cmp	r3, #0
 800d5ba:	d101      	bne.n	800d5c0 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800d5bc:	2301      	movs	r3, #1
 800d5be:	e08d      	b.n	800d6dc <HAL_UART_Transmit+0x148>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d5c0:	68fb      	ldr	r3, [r7, #12]
 800d5c2:	689a      	ldr	r2, [r3, #8]
 800d5c4:	2380      	movs	r3, #128	; 0x80
 800d5c6:	015b      	lsls	r3, r3, #5
 800d5c8:	429a      	cmp	r2, r3
 800d5ca:	d109      	bne.n	800d5e0 <HAL_UART_Transmit+0x4c>
 800d5cc:	68fb      	ldr	r3, [r7, #12]
 800d5ce:	691b      	ldr	r3, [r3, #16]
 800d5d0:	2b00      	cmp	r3, #0
 800d5d2:	d105      	bne.n	800d5e0 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800d5d4:	68bb      	ldr	r3, [r7, #8]
 800d5d6:	2201      	movs	r2, #1
 800d5d8:	4013      	ands	r3, r2
 800d5da:	d001      	beq.n	800d5e0 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 800d5dc:	2301      	movs	r3, #1
 800d5de:	e07d      	b.n	800d6dc <HAL_UART_Transmit+0x148>
      }
    }

    __HAL_LOCK(huart);
 800d5e0:	68fb      	ldr	r3, [r7, #12]
 800d5e2:	2274      	movs	r2, #116	; 0x74
 800d5e4:	5c9b      	ldrb	r3, [r3, r2]
 800d5e6:	2b01      	cmp	r3, #1
 800d5e8:	d101      	bne.n	800d5ee <HAL_UART_Transmit+0x5a>
 800d5ea:	2302      	movs	r3, #2
 800d5ec:	e076      	b.n	800d6dc <HAL_UART_Transmit+0x148>
 800d5ee:	68fb      	ldr	r3, [r7, #12]
 800d5f0:	2274      	movs	r2, #116	; 0x74
 800d5f2:	2101      	movs	r1, #1
 800d5f4:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d5f6:	68fb      	ldr	r3, [r7, #12]
 800d5f8:	2280      	movs	r2, #128	; 0x80
 800d5fa:	2100      	movs	r1, #0
 800d5fc:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800d5fe:	68fb      	ldr	r3, [r7, #12]
 800d600:	2221      	movs	r2, #33	; 0x21
 800d602:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800d604:	f7fc fc00 	bl	8009e08 <HAL_GetTick>
 800d608:	0003      	movs	r3, r0
 800d60a:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800d60c:	68fb      	ldr	r3, [r7, #12]
 800d60e:	1dba      	adds	r2, r7, #6
 800d610:	2150      	movs	r1, #80	; 0x50
 800d612:	8812      	ldrh	r2, [r2, #0]
 800d614:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800d616:	68fb      	ldr	r3, [r7, #12]
 800d618:	1dba      	adds	r2, r7, #6
 800d61a:	2152      	movs	r1, #82	; 0x52
 800d61c:	8812      	ldrh	r2, [r2, #0]
 800d61e:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d620:	68fb      	ldr	r3, [r7, #12]
 800d622:	689a      	ldr	r2, [r3, #8]
 800d624:	2380      	movs	r3, #128	; 0x80
 800d626:	015b      	lsls	r3, r3, #5
 800d628:	429a      	cmp	r2, r3
 800d62a:	d108      	bne.n	800d63e <HAL_UART_Transmit+0xaa>
 800d62c:	68fb      	ldr	r3, [r7, #12]
 800d62e:	691b      	ldr	r3, [r3, #16]
 800d630:	2b00      	cmp	r3, #0
 800d632:	d104      	bne.n	800d63e <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 800d634:	2300      	movs	r3, #0
 800d636:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800d638:	68bb      	ldr	r3, [r7, #8]
 800d63a:	61bb      	str	r3, [r7, #24]
 800d63c:	e003      	b.n	800d646 <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 800d63e:	68bb      	ldr	r3, [r7, #8]
 800d640:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800d642:	2300      	movs	r3, #0
 800d644:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800d646:	68fb      	ldr	r3, [r7, #12]
 800d648:	2274      	movs	r2, #116	; 0x74
 800d64a:	2100      	movs	r1, #0
 800d64c:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 800d64e:	e02c      	b.n	800d6aa <HAL_UART_Transmit+0x116>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800d650:	697a      	ldr	r2, [r7, #20]
 800d652:	68f8      	ldr	r0, [r7, #12]
 800d654:	683b      	ldr	r3, [r7, #0]
 800d656:	9300      	str	r3, [sp, #0]
 800d658:	0013      	movs	r3, r2
 800d65a:	2200      	movs	r2, #0
 800d65c:	2180      	movs	r1, #128	; 0x80
 800d65e:	f000 fc69 	bl	800df34 <UART_WaitOnFlagUntilTimeout>
 800d662:	1e03      	subs	r3, r0, #0
 800d664:	d001      	beq.n	800d66a <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 800d666:	2303      	movs	r3, #3
 800d668:	e038      	b.n	800d6dc <HAL_UART_Transmit+0x148>
      }
      if (pdata8bits == NULL)
 800d66a:	69fb      	ldr	r3, [r7, #28]
 800d66c:	2b00      	cmp	r3, #0
 800d66e:	d10b      	bne.n	800d688 <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800d670:	69bb      	ldr	r3, [r7, #24]
 800d672:	881b      	ldrh	r3, [r3, #0]
 800d674:	001a      	movs	r2, r3
 800d676:	68fb      	ldr	r3, [r7, #12]
 800d678:	681b      	ldr	r3, [r3, #0]
 800d67a:	05d2      	lsls	r2, r2, #23
 800d67c:	0dd2      	lsrs	r2, r2, #23
 800d67e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800d680:	69bb      	ldr	r3, [r7, #24]
 800d682:	3302      	adds	r3, #2
 800d684:	61bb      	str	r3, [r7, #24]
 800d686:	e007      	b.n	800d698 <HAL_UART_Transmit+0x104>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800d688:	69fb      	ldr	r3, [r7, #28]
 800d68a:	781a      	ldrb	r2, [r3, #0]
 800d68c:	68fb      	ldr	r3, [r7, #12]
 800d68e:	681b      	ldr	r3, [r3, #0]
 800d690:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800d692:	69fb      	ldr	r3, [r7, #28]
 800d694:	3301      	adds	r3, #1
 800d696:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800d698:	68fb      	ldr	r3, [r7, #12]
 800d69a:	2252      	movs	r2, #82	; 0x52
 800d69c:	5a9b      	ldrh	r3, [r3, r2]
 800d69e:	b29b      	uxth	r3, r3
 800d6a0:	3b01      	subs	r3, #1
 800d6a2:	b299      	uxth	r1, r3
 800d6a4:	68fb      	ldr	r3, [r7, #12]
 800d6a6:	2252      	movs	r2, #82	; 0x52
 800d6a8:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 800d6aa:	68fb      	ldr	r3, [r7, #12]
 800d6ac:	2252      	movs	r2, #82	; 0x52
 800d6ae:	5a9b      	ldrh	r3, [r3, r2]
 800d6b0:	b29b      	uxth	r3, r3
 800d6b2:	2b00      	cmp	r3, #0
 800d6b4:	d1cc      	bne.n	800d650 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800d6b6:	697a      	ldr	r2, [r7, #20]
 800d6b8:	68f8      	ldr	r0, [r7, #12]
 800d6ba:	683b      	ldr	r3, [r7, #0]
 800d6bc:	9300      	str	r3, [sp, #0]
 800d6be:	0013      	movs	r3, r2
 800d6c0:	2200      	movs	r2, #0
 800d6c2:	2140      	movs	r1, #64	; 0x40
 800d6c4:	f000 fc36 	bl	800df34 <UART_WaitOnFlagUntilTimeout>
 800d6c8:	1e03      	subs	r3, r0, #0
 800d6ca:	d001      	beq.n	800d6d0 <HAL_UART_Transmit+0x13c>
    {
      return HAL_TIMEOUT;
 800d6cc:	2303      	movs	r3, #3
 800d6ce:	e005      	b.n	800d6dc <HAL_UART_Transmit+0x148>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800d6d0:	68fb      	ldr	r3, [r7, #12]
 800d6d2:	2220      	movs	r2, #32
 800d6d4:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800d6d6:	2300      	movs	r3, #0
 800d6d8:	e000      	b.n	800d6dc <HAL_UART_Transmit+0x148>
  }
  else
  {
    return HAL_BUSY;
 800d6da:	2302      	movs	r3, #2
  }
}
 800d6dc:	0018      	movs	r0, r3
 800d6de:	46bd      	mov	sp, r7
 800d6e0:	b008      	add	sp, #32
 800d6e2:	bd80      	pop	{r7, pc}

0800d6e4 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800d6e4:	b580      	push	{r7, lr}
 800d6e6:	b088      	sub	sp, #32
 800d6e8:	af00      	add	r7, sp, #0
 800d6ea:	60f8      	str	r0, [r7, #12]
 800d6ec:	60b9      	str	r1, [r7, #8]
 800d6ee:	1dbb      	adds	r3, r7, #6
 800d6f0:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800d6f2:	68fb      	ldr	r3, [r7, #12]
 800d6f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d6f6:	2b20      	cmp	r3, #32
 800d6f8:	d155      	bne.n	800d7a6 <HAL_UART_Receive_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 800d6fa:	68bb      	ldr	r3, [r7, #8]
 800d6fc:	2b00      	cmp	r3, #0
 800d6fe:	d003      	beq.n	800d708 <HAL_UART_Receive_DMA+0x24>
 800d700:	1dbb      	adds	r3, r7, #6
 800d702:	881b      	ldrh	r3, [r3, #0]
 800d704:	2b00      	cmp	r3, #0
 800d706:	d101      	bne.n	800d70c <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800d708:	2301      	movs	r3, #1
 800d70a:	e04d      	b.n	800d7a8 <HAL_UART_Receive_DMA+0xc4>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy from RDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d70c:	68fb      	ldr	r3, [r7, #12]
 800d70e:	689a      	ldr	r2, [r3, #8]
 800d710:	2380      	movs	r3, #128	; 0x80
 800d712:	015b      	lsls	r3, r3, #5
 800d714:	429a      	cmp	r2, r3
 800d716:	d109      	bne.n	800d72c <HAL_UART_Receive_DMA+0x48>
 800d718:	68fb      	ldr	r3, [r7, #12]
 800d71a:	691b      	ldr	r3, [r3, #16]
 800d71c:	2b00      	cmp	r3, #0
 800d71e:	d105      	bne.n	800d72c <HAL_UART_Receive_DMA+0x48>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800d720:	68bb      	ldr	r3, [r7, #8]
 800d722:	2201      	movs	r2, #1
 800d724:	4013      	ands	r3, r2
 800d726:	d001      	beq.n	800d72c <HAL_UART_Receive_DMA+0x48>
      {
        return  HAL_ERROR;
 800d728:	2301      	movs	r3, #1
 800d72a:	e03d      	b.n	800d7a8 <HAL_UART_Receive_DMA+0xc4>
      }
    }

    __HAL_LOCK(huart);
 800d72c:	68fb      	ldr	r3, [r7, #12]
 800d72e:	2274      	movs	r2, #116	; 0x74
 800d730:	5c9b      	ldrb	r3, [r3, r2]
 800d732:	2b01      	cmp	r3, #1
 800d734:	d101      	bne.n	800d73a <HAL_UART_Receive_DMA+0x56>
 800d736:	2302      	movs	r3, #2
 800d738:	e036      	b.n	800d7a8 <HAL_UART_Receive_DMA+0xc4>
 800d73a:	68fb      	ldr	r3, [r7, #12]
 800d73c:	2274      	movs	r2, #116	; 0x74
 800d73e:	2101      	movs	r1, #1
 800d740:	5499      	strb	r1, [r3, r2]

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d742:	68fb      	ldr	r3, [r7, #12]
 800d744:	2200      	movs	r2, #0
 800d746:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800d748:	68fb      	ldr	r3, [r7, #12]
 800d74a:	681b      	ldr	r3, [r3, #0]
 800d74c:	4a18      	ldr	r2, [pc, #96]	; (800d7b0 <HAL_UART_Receive_DMA+0xcc>)
 800d74e:	4293      	cmp	r3, r2
 800d750:	d020      	beq.n	800d794 <HAL_UART_Receive_DMA+0xb0>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800d752:	68fb      	ldr	r3, [r7, #12]
 800d754:	681b      	ldr	r3, [r3, #0]
 800d756:	685a      	ldr	r2, [r3, #4]
 800d758:	2380      	movs	r3, #128	; 0x80
 800d75a:	041b      	lsls	r3, r3, #16
 800d75c:	4013      	ands	r3, r2
 800d75e:	d019      	beq.n	800d794 <HAL_UART_Receive_DMA+0xb0>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d760:	f3ef 8310 	mrs	r3, PRIMASK
 800d764:	613b      	str	r3, [r7, #16]
  return(result);
 800d766:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800d768:	61fb      	str	r3, [r7, #28]
 800d76a:	2301      	movs	r3, #1
 800d76c:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d76e:	697b      	ldr	r3, [r7, #20]
 800d770:	f383 8810 	msr	PRIMASK, r3
}
 800d774:	46c0      	nop			; (mov r8, r8)
 800d776:	68fb      	ldr	r3, [r7, #12]
 800d778:	681b      	ldr	r3, [r3, #0]
 800d77a:	681a      	ldr	r2, [r3, #0]
 800d77c:	68fb      	ldr	r3, [r7, #12]
 800d77e:	681b      	ldr	r3, [r3, #0]
 800d780:	2180      	movs	r1, #128	; 0x80
 800d782:	04c9      	lsls	r1, r1, #19
 800d784:	430a      	orrs	r2, r1
 800d786:	601a      	str	r2, [r3, #0]
 800d788:	69fb      	ldr	r3, [r7, #28]
 800d78a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d78c:	69bb      	ldr	r3, [r7, #24]
 800d78e:	f383 8810 	msr	PRIMASK, r3
}
 800d792:	46c0      	nop			; (mov r8, r8)
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800d794:	1dbb      	adds	r3, r7, #6
 800d796:	881a      	ldrh	r2, [r3, #0]
 800d798:	68b9      	ldr	r1, [r7, #8]
 800d79a:	68fb      	ldr	r3, [r7, #12]
 800d79c:	0018      	movs	r0, r3
 800d79e:	f000 fc8d 	bl	800e0bc <UART_Start_Receive_DMA>
 800d7a2:	0003      	movs	r3, r0
 800d7a4:	e000      	b.n	800d7a8 <HAL_UART_Receive_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 800d7a6:	2302      	movs	r3, #2
  }
}
 800d7a8:	0018      	movs	r0, r3
 800d7aa:	46bd      	mov	sp, r7
 800d7ac:	b008      	add	sp, #32
 800d7ae:	bd80      	pop	{r7, pc}
 800d7b0:	40004800 	.word	0x40004800

0800d7b4 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800d7b4:	b580      	push	{r7, lr}
 800d7b6:	b082      	sub	sp, #8
 800d7b8:	af00      	add	r7, sp, #0
 800d7ba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800d7bc:	46c0      	nop			; (mov r8, r8)
 800d7be:	46bd      	mov	sp, r7
 800d7c0:	b002      	add	sp, #8
 800d7c2:	bd80      	pop	{r7, pc}

0800d7c4 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800d7c4:	b580      	push	{r7, lr}
 800d7c6:	b082      	sub	sp, #8
 800d7c8:	af00      	add	r7, sp, #0
 800d7ca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800d7cc:	46c0      	nop			; (mov r8, r8)
 800d7ce:	46bd      	mov	sp, r7
 800d7d0:	b002      	add	sp, #8
 800d7d2:	bd80      	pop	{r7, pc}

0800d7d4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800d7d4:	b580      	push	{r7, lr}
 800d7d6:	b082      	sub	sp, #8
 800d7d8:	af00      	add	r7, sp, #0
 800d7da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800d7dc:	46c0      	nop			; (mov r8, r8)
 800d7de:	46bd      	mov	sp, r7
 800d7e0:	b002      	add	sp, #8
 800d7e2:	bd80      	pop	{r7, pc}

0800d7e4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800d7e4:	b580      	push	{r7, lr}
 800d7e6:	b082      	sub	sp, #8
 800d7e8:	af00      	add	r7, sp, #0
 800d7ea:	6078      	str	r0, [r7, #4]
 800d7ec:	000a      	movs	r2, r1
 800d7ee:	1cbb      	adds	r3, r7, #2
 800d7f0:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800d7f2:	46c0      	nop			; (mov r8, r8)
 800d7f4:	46bd      	mov	sp, r7
 800d7f6:	b002      	add	sp, #8
 800d7f8:	bd80      	pop	{r7, pc}
	...

0800d7fc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d7fc:	b5b0      	push	{r4, r5, r7, lr}
 800d7fe:	b08e      	sub	sp, #56	; 0x38
 800d800:	af00      	add	r7, sp, #0
 800d802:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800d804:	231a      	movs	r3, #26
 800d806:	2218      	movs	r2, #24
 800d808:	189b      	adds	r3, r3, r2
 800d80a:	19db      	adds	r3, r3, r7
 800d80c:	2200      	movs	r2, #0
 800d80e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800d810:	69fb      	ldr	r3, [r7, #28]
 800d812:	689a      	ldr	r2, [r3, #8]
 800d814:	69fb      	ldr	r3, [r7, #28]
 800d816:	691b      	ldr	r3, [r3, #16]
 800d818:	431a      	orrs	r2, r3
 800d81a:	69fb      	ldr	r3, [r7, #28]
 800d81c:	695b      	ldr	r3, [r3, #20]
 800d81e:	431a      	orrs	r2, r3
 800d820:	69fb      	ldr	r3, [r7, #28]
 800d822:	69db      	ldr	r3, [r3, #28]
 800d824:	4313      	orrs	r3, r2
 800d826:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800d828:	69fb      	ldr	r3, [r7, #28]
 800d82a:	681b      	ldr	r3, [r3, #0]
 800d82c:	681b      	ldr	r3, [r3, #0]
 800d82e:	4ac3      	ldr	r2, [pc, #780]	; (800db3c <UART_SetConfig+0x340>)
 800d830:	4013      	ands	r3, r2
 800d832:	0019      	movs	r1, r3
 800d834:	69fb      	ldr	r3, [r7, #28]
 800d836:	681b      	ldr	r3, [r3, #0]
 800d838:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d83a:	430a      	orrs	r2, r1
 800d83c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d83e:	69fb      	ldr	r3, [r7, #28]
 800d840:	681b      	ldr	r3, [r3, #0]
 800d842:	685b      	ldr	r3, [r3, #4]
 800d844:	4abe      	ldr	r2, [pc, #760]	; (800db40 <UART_SetConfig+0x344>)
 800d846:	4013      	ands	r3, r2
 800d848:	0019      	movs	r1, r3
 800d84a:	69fb      	ldr	r3, [r7, #28]
 800d84c:	68da      	ldr	r2, [r3, #12]
 800d84e:	69fb      	ldr	r3, [r7, #28]
 800d850:	681b      	ldr	r3, [r3, #0]
 800d852:	430a      	orrs	r2, r1
 800d854:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800d856:	69fb      	ldr	r3, [r7, #28]
 800d858:	699b      	ldr	r3, [r3, #24]
 800d85a:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800d85c:	69fb      	ldr	r3, [r7, #28]
 800d85e:	681b      	ldr	r3, [r3, #0]
 800d860:	4ab8      	ldr	r2, [pc, #736]	; (800db44 <UART_SetConfig+0x348>)
 800d862:	4293      	cmp	r3, r2
 800d864:	d004      	beq.n	800d870 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800d866:	69fb      	ldr	r3, [r7, #28]
 800d868:	6a1b      	ldr	r3, [r3, #32]
 800d86a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d86c:	4313      	orrs	r3, r2
 800d86e:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800d870:	69fb      	ldr	r3, [r7, #28]
 800d872:	681b      	ldr	r3, [r3, #0]
 800d874:	689b      	ldr	r3, [r3, #8]
 800d876:	4ab4      	ldr	r2, [pc, #720]	; (800db48 <UART_SetConfig+0x34c>)
 800d878:	4013      	ands	r3, r2
 800d87a:	0019      	movs	r1, r3
 800d87c:	69fb      	ldr	r3, [r7, #28]
 800d87e:	681b      	ldr	r3, [r3, #0]
 800d880:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d882:	430a      	orrs	r2, r1
 800d884:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800d886:	69fb      	ldr	r3, [r7, #28]
 800d888:	681b      	ldr	r3, [r3, #0]
 800d88a:	4ab0      	ldr	r2, [pc, #704]	; (800db4c <UART_SetConfig+0x350>)
 800d88c:	4293      	cmp	r3, r2
 800d88e:	d131      	bne.n	800d8f4 <UART_SetConfig+0xf8>
 800d890:	4baf      	ldr	r3, [pc, #700]	; (800db50 <UART_SetConfig+0x354>)
 800d892:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d894:	2203      	movs	r2, #3
 800d896:	4013      	ands	r3, r2
 800d898:	2b03      	cmp	r3, #3
 800d89a:	d01d      	beq.n	800d8d8 <UART_SetConfig+0xdc>
 800d89c:	d823      	bhi.n	800d8e6 <UART_SetConfig+0xea>
 800d89e:	2b02      	cmp	r3, #2
 800d8a0:	d00c      	beq.n	800d8bc <UART_SetConfig+0xc0>
 800d8a2:	d820      	bhi.n	800d8e6 <UART_SetConfig+0xea>
 800d8a4:	2b00      	cmp	r3, #0
 800d8a6:	d002      	beq.n	800d8ae <UART_SetConfig+0xb2>
 800d8a8:	2b01      	cmp	r3, #1
 800d8aa:	d00e      	beq.n	800d8ca <UART_SetConfig+0xce>
 800d8ac:	e01b      	b.n	800d8e6 <UART_SetConfig+0xea>
 800d8ae:	231b      	movs	r3, #27
 800d8b0:	2218      	movs	r2, #24
 800d8b2:	189b      	adds	r3, r3, r2
 800d8b4:	19db      	adds	r3, r3, r7
 800d8b6:	2201      	movs	r2, #1
 800d8b8:	701a      	strb	r2, [r3, #0]
 800d8ba:	e0b4      	b.n	800da26 <UART_SetConfig+0x22a>
 800d8bc:	231b      	movs	r3, #27
 800d8be:	2218      	movs	r2, #24
 800d8c0:	189b      	adds	r3, r3, r2
 800d8c2:	19db      	adds	r3, r3, r7
 800d8c4:	2202      	movs	r2, #2
 800d8c6:	701a      	strb	r2, [r3, #0]
 800d8c8:	e0ad      	b.n	800da26 <UART_SetConfig+0x22a>
 800d8ca:	231b      	movs	r3, #27
 800d8cc:	2218      	movs	r2, #24
 800d8ce:	189b      	adds	r3, r3, r2
 800d8d0:	19db      	adds	r3, r3, r7
 800d8d2:	2204      	movs	r2, #4
 800d8d4:	701a      	strb	r2, [r3, #0]
 800d8d6:	e0a6      	b.n	800da26 <UART_SetConfig+0x22a>
 800d8d8:	231b      	movs	r3, #27
 800d8da:	2218      	movs	r2, #24
 800d8dc:	189b      	adds	r3, r3, r2
 800d8de:	19db      	adds	r3, r3, r7
 800d8e0:	2208      	movs	r2, #8
 800d8e2:	701a      	strb	r2, [r3, #0]
 800d8e4:	e09f      	b.n	800da26 <UART_SetConfig+0x22a>
 800d8e6:	231b      	movs	r3, #27
 800d8e8:	2218      	movs	r2, #24
 800d8ea:	189b      	adds	r3, r3, r2
 800d8ec:	19db      	adds	r3, r3, r7
 800d8ee:	2210      	movs	r2, #16
 800d8f0:	701a      	strb	r2, [r3, #0]
 800d8f2:	e098      	b.n	800da26 <UART_SetConfig+0x22a>
 800d8f4:	69fb      	ldr	r3, [r7, #28]
 800d8f6:	681b      	ldr	r3, [r3, #0]
 800d8f8:	4a96      	ldr	r2, [pc, #600]	; (800db54 <UART_SetConfig+0x358>)
 800d8fa:	4293      	cmp	r3, r2
 800d8fc:	d131      	bne.n	800d962 <UART_SetConfig+0x166>
 800d8fe:	4b94      	ldr	r3, [pc, #592]	; (800db50 <UART_SetConfig+0x354>)
 800d900:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d902:	220c      	movs	r2, #12
 800d904:	4013      	ands	r3, r2
 800d906:	2b0c      	cmp	r3, #12
 800d908:	d01d      	beq.n	800d946 <UART_SetConfig+0x14a>
 800d90a:	d823      	bhi.n	800d954 <UART_SetConfig+0x158>
 800d90c:	2b08      	cmp	r3, #8
 800d90e:	d00c      	beq.n	800d92a <UART_SetConfig+0x12e>
 800d910:	d820      	bhi.n	800d954 <UART_SetConfig+0x158>
 800d912:	2b00      	cmp	r3, #0
 800d914:	d002      	beq.n	800d91c <UART_SetConfig+0x120>
 800d916:	2b04      	cmp	r3, #4
 800d918:	d00e      	beq.n	800d938 <UART_SetConfig+0x13c>
 800d91a:	e01b      	b.n	800d954 <UART_SetConfig+0x158>
 800d91c:	231b      	movs	r3, #27
 800d91e:	2218      	movs	r2, #24
 800d920:	189b      	adds	r3, r3, r2
 800d922:	19db      	adds	r3, r3, r7
 800d924:	2200      	movs	r2, #0
 800d926:	701a      	strb	r2, [r3, #0]
 800d928:	e07d      	b.n	800da26 <UART_SetConfig+0x22a>
 800d92a:	231b      	movs	r3, #27
 800d92c:	2218      	movs	r2, #24
 800d92e:	189b      	adds	r3, r3, r2
 800d930:	19db      	adds	r3, r3, r7
 800d932:	2202      	movs	r2, #2
 800d934:	701a      	strb	r2, [r3, #0]
 800d936:	e076      	b.n	800da26 <UART_SetConfig+0x22a>
 800d938:	231b      	movs	r3, #27
 800d93a:	2218      	movs	r2, #24
 800d93c:	189b      	adds	r3, r3, r2
 800d93e:	19db      	adds	r3, r3, r7
 800d940:	2204      	movs	r2, #4
 800d942:	701a      	strb	r2, [r3, #0]
 800d944:	e06f      	b.n	800da26 <UART_SetConfig+0x22a>
 800d946:	231b      	movs	r3, #27
 800d948:	2218      	movs	r2, #24
 800d94a:	189b      	adds	r3, r3, r2
 800d94c:	19db      	adds	r3, r3, r7
 800d94e:	2208      	movs	r2, #8
 800d950:	701a      	strb	r2, [r3, #0]
 800d952:	e068      	b.n	800da26 <UART_SetConfig+0x22a>
 800d954:	231b      	movs	r3, #27
 800d956:	2218      	movs	r2, #24
 800d958:	189b      	adds	r3, r3, r2
 800d95a:	19db      	adds	r3, r3, r7
 800d95c:	2210      	movs	r2, #16
 800d95e:	701a      	strb	r2, [r3, #0]
 800d960:	e061      	b.n	800da26 <UART_SetConfig+0x22a>
 800d962:	69fb      	ldr	r3, [r7, #28]
 800d964:	681b      	ldr	r3, [r3, #0]
 800d966:	4a7c      	ldr	r2, [pc, #496]	; (800db58 <UART_SetConfig+0x35c>)
 800d968:	4293      	cmp	r3, r2
 800d96a:	d106      	bne.n	800d97a <UART_SetConfig+0x17e>
 800d96c:	231b      	movs	r3, #27
 800d96e:	2218      	movs	r2, #24
 800d970:	189b      	adds	r3, r3, r2
 800d972:	19db      	adds	r3, r3, r7
 800d974:	2200      	movs	r2, #0
 800d976:	701a      	strb	r2, [r3, #0]
 800d978:	e055      	b.n	800da26 <UART_SetConfig+0x22a>
 800d97a:	69fb      	ldr	r3, [r7, #28]
 800d97c:	681b      	ldr	r3, [r3, #0]
 800d97e:	4a77      	ldr	r2, [pc, #476]	; (800db5c <UART_SetConfig+0x360>)
 800d980:	4293      	cmp	r3, r2
 800d982:	d106      	bne.n	800d992 <UART_SetConfig+0x196>
 800d984:	231b      	movs	r3, #27
 800d986:	2218      	movs	r2, #24
 800d988:	189b      	adds	r3, r3, r2
 800d98a:	19db      	adds	r3, r3, r7
 800d98c:	2200      	movs	r2, #0
 800d98e:	701a      	strb	r2, [r3, #0]
 800d990:	e049      	b.n	800da26 <UART_SetConfig+0x22a>
 800d992:	69fb      	ldr	r3, [r7, #28]
 800d994:	681b      	ldr	r3, [r3, #0]
 800d996:	4a6b      	ldr	r2, [pc, #428]	; (800db44 <UART_SetConfig+0x348>)
 800d998:	4293      	cmp	r3, r2
 800d99a:	d13e      	bne.n	800da1a <UART_SetConfig+0x21e>
 800d99c:	4b6c      	ldr	r3, [pc, #432]	; (800db50 <UART_SetConfig+0x354>)
 800d99e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d9a0:	23c0      	movs	r3, #192	; 0xc0
 800d9a2:	011b      	lsls	r3, r3, #4
 800d9a4:	4013      	ands	r3, r2
 800d9a6:	22c0      	movs	r2, #192	; 0xc0
 800d9a8:	0112      	lsls	r2, r2, #4
 800d9aa:	4293      	cmp	r3, r2
 800d9ac:	d027      	beq.n	800d9fe <UART_SetConfig+0x202>
 800d9ae:	22c0      	movs	r2, #192	; 0xc0
 800d9b0:	0112      	lsls	r2, r2, #4
 800d9b2:	4293      	cmp	r3, r2
 800d9b4:	d82a      	bhi.n	800da0c <UART_SetConfig+0x210>
 800d9b6:	2280      	movs	r2, #128	; 0x80
 800d9b8:	0112      	lsls	r2, r2, #4
 800d9ba:	4293      	cmp	r3, r2
 800d9bc:	d011      	beq.n	800d9e2 <UART_SetConfig+0x1e6>
 800d9be:	2280      	movs	r2, #128	; 0x80
 800d9c0:	0112      	lsls	r2, r2, #4
 800d9c2:	4293      	cmp	r3, r2
 800d9c4:	d822      	bhi.n	800da0c <UART_SetConfig+0x210>
 800d9c6:	2b00      	cmp	r3, #0
 800d9c8:	d004      	beq.n	800d9d4 <UART_SetConfig+0x1d8>
 800d9ca:	2280      	movs	r2, #128	; 0x80
 800d9cc:	00d2      	lsls	r2, r2, #3
 800d9ce:	4293      	cmp	r3, r2
 800d9d0:	d00e      	beq.n	800d9f0 <UART_SetConfig+0x1f4>
 800d9d2:	e01b      	b.n	800da0c <UART_SetConfig+0x210>
 800d9d4:	231b      	movs	r3, #27
 800d9d6:	2218      	movs	r2, #24
 800d9d8:	189b      	adds	r3, r3, r2
 800d9da:	19db      	adds	r3, r3, r7
 800d9dc:	2200      	movs	r2, #0
 800d9de:	701a      	strb	r2, [r3, #0]
 800d9e0:	e021      	b.n	800da26 <UART_SetConfig+0x22a>
 800d9e2:	231b      	movs	r3, #27
 800d9e4:	2218      	movs	r2, #24
 800d9e6:	189b      	adds	r3, r3, r2
 800d9e8:	19db      	adds	r3, r3, r7
 800d9ea:	2202      	movs	r2, #2
 800d9ec:	701a      	strb	r2, [r3, #0]
 800d9ee:	e01a      	b.n	800da26 <UART_SetConfig+0x22a>
 800d9f0:	231b      	movs	r3, #27
 800d9f2:	2218      	movs	r2, #24
 800d9f4:	189b      	adds	r3, r3, r2
 800d9f6:	19db      	adds	r3, r3, r7
 800d9f8:	2204      	movs	r2, #4
 800d9fa:	701a      	strb	r2, [r3, #0]
 800d9fc:	e013      	b.n	800da26 <UART_SetConfig+0x22a>
 800d9fe:	231b      	movs	r3, #27
 800da00:	2218      	movs	r2, #24
 800da02:	189b      	adds	r3, r3, r2
 800da04:	19db      	adds	r3, r3, r7
 800da06:	2208      	movs	r2, #8
 800da08:	701a      	strb	r2, [r3, #0]
 800da0a:	e00c      	b.n	800da26 <UART_SetConfig+0x22a>
 800da0c:	231b      	movs	r3, #27
 800da0e:	2218      	movs	r2, #24
 800da10:	189b      	adds	r3, r3, r2
 800da12:	19db      	adds	r3, r3, r7
 800da14:	2210      	movs	r2, #16
 800da16:	701a      	strb	r2, [r3, #0]
 800da18:	e005      	b.n	800da26 <UART_SetConfig+0x22a>
 800da1a:	231b      	movs	r3, #27
 800da1c:	2218      	movs	r2, #24
 800da1e:	189b      	adds	r3, r3, r2
 800da20:	19db      	adds	r3, r3, r7
 800da22:	2210      	movs	r2, #16
 800da24:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800da26:	69fb      	ldr	r3, [r7, #28]
 800da28:	681b      	ldr	r3, [r3, #0]
 800da2a:	4a46      	ldr	r2, [pc, #280]	; (800db44 <UART_SetConfig+0x348>)
 800da2c:	4293      	cmp	r3, r2
 800da2e:	d000      	beq.n	800da32 <UART_SetConfig+0x236>
 800da30:	e09a      	b.n	800db68 <UART_SetConfig+0x36c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800da32:	231b      	movs	r3, #27
 800da34:	2218      	movs	r2, #24
 800da36:	189b      	adds	r3, r3, r2
 800da38:	19db      	adds	r3, r3, r7
 800da3a:	781b      	ldrb	r3, [r3, #0]
 800da3c:	2b08      	cmp	r3, #8
 800da3e:	d01d      	beq.n	800da7c <UART_SetConfig+0x280>
 800da40:	dc20      	bgt.n	800da84 <UART_SetConfig+0x288>
 800da42:	2b04      	cmp	r3, #4
 800da44:	d015      	beq.n	800da72 <UART_SetConfig+0x276>
 800da46:	dc1d      	bgt.n	800da84 <UART_SetConfig+0x288>
 800da48:	2b00      	cmp	r3, #0
 800da4a:	d002      	beq.n	800da52 <UART_SetConfig+0x256>
 800da4c:	2b02      	cmp	r3, #2
 800da4e:	d005      	beq.n	800da5c <UART_SetConfig+0x260>
 800da50:	e018      	b.n	800da84 <UART_SetConfig+0x288>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800da52:	f7fe fc69 	bl	800c328 <HAL_RCC_GetPCLK1Freq>
 800da56:	0003      	movs	r3, r0
 800da58:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800da5a:	e01c      	b.n	800da96 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800da5c:	4b3c      	ldr	r3, [pc, #240]	; (800db50 <UART_SetConfig+0x354>)
 800da5e:	681b      	ldr	r3, [r3, #0]
 800da60:	2210      	movs	r2, #16
 800da62:	4013      	ands	r3, r2
 800da64:	d002      	beq.n	800da6c <UART_SetConfig+0x270>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800da66:	4b3e      	ldr	r3, [pc, #248]	; (800db60 <UART_SetConfig+0x364>)
 800da68:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800da6a:	e014      	b.n	800da96 <UART_SetConfig+0x29a>
          pclk = (uint32_t) HSI_VALUE;
 800da6c:	4b3d      	ldr	r3, [pc, #244]	; (800db64 <UART_SetConfig+0x368>)
 800da6e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800da70:	e011      	b.n	800da96 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800da72:	f7fe fba9 	bl	800c1c8 <HAL_RCC_GetSysClockFreq>
 800da76:	0003      	movs	r3, r0
 800da78:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800da7a:	e00c      	b.n	800da96 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800da7c:	2380      	movs	r3, #128	; 0x80
 800da7e:	021b      	lsls	r3, r3, #8
 800da80:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800da82:	e008      	b.n	800da96 <UART_SetConfig+0x29a>
      default:
        pclk = 0U;
 800da84:	2300      	movs	r3, #0
 800da86:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800da88:	231a      	movs	r3, #26
 800da8a:	2218      	movs	r2, #24
 800da8c:	189b      	adds	r3, r3, r2
 800da8e:	19db      	adds	r3, r3, r7
 800da90:	2201      	movs	r2, #1
 800da92:	701a      	strb	r2, [r3, #0]
        break;
 800da94:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800da96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da98:	2b00      	cmp	r3, #0
 800da9a:	d100      	bne.n	800da9e <UART_SetConfig+0x2a2>
 800da9c:	e134      	b.n	800dd08 <UART_SetConfig+0x50c>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800da9e:	69fb      	ldr	r3, [r7, #28]
 800daa0:	685a      	ldr	r2, [r3, #4]
 800daa2:	0013      	movs	r3, r2
 800daa4:	005b      	lsls	r3, r3, #1
 800daa6:	189b      	adds	r3, r3, r2
 800daa8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800daaa:	429a      	cmp	r2, r3
 800daac:	d305      	bcc.n	800daba <UART_SetConfig+0x2be>
          (pclk > (4096U * huart->Init.BaudRate)))
 800daae:	69fb      	ldr	r3, [r7, #28]
 800dab0:	685b      	ldr	r3, [r3, #4]
 800dab2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800dab4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800dab6:	429a      	cmp	r2, r3
 800dab8:	d906      	bls.n	800dac8 <UART_SetConfig+0x2cc>
      {
        ret = HAL_ERROR;
 800daba:	231a      	movs	r3, #26
 800dabc:	2218      	movs	r2, #24
 800dabe:	189b      	adds	r3, r3, r2
 800dac0:	19db      	adds	r3, r3, r7
 800dac2:	2201      	movs	r2, #1
 800dac4:	701a      	strb	r2, [r3, #0]
 800dac6:	e11f      	b.n	800dd08 <UART_SetConfig+0x50c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800dac8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800daca:	613b      	str	r3, [r7, #16]
 800dacc:	2300      	movs	r3, #0
 800dace:	617b      	str	r3, [r7, #20]
 800dad0:	6939      	ldr	r1, [r7, #16]
 800dad2:	697a      	ldr	r2, [r7, #20]
 800dad4:	000b      	movs	r3, r1
 800dad6:	0e1b      	lsrs	r3, r3, #24
 800dad8:	0010      	movs	r0, r2
 800dada:	0205      	lsls	r5, r0, #8
 800dadc:	431d      	orrs	r5, r3
 800dade:	000b      	movs	r3, r1
 800dae0:	021c      	lsls	r4, r3, #8
 800dae2:	69fb      	ldr	r3, [r7, #28]
 800dae4:	685b      	ldr	r3, [r3, #4]
 800dae6:	085b      	lsrs	r3, r3, #1
 800dae8:	60bb      	str	r3, [r7, #8]
 800daea:	2300      	movs	r3, #0
 800daec:	60fb      	str	r3, [r7, #12]
 800daee:	68b8      	ldr	r0, [r7, #8]
 800daf0:	68f9      	ldr	r1, [r7, #12]
 800daf2:	1900      	adds	r0, r0, r4
 800daf4:	4169      	adcs	r1, r5
 800daf6:	69fb      	ldr	r3, [r7, #28]
 800daf8:	685b      	ldr	r3, [r3, #4]
 800dafa:	603b      	str	r3, [r7, #0]
 800dafc:	2300      	movs	r3, #0
 800dafe:	607b      	str	r3, [r7, #4]
 800db00:	683a      	ldr	r2, [r7, #0]
 800db02:	687b      	ldr	r3, [r7, #4]
 800db04:	f7f2 fcba 	bl	800047c <__aeabi_uldivmod>
 800db08:	0002      	movs	r2, r0
 800db0a:	000b      	movs	r3, r1
 800db0c:	0013      	movs	r3, r2
 800db0e:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800db10:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800db12:	23c0      	movs	r3, #192	; 0xc0
 800db14:	009b      	lsls	r3, r3, #2
 800db16:	429a      	cmp	r2, r3
 800db18:	d309      	bcc.n	800db2e <UART_SetConfig+0x332>
 800db1a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800db1c:	2380      	movs	r3, #128	; 0x80
 800db1e:	035b      	lsls	r3, r3, #13
 800db20:	429a      	cmp	r2, r3
 800db22:	d204      	bcs.n	800db2e <UART_SetConfig+0x332>
        {
          huart->Instance->BRR = usartdiv;
 800db24:	69fb      	ldr	r3, [r7, #28]
 800db26:	681b      	ldr	r3, [r3, #0]
 800db28:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800db2a:	60da      	str	r2, [r3, #12]
 800db2c:	e0ec      	b.n	800dd08 <UART_SetConfig+0x50c>
        }
        else
        {
          ret = HAL_ERROR;
 800db2e:	231a      	movs	r3, #26
 800db30:	2218      	movs	r2, #24
 800db32:	189b      	adds	r3, r3, r2
 800db34:	19db      	adds	r3, r3, r7
 800db36:	2201      	movs	r2, #1
 800db38:	701a      	strb	r2, [r3, #0]
 800db3a:	e0e5      	b.n	800dd08 <UART_SetConfig+0x50c>
 800db3c:	efff69f3 	.word	0xefff69f3
 800db40:	ffffcfff 	.word	0xffffcfff
 800db44:	40004800 	.word	0x40004800
 800db48:	fffff4ff 	.word	0xfffff4ff
 800db4c:	40013800 	.word	0x40013800
 800db50:	40021000 	.word	0x40021000
 800db54:	40004400 	.word	0x40004400
 800db58:	40004c00 	.word	0x40004c00
 800db5c:	40005000 	.word	0x40005000
 800db60:	003d0900 	.word	0x003d0900
 800db64:	00f42400 	.word	0x00f42400
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800db68:	69fb      	ldr	r3, [r7, #28]
 800db6a:	69da      	ldr	r2, [r3, #28]
 800db6c:	2380      	movs	r3, #128	; 0x80
 800db6e:	021b      	lsls	r3, r3, #8
 800db70:	429a      	cmp	r2, r3
 800db72:	d000      	beq.n	800db76 <UART_SetConfig+0x37a>
 800db74:	e071      	b.n	800dc5a <UART_SetConfig+0x45e>
  {
    switch (clocksource)
 800db76:	231b      	movs	r3, #27
 800db78:	2218      	movs	r2, #24
 800db7a:	189b      	adds	r3, r3, r2
 800db7c:	19db      	adds	r3, r3, r7
 800db7e:	781b      	ldrb	r3, [r3, #0]
 800db80:	2b08      	cmp	r3, #8
 800db82:	d822      	bhi.n	800dbca <UART_SetConfig+0x3ce>
 800db84:	009a      	lsls	r2, r3, #2
 800db86:	4b68      	ldr	r3, [pc, #416]	; (800dd28 <UART_SetConfig+0x52c>)
 800db88:	18d3      	adds	r3, r2, r3
 800db8a:	681b      	ldr	r3, [r3, #0]
 800db8c:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800db8e:	f7fe fbcb 	bl	800c328 <HAL_RCC_GetPCLK1Freq>
 800db92:	0003      	movs	r3, r0
 800db94:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800db96:	e021      	b.n	800dbdc <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800db98:	f7fe fbdc 	bl	800c354 <HAL_RCC_GetPCLK2Freq>
 800db9c:	0003      	movs	r3, r0
 800db9e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800dba0:	e01c      	b.n	800dbdc <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800dba2:	4b62      	ldr	r3, [pc, #392]	; (800dd2c <UART_SetConfig+0x530>)
 800dba4:	681b      	ldr	r3, [r3, #0]
 800dba6:	2210      	movs	r2, #16
 800dba8:	4013      	ands	r3, r2
 800dbaa:	d002      	beq.n	800dbb2 <UART_SetConfig+0x3b6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800dbac:	4b60      	ldr	r3, [pc, #384]	; (800dd30 <UART_SetConfig+0x534>)
 800dbae:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800dbb0:	e014      	b.n	800dbdc <UART_SetConfig+0x3e0>
          pclk = (uint32_t) HSI_VALUE;
 800dbb2:	4b60      	ldr	r3, [pc, #384]	; (800dd34 <UART_SetConfig+0x538>)
 800dbb4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800dbb6:	e011      	b.n	800dbdc <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800dbb8:	f7fe fb06 	bl	800c1c8 <HAL_RCC_GetSysClockFreq>
 800dbbc:	0003      	movs	r3, r0
 800dbbe:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800dbc0:	e00c      	b.n	800dbdc <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800dbc2:	2380      	movs	r3, #128	; 0x80
 800dbc4:	021b      	lsls	r3, r3, #8
 800dbc6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800dbc8:	e008      	b.n	800dbdc <UART_SetConfig+0x3e0>
      default:
        pclk = 0U;
 800dbca:	2300      	movs	r3, #0
 800dbcc:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800dbce:	231a      	movs	r3, #26
 800dbd0:	2218      	movs	r2, #24
 800dbd2:	189b      	adds	r3, r3, r2
 800dbd4:	19db      	adds	r3, r3, r7
 800dbd6:	2201      	movs	r2, #1
 800dbd8:	701a      	strb	r2, [r3, #0]
        break;
 800dbda:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800dbdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dbde:	2b00      	cmp	r3, #0
 800dbe0:	d100      	bne.n	800dbe4 <UART_SetConfig+0x3e8>
 800dbe2:	e091      	b.n	800dd08 <UART_SetConfig+0x50c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800dbe4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dbe6:	005a      	lsls	r2, r3, #1
 800dbe8:	69fb      	ldr	r3, [r7, #28]
 800dbea:	685b      	ldr	r3, [r3, #4]
 800dbec:	085b      	lsrs	r3, r3, #1
 800dbee:	18d2      	adds	r2, r2, r3
 800dbf0:	69fb      	ldr	r3, [r7, #28]
 800dbf2:	685b      	ldr	r3, [r3, #4]
 800dbf4:	0019      	movs	r1, r3
 800dbf6:	0010      	movs	r0, r2
 800dbf8:	f7f2 fa90 	bl	800011c <__udivsi3>
 800dbfc:	0003      	movs	r3, r0
 800dbfe:	b29b      	uxth	r3, r3
 800dc00:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800dc02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc04:	2b0f      	cmp	r3, #15
 800dc06:	d921      	bls.n	800dc4c <UART_SetConfig+0x450>
 800dc08:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dc0a:	2380      	movs	r3, #128	; 0x80
 800dc0c:	025b      	lsls	r3, r3, #9
 800dc0e:	429a      	cmp	r2, r3
 800dc10:	d21c      	bcs.n	800dc4c <UART_SetConfig+0x450>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800dc12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc14:	b29a      	uxth	r2, r3
 800dc16:	200e      	movs	r0, #14
 800dc18:	2418      	movs	r4, #24
 800dc1a:	1903      	adds	r3, r0, r4
 800dc1c:	19db      	adds	r3, r3, r7
 800dc1e:	210f      	movs	r1, #15
 800dc20:	438a      	bics	r2, r1
 800dc22:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800dc24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc26:	085b      	lsrs	r3, r3, #1
 800dc28:	b29b      	uxth	r3, r3
 800dc2a:	2207      	movs	r2, #7
 800dc2c:	4013      	ands	r3, r2
 800dc2e:	b299      	uxth	r1, r3
 800dc30:	1903      	adds	r3, r0, r4
 800dc32:	19db      	adds	r3, r3, r7
 800dc34:	1902      	adds	r2, r0, r4
 800dc36:	19d2      	adds	r2, r2, r7
 800dc38:	8812      	ldrh	r2, [r2, #0]
 800dc3a:	430a      	orrs	r2, r1
 800dc3c:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800dc3e:	69fb      	ldr	r3, [r7, #28]
 800dc40:	681b      	ldr	r3, [r3, #0]
 800dc42:	1902      	adds	r2, r0, r4
 800dc44:	19d2      	adds	r2, r2, r7
 800dc46:	8812      	ldrh	r2, [r2, #0]
 800dc48:	60da      	str	r2, [r3, #12]
 800dc4a:	e05d      	b.n	800dd08 <UART_SetConfig+0x50c>
      }
      else
      {
        ret = HAL_ERROR;
 800dc4c:	231a      	movs	r3, #26
 800dc4e:	2218      	movs	r2, #24
 800dc50:	189b      	adds	r3, r3, r2
 800dc52:	19db      	adds	r3, r3, r7
 800dc54:	2201      	movs	r2, #1
 800dc56:	701a      	strb	r2, [r3, #0]
 800dc58:	e056      	b.n	800dd08 <UART_SetConfig+0x50c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800dc5a:	231b      	movs	r3, #27
 800dc5c:	2218      	movs	r2, #24
 800dc5e:	189b      	adds	r3, r3, r2
 800dc60:	19db      	adds	r3, r3, r7
 800dc62:	781b      	ldrb	r3, [r3, #0]
 800dc64:	2b08      	cmp	r3, #8
 800dc66:	d822      	bhi.n	800dcae <UART_SetConfig+0x4b2>
 800dc68:	009a      	lsls	r2, r3, #2
 800dc6a:	4b33      	ldr	r3, [pc, #204]	; (800dd38 <UART_SetConfig+0x53c>)
 800dc6c:	18d3      	adds	r3, r2, r3
 800dc6e:	681b      	ldr	r3, [r3, #0]
 800dc70:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800dc72:	f7fe fb59 	bl	800c328 <HAL_RCC_GetPCLK1Freq>
 800dc76:	0003      	movs	r3, r0
 800dc78:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800dc7a:	e021      	b.n	800dcc0 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800dc7c:	f7fe fb6a 	bl	800c354 <HAL_RCC_GetPCLK2Freq>
 800dc80:	0003      	movs	r3, r0
 800dc82:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800dc84:	e01c      	b.n	800dcc0 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800dc86:	4b29      	ldr	r3, [pc, #164]	; (800dd2c <UART_SetConfig+0x530>)
 800dc88:	681b      	ldr	r3, [r3, #0]
 800dc8a:	2210      	movs	r2, #16
 800dc8c:	4013      	ands	r3, r2
 800dc8e:	d002      	beq.n	800dc96 <UART_SetConfig+0x49a>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800dc90:	4b27      	ldr	r3, [pc, #156]	; (800dd30 <UART_SetConfig+0x534>)
 800dc92:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800dc94:	e014      	b.n	800dcc0 <UART_SetConfig+0x4c4>
          pclk = (uint32_t) HSI_VALUE;
 800dc96:	4b27      	ldr	r3, [pc, #156]	; (800dd34 <UART_SetConfig+0x538>)
 800dc98:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800dc9a:	e011      	b.n	800dcc0 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800dc9c:	f7fe fa94 	bl	800c1c8 <HAL_RCC_GetSysClockFreq>
 800dca0:	0003      	movs	r3, r0
 800dca2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800dca4:	e00c      	b.n	800dcc0 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800dca6:	2380      	movs	r3, #128	; 0x80
 800dca8:	021b      	lsls	r3, r3, #8
 800dcaa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800dcac:	e008      	b.n	800dcc0 <UART_SetConfig+0x4c4>
      default:
        pclk = 0U;
 800dcae:	2300      	movs	r3, #0
 800dcb0:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800dcb2:	231a      	movs	r3, #26
 800dcb4:	2218      	movs	r2, #24
 800dcb6:	189b      	adds	r3, r3, r2
 800dcb8:	19db      	adds	r3, r3, r7
 800dcba:	2201      	movs	r2, #1
 800dcbc:	701a      	strb	r2, [r3, #0]
        break;
 800dcbe:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800dcc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dcc2:	2b00      	cmp	r3, #0
 800dcc4:	d020      	beq.n	800dd08 <UART_SetConfig+0x50c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800dcc6:	69fb      	ldr	r3, [r7, #28]
 800dcc8:	685b      	ldr	r3, [r3, #4]
 800dcca:	085a      	lsrs	r2, r3, #1
 800dccc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dcce:	18d2      	adds	r2, r2, r3
 800dcd0:	69fb      	ldr	r3, [r7, #28]
 800dcd2:	685b      	ldr	r3, [r3, #4]
 800dcd4:	0019      	movs	r1, r3
 800dcd6:	0010      	movs	r0, r2
 800dcd8:	f7f2 fa20 	bl	800011c <__udivsi3>
 800dcdc:	0003      	movs	r3, r0
 800dcde:	b29b      	uxth	r3, r3
 800dce0:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800dce2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dce4:	2b0f      	cmp	r3, #15
 800dce6:	d909      	bls.n	800dcfc <UART_SetConfig+0x500>
 800dce8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dcea:	2380      	movs	r3, #128	; 0x80
 800dcec:	025b      	lsls	r3, r3, #9
 800dcee:	429a      	cmp	r2, r3
 800dcf0:	d204      	bcs.n	800dcfc <UART_SetConfig+0x500>
      {
        huart->Instance->BRR = usartdiv;
 800dcf2:	69fb      	ldr	r3, [r7, #28]
 800dcf4:	681b      	ldr	r3, [r3, #0]
 800dcf6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dcf8:	60da      	str	r2, [r3, #12]
 800dcfa:	e005      	b.n	800dd08 <UART_SetConfig+0x50c>
      }
      else
      {
        ret = HAL_ERROR;
 800dcfc:	231a      	movs	r3, #26
 800dcfe:	2218      	movs	r2, #24
 800dd00:	189b      	adds	r3, r3, r2
 800dd02:	19db      	adds	r3, r3, r7
 800dd04:	2201      	movs	r2, #1
 800dd06:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800dd08:	69fb      	ldr	r3, [r7, #28]
 800dd0a:	2200      	movs	r2, #0
 800dd0c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800dd0e:	69fb      	ldr	r3, [r7, #28]
 800dd10:	2200      	movs	r2, #0
 800dd12:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800dd14:	231a      	movs	r3, #26
 800dd16:	2218      	movs	r2, #24
 800dd18:	189b      	adds	r3, r3, r2
 800dd1a:	19db      	adds	r3, r3, r7
 800dd1c:	781b      	ldrb	r3, [r3, #0]
}
 800dd1e:	0018      	movs	r0, r3
 800dd20:	46bd      	mov	sp, r7
 800dd22:	b00e      	add	sp, #56	; 0x38
 800dd24:	bdb0      	pop	{r4, r5, r7, pc}
 800dd26:	46c0      	nop			; (mov r8, r8)
 800dd28:	080162c0 	.word	0x080162c0
 800dd2c:	40021000 	.word	0x40021000
 800dd30:	003d0900 	.word	0x003d0900
 800dd34:	00f42400 	.word	0x00f42400
 800dd38:	080162e4 	.word	0x080162e4

0800dd3c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800dd3c:	b580      	push	{r7, lr}
 800dd3e:	b082      	sub	sp, #8
 800dd40:	af00      	add	r7, sp, #0
 800dd42:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800dd44:	687b      	ldr	r3, [r7, #4]
 800dd46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd48:	2201      	movs	r2, #1
 800dd4a:	4013      	ands	r3, r2
 800dd4c:	d00b      	beq.n	800dd66 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800dd4e:	687b      	ldr	r3, [r7, #4]
 800dd50:	681b      	ldr	r3, [r3, #0]
 800dd52:	685b      	ldr	r3, [r3, #4]
 800dd54:	4a4a      	ldr	r2, [pc, #296]	; (800de80 <UART_AdvFeatureConfig+0x144>)
 800dd56:	4013      	ands	r3, r2
 800dd58:	0019      	movs	r1, r3
 800dd5a:	687b      	ldr	r3, [r7, #4]
 800dd5c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800dd5e:	687b      	ldr	r3, [r7, #4]
 800dd60:	681b      	ldr	r3, [r3, #0]
 800dd62:	430a      	orrs	r2, r1
 800dd64:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800dd66:	687b      	ldr	r3, [r7, #4]
 800dd68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd6a:	2202      	movs	r2, #2
 800dd6c:	4013      	ands	r3, r2
 800dd6e:	d00b      	beq.n	800dd88 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800dd70:	687b      	ldr	r3, [r7, #4]
 800dd72:	681b      	ldr	r3, [r3, #0]
 800dd74:	685b      	ldr	r3, [r3, #4]
 800dd76:	4a43      	ldr	r2, [pc, #268]	; (800de84 <UART_AdvFeatureConfig+0x148>)
 800dd78:	4013      	ands	r3, r2
 800dd7a:	0019      	movs	r1, r3
 800dd7c:	687b      	ldr	r3, [r7, #4]
 800dd7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dd80:	687b      	ldr	r3, [r7, #4]
 800dd82:	681b      	ldr	r3, [r3, #0]
 800dd84:	430a      	orrs	r2, r1
 800dd86:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800dd88:	687b      	ldr	r3, [r7, #4]
 800dd8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd8c:	2204      	movs	r2, #4
 800dd8e:	4013      	ands	r3, r2
 800dd90:	d00b      	beq.n	800ddaa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800dd92:	687b      	ldr	r3, [r7, #4]
 800dd94:	681b      	ldr	r3, [r3, #0]
 800dd96:	685b      	ldr	r3, [r3, #4]
 800dd98:	4a3b      	ldr	r2, [pc, #236]	; (800de88 <UART_AdvFeatureConfig+0x14c>)
 800dd9a:	4013      	ands	r3, r2
 800dd9c:	0019      	movs	r1, r3
 800dd9e:	687b      	ldr	r3, [r7, #4]
 800dda0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800dda2:	687b      	ldr	r3, [r7, #4]
 800dda4:	681b      	ldr	r3, [r3, #0]
 800dda6:	430a      	orrs	r2, r1
 800dda8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800ddaa:	687b      	ldr	r3, [r7, #4]
 800ddac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ddae:	2208      	movs	r2, #8
 800ddb0:	4013      	ands	r3, r2
 800ddb2:	d00b      	beq.n	800ddcc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ddb4:	687b      	ldr	r3, [r7, #4]
 800ddb6:	681b      	ldr	r3, [r3, #0]
 800ddb8:	685b      	ldr	r3, [r3, #4]
 800ddba:	4a34      	ldr	r2, [pc, #208]	; (800de8c <UART_AdvFeatureConfig+0x150>)
 800ddbc:	4013      	ands	r3, r2
 800ddbe:	0019      	movs	r1, r3
 800ddc0:	687b      	ldr	r3, [r7, #4]
 800ddc2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ddc4:	687b      	ldr	r3, [r7, #4]
 800ddc6:	681b      	ldr	r3, [r3, #0]
 800ddc8:	430a      	orrs	r2, r1
 800ddca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ddcc:	687b      	ldr	r3, [r7, #4]
 800ddce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ddd0:	2210      	movs	r2, #16
 800ddd2:	4013      	ands	r3, r2
 800ddd4:	d00b      	beq.n	800ddee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ddd6:	687b      	ldr	r3, [r7, #4]
 800ddd8:	681b      	ldr	r3, [r3, #0]
 800ddda:	689b      	ldr	r3, [r3, #8]
 800dddc:	4a2c      	ldr	r2, [pc, #176]	; (800de90 <UART_AdvFeatureConfig+0x154>)
 800ddde:	4013      	ands	r3, r2
 800dde0:	0019      	movs	r1, r3
 800dde2:	687b      	ldr	r3, [r7, #4]
 800dde4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800dde6:	687b      	ldr	r3, [r7, #4]
 800dde8:	681b      	ldr	r3, [r3, #0]
 800ddea:	430a      	orrs	r2, r1
 800ddec:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800ddee:	687b      	ldr	r3, [r7, #4]
 800ddf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ddf2:	2220      	movs	r2, #32
 800ddf4:	4013      	ands	r3, r2
 800ddf6:	d00b      	beq.n	800de10 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800ddf8:	687b      	ldr	r3, [r7, #4]
 800ddfa:	681b      	ldr	r3, [r3, #0]
 800ddfc:	689b      	ldr	r3, [r3, #8]
 800ddfe:	4a25      	ldr	r2, [pc, #148]	; (800de94 <UART_AdvFeatureConfig+0x158>)
 800de00:	4013      	ands	r3, r2
 800de02:	0019      	movs	r1, r3
 800de04:	687b      	ldr	r3, [r7, #4]
 800de06:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800de08:	687b      	ldr	r3, [r7, #4]
 800de0a:	681b      	ldr	r3, [r3, #0]
 800de0c:	430a      	orrs	r2, r1
 800de0e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800de10:	687b      	ldr	r3, [r7, #4]
 800de12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de14:	2240      	movs	r2, #64	; 0x40
 800de16:	4013      	ands	r3, r2
 800de18:	d01d      	beq.n	800de56 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800de1a:	687b      	ldr	r3, [r7, #4]
 800de1c:	681b      	ldr	r3, [r3, #0]
 800de1e:	685b      	ldr	r3, [r3, #4]
 800de20:	4a1d      	ldr	r2, [pc, #116]	; (800de98 <UART_AdvFeatureConfig+0x15c>)
 800de22:	4013      	ands	r3, r2
 800de24:	0019      	movs	r1, r3
 800de26:	687b      	ldr	r3, [r7, #4]
 800de28:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800de2a:	687b      	ldr	r3, [r7, #4]
 800de2c:	681b      	ldr	r3, [r3, #0]
 800de2e:	430a      	orrs	r2, r1
 800de30:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800de32:	687b      	ldr	r3, [r7, #4]
 800de34:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800de36:	2380      	movs	r3, #128	; 0x80
 800de38:	035b      	lsls	r3, r3, #13
 800de3a:	429a      	cmp	r2, r3
 800de3c:	d10b      	bne.n	800de56 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800de3e:	687b      	ldr	r3, [r7, #4]
 800de40:	681b      	ldr	r3, [r3, #0]
 800de42:	685b      	ldr	r3, [r3, #4]
 800de44:	4a15      	ldr	r2, [pc, #84]	; (800de9c <UART_AdvFeatureConfig+0x160>)
 800de46:	4013      	ands	r3, r2
 800de48:	0019      	movs	r1, r3
 800de4a:	687b      	ldr	r3, [r7, #4]
 800de4c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800de4e:	687b      	ldr	r3, [r7, #4]
 800de50:	681b      	ldr	r3, [r3, #0]
 800de52:	430a      	orrs	r2, r1
 800de54:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800de56:	687b      	ldr	r3, [r7, #4]
 800de58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de5a:	2280      	movs	r2, #128	; 0x80
 800de5c:	4013      	ands	r3, r2
 800de5e:	d00b      	beq.n	800de78 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800de60:	687b      	ldr	r3, [r7, #4]
 800de62:	681b      	ldr	r3, [r3, #0]
 800de64:	685b      	ldr	r3, [r3, #4]
 800de66:	4a0e      	ldr	r2, [pc, #56]	; (800dea0 <UART_AdvFeatureConfig+0x164>)
 800de68:	4013      	ands	r3, r2
 800de6a:	0019      	movs	r1, r3
 800de6c:	687b      	ldr	r3, [r7, #4]
 800de6e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800de70:	687b      	ldr	r3, [r7, #4]
 800de72:	681b      	ldr	r3, [r3, #0]
 800de74:	430a      	orrs	r2, r1
 800de76:	605a      	str	r2, [r3, #4]
  }
}
 800de78:	46c0      	nop			; (mov r8, r8)
 800de7a:	46bd      	mov	sp, r7
 800de7c:	b002      	add	sp, #8
 800de7e:	bd80      	pop	{r7, pc}
 800de80:	fffdffff 	.word	0xfffdffff
 800de84:	fffeffff 	.word	0xfffeffff
 800de88:	fffbffff 	.word	0xfffbffff
 800de8c:	ffff7fff 	.word	0xffff7fff
 800de90:	ffffefff 	.word	0xffffefff
 800de94:	ffffdfff 	.word	0xffffdfff
 800de98:	ffefffff 	.word	0xffefffff
 800de9c:	ff9fffff 	.word	0xff9fffff
 800dea0:	fff7ffff 	.word	0xfff7ffff

0800dea4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800dea4:	b580      	push	{r7, lr}
 800dea6:	b086      	sub	sp, #24
 800dea8:	af02      	add	r7, sp, #8
 800deaa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800deac:	687b      	ldr	r3, [r7, #4]
 800deae:	2280      	movs	r2, #128	; 0x80
 800deb0:	2100      	movs	r1, #0
 800deb2:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800deb4:	f7fb ffa8 	bl	8009e08 <HAL_GetTick>
 800deb8:	0003      	movs	r3, r0
 800deba:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800debc:	687b      	ldr	r3, [r7, #4]
 800debe:	681b      	ldr	r3, [r3, #0]
 800dec0:	681b      	ldr	r3, [r3, #0]
 800dec2:	2208      	movs	r2, #8
 800dec4:	4013      	ands	r3, r2
 800dec6:	2b08      	cmp	r3, #8
 800dec8:	d10c      	bne.n	800dee4 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800deca:	68fb      	ldr	r3, [r7, #12]
 800decc:	2280      	movs	r2, #128	; 0x80
 800dece:	0391      	lsls	r1, r2, #14
 800ded0:	6878      	ldr	r0, [r7, #4]
 800ded2:	4a17      	ldr	r2, [pc, #92]	; (800df30 <UART_CheckIdleState+0x8c>)
 800ded4:	9200      	str	r2, [sp, #0]
 800ded6:	2200      	movs	r2, #0
 800ded8:	f000 f82c 	bl	800df34 <UART_WaitOnFlagUntilTimeout>
 800dedc:	1e03      	subs	r3, r0, #0
 800dede:	d001      	beq.n	800dee4 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800dee0:	2303      	movs	r3, #3
 800dee2:	e021      	b.n	800df28 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800dee4:	687b      	ldr	r3, [r7, #4]
 800dee6:	681b      	ldr	r3, [r3, #0]
 800dee8:	681b      	ldr	r3, [r3, #0]
 800deea:	2204      	movs	r2, #4
 800deec:	4013      	ands	r3, r2
 800deee:	2b04      	cmp	r3, #4
 800def0:	d10c      	bne.n	800df0c <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800def2:	68fb      	ldr	r3, [r7, #12]
 800def4:	2280      	movs	r2, #128	; 0x80
 800def6:	03d1      	lsls	r1, r2, #15
 800def8:	6878      	ldr	r0, [r7, #4]
 800defa:	4a0d      	ldr	r2, [pc, #52]	; (800df30 <UART_CheckIdleState+0x8c>)
 800defc:	9200      	str	r2, [sp, #0]
 800defe:	2200      	movs	r2, #0
 800df00:	f000 f818 	bl	800df34 <UART_WaitOnFlagUntilTimeout>
 800df04:	1e03      	subs	r3, r0, #0
 800df06:	d001      	beq.n	800df0c <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800df08:	2303      	movs	r3, #3
 800df0a:	e00d      	b.n	800df28 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800df0c:	687b      	ldr	r3, [r7, #4]
 800df0e:	2220      	movs	r2, #32
 800df10:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800df12:	687b      	ldr	r3, [r7, #4]
 800df14:	2220      	movs	r2, #32
 800df16:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800df18:	687b      	ldr	r3, [r7, #4]
 800df1a:	2200      	movs	r2, #0
 800df1c:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800df1e:	687b      	ldr	r3, [r7, #4]
 800df20:	2274      	movs	r2, #116	; 0x74
 800df22:	2100      	movs	r1, #0
 800df24:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800df26:	2300      	movs	r3, #0
}
 800df28:	0018      	movs	r0, r3
 800df2a:	46bd      	mov	sp, r7
 800df2c:	b004      	add	sp, #16
 800df2e:	bd80      	pop	{r7, pc}
 800df30:	01ffffff 	.word	0x01ffffff

0800df34 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800df34:	b580      	push	{r7, lr}
 800df36:	b094      	sub	sp, #80	; 0x50
 800df38:	af00      	add	r7, sp, #0
 800df3a:	60f8      	str	r0, [r7, #12]
 800df3c:	60b9      	str	r1, [r7, #8]
 800df3e:	603b      	str	r3, [r7, #0]
 800df40:	1dfb      	adds	r3, r7, #7
 800df42:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800df44:	e0a3      	b.n	800e08e <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800df46:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800df48:	3301      	adds	r3, #1
 800df4a:	d100      	bne.n	800df4e <UART_WaitOnFlagUntilTimeout+0x1a>
 800df4c:	e09f      	b.n	800e08e <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800df4e:	f7fb ff5b 	bl	8009e08 <HAL_GetTick>
 800df52:	0002      	movs	r2, r0
 800df54:	683b      	ldr	r3, [r7, #0]
 800df56:	1ad3      	subs	r3, r2, r3
 800df58:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800df5a:	429a      	cmp	r2, r3
 800df5c:	d302      	bcc.n	800df64 <UART_WaitOnFlagUntilTimeout+0x30>
 800df5e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800df60:	2b00      	cmp	r3, #0
 800df62:	d13d      	bne.n	800dfe0 <UART_WaitOnFlagUntilTimeout+0xac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800df64:	f3ef 8310 	mrs	r3, PRIMASK
 800df68:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800df6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800df6c:	647b      	str	r3, [r7, #68]	; 0x44
 800df6e:	2301      	movs	r3, #1
 800df70:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800df72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df74:	f383 8810 	msr	PRIMASK, r3
}
 800df78:	46c0      	nop			; (mov r8, r8)
 800df7a:	68fb      	ldr	r3, [r7, #12]
 800df7c:	681b      	ldr	r3, [r3, #0]
 800df7e:	681a      	ldr	r2, [r3, #0]
 800df80:	68fb      	ldr	r3, [r7, #12]
 800df82:	681b      	ldr	r3, [r3, #0]
 800df84:	494c      	ldr	r1, [pc, #304]	; (800e0b8 <UART_WaitOnFlagUntilTimeout+0x184>)
 800df86:	400a      	ands	r2, r1
 800df88:	601a      	str	r2, [r3, #0]
 800df8a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800df8c:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800df8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df90:	f383 8810 	msr	PRIMASK, r3
}
 800df94:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800df96:	f3ef 8310 	mrs	r3, PRIMASK
 800df9a:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 800df9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800df9e:	643b      	str	r3, [r7, #64]	; 0x40
 800dfa0:	2301      	movs	r3, #1
 800dfa2:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800dfa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dfa6:	f383 8810 	msr	PRIMASK, r3
}
 800dfaa:	46c0      	nop			; (mov r8, r8)
 800dfac:	68fb      	ldr	r3, [r7, #12]
 800dfae:	681b      	ldr	r3, [r3, #0]
 800dfb0:	689a      	ldr	r2, [r3, #8]
 800dfb2:	68fb      	ldr	r3, [r7, #12]
 800dfb4:	681b      	ldr	r3, [r3, #0]
 800dfb6:	2101      	movs	r1, #1
 800dfb8:	438a      	bics	r2, r1
 800dfba:	609a      	str	r2, [r3, #8]
 800dfbc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dfbe:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800dfc0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dfc2:	f383 8810 	msr	PRIMASK, r3
}
 800dfc6:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 800dfc8:	68fb      	ldr	r3, [r7, #12]
 800dfca:	2220      	movs	r2, #32
 800dfcc:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800dfce:	68fb      	ldr	r3, [r7, #12]
 800dfd0:	2220      	movs	r2, #32
 800dfd2:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800dfd4:	68fb      	ldr	r3, [r7, #12]
 800dfd6:	2274      	movs	r2, #116	; 0x74
 800dfd8:	2100      	movs	r1, #0
 800dfda:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800dfdc:	2303      	movs	r3, #3
 800dfde:	e067      	b.n	800e0b0 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800dfe0:	68fb      	ldr	r3, [r7, #12]
 800dfe2:	681b      	ldr	r3, [r3, #0]
 800dfe4:	681b      	ldr	r3, [r3, #0]
 800dfe6:	2204      	movs	r2, #4
 800dfe8:	4013      	ands	r3, r2
 800dfea:	d050      	beq.n	800e08e <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800dfec:	68fb      	ldr	r3, [r7, #12]
 800dfee:	681b      	ldr	r3, [r3, #0]
 800dff0:	69da      	ldr	r2, [r3, #28]
 800dff2:	2380      	movs	r3, #128	; 0x80
 800dff4:	011b      	lsls	r3, r3, #4
 800dff6:	401a      	ands	r2, r3
 800dff8:	2380      	movs	r3, #128	; 0x80
 800dffa:	011b      	lsls	r3, r3, #4
 800dffc:	429a      	cmp	r2, r3
 800dffe:	d146      	bne.n	800e08e <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e000:	68fb      	ldr	r3, [r7, #12]
 800e002:	681b      	ldr	r3, [r3, #0]
 800e004:	2280      	movs	r2, #128	; 0x80
 800e006:	0112      	lsls	r2, r2, #4
 800e008:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e00a:	f3ef 8310 	mrs	r3, PRIMASK
 800e00e:	613b      	str	r3, [r7, #16]
  return(result);
 800e010:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800e012:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e014:	2301      	movs	r3, #1
 800e016:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e018:	697b      	ldr	r3, [r7, #20]
 800e01a:	f383 8810 	msr	PRIMASK, r3
}
 800e01e:	46c0      	nop			; (mov r8, r8)
 800e020:	68fb      	ldr	r3, [r7, #12]
 800e022:	681b      	ldr	r3, [r3, #0]
 800e024:	681a      	ldr	r2, [r3, #0]
 800e026:	68fb      	ldr	r3, [r7, #12]
 800e028:	681b      	ldr	r3, [r3, #0]
 800e02a:	4923      	ldr	r1, [pc, #140]	; (800e0b8 <UART_WaitOnFlagUntilTimeout+0x184>)
 800e02c:	400a      	ands	r2, r1
 800e02e:	601a      	str	r2, [r3, #0]
 800e030:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e032:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e034:	69bb      	ldr	r3, [r7, #24]
 800e036:	f383 8810 	msr	PRIMASK, r3
}
 800e03a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e03c:	f3ef 8310 	mrs	r3, PRIMASK
 800e040:	61fb      	str	r3, [r7, #28]
  return(result);
 800e042:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e044:	64bb      	str	r3, [r7, #72]	; 0x48
 800e046:	2301      	movs	r3, #1
 800e048:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e04a:	6a3b      	ldr	r3, [r7, #32]
 800e04c:	f383 8810 	msr	PRIMASK, r3
}
 800e050:	46c0      	nop			; (mov r8, r8)
 800e052:	68fb      	ldr	r3, [r7, #12]
 800e054:	681b      	ldr	r3, [r3, #0]
 800e056:	689a      	ldr	r2, [r3, #8]
 800e058:	68fb      	ldr	r3, [r7, #12]
 800e05a:	681b      	ldr	r3, [r3, #0]
 800e05c:	2101      	movs	r1, #1
 800e05e:	438a      	bics	r2, r1
 800e060:	609a      	str	r2, [r3, #8]
 800e062:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e064:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e068:	f383 8810 	msr	PRIMASK, r3
}
 800e06c:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 800e06e:	68fb      	ldr	r3, [r7, #12]
 800e070:	2220      	movs	r2, #32
 800e072:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800e074:	68fb      	ldr	r3, [r7, #12]
 800e076:	2220      	movs	r2, #32
 800e078:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800e07a:	68fb      	ldr	r3, [r7, #12]
 800e07c:	2280      	movs	r2, #128	; 0x80
 800e07e:	2120      	movs	r1, #32
 800e080:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800e082:	68fb      	ldr	r3, [r7, #12]
 800e084:	2274      	movs	r2, #116	; 0x74
 800e086:	2100      	movs	r1, #0
 800e088:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800e08a:	2303      	movs	r3, #3
 800e08c:	e010      	b.n	800e0b0 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e08e:	68fb      	ldr	r3, [r7, #12]
 800e090:	681b      	ldr	r3, [r3, #0]
 800e092:	69db      	ldr	r3, [r3, #28]
 800e094:	68ba      	ldr	r2, [r7, #8]
 800e096:	4013      	ands	r3, r2
 800e098:	68ba      	ldr	r2, [r7, #8]
 800e09a:	1ad3      	subs	r3, r2, r3
 800e09c:	425a      	negs	r2, r3
 800e09e:	4153      	adcs	r3, r2
 800e0a0:	b2db      	uxtb	r3, r3
 800e0a2:	001a      	movs	r2, r3
 800e0a4:	1dfb      	adds	r3, r7, #7
 800e0a6:	781b      	ldrb	r3, [r3, #0]
 800e0a8:	429a      	cmp	r2, r3
 800e0aa:	d100      	bne.n	800e0ae <UART_WaitOnFlagUntilTimeout+0x17a>
 800e0ac:	e74b      	b.n	800df46 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800e0ae:	2300      	movs	r3, #0
}
 800e0b0:	0018      	movs	r0, r3
 800e0b2:	46bd      	mov	sp, r7
 800e0b4:	b014      	add	sp, #80	; 0x50
 800e0b6:	bd80      	pop	{r7, pc}
 800e0b8:	fffffe5f 	.word	0xfffffe5f

0800e0bc <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800e0bc:	b580      	push	{r7, lr}
 800e0be:	b090      	sub	sp, #64	; 0x40
 800e0c0:	af00      	add	r7, sp, #0
 800e0c2:	60f8      	str	r0, [r7, #12]
 800e0c4:	60b9      	str	r1, [r7, #8]
 800e0c6:	1dbb      	adds	r3, r7, #6
 800e0c8:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 800e0ca:	68fb      	ldr	r3, [r7, #12]
 800e0cc:	68ba      	ldr	r2, [r7, #8]
 800e0ce:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 800e0d0:	68fb      	ldr	r3, [r7, #12]
 800e0d2:	1dba      	adds	r2, r7, #6
 800e0d4:	2158      	movs	r1, #88	; 0x58
 800e0d6:	8812      	ldrh	r2, [r2, #0]
 800e0d8:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e0da:	68fb      	ldr	r3, [r7, #12]
 800e0dc:	2280      	movs	r2, #128	; 0x80
 800e0de:	2100      	movs	r1, #0
 800e0e0:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800e0e2:	68fb      	ldr	r3, [r7, #12]
 800e0e4:	2222      	movs	r2, #34	; 0x22
 800e0e6:	67da      	str	r2, [r3, #124]	; 0x7c

  if (huart->hdmarx != NULL)
 800e0e8:	68fb      	ldr	r3, [r7, #12]
 800e0ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e0ec:	2b00      	cmp	r3, #0
 800e0ee:	d02b      	beq.n	800e148 <UART_Start_Receive_DMA+0x8c>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800e0f0:	68fb      	ldr	r3, [r7, #12]
 800e0f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e0f4:	4a3f      	ldr	r2, [pc, #252]	; (800e1f4 <UART_Start_Receive_DMA+0x138>)
 800e0f6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800e0f8:	68fb      	ldr	r3, [r7, #12]
 800e0fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e0fc:	4a3e      	ldr	r2, [pc, #248]	; (800e1f8 <UART_Start_Receive_DMA+0x13c>)
 800e0fe:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800e100:	68fb      	ldr	r3, [r7, #12]
 800e102:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e104:	4a3d      	ldr	r2, [pc, #244]	; (800e1fc <UART_Start_Receive_DMA+0x140>)
 800e106:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800e108:	68fb      	ldr	r3, [r7, #12]
 800e10a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e10c:	2200      	movs	r2, #0
 800e10e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800e110:	68fb      	ldr	r3, [r7, #12]
 800e112:	6f18      	ldr	r0, [r3, #112]	; 0x70
 800e114:	68fb      	ldr	r3, [r7, #12]
 800e116:	681b      	ldr	r3, [r3, #0]
 800e118:	3324      	adds	r3, #36	; 0x24
 800e11a:	0019      	movs	r1, r3
 800e11c:	68fb      	ldr	r3, [r7, #12]
 800e11e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e120:	001a      	movs	r2, r3
 800e122:	1dbb      	adds	r3, r7, #6
 800e124:	881b      	ldrh	r3, [r3, #0]
 800e126:	f7fc f8c7 	bl	800a2b8 <HAL_DMA_Start_IT>
 800e12a:	1e03      	subs	r3, r0, #0
 800e12c:	d00c      	beq.n	800e148 <UART_Start_Receive_DMA+0x8c>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800e12e:	68fb      	ldr	r3, [r7, #12]
 800e130:	2280      	movs	r2, #128	; 0x80
 800e132:	2110      	movs	r1, #16
 800e134:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800e136:	68fb      	ldr	r3, [r7, #12]
 800e138:	2274      	movs	r2, #116	; 0x74
 800e13a:	2100      	movs	r1, #0
 800e13c:	5499      	strb	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800e13e:	68fb      	ldr	r3, [r7, #12]
 800e140:	2220      	movs	r2, #32
 800e142:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_ERROR;
 800e144:	2301      	movs	r3, #1
 800e146:	e050      	b.n	800e1ea <UART_Start_Receive_DMA+0x12e>
    }
  }
  __HAL_UNLOCK(huart);
 800e148:	68fb      	ldr	r3, [r7, #12]
 800e14a:	2274      	movs	r2, #116	; 0x74
 800e14c:	2100      	movs	r1, #0
 800e14e:	5499      	strb	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e150:	f3ef 8310 	mrs	r3, PRIMASK
 800e154:	613b      	str	r3, [r7, #16]
  return(result);
 800e156:	693b      	ldr	r3, [r7, #16]

  /* Enable the UART Parity Error Interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e158:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e15a:	2301      	movs	r3, #1
 800e15c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e15e:	697b      	ldr	r3, [r7, #20]
 800e160:	f383 8810 	msr	PRIMASK, r3
}
 800e164:	46c0      	nop			; (mov r8, r8)
 800e166:	68fb      	ldr	r3, [r7, #12]
 800e168:	681b      	ldr	r3, [r3, #0]
 800e16a:	681a      	ldr	r2, [r3, #0]
 800e16c:	68fb      	ldr	r3, [r7, #12]
 800e16e:	681b      	ldr	r3, [r3, #0]
 800e170:	2180      	movs	r1, #128	; 0x80
 800e172:	0049      	lsls	r1, r1, #1
 800e174:	430a      	orrs	r2, r1
 800e176:	601a      	str	r2, [r3, #0]
 800e178:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e17a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e17c:	69bb      	ldr	r3, [r7, #24]
 800e17e:	f383 8810 	msr	PRIMASK, r3
}
 800e182:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e184:	f3ef 8310 	mrs	r3, PRIMASK
 800e188:	61fb      	str	r3, [r7, #28]
  return(result);
 800e18a:	69fb      	ldr	r3, [r7, #28]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e18c:	63bb      	str	r3, [r7, #56]	; 0x38
 800e18e:	2301      	movs	r3, #1
 800e190:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e192:	6a3b      	ldr	r3, [r7, #32]
 800e194:	f383 8810 	msr	PRIMASK, r3
}
 800e198:	46c0      	nop			; (mov r8, r8)
 800e19a:	68fb      	ldr	r3, [r7, #12]
 800e19c:	681b      	ldr	r3, [r3, #0]
 800e19e:	689a      	ldr	r2, [r3, #8]
 800e1a0:	68fb      	ldr	r3, [r7, #12]
 800e1a2:	681b      	ldr	r3, [r3, #0]
 800e1a4:	2101      	movs	r1, #1
 800e1a6:	430a      	orrs	r2, r1
 800e1a8:	609a      	str	r2, [r3, #8]
 800e1aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e1ac:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e1ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1b0:	f383 8810 	msr	PRIMASK, r3
}
 800e1b4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e1b6:	f3ef 8310 	mrs	r3, PRIMASK
 800e1ba:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800e1bc:	6abb      	ldr	r3, [r7, #40]	; 0x28

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e1be:	637b      	str	r3, [r7, #52]	; 0x34
 800e1c0:	2301      	movs	r3, #1
 800e1c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e1c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1c6:	f383 8810 	msr	PRIMASK, r3
}
 800e1ca:	46c0      	nop			; (mov r8, r8)
 800e1cc:	68fb      	ldr	r3, [r7, #12]
 800e1ce:	681b      	ldr	r3, [r3, #0]
 800e1d0:	689a      	ldr	r2, [r3, #8]
 800e1d2:	68fb      	ldr	r3, [r7, #12]
 800e1d4:	681b      	ldr	r3, [r3, #0]
 800e1d6:	2140      	movs	r1, #64	; 0x40
 800e1d8:	430a      	orrs	r2, r1
 800e1da:	609a      	str	r2, [r3, #8]
 800e1dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e1de:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e1e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1e2:	f383 8810 	msr	PRIMASK, r3
}
 800e1e6:	46c0      	nop			; (mov r8, r8)

  return HAL_OK;
 800e1e8:	2300      	movs	r3, #0
}
 800e1ea:	0018      	movs	r0, r3
 800e1ec:	46bd      	mov	sp, r7
 800e1ee:	b010      	add	sp, #64	; 0x40
 800e1f0:	bd80      	pop	{r7, pc}
 800e1f2:	46c0      	nop			; (mov r8, r8)
 800e1f4:	0800e30d 	.word	0x0800e30d
 800e1f8:	0800e435 	.word	0x0800e435
 800e1fc:	0800e471 	.word	0x0800e471

0800e200 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800e200:	b580      	push	{r7, lr}
 800e202:	b086      	sub	sp, #24
 800e204:	af00      	add	r7, sp, #0
 800e206:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e208:	f3ef 8310 	mrs	r3, PRIMASK
 800e20c:	60bb      	str	r3, [r7, #8]
  return(result);
 800e20e:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800e210:	617b      	str	r3, [r7, #20]
 800e212:	2301      	movs	r3, #1
 800e214:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e216:	68fb      	ldr	r3, [r7, #12]
 800e218:	f383 8810 	msr	PRIMASK, r3
}
 800e21c:	46c0      	nop			; (mov r8, r8)
 800e21e:	687b      	ldr	r3, [r7, #4]
 800e220:	681b      	ldr	r3, [r3, #0]
 800e222:	681a      	ldr	r2, [r3, #0]
 800e224:	687b      	ldr	r3, [r7, #4]
 800e226:	681b      	ldr	r3, [r3, #0]
 800e228:	21c0      	movs	r1, #192	; 0xc0
 800e22a:	438a      	bics	r2, r1
 800e22c:	601a      	str	r2, [r3, #0]
 800e22e:	697b      	ldr	r3, [r7, #20]
 800e230:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e232:	693b      	ldr	r3, [r7, #16]
 800e234:	f383 8810 	msr	PRIMASK, r3
}
 800e238:	46c0      	nop			; (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800e23a:	687b      	ldr	r3, [r7, #4]
 800e23c:	2220      	movs	r2, #32
 800e23e:	679a      	str	r2, [r3, #120]	; 0x78
}
 800e240:	46c0      	nop			; (mov r8, r8)
 800e242:	46bd      	mov	sp, r7
 800e244:	b006      	add	sp, #24
 800e246:	bd80      	pop	{r7, pc}

0800e248 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800e248:	b580      	push	{r7, lr}
 800e24a:	b08e      	sub	sp, #56	; 0x38
 800e24c:	af00      	add	r7, sp, #0
 800e24e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e250:	f3ef 8310 	mrs	r3, PRIMASK
 800e254:	617b      	str	r3, [r7, #20]
  return(result);
 800e256:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800e258:	637b      	str	r3, [r7, #52]	; 0x34
 800e25a:	2301      	movs	r3, #1
 800e25c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e25e:	69bb      	ldr	r3, [r7, #24]
 800e260:	f383 8810 	msr	PRIMASK, r3
}
 800e264:	46c0      	nop			; (mov r8, r8)
 800e266:	687b      	ldr	r3, [r7, #4]
 800e268:	681b      	ldr	r3, [r3, #0]
 800e26a:	681a      	ldr	r2, [r3, #0]
 800e26c:	687b      	ldr	r3, [r7, #4]
 800e26e:	681b      	ldr	r3, [r3, #0]
 800e270:	4925      	ldr	r1, [pc, #148]	; (800e308 <UART_EndRxTransfer+0xc0>)
 800e272:	400a      	ands	r2, r1
 800e274:	601a      	str	r2, [r3, #0]
 800e276:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e278:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e27a:	69fb      	ldr	r3, [r7, #28]
 800e27c:	f383 8810 	msr	PRIMASK, r3
}
 800e280:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e282:	f3ef 8310 	mrs	r3, PRIMASK
 800e286:	623b      	str	r3, [r7, #32]
  return(result);
 800e288:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e28a:	633b      	str	r3, [r7, #48]	; 0x30
 800e28c:	2301      	movs	r3, #1
 800e28e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e292:	f383 8810 	msr	PRIMASK, r3
}
 800e296:	46c0      	nop			; (mov r8, r8)
 800e298:	687b      	ldr	r3, [r7, #4]
 800e29a:	681b      	ldr	r3, [r3, #0]
 800e29c:	689a      	ldr	r2, [r3, #8]
 800e29e:	687b      	ldr	r3, [r7, #4]
 800e2a0:	681b      	ldr	r3, [r3, #0]
 800e2a2:	2101      	movs	r1, #1
 800e2a4:	438a      	bics	r2, r1
 800e2a6:	609a      	str	r2, [r3, #8]
 800e2a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2aa:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e2ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2ae:	f383 8810 	msr	PRIMASK, r3
}
 800e2b2:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e2b4:	687b      	ldr	r3, [r7, #4]
 800e2b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e2b8:	2b01      	cmp	r3, #1
 800e2ba:	d118      	bne.n	800e2ee <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e2bc:	f3ef 8310 	mrs	r3, PRIMASK
 800e2c0:	60bb      	str	r3, [r7, #8]
  return(result);
 800e2c2:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e2c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e2c6:	2301      	movs	r3, #1
 800e2c8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e2ca:	68fb      	ldr	r3, [r7, #12]
 800e2cc:	f383 8810 	msr	PRIMASK, r3
}
 800e2d0:	46c0      	nop			; (mov r8, r8)
 800e2d2:	687b      	ldr	r3, [r7, #4]
 800e2d4:	681b      	ldr	r3, [r3, #0]
 800e2d6:	681a      	ldr	r2, [r3, #0]
 800e2d8:	687b      	ldr	r3, [r7, #4]
 800e2da:	681b      	ldr	r3, [r3, #0]
 800e2dc:	2110      	movs	r1, #16
 800e2de:	438a      	bics	r2, r1
 800e2e0:	601a      	str	r2, [r3, #0]
 800e2e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2e4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e2e6:	693b      	ldr	r3, [r7, #16]
 800e2e8:	f383 8810 	msr	PRIMASK, r3
}
 800e2ec:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800e2ee:	687b      	ldr	r3, [r7, #4]
 800e2f0:	2220      	movs	r2, #32
 800e2f2:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e2f4:	687b      	ldr	r3, [r7, #4]
 800e2f6:	2200      	movs	r2, #0
 800e2f8:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800e2fa:	687b      	ldr	r3, [r7, #4]
 800e2fc:	2200      	movs	r2, #0
 800e2fe:	665a      	str	r2, [r3, #100]	; 0x64
}
 800e300:	46c0      	nop			; (mov r8, r8)
 800e302:	46bd      	mov	sp, r7
 800e304:	b00e      	add	sp, #56	; 0x38
 800e306:	bd80      	pop	{r7, pc}
 800e308:	fffffedf 	.word	0xfffffedf

0800e30c <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800e30c:	b580      	push	{r7, lr}
 800e30e:	b094      	sub	sp, #80	; 0x50
 800e310:	af00      	add	r7, sp, #0
 800e312:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e314:	687b      	ldr	r3, [r7, #4]
 800e316:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e318:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800e31a:	687b      	ldr	r3, [r7, #4]
 800e31c:	681b      	ldr	r3, [r3, #0]
 800e31e:	681b      	ldr	r3, [r3, #0]
 800e320:	2220      	movs	r2, #32
 800e322:	4013      	ands	r3, r2
 800e324:	d16e      	bne.n	800e404 <UART_DMAReceiveCplt+0xf8>
  {
    huart->RxXferCount = 0U;
 800e326:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e328:	225a      	movs	r2, #90	; 0x5a
 800e32a:	2100      	movs	r1, #0
 800e32c:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e32e:	f3ef 8310 	mrs	r3, PRIMASK
 800e332:	61bb      	str	r3, [r7, #24]
  return(result);
 800e334:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e336:	64bb      	str	r3, [r7, #72]	; 0x48
 800e338:	2301      	movs	r3, #1
 800e33a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e33c:	69fb      	ldr	r3, [r7, #28]
 800e33e:	f383 8810 	msr	PRIMASK, r3
}
 800e342:	46c0      	nop			; (mov r8, r8)
 800e344:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e346:	681b      	ldr	r3, [r3, #0]
 800e348:	681a      	ldr	r2, [r3, #0]
 800e34a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e34c:	681b      	ldr	r3, [r3, #0]
 800e34e:	4938      	ldr	r1, [pc, #224]	; (800e430 <UART_DMAReceiveCplt+0x124>)
 800e350:	400a      	ands	r2, r1
 800e352:	601a      	str	r2, [r3, #0]
 800e354:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e356:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e358:	6a3b      	ldr	r3, [r7, #32]
 800e35a:	f383 8810 	msr	PRIMASK, r3
}
 800e35e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e360:	f3ef 8310 	mrs	r3, PRIMASK
 800e364:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800e366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e368:	647b      	str	r3, [r7, #68]	; 0x44
 800e36a:	2301      	movs	r3, #1
 800e36c:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e36e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e370:	f383 8810 	msr	PRIMASK, r3
}
 800e374:	46c0      	nop			; (mov r8, r8)
 800e376:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e378:	681b      	ldr	r3, [r3, #0]
 800e37a:	689a      	ldr	r2, [r3, #8]
 800e37c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e37e:	681b      	ldr	r3, [r3, #0]
 800e380:	2101      	movs	r1, #1
 800e382:	438a      	bics	r2, r1
 800e384:	609a      	str	r2, [r3, #8]
 800e386:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e388:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e38a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e38c:	f383 8810 	msr	PRIMASK, r3
}
 800e390:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e392:	f3ef 8310 	mrs	r3, PRIMASK
 800e396:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 800e398:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e39a:	643b      	str	r3, [r7, #64]	; 0x40
 800e39c:	2301      	movs	r3, #1
 800e39e:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e3a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e3a2:	f383 8810 	msr	PRIMASK, r3
}
 800e3a6:	46c0      	nop			; (mov r8, r8)
 800e3a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e3aa:	681b      	ldr	r3, [r3, #0]
 800e3ac:	689a      	ldr	r2, [r3, #8]
 800e3ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e3b0:	681b      	ldr	r3, [r3, #0]
 800e3b2:	2140      	movs	r1, #64	; 0x40
 800e3b4:	438a      	bics	r2, r1
 800e3b6:	609a      	str	r2, [r3, #8]
 800e3b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e3ba:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e3bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e3be:	f383 8810 	msr	PRIMASK, r3
}
 800e3c2:	46c0      	nop			; (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800e3c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e3c6:	2220      	movs	r2, #32
 800e3c8:	67da      	str	r2, [r3, #124]	; 0x7c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e3ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e3cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e3ce:	2b01      	cmp	r3, #1
 800e3d0:	d118      	bne.n	800e404 <UART_DMAReceiveCplt+0xf8>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e3d2:	f3ef 8310 	mrs	r3, PRIMASK
 800e3d6:	60fb      	str	r3, [r7, #12]
  return(result);
 800e3d8:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e3da:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e3dc:	2301      	movs	r3, #1
 800e3de:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e3e0:	693b      	ldr	r3, [r7, #16]
 800e3e2:	f383 8810 	msr	PRIMASK, r3
}
 800e3e6:	46c0      	nop			; (mov r8, r8)
 800e3e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e3ea:	681b      	ldr	r3, [r3, #0]
 800e3ec:	681a      	ldr	r2, [r3, #0]
 800e3ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e3f0:	681b      	ldr	r3, [r3, #0]
 800e3f2:	2110      	movs	r1, #16
 800e3f4:	438a      	bics	r2, r1
 800e3f6:	601a      	str	r2, [r3, #0]
 800e3f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e3fa:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e3fc:	697b      	ldr	r3, [r7, #20]
 800e3fe:	f383 8810 	msr	PRIMASK, r3
}
 800e402:	46c0      	nop			; (mov r8, r8)
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e404:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e406:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e408:	2b01      	cmp	r3, #1
 800e40a:	d108      	bne.n	800e41e <UART_DMAReceiveCplt+0x112>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800e40c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e40e:	2258      	movs	r2, #88	; 0x58
 800e410:	5a9a      	ldrh	r2, [r3, r2]
 800e412:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e414:	0011      	movs	r1, r2
 800e416:	0018      	movs	r0, r3
 800e418:	f7ff f9e4 	bl	800d7e4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800e41c:	e003      	b.n	800e426 <UART_DMAReceiveCplt+0x11a>
    HAL_UART_RxCpltCallback(huart);
 800e41e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e420:	0018      	movs	r0, r3
 800e422:	f7ff f9c7 	bl	800d7b4 <HAL_UART_RxCpltCallback>
}
 800e426:	46c0      	nop			; (mov r8, r8)
 800e428:	46bd      	mov	sp, r7
 800e42a:	b014      	add	sp, #80	; 0x50
 800e42c:	bd80      	pop	{r7, pc}
 800e42e:	46c0      	nop			; (mov r8, r8)
 800e430:	fffffeff 	.word	0xfffffeff

0800e434 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800e434:	b580      	push	{r7, lr}
 800e436:	b084      	sub	sp, #16
 800e438:	af00      	add	r7, sp, #0
 800e43a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e43c:	687b      	ldr	r3, [r7, #4]
 800e43e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e440:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e442:	68fb      	ldr	r3, [r7, #12]
 800e444:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e446:	2b01      	cmp	r3, #1
 800e448:	d10a      	bne.n	800e460 <UART_DMARxHalfCplt+0x2c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800e44a:	68fb      	ldr	r3, [r7, #12]
 800e44c:	2258      	movs	r2, #88	; 0x58
 800e44e:	5a9b      	ldrh	r3, [r3, r2]
 800e450:	085b      	lsrs	r3, r3, #1
 800e452:	b29a      	uxth	r2, r3
 800e454:	68fb      	ldr	r3, [r7, #12]
 800e456:	0011      	movs	r1, r2
 800e458:	0018      	movs	r0, r3
 800e45a:	f7ff f9c3 	bl	800d7e4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800e45e:	e003      	b.n	800e468 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 800e460:	68fb      	ldr	r3, [r7, #12]
 800e462:	0018      	movs	r0, r3
 800e464:	f7ff f9ae 	bl	800d7c4 <HAL_UART_RxHalfCpltCallback>
}
 800e468:	46c0      	nop			; (mov r8, r8)
 800e46a:	46bd      	mov	sp, r7
 800e46c:	b004      	add	sp, #16
 800e46e:	bd80      	pop	{r7, pc}

0800e470 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800e470:	b580      	push	{r7, lr}
 800e472:	b086      	sub	sp, #24
 800e474:	af00      	add	r7, sp, #0
 800e476:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e478:	687b      	ldr	r3, [r7, #4]
 800e47a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e47c:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800e47e:	697b      	ldr	r3, [r7, #20]
 800e480:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e482:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800e484:	697b      	ldr	r3, [r7, #20]
 800e486:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e488:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800e48a:	697b      	ldr	r3, [r7, #20]
 800e48c:	681b      	ldr	r3, [r3, #0]
 800e48e:	689b      	ldr	r3, [r3, #8]
 800e490:	2280      	movs	r2, #128	; 0x80
 800e492:	4013      	ands	r3, r2
 800e494:	2b80      	cmp	r3, #128	; 0x80
 800e496:	d10a      	bne.n	800e4ae <UART_DMAError+0x3e>
 800e498:	693b      	ldr	r3, [r7, #16]
 800e49a:	2b21      	cmp	r3, #33	; 0x21
 800e49c:	d107      	bne.n	800e4ae <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800e49e:	697b      	ldr	r3, [r7, #20]
 800e4a0:	2252      	movs	r2, #82	; 0x52
 800e4a2:	2100      	movs	r1, #0
 800e4a4:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 800e4a6:	697b      	ldr	r3, [r7, #20]
 800e4a8:	0018      	movs	r0, r3
 800e4aa:	f7ff fea9 	bl	800e200 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800e4ae:	697b      	ldr	r3, [r7, #20]
 800e4b0:	681b      	ldr	r3, [r3, #0]
 800e4b2:	689b      	ldr	r3, [r3, #8]
 800e4b4:	2240      	movs	r2, #64	; 0x40
 800e4b6:	4013      	ands	r3, r2
 800e4b8:	2b40      	cmp	r3, #64	; 0x40
 800e4ba:	d10a      	bne.n	800e4d2 <UART_DMAError+0x62>
 800e4bc:	68fb      	ldr	r3, [r7, #12]
 800e4be:	2b22      	cmp	r3, #34	; 0x22
 800e4c0:	d107      	bne.n	800e4d2 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800e4c2:	697b      	ldr	r3, [r7, #20]
 800e4c4:	225a      	movs	r2, #90	; 0x5a
 800e4c6:	2100      	movs	r1, #0
 800e4c8:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 800e4ca:	697b      	ldr	r3, [r7, #20]
 800e4cc:	0018      	movs	r0, r3
 800e4ce:	f7ff febb 	bl	800e248 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800e4d2:	697b      	ldr	r3, [r7, #20]
 800e4d4:	2280      	movs	r2, #128	; 0x80
 800e4d6:	589b      	ldr	r3, [r3, r2]
 800e4d8:	2210      	movs	r2, #16
 800e4da:	431a      	orrs	r2, r3
 800e4dc:	697b      	ldr	r3, [r7, #20]
 800e4de:	2180      	movs	r1, #128	; 0x80
 800e4e0:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800e4e2:	697b      	ldr	r3, [r7, #20]
 800e4e4:	0018      	movs	r0, r3
 800e4e6:	f7ff f975 	bl	800d7d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e4ea:	46c0      	nop			; (mov r8, r8)
 800e4ec:	46bd      	mov	sp, r7
 800e4ee:	b006      	add	sp, #24
 800e4f0:	bd80      	pop	{r7, pc}

0800e4f2 <MX_MEMS_Init>:
static void Temperature_Sensor_Handler(TMsg *Msg, SensorData *SD);
static void Humidity_Sensor_Handler(TMsg *Msg, SensorData *SD);
static void TIM_Config(uint32_t Freq);

void MX_MEMS_Init(void)
{
 800e4f2:	b580      	push	{r7, lr}
 800e4f4:	af00      	add	r7, sp, #0

  /* USER CODE END MEMS_Init_PreTreatment */

  /* Initialize the peripherals and the MEMS components */

  MX_DataLogFusion_Init();
 800e4f6:	f000 f825 	bl	800e544 <MX_DataLogFusion_Init>

  /* USER CODE BEGIN MEMS_Init_PostTreatment */

  /* USER CODE END MEMS_Init_PostTreatment */
}
 800e4fa:	46c0      	nop			; (mov r8, r8)
 800e4fc:	46bd      	mov	sp, r7
 800e4fe:	bd80      	pop	{r7, pc}

0800e500 <MX_MEMS_Process>:

/*
 * LM background task
 */
SensorData MX_MEMS_Process(void)
{
 800e500:	b580      	push	{r7, lr}
 800e502:	b082      	sub	sp, #8
 800e504:	af00      	add	r7, sp, #0
 800e506:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN MEMS_Process_PreTreatment */

  /* USER CODE END MEMS_Process_PreTreatment */

  return MX_DataLogFusion_Process();
 800e508:	687b      	ldr	r3, [r7, #4]
 800e50a:	0018      	movs	r0, r3
 800e50c:	f000 f896 	bl	800e63c <MX_DataLogFusion_Process>

  /* USER CODE BEGIN MEMS_Process_PostTreatment */

  /* USER CODE END MEMS_Process_PostTreatment */
}
 800e510:	6878      	ldr	r0, [r7, #4]
 800e512:	46bd      	mov	sp, r7
 800e514:	b002      	add	sp, #8
 800e516:	bd80      	pop	{r7, pc}

0800e518 <HAL_TIM_PeriodElapsedCallback>:
 * @param  htim pointer to a TIM_HandleTypeDef structure that contains
 *              the configuration information for TIM module.
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800e518:	b580      	push	{r7, lr}
 800e51a:	b082      	sub	sp, #8
 800e51c:	af00      	add	r7, sp, #0
 800e51e:	6078      	str	r0, [r7, #4]
  if (htim->Instance == BSP_IP_TIM_Handle.Instance)
 800e520:	687b      	ldr	r3, [r7, #4]
 800e522:	681a      	ldr	r2, [r3, #0]
 800e524:	4b05      	ldr	r3, [pc, #20]	; (800e53c <HAL_TIM_PeriodElapsedCallback+0x24>)
 800e526:	681b      	ldr	r3, [r3, #0]
 800e528:	429a      	cmp	r2, r3
 800e52a:	d102      	bne.n	800e532 <HAL_TIM_PeriodElapsedCallback+0x1a>
  {
    SensorReadRequest = 1;
 800e52c:	4b04      	ldr	r3, [pc, #16]	; (800e540 <HAL_TIM_PeriodElapsedCallback+0x28>)
 800e52e:	2201      	movs	r2, #1
 800e530:	701a      	strb	r2, [r3, #0]
  }
}
 800e532:	46c0      	nop			; (mov r8, r8)
 800e534:	46bd      	mov	sp, r7
 800e536:	b002      	add	sp, #8
 800e538:	bd80      	pop	{r7, pc}
 800e53a:	46c0      	nop			; (mov r8, r8)
 800e53c:	20000b00 	.word	0x20000b00
 800e540:	20000e40 	.word	0x20000e40

0800e544 <MX_DataLogFusion_Init>:
/**
  * @brief  Initialize the application
  * @retval None
  */
static void MX_DataLogFusion_Init(void)
{
 800e544:	b580      	push	{r7, lr}
 800e546:	b086      	sub	sp, #24
 800e548:	af00      	add	r7, sp, #0
  float ans_float;

  /* Initialize button */
  BSP_PB_Init(BUTTON_KEY, BUTTON_MODE_EXTI);
 800e54a:	2101      	movs	r1, #1
 800e54c:	2000      	movs	r0, #0
 800e54e:	f7fb fa4b 	bl	80099e8 <BSP_PB_Init>

  /* Check what is the Push Button State when the button is not pressed. It can change across families */
  PushButtonState = (BSP_PB_GetState(BUTTON_KEY)) ?  0 : 1;
 800e552:	2000      	movs	r0, #0
 800e554:	f7fb faa2 	bl	8009a9c <BSP_PB_GetState>
 800e558:	0003      	movs	r3, r0
 800e55a:	425a      	negs	r2, r3
 800e55c:	4153      	adcs	r3, r2
 800e55e:	b2db      	uxtb	r3, r3
 800e560:	001a      	movs	r2, r3
 800e562:	4b30      	ldr	r3, [pc, #192]	; (800e624 <MX_DataLogFusion_Init+0xe0>)
 800e564:	601a      	str	r2, [r3, #0]

  /* Initialize LED */
  BSP_LED_Init(LED2);
 800e566:	2000      	movs	r0, #0
 800e568:	f7fb f9b6 	bl	80098d8 <BSP_LED_Init>

  /* Initialize Virtual COM Port */
  BSP_COM_Init(COM1);
 800e56c:	2000      	movs	r0, #0
 800e56e:	f7fb faf5 	bl	8009b5c <BSP_COM_Init>

  /* Initialize Timer */
  BSP_IP_TIM_Init();
 800e572:	f7f3 f901 	bl	8001778 <MX_TIM3_Init>

  /* Configure Timer to run with desired algorithm frequency */
  TIM_Config(ALGO_FREQ);
 800e576:	2064      	movs	r0, #100	; 0x64
 800e578:	f000 fd4c 	bl	800f014 <TIM_Config>

  /* Initialize (disabled) sensors */
  Init_Sensors();
 800e57c:	f000 f914 	bl	800e7a8 <Init_Sensors>

  /* Sensor Fusion API initialization function */
  MotionFX_manager_init();
 800e580:	f001 fca5 	bl	800fece <MotionFX_manager_init>

  /* OPTIONAL */
  /* Get library version */
  MotionFX_manager_get_version(LibVersion, &LibVersionLen);
 800e584:	4a28      	ldr	r2, [pc, #160]	; (800e628 <MX_DataLogFusion_Init+0xe4>)
 800e586:	4b29      	ldr	r3, [pc, #164]	; (800e62c <MX_DataLogFusion_Init+0xe8>)
 800e588:	0011      	movs	r1, r2
 800e58a:	0018      	movs	r0, r3
 800e58c:	f001 fd0a 	bl	800ffa4 <MotionFX_manager_get_version>

  /* Enable magnetometer calibration */
  MotionFX_manager_MagCal_start(ALGO_PERIOD);
 800e590:	200a      	movs	r0, #10
 800e592:	f001 fd29 	bl	800ffe8 <MotionFX_manager_MagCal_start>

  /* Test if calibration data are available */
  MFX_CM0P_MagCal_output_t mag_cal_test;
  MotionFX_CM0P_MagCal_getParams(&mag_cal_test);
 800e596:	1d3b      	adds	r3, r7, #4
 800e598:	0018      	movs	r0, r3
 800e59a:	f005 f9ef 	bl	801397c <MotionFX_CM0P_MagCal_getParams>

  /* If calibration data are available load HI coefficients */
  if (mag_cal_test.CalQuality == MFX_CM0P_CALQSTATUSBEST)
 800e59e:	1d3b      	adds	r3, r7, #4
 800e5a0:	7b1b      	ldrb	r3, [r3, #12]
 800e5a2:	2b03      	cmp	r3, #3
 800e5a4:	d12c      	bne.n	800e600 <MX_DataLogFusion_Init+0xbc>
  {
    ans_float = (mag_cal_test.HI_Bias[0] * FROM_UT50_TO_MGAUSS);
 800e5a6:	1d3b      	adds	r3, r7, #4
 800e5a8:	681b      	ldr	r3, [r3, #0]
 800e5aa:	4921      	ldr	r1, [pc, #132]	; (800e630 <MX_DataLogFusion_Init+0xec>)
 800e5ac:	1c18      	adds	r0, r3, #0
 800e5ae:	f7f2 fbfd 	bl	8000dac <__aeabi_fmul>
 800e5b2:	1c03      	adds	r3, r0, #0
 800e5b4:	617b      	str	r3, [r7, #20]
    MagOffset.x = (int32_t)ans_float;
 800e5b6:	6978      	ldr	r0, [r7, #20]
 800e5b8:	f7f2 fee2 	bl	8001380 <__aeabi_f2iz>
 800e5bc:	0002      	movs	r2, r0
 800e5be:	4b1d      	ldr	r3, [pc, #116]	; (800e634 <MX_DataLogFusion_Init+0xf0>)
 800e5c0:	601a      	str	r2, [r3, #0]
    ans_float = (mag_cal_test.HI_Bias[1] * FROM_UT50_TO_MGAUSS);
 800e5c2:	1d3b      	adds	r3, r7, #4
 800e5c4:	685b      	ldr	r3, [r3, #4]
 800e5c6:	491a      	ldr	r1, [pc, #104]	; (800e630 <MX_DataLogFusion_Init+0xec>)
 800e5c8:	1c18      	adds	r0, r3, #0
 800e5ca:	f7f2 fbef 	bl	8000dac <__aeabi_fmul>
 800e5ce:	1c03      	adds	r3, r0, #0
 800e5d0:	617b      	str	r3, [r7, #20]
    MagOffset.y = (int32_t)ans_float;
 800e5d2:	6978      	ldr	r0, [r7, #20]
 800e5d4:	f7f2 fed4 	bl	8001380 <__aeabi_f2iz>
 800e5d8:	0002      	movs	r2, r0
 800e5da:	4b16      	ldr	r3, [pc, #88]	; (800e634 <MX_DataLogFusion_Init+0xf0>)
 800e5dc:	605a      	str	r2, [r3, #4]
    ans_float = (mag_cal_test.HI_Bias[2] * FROM_UT50_TO_MGAUSS);
 800e5de:	1d3b      	adds	r3, r7, #4
 800e5e0:	689b      	ldr	r3, [r3, #8]
 800e5e2:	4913      	ldr	r1, [pc, #76]	; (800e630 <MX_DataLogFusion_Init+0xec>)
 800e5e4:	1c18      	adds	r0, r3, #0
 800e5e6:	f7f2 fbe1 	bl	8000dac <__aeabi_fmul>
 800e5ea:	1c03      	adds	r3, r0, #0
 800e5ec:	617b      	str	r3, [r7, #20]
    MagOffset.z = (int32_t)ans_float;
 800e5ee:	6978      	ldr	r0, [r7, #20]
 800e5f0:	f7f2 fec6 	bl	8001380 <__aeabi_f2iz>
 800e5f4:	0002      	movs	r2, r0
 800e5f6:	4b0f      	ldr	r3, [pc, #60]	; (800e634 <MX_DataLogFusion_Init+0xf0>)
 800e5f8:	609a      	str	r2, [r3, #8]

    MagCalStatus = 1;
 800e5fa:	4b0f      	ldr	r3, [pc, #60]	; (800e638 <MX_DataLogFusion_Init+0xf4>)
 800e5fc:	2201      	movs	r2, #1
 800e5fe:	701a      	strb	r2, [r3, #0]
  }

  BSP_LED_On(LED2);
 800e600:	2000      	movs	r0, #0
 800e602:	f7fb f97d 	bl	8009900 <BSP_LED_On>
  HAL_Delay(500);
 800e606:	23fa      	movs	r3, #250	; 0xfa
 800e608:	005b      	lsls	r3, r3, #1
 800e60a:	0018      	movs	r0, r3
 800e60c:	f7fb fc06 	bl	8009e1c <HAL_Delay>
  BSP_LED_Off(LED2);
 800e610:	2000      	movs	r0, #0
 800e612:	f7fb f98d 	bl	8009930 <BSP_LED_Off>

  /* Start receiving messages via DMA */
  UART_StartReceiveMsg();
 800e616:	f000 fe67 	bl	800f2e8 <UART_StartReceiveMsg>
}
 800e61a:	46c0      	nop			; (mov r8, r8)
 800e61c:	46bd      	mov	sp, r7
 800e61e:	b006      	add	sp, #24
 800e620:	bd80      	pop	{r7, pc}
 800e622:	46c0      	nop			; (mov r8, r8)
 800e624:	20000ff4 	.word	0x20000ff4
 800e628:	20000e3c 	.word	0x20000e3c
 800e62c:	20000e18 	.word	0x20000e18
 800e630:	43fa0000 	.word	0x43fa0000
 800e634:	2000102c 	.word	0x2000102c
 800e638:	20001038 	.word	0x20001038

0800e63c <MX_DataLogFusion_Process>:
/**
  * @brief  Process of the application
  * @retval None
  */
static SensorData MX_DataLogFusion_Process(void)
{
 800e63c:	b590      	push	{r4, r7, lr}
 800e63e:	b085      	sub	sp, #20
 800e640:	af00      	add	r7, sp, #0
 800e642:	6078      	str	r0, [r7, #4]
  static TMsg msg_dat;
  static TMsg msg_cmd;
  SensorData SD = {10.0, 10.0};
 800e644:	2308      	movs	r3, #8
 800e646:	18fb      	adds	r3, r7, r3
 800e648:	4a4c      	ldr	r2, [pc, #304]	; (800e77c <MX_DataLogFusion_Process+0x140>)
 800e64a:	ca03      	ldmia	r2!, {r0, r1}
 800e64c:	c303      	stmia	r3!, {r0, r1}

  if (UART_ReceivedMSG((TMsg *)&msg_cmd) == 1)
 800e64e:	4b4c      	ldr	r3, [pc, #304]	; (800e780 <MX_DataLogFusion_Process+0x144>)
 800e650:	0018      	movs	r0, r3
 800e652:	f000 fd15 	bl	800f080 <UART_ReceivedMSG>
 800e656:	0003      	movs	r3, r0
 800e658:	2b01      	cmp	r3, #1
 800e65a:	d107      	bne.n	800e66c <MX_DataLogFusion_Process+0x30>
  {
    if (msg_cmd.Data[0] == DEV_ADDR)
 800e65c:	4b48      	ldr	r3, [pc, #288]	; (800e780 <MX_DataLogFusion_Process+0x144>)
 800e65e:	791b      	ldrb	r3, [r3, #4]
 800e660:	2b32      	cmp	r3, #50	; 0x32
 800e662:	d103      	bne.n	800e66c <MX_DataLogFusion_Process+0x30>
    {
      (void)HandleMSG((TMsg *)&msg_cmd);
 800e664:	4b46      	ldr	r3, [pc, #280]	; (800e780 <MX_DataLogFusion_Process+0x144>)
 800e666:	0018      	movs	r0, r3
 800e668:	f000 fedc 	bl	800f424 <HandleMSG>
    }
  }

  if (MagCalRequest == 1U)
 800e66c:	4b45      	ldr	r3, [pc, #276]	; (800e784 <MX_DataLogFusion_Process+0x148>)
 800e66e:	781b      	ldrb	r3, [r3, #0]
 800e670:	b2db      	uxtb	r3, r3
 800e672:	2b01      	cmp	r3, #1
 800e674:	d120      	bne.n	800e6b8 <MX_DataLogFusion_Process+0x7c>
  {
    /* Debouncing */
    HAL_Delay(50);
 800e676:	2032      	movs	r0, #50	; 0x32
 800e678:	f7fb fbd0 	bl	8009e1c <HAL_Delay>

    /* Wait until the button is released */
    while ((BSP_PB_GetState( BUTTON_KEY ) == PushButtonState));
 800e67c:	46c0      	nop			; (mov r8, r8)
 800e67e:	2000      	movs	r0, #0
 800e680:	f7fb fa0c 	bl	8009a9c <BSP_PB_GetState>
 800e684:	0002      	movs	r2, r0
 800e686:	4b40      	ldr	r3, [pc, #256]	; (800e788 <MX_DataLogFusion_Process+0x14c>)
 800e688:	681b      	ldr	r3, [r3, #0]
 800e68a:	429a      	cmp	r2, r3
 800e68c:	d0f7      	beq.n	800e67e <MX_DataLogFusion_Process+0x42>

    /* Debouncing */
    HAL_Delay(50);
 800e68e:	2032      	movs	r0, #50	; 0x32
 800e690:	f7fb fbc4 	bl	8009e1c <HAL_Delay>

    MagCalRequest = 0;
 800e694:	4b3b      	ldr	r3, [pc, #236]	; (800e784 <MX_DataLogFusion_Process+0x148>)
 800e696:	2200      	movs	r2, #0
 800e698:	701a      	strb	r2, [r3, #0]

    /* Reset magnetometer calibration value*/
    MagCalStatus = 0;
 800e69a:	4b3c      	ldr	r3, [pc, #240]	; (800e78c <MX_DataLogFusion_Process+0x150>)
 800e69c:	2200      	movs	r2, #0
 800e69e:	701a      	strb	r2, [r3, #0]
    MagOffset.x = 0;
 800e6a0:	4b3b      	ldr	r3, [pc, #236]	; (800e790 <MX_DataLogFusion_Process+0x154>)
 800e6a2:	2200      	movs	r2, #0
 800e6a4:	601a      	str	r2, [r3, #0]
    MagOffset.y = 0;
 800e6a6:	4b3a      	ldr	r3, [pc, #232]	; (800e790 <MX_DataLogFusion_Process+0x154>)
 800e6a8:	2200      	movs	r2, #0
 800e6aa:	605a      	str	r2, [r3, #4]
    MagOffset.z = 0;
 800e6ac:	4b38      	ldr	r3, [pc, #224]	; (800e790 <MX_DataLogFusion_Process+0x154>)
 800e6ae:	2200      	movs	r2, #0
 800e6b0:	609a      	str	r2, [r3, #8]

    /* Enable magnetometer calibration */
    MotionFX_manager_MagCal_start(ALGO_PERIOD);
 800e6b2:	200a      	movs	r0, #10
 800e6b4:	f001 fc98 	bl	800ffe8 <MotionFX_manager_MagCal_start>
  }

  if (SensorReadRequest == 1U)
 800e6b8:	4b36      	ldr	r3, [pc, #216]	; (800e794 <MX_DataLogFusion_Process+0x158>)
 800e6ba:	781b      	ldrb	r3, [r3, #0]
 800e6bc:	b2db      	uxtb	r3, r3
 800e6be:	2b01      	cmp	r3, #1
 800e6c0:	d152      	bne.n	800e768 <MX_DataLogFusion_Process+0x12c>
  {
    //SensorReadRequest = 0;

    /* Acquire data from enabled sensors and fill Msg stream */
    RTC_Handler(&msg_dat);
 800e6c2:	4b35      	ldr	r3, [pc, #212]	; (800e798 <MX_DataLogFusion_Process+0x15c>)
 800e6c4:	0018      	movs	r0, r3
 800e6c6:	f000 f889 	bl	800e7dc <RTC_Handler>
    Accelero_Sensor_Handler(&msg_dat);
 800e6ca:	4b33      	ldr	r3, [pc, #204]	; (800e798 <MX_DataLogFusion_Process+0x15c>)
 800e6cc:	0018      	movs	r0, r3
 800e6ce:	f000 fa67 	bl	800eba0 <Accelero_Sensor_Handler>
    Gyro_Sensor_Handler(&msg_dat);
 800e6d2:	4b31      	ldr	r3, [pc, #196]	; (800e798 <MX_DataLogFusion_Process+0x15c>)
 800e6d4:	0018      	movs	r0, r3
 800e6d6:	f000 fabd 	bl	800ec54 <Gyro_Sensor_Handler>
    Magneto_Sensor_Handler(&msg_dat);
 800e6da:	4b2f      	ldr	r3, [pc, #188]	; (800e798 <MX_DataLogFusion_Process+0x15c>)
 800e6dc:	0018      	movs	r0, r3
 800e6de:	f000 fb13 	bl	800ed08 <Magneto_Sensor_Handler>

    Humidity_Sensor_Handler(&msg_dat, &SD);
 800e6e2:	2408      	movs	r4, #8
 800e6e4:	193a      	adds	r2, r7, r4
 800e6e6:	4b2c      	ldr	r3, [pc, #176]	; (800e798 <MX_DataLogFusion_Process+0x15c>)
 800e6e8:	0011      	movs	r1, r2
 800e6ea:	0018      	movs	r0, r3
 800e6ec:	f000 fc5a 	bl	800efa4 <Humidity_Sensor_Handler>
    Temperature_Sensor_Handler(&msg_dat, &SD);
 800e6f0:	193a      	adds	r2, r7, r4
 800e6f2:	4b29      	ldr	r3, [pc, #164]	; (800e798 <MX_DataLogFusion_Process+0x15c>)
 800e6f4:	0011      	movs	r1, r2
 800e6f6:	0018      	movs	r0, r3
 800e6f8:	f000 fc1c 	bl	800ef34 <Temperature_Sensor_Handler>

    Pressure_Sensor_Handler(&msg_dat);
 800e6fc:	4b26      	ldr	r3, [pc, #152]	; (800e798 <MX_DataLogFusion_Process+0x15c>)
 800e6fe:	0018      	movs	r0, r3
 800e700:	f000 fbe6 	bl	800eed0 <Pressure_Sensor_Handler>

    /* Sensor Fusion specific part */
    FX_Data_Handler(&msg_dat);
 800e704:	4b24      	ldr	r3, [pc, #144]	; (800e798 <MX_DataLogFusion_Process+0x15c>)
 800e706:	0018      	movs	r0, r3
 800e708:	f000 f8e0 	bl	800e8cc <FX_Data_Handler>

    /* Send data stream */
    INIT_STREAMING_HEADER(&msg_dat);
 800e70c:	4b22      	ldr	r3, [pc, #136]	; (800e798 <MX_DataLogFusion_Process+0x15c>)
 800e70e:	0018      	movs	r0, r3
 800e710:	f000 fe70 	bl	800f3f4 <INIT_STREAMING_HEADER>
    msg_dat.Len = STREAMING_MSG_LENGTH;
 800e714:	4b20      	ldr	r3, [pc, #128]	; (800e798 <MX_DataLogFusion_Process+0x15c>)
 800e716:	2277      	movs	r2, #119	; 0x77
 800e718:	601a      	str	r2, [r3, #0]

    if (UseOfflineData == 1U)
 800e71a:	4b20      	ldr	r3, [pc, #128]	; (800e79c <MX_DataLogFusion_Process+0x160>)
 800e71c:	781b      	ldrb	r3, [r3, #0]
 800e71e:	2b01      	cmp	r3, #1
 800e720:	d11e      	bne.n	800e760 <MX_DataLogFusion_Process+0x124>
    {
      OfflineDataCount--;
 800e722:	4b1f      	ldr	r3, [pc, #124]	; (800e7a0 <MX_DataLogFusion_Process+0x164>)
 800e724:	681b      	ldr	r3, [r3, #0]
 800e726:	1e5a      	subs	r2, r3, #1
 800e728:	4b1d      	ldr	r3, [pc, #116]	; (800e7a0 <MX_DataLogFusion_Process+0x164>)
 800e72a:	601a      	str	r2, [r3, #0]
      if (OfflineDataCount < 0)
 800e72c:	4b1c      	ldr	r3, [pc, #112]	; (800e7a0 <MX_DataLogFusion_Process+0x164>)
 800e72e:	681b      	ldr	r3, [r3, #0]
 800e730:	2b00      	cmp	r3, #0
 800e732:	da02      	bge.n	800e73a <MX_DataLogFusion_Process+0xfe>
      {
        OfflineDataCount = 0;
 800e734:	4b1a      	ldr	r3, [pc, #104]	; (800e7a0 <MX_DataLogFusion_Process+0x164>)
 800e736:	2200      	movs	r2, #0
 800e738:	601a      	str	r2, [r3, #0]
      }

      OfflineDataReadIndex++;
 800e73a:	4b1a      	ldr	r3, [pc, #104]	; (800e7a4 <MX_DataLogFusion_Process+0x168>)
 800e73c:	681b      	ldr	r3, [r3, #0]
 800e73e:	1c5a      	adds	r2, r3, #1
 800e740:	4b18      	ldr	r3, [pc, #96]	; (800e7a4 <MX_DataLogFusion_Process+0x168>)
 800e742:	601a      	str	r2, [r3, #0]
      if (OfflineDataReadIndex >= OFFLINE_DATA_SIZE)
 800e744:	4b17      	ldr	r3, [pc, #92]	; (800e7a4 <MX_DataLogFusion_Process+0x168>)
 800e746:	681b      	ldr	r3, [r3, #0]
 800e748:	2b07      	cmp	r3, #7
 800e74a:	dd02      	ble.n	800e752 <MX_DataLogFusion_Process+0x116>
      {
        OfflineDataReadIndex = 0;
 800e74c:	4b15      	ldr	r3, [pc, #84]	; (800e7a4 <MX_DataLogFusion_Process+0x168>)
 800e74e:	2200      	movs	r2, #0
 800e750:	601a      	str	r2, [r3, #0]
      }

      if (OfflineDataCount > 0)
 800e752:	4b13      	ldr	r3, [pc, #76]	; (800e7a0 <MX_DataLogFusion_Process+0x164>)
 800e754:	681b      	ldr	r3, [r3, #0]
 800e756:	2b00      	cmp	r3, #0
 800e758:	dd02      	ble.n	800e760 <MX_DataLogFusion_Process+0x124>
      {
        SensorReadRequest = 1;
 800e75a:	4b0e      	ldr	r3, [pc, #56]	; (800e794 <MX_DataLogFusion_Process+0x158>)
 800e75c:	2201      	movs	r2, #1
 800e75e:	701a      	strb	r2, [r3, #0]
      }
    }
    UART_SendMsg(&msg_dat);
 800e760:	4b0d      	ldr	r3, [pc, #52]	; (800e798 <MX_DataLogFusion_Process+0x15c>)
 800e762:	0018      	movs	r0, r3
 800e764:	f000 fd9c 	bl	800f2a0 <UART_SendMsg>
  }
  return SD;
 800e768:	687b      	ldr	r3, [r7, #4]
 800e76a:	2208      	movs	r2, #8
 800e76c:	18ba      	adds	r2, r7, r2
 800e76e:	ca03      	ldmia	r2!, {r0, r1}
 800e770:	c303      	stmia	r3!, {r0, r1}
}
 800e772:	6878      	ldr	r0, [r7, #4]
 800e774:	46bd      	mov	sp, r7
 800e776:	b005      	add	sp, #20
 800e778:	bd90      	pop	{r4, r7, pc}
 800e77a:	46c0      	nop			; (mov r8, r8)
 800e77c:	08015a0c 	.word	0x08015a0c
 800e780:	2000103c 	.word	0x2000103c
 800e784:	20001028 	.word	0x20001028
 800e788:	20000ff4 	.word	0x20000ff4
 800e78c:	20001038 	.word	0x20001038
 800e790:	2000102c 	.word	0x2000102c
 800e794:	20000e40 	.word	0x20000e40
 800e798:	20001140 	.word	0x20001140
 800e79c:	20000e41 	.word	0x20000e41
 800e7a0:	20000fec 	.word	0x20000fec
 800e7a4:	20000fe4 	.word	0x20000fe4

0800e7a8 <Init_Sensors>:
 * @brief  Initialize all sensors
 * @param  None
 * @retval None
 */
static void Init_Sensors(void)
{
 800e7a8:	b580      	push	{r7, lr}
 800e7aa:	af00      	add	r7, sp, #0
  BSP_SENSOR_ACC_Init();
 800e7ac:	f001 fa44 	bl	800fc38 <BSP_SENSOR_ACC_Init>
  BSP_SENSOR_GYR_Init();
 800e7b0:	f001 fa4b 	bl	800fc4a <BSP_SENSOR_GYR_Init>
  BSP_SENSOR_MAG_Init();
 800e7b4:	f001 fa52 	bl	800fc5c <BSP_SENSOR_MAG_Init>
  BSP_SENSOR_PRESS_Init();
 800e7b8:	f001 fa59 	bl	800fc6e <BSP_SENSOR_PRESS_Init>
  BSP_SENSOR_TEMP_Init();
 800e7bc:	f001 fa60 	bl	800fc80 <BSP_SENSOR_TEMP_Init>
  BSP_SENSOR_HUM_Init();
 800e7c0:	f001 fa67 	bl	800fc92 <BSP_SENSOR_HUM_Init>

  BSP_SENSOR_ACC_SetOutputDataRate(ACC_ODR);
 800e7c4:	4b04      	ldr	r3, [pc, #16]	; (800e7d8 <Init_Sensors+0x30>)
 800e7c6:	1c18      	adds	r0, r3, #0
 800e7c8:	f001 fb2c 	bl	800fe24 <BSP_SENSOR_ACC_SetOutputDataRate>
  BSP_SENSOR_ACC_SetFullScale(ACC_FS);
 800e7cc:	2004      	movs	r0, #4
 800e7ce:	f001 fb37 	bl	800fe40 <BSP_SENSOR_ACC_SetFullScale>
}
 800e7d2:	46c0      	nop			; (mov r8, r8)
 800e7d4:	46bd      	mov	sp, r7
 800e7d6:	bd80      	pop	{r7, pc}
 800e7d8:	42c80000 	.word	0x42c80000

0800e7dc <RTC_Handler>:
 * @brief  Handles the time+date getting/sending
 * @param  Msg the time+date part of the stream
 * @retval None
 */
static void RTC_Handler(TMsg *Msg)
{
 800e7dc:	b590      	push	{r4, r7, lr}
 800e7de:	b08d      	sub	sp, #52	; 0x34
 800e7e0:	af00      	add	r7, sp, #0
 800e7e2:	6078      	str	r0, [r7, #4]
  uint8_t sub_sec = 0;
 800e7e4:	232f      	movs	r3, #47	; 0x2f
 800e7e6:	18fb      	adds	r3, r7, r3
 800e7e8:	2200      	movs	r2, #0
 800e7ea:	701a      	strb	r2, [r3, #0]
  RTC_DateTypeDef sdatestructureget;
  RTC_TimeTypeDef stimestructure;
  uint32_t ans_uint32;
  int32_t ans_int32;
  uint32_t RtcSynchPrediv = hrtc.Init.SynchPrediv;
 800e7ec:	4b33      	ldr	r3, [pc, #204]	; (800e8bc <RTC_Handler+0xe0>)
 800e7ee:	68db      	ldr	r3, [r3, #12]
 800e7f0:	62bb      	str	r3, [r7, #40]	; 0x28

  if (UseOfflineData == 1)
 800e7f2:	4b33      	ldr	r3, [pc, #204]	; (800e8c0 <RTC_Handler+0xe4>)
 800e7f4:	781b      	ldrb	r3, [r3, #0]
 800e7f6:	2b01      	cmp	r3, #1
 800e7f8:	d126      	bne.n	800e848 <RTC_Handler+0x6c>
  {
    Msg->Data[3] = (uint8_t)OfflineData[OfflineDataReadIndex].hours;
 800e7fa:	4b32      	ldr	r3, [pc, #200]	; (800e8c4 <RTC_Handler+0xe8>)
 800e7fc:	681a      	ldr	r2, [r3, #0]
 800e7fe:	4b32      	ldr	r3, [pc, #200]	; (800e8c8 <RTC_Handler+0xec>)
 800e800:	2134      	movs	r1, #52	; 0x34
 800e802:	434a      	muls	r2, r1
 800e804:	5cd2      	ldrb	r2, [r2, r3]
 800e806:	687b      	ldr	r3, [r7, #4]
 800e808:	71da      	strb	r2, [r3, #7]
    Msg->Data[4] = (uint8_t)OfflineData[OfflineDataReadIndex].minutes;
 800e80a:	4b2e      	ldr	r3, [pc, #184]	; (800e8c4 <RTC_Handler+0xe8>)
 800e80c:	681b      	ldr	r3, [r3, #0]
 800e80e:	4a2e      	ldr	r2, [pc, #184]	; (800e8c8 <RTC_Handler+0xec>)
 800e810:	2134      	movs	r1, #52	; 0x34
 800e812:	434b      	muls	r3, r1
 800e814:	18d3      	adds	r3, r2, r3
 800e816:	3301      	adds	r3, #1
 800e818:	781a      	ldrb	r2, [r3, #0]
 800e81a:	687b      	ldr	r3, [r7, #4]
 800e81c:	721a      	strb	r2, [r3, #8]
    Msg->Data[5] = (uint8_t)OfflineData[OfflineDataReadIndex].seconds;
 800e81e:	4b29      	ldr	r3, [pc, #164]	; (800e8c4 <RTC_Handler+0xe8>)
 800e820:	681b      	ldr	r3, [r3, #0]
 800e822:	4a29      	ldr	r2, [pc, #164]	; (800e8c8 <RTC_Handler+0xec>)
 800e824:	2134      	movs	r1, #52	; 0x34
 800e826:	434b      	muls	r3, r1
 800e828:	18d3      	adds	r3, r2, r3
 800e82a:	3302      	adds	r3, #2
 800e82c:	781a      	ldrb	r2, [r3, #0]
 800e82e:	687b      	ldr	r3, [r7, #4]
 800e830:	725a      	strb	r2, [r3, #9]
    Msg->Data[6] = (uint8_t)OfflineData[OfflineDataReadIndex].subsec;
 800e832:	4b24      	ldr	r3, [pc, #144]	; (800e8c4 <RTC_Handler+0xe8>)
 800e834:	681b      	ldr	r3, [r3, #0]
 800e836:	4a24      	ldr	r2, [pc, #144]	; (800e8c8 <RTC_Handler+0xec>)
 800e838:	2134      	movs	r1, #52	; 0x34
 800e83a:	434b      	muls	r3, r1
 800e83c:	18d3      	adds	r3, r2, r3
 800e83e:	3303      	adds	r3, #3
 800e840:	781a      	ldrb	r2, [r3, #0]
 800e842:	687b      	ldr	r3, [r7, #4]
 800e844:	729a      	strb	r2, [r3, #10]
    Msg->Data[3] = (uint8_t)stimestructure.Hours;
    Msg->Data[4] = (uint8_t)stimestructure.Minutes;
    Msg->Data[5] = (uint8_t)stimestructure.Seconds;
    Msg->Data[6] = sub_sec;
  }
}
 800e846:	e035      	b.n	800e8b4 <RTC_Handler+0xd8>
    (void)HAL_RTC_GetTime(&hrtc, &stimestructure, FORMAT_BIN);
 800e848:	2408      	movs	r4, #8
 800e84a:	1939      	adds	r1, r7, r4
 800e84c:	4b1b      	ldr	r3, [pc, #108]	; (800e8bc <RTC_Handler+0xe0>)
 800e84e:	2200      	movs	r2, #0
 800e850:	0018      	movs	r0, r3
 800e852:	f7fe f86b 	bl	800c92c <HAL_RTC_GetTime>
    (void)HAL_RTC_GetDate(&hrtc, &sdatestructureget, FORMAT_BIN);
 800e856:	231c      	movs	r3, #28
 800e858:	18f9      	adds	r1, r7, r3
 800e85a:	4b18      	ldr	r3, [pc, #96]	; (800e8bc <RTC_Handler+0xe0>)
 800e85c:	2200      	movs	r2, #0
 800e85e:	0018      	movs	r0, r3
 800e860:	f7fe f96e 	bl	800cb40 <HAL_RTC_GetDate>
    ans_int32 = (RtcSynchPrediv - (int32_t)stimestructure.SubSeconds) * 100;
 800e864:	193b      	adds	r3, r7, r4
 800e866:	685b      	ldr	r3, [r3, #4]
 800e868:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e86a:	1ad3      	subs	r3, r2, r3
 800e86c:	2264      	movs	r2, #100	; 0x64
 800e86e:	4353      	muls	r3, r2
 800e870:	627b      	str	r3, [r7, #36]	; 0x24
    ans_int32 /= RtcSynchPrediv + 1;
 800e872:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e874:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e876:	3301      	adds	r3, #1
 800e878:	0019      	movs	r1, r3
 800e87a:	0010      	movs	r0, r2
 800e87c:	f7f1 fc4e 	bl	800011c <__udivsi3>
 800e880:	0003      	movs	r3, r0
 800e882:	627b      	str	r3, [r7, #36]	; 0x24
    ans_uint32 = (uint32_t)ans_int32 & 0xFFU;
 800e884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e886:	22ff      	movs	r2, #255	; 0xff
 800e888:	4013      	ands	r3, r2
 800e88a:	623b      	str	r3, [r7, #32]
    sub_sec = (uint8_t)ans_uint32;
 800e88c:	212f      	movs	r1, #47	; 0x2f
 800e88e:	187b      	adds	r3, r7, r1
 800e890:	6a3a      	ldr	r2, [r7, #32]
 800e892:	701a      	strb	r2, [r3, #0]
    Msg->Data[3] = (uint8_t)stimestructure.Hours;
 800e894:	193b      	adds	r3, r7, r4
 800e896:	781a      	ldrb	r2, [r3, #0]
 800e898:	687b      	ldr	r3, [r7, #4]
 800e89a:	71da      	strb	r2, [r3, #7]
    Msg->Data[4] = (uint8_t)stimestructure.Minutes;
 800e89c:	193b      	adds	r3, r7, r4
 800e89e:	785a      	ldrb	r2, [r3, #1]
 800e8a0:	687b      	ldr	r3, [r7, #4]
 800e8a2:	721a      	strb	r2, [r3, #8]
    Msg->Data[5] = (uint8_t)stimestructure.Seconds;
 800e8a4:	193b      	adds	r3, r7, r4
 800e8a6:	789a      	ldrb	r2, [r3, #2]
 800e8a8:	687b      	ldr	r3, [r7, #4]
 800e8aa:	725a      	strb	r2, [r3, #9]
    Msg->Data[6] = sub_sec;
 800e8ac:	687b      	ldr	r3, [r7, #4]
 800e8ae:	187a      	adds	r2, r7, r1
 800e8b0:	7812      	ldrb	r2, [r2, #0]
 800e8b2:	729a      	strb	r2, [r3, #10]
}
 800e8b4:	46c0      	nop			; (mov r8, r8)
 800e8b6:	46bd      	mov	sp, r7
 800e8b8:	b00d      	add	sp, #52	; 0x34
 800e8ba:	bd90      	pop	{r4, r7, pc}
 800e8bc:	20000adc 	.word	0x20000adc
 800e8c0:	20000e41 	.word	0x20000e41
 800e8c4:	20000fe4 	.word	0x20000fe4
 800e8c8:	20000e44 	.word	0x20000e44

0800e8cc <FX_Data_Handler>:
 * @brief  Sensor Fusion data handler
 * @param  Msg the Sensor Fusion data part of the stream
 * @retval None
 */
static void FX_Data_Handler(TMsg *Msg)
{
 800e8cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e8ce:	b0ab      	sub	sp, #172	; 0xac
 800e8d0:	af00      	add	r7, sp, #0
 800e8d2:	6078      	str	r0, [r7, #4]
  uint32_t elapsed_time_us = 0U;
 800e8d4:	2300      	movs	r3, #0
 800e8d6:	22a4      	movs	r2, #164	; 0xa4
 800e8d8:	18b9      	adds	r1, r7, r2
 800e8da:	600b      	str	r3, [r1, #0]
  uint32_t prev_tick = 0U;
 800e8dc:	2300      	movs	r3, #0
 800e8de:	26a0      	movs	r6, #160	; 0xa0
 800e8e0:	19b9      	adds	r1, r7, r6
 800e8e2:	600b      	str	r3, [r1, #0]
  MFX_CM0P_input_t data_in;
  MFX_CM0P_input_t *pdata_in = &data_in;
 800e8e4:	2474      	movs	r4, #116	; 0x74
 800e8e6:	193b      	adds	r3, r7, r4
 800e8e8:	219c      	movs	r1, #156	; 0x9c
 800e8ea:	1878      	adds	r0, r7, r1
 800e8ec:	6003      	str	r3, [r0, #0]
  MFX_CM0P_output_t data_out;
  MFX_CM0P_output_t *pdata_out = &data_out;
 800e8ee:	200c      	movs	r0, #12
 800e8f0:	183b      	adds	r3, r7, r0
 800e8f2:	2598      	movs	r5, #152	; 0x98
 800e8f4:	1978      	adds	r0, r7, r5
 800e8f6:	6003      	str	r3, [r0, #0]

  if ((SensorsEnabled & ACCELEROMETER_SENSOR) == ACCELEROMETER_SENSOR)
 800e8f8:	4b99      	ldr	r3, [pc, #612]	; (800eb60 <FX_Data_Handler+0x294>)
 800e8fa:	681b      	ldr	r3, [r3, #0]
 800e8fc:	2210      	movs	r2, #16
 800e8fe:	4013      	ands	r3, r2
 800e900:	2b10      	cmp	r3, #16
 800e902:	d000      	beq.n	800e906 <FX_Data_Handler+0x3a>
 800e904:	e127      	b.n	800eb56 <FX_Data_Handler+0x28a>
  {
    if ((SensorsEnabled & GYROSCOPE_SENSOR) == GYROSCOPE_SENSOR)
 800e906:	4b96      	ldr	r3, [pc, #600]	; (800eb60 <FX_Data_Handler+0x294>)
 800e908:	681b      	ldr	r3, [r3, #0]
 800e90a:	2220      	movs	r2, #32
 800e90c:	4013      	ands	r3, r2
 800e90e:	2b20      	cmp	r3, #32
 800e910:	d000      	beq.n	800e914 <FX_Data_Handler+0x48>
 800e912:	e120      	b.n	800eb56 <FX_Data_Handler+0x28a>
    {
      if ((SensorsEnabled & MAGNETIC_SENSOR) == MAGNETIC_SENSOR)
 800e914:	4b92      	ldr	r3, [pc, #584]	; (800eb60 <FX_Data_Handler+0x294>)
 800e916:	681b      	ldr	r3, [r3, #0]
 800e918:	2240      	movs	r2, #64	; 0x40
 800e91a:	4013      	ands	r3, r2
 800e91c:	2b40      	cmp	r3, #64	; 0x40
 800e91e:	d000      	beq.n	800e922 <FX_Data_Handler+0x56>
 800e920:	e119      	b.n	800eb56 <FX_Data_Handler+0x28a>
      {
        /* Convert angular velocity from [mdps] to [dps] */
        data_in.gyro[0] = (float)GyrValue.x * FROM_MDPS_TO_DPS;
 800e922:	4b90      	ldr	r3, [pc, #576]	; (800eb64 <FX_Data_Handler+0x298>)
 800e924:	681b      	ldr	r3, [r3, #0]
 800e926:	0018      	movs	r0, r3
 800e928:	f7f2 fd4a 	bl	80013c0 <__aeabi_i2f>
 800e92c:	1c03      	adds	r3, r0, #0
 800e92e:	498e      	ldr	r1, [pc, #568]	; (800eb68 <FX_Data_Handler+0x29c>)
 800e930:	1c18      	adds	r0, r3, #0
 800e932:	f7f2 fa3b 	bl	8000dac <__aeabi_fmul>
 800e936:	1c03      	adds	r3, r0, #0
 800e938:	1c1a      	adds	r2, r3, #0
 800e93a:	193b      	adds	r3, r7, r4
 800e93c:	619a      	str	r2, [r3, #24]
        data_in.gyro[1] = (float)GyrValue.y * FROM_MDPS_TO_DPS;
 800e93e:	4b89      	ldr	r3, [pc, #548]	; (800eb64 <FX_Data_Handler+0x298>)
 800e940:	685b      	ldr	r3, [r3, #4]
 800e942:	0018      	movs	r0, r3
 800e944:	f7f2 fd3c 	bl	80013c0 <__aeabi_i2f>
 800e948:	1c03      	adds	r3, r0, #0
 800e94a:	4987      	ldr	r1, [pc, #540]	; (800eb68 <FX_Data_Handler+0x29c>)
 800e94c:	1c18      	adds	r0, r3, #0
 800e94e:	f7f2 fa2d 	bl	8000dac <__aeabi_fmul>
 800e952:	1c03      	adds	r3, r0, #0
 800e954:	1c1a      	adds	r2, r3, #0
 800e956:	193b      	adds	r3, r7, r4
 800e958:	61da      	str	r2, [r3, #28]
        data_in.gyro[2] = (float)GyrValue.z * FROM_MDPS_TO_DPS;
 800e95a:	4b82      	ldr	r3, [pc, #520]	; (800eb64 <FX_Data_Handler+0x298>)
 800e95c:	689b      	ldr	r3, [r3, #8]
 800e95e:	0018      	movs	r0, r3
 800e960:	f7f2 fd2e 	bl	80013c0 <__aeabi_i2f>
 800e964:	1c03      	adds	r3, r0, #0
 800e966:	4980      	ldr	r1, [pc, #512]	; (800eb68 <FX_Data_Handler+0x29c>)
 800e968:	1c18      	adds	r0, r3, #0
 800e96a:	f7f2 fa1f 	bl	8000dac <__aeabi_fmul>
 800e96e:	1c03      	adds	r3, r0, #0
 800e970:	1c1a      	adds	r2, r3, #0
 800e972:	193b      	adds	r3, r7, r4
 800e974:	621a      	str	r2, [r3, #32]

        /* Convert acceleration from [mg] to [g] */
        data_in.acc[0] = (float)AccValue.x * FROM_MG_TO_G;
 800e976:	4b7d      	ldr	r3, [pc, #500]	; (800eb6c <FX_Data_Handler+0x2a0>)
 800e978:	681b      	ldr	r3, [r3, #0]
 800e97a:	0018      	movs	r0, r3
 800e97c:	f7f2 fd20 	bl	80013c0 <__aeabi_i2f>
 800e980:	1c03      	adds	r3, r0, #0
 800e982:	4979      	ldr	r1, [pc, #484]	; (800eb68 <FX_Data_Handler+0x29c>)
 800e984:	1c18      	adds	r0, r3, #0
 800e986:	f7f2 fa11 	bl	8000dac <__aeabi_fmul>
 800e98a:	1c03      	adds	r3, r0, #0
 800e98c:	1c1a      	adds	r2, r3, #0
 800e98e:	193b      	adds	r3, r7, r4
 800e990:	60da      	str	r2, [r3, #12]
        data_in.acc[1] = (float)AccValue.y * FROM_MG_TO_G;
 800e992:	4b76      	ldr	r3, [pc, #472]	; (800eb6c <FX_Data_Handler+0x2a0>)
 800e994:	685b      	ldr	r3, [r3, #4]
 800e996:	0018      	movs	r0, r3
 800e998:	f7f2 fd12 	bl	80013c0 <__aeabi_i2f>
 800e99c:	1c03      	adds	r3, r0, #0
 800e99e:	4972      	ldr	r1, [pc, #456]	; (800eb68 <FX_Data_Handler+0x29c>)
 800e9a0:	1c18      	adds	r0, r3, #0
 800e9a2:	f7f2 fa03 	bl	8000dac <__aeabi_fmul>
 800e9a6:	1c03      	adds	r3, r0, #0
 800e9a8:	1c1a      	adds	r2, r3, #0
 800e9aa:	193b      	adds	r3, r7, r4
 800e9ac:	611a      	str	r2, [r3, #16]
        data_in.acc[2] = (float)AccValue.z * FROM_MG_TO_G;
 800e9ae:	4b6f      	ldr	r3, [pc, #444]	; (800eb6c <FX_Data_Handler+0x2a0>)
 800e9b0:	689b      	ldr	r3, [r3, #8]
 800e9b2:	0018      	movs	r0, r3
 800e9b4:	f7f2 fd04 	bl	80013c0 <__aeabi_i2f>
 800e9b8:	1c03      	adds	r3, r0, #0
 800e9ba:	496b      	ldr	r1, [pc, #428]	; (800eb68 <FX_Data_Handler+0x29c>)
 800e9bc:	1c18      	adds	r0, r3, #0
 800e9be:	f7f2 f9f5 	bl	8000dac <__aeabi_fmul>
 800e9c2:	1c03      	adds	r3, r0, #0
 800e9c4:	1c1a      	adds	r2, r3, #0
 800e9c6:	193b      	adds	r3, r7, r4
 800e9c8:	615a      	str	r2, [r3, #20]

        /* Convert magnetic field intensity from [mGauss] to [uT / 50] */
        data_in.mag[0] = (float)MagValue.x * FROM_MGAUSS_TO_UT50;
 800e9ca:	4b69      	ldr	r3, [pc, #420]	; (800eb70 <FX_Data_Handler+0x2a4>)
 800e9cc:	681b      	ldr	r3, [r3, #0]
 800e9ce:	0018      	movs	r0, r3
 800e9d0:	f7f2 fcf6 	bl	80013c0 <__aeabi_i2f>
 800e9d4:	1c03      	adds	r3, r0, #0
 800e9d6:	4967      	ldr	r1, [pc, #412]	; (800eb74 <FX_Data_Handler+0x2a8>)
 800e9d8:	1c18      	adds	r0, r3, #0
 800e9da:	f7f2 f9e7 	bl	8000dac <__aeabi_fmul>
 800e9de:	1c03      	adds	r3, r0, #0
 800e9e0:	1c1a      	adds	r2, r3, #0
 800e9e2:	193b      	adds	r3, r7, r4
 800e9e4:	601a      	str	r2, [r3, #0]
        data_in.mag[1] = (float)MagValue.y * FROM_MGAUSS_TO_UT50;
 800e9e6:	4b62      	ldr	r3, [pc, #392]	; (800eb70 <FX_Data_Handler+0x2a4>)
 800e9e8:	685b      	ldr	r3, [r3, #4]
 800e9ea:	0018      	movs	r0, r3
 800e9ec:	f7f2 fce8 	bl	80013c0 <__aeabi_i2f>
 800e9f0:	1c03      	adds	r3, r0, #0
 800e9f2:	4960      	ldr	r1, [pc, #384]	; (800eb74 <FX_Data_Handler+0x2a8>)
 800e9f4:	1c18      	adds	r0, r3, #0
 800e9f6:	f7f2 f9d9 	bl	8000dac <__aeabi_fmul>
 800e9fa:	1c03      	adds	r3, r0, #0
 800e9fc:	1c1a      	adds	r2, r3, #0
 800e9fe:	193b      	adds	r3, r7, r4
 800ea00:	605a      	str	r2, [r3, #4]
        data_in.mag[2] = (float)MagValue.z * FROM_MGAUSS_TO_UT50;
 800ea02:	4b5b      	ldr	r3, [pc, #364]	; (800eb70 <FX_Data_Handler+0x2a4>)
 800ea04:	689b      	ldr	r3, [r3, #8]
 800ea06:	0018      	movs	r0, r3
 800ea08:	f7f2 fcda 	bl	80013c0 <__aeabi_i2f>
 800ea0c:	1c03      	adds	r3, r0, #0
 800ea0e:	4959      	ldr	r1, [pc, #356]	; (800eb74 <FX_Data_Handler+0x2a8>)
 800ea10:	1c18      	adds	r0, r3, #0
 800ea12:	f7f2 f9cb 	bl	8000dac <__aeabi_fmul>
 800ea16:	1c03      	adds	r3, r0, #0
 800ea18:	1c1a      	adds	r2, r3, #0
 800ea1a:	193b      	adds	r3, r7, r4
 800ea1c:	609a      	str	r2, [r3, #8]

        /* Run Sensor Fusion algorithm */
        BSP_LED_On(LED2);
 800ea1e:	2000      	movs	r0, #0
 800ea20:	f7fa ff6e 	bl	8009900 <BSP_LED_On>
        prev_tick = HAL_GetTick();
 800ea24:	f7fb f9f0 	bl	8009e08 <HAL_GetTick>
 800ea28:	0003      	movs	r3, r0
 800ea2a:	19b8      	adds	r0, r7, r6
 800ea2c:	6003      	str	r3, [r0, #0]
        MotionFX_manager_run(pdata_in, pdata_out, MOTION_FX_ENGINE_DELTATIME);
 800ea2e:	4a52      	ldr	r2, [pc, #328]	; (800eb78 <FX_Data_Handler+0x2ac>)
 800ea30:	1978      	adds	r0, r7, r5
 800ea32:	6801      	ldr	r1, [r0, #0]
 800ea34:	239c      	movs	r3, #156	; 0x9c
 800ea36:	18fb      	adds	r3, r7, r3
 800ea38:	681b      	ldr	r3, [r3, #0]
 800ea3a:	0018      	movs	r0, r3
 800ea3c:	f001 fa72 	bl	800ff24 <MotionFX_manager_run>
        elapsed_time_us = (HAL_GetTick() - prev_tick) * 1000;
 800ea40:	f7fb f9e2 	bl	8009e08 <HAL_GetTick>
 800ea44:	0002      	movs	r2, r0
 800ea46:	19bb      	adds	r3, r7, r6
 800ea48:	681b      	ldr	r3, [r3, #0]
 800ea4a:	1ad2      	subs	r2, r2, r3
 800ea4c:	0013      	movs	r3, r2
 800ea4e:	015b      	lsls	r3, r3, #5
 800ea50:	1a9b      	subs	r3, r3, r2
 800ea52:	009b      	lsls	r3, r3, #2
 800ea54:	189b      	adds	r3, r3, r2
 800ea56:	00db      	lsls	r3, r3, #3
 800ea58:	22a4      	movs	r2, #164	; 0xa4
 800ea5a:	18ba      	adds	r2, r7, r2
 800ea5c:	6013      	str	r3, [r2, #0]
        BSP_LED_Off(LED2);
 800ea5e:	2000      	movs	r0, #0
 800ea60:	f7fa ff66 	bl	8009930 <BSP_LED_Off>

        if (Enabled6X == 1U)
 800ea64:	4b45      	ldr	r3, [pc, #276]	; (800eb7c <FX_Data_Handler+0x2b0>)
 800ea66:	781b      	ldrb	r3, [r3, #0]
 800ea68:	2b01      	cmp	r3, #1
 800ea6a:	d136      	bne.n	800eada <FX_Data_Handler+0x20e>
        {
          (void)memcpy(&Msg->Data[55], (void *)pdata_out->quaternion_6X, 4U * sizeof(float));
 800ea6c:	687b      	ldr	r3, [r7, #4]
 800ea6e:	333b      	adds	r3, #59	; 0x3b
 800ea70:	0018      	movs	r0, r3
 800ea72:	197b      	adds	r3, r7, r5
 800ea74:	681b      	ldr	r3, [r3, #0]
 800ea76:	3334      	adds	r3, #52	; 0x34
 800ea78:	2210      	movs	r2, #16
 800ea7a:	0019      	movs	r1, r3
 800ea7c:	f004 ffea 	bl	8013a54 <memcpy>
          (void)memcpy(&Msg->Data[71], (void *)pdata_out->rotation_6X, 3U * sizeof(float));
 800ea80:	687b      	ldr	r3, [r7, #4]
 800ea82:	334b      	adds	r3, #75	; 0x4b
 800ea84:	0018      	movs	r0, r3
 800ea86:	197b      	adds	r3, r7, r5
 800ea88:	681b      	ldr	r3, [r3, #0]
 800ea8a:	335c      	adds	r3, #92	; 0x5c
 800ea8c:	220c      	movs	r2, #12
 800ea8e:	0019      	movs	r1, r3
 800ea90:	f004 ffe0 	bl	8013a54 <memcpy>
          (void)memcpy(&Msg->Data[83], (void *)pdata_out->gravity_6X, 3U * sizeof(float));
 800ea94:	687b      	ldr	r3, [r7, #4]
 800ea96:	3357      	adds	r3, #87	; 0x57
 800ea98:	0018      	movs	r0, r3
 800ea9a:	197b      	adds	r3, r7, r5
 800ea9c:	681b      	ldr	r3, [r3, #0]
 800ea9e:	3344      	adds	r3, #68	; 0x44
 800eaa0:	220c      	movs	r2, #12
 800eaa2:	0019      	movs	r1, r3
 800eaa4:	f004 ffd6 	bl	8013a54 <memcpy>
          (void)memcpy(&Msg->Data[95], (void *)pdata_out->linear_acceleration_6X, 3U * sizeof(float));
 800eaa8:	687b      	ldr	r3, [r7, #4]
 800eaaa:	3363      	adds	r3, #99	; 0x63
 800eaac:	0018      	movs	r0, r3
 800eaae:	197b      	adds	r3, r7, r5
 800eab0:	681b      	ldr	r3, [r3, #0]
 800eab2:	3350      	adds	r3, #80	; 0x50
 800eab4:	220c      	movs	r2, #12
 800eab6:	0019      	movs	r1, r3
 800eab8:	f004 ffcc 	bl	8013a54 <memcpy>

          (void)memset(&Msg->Data[107], 0, sizeof(float));
 800eabc:	687b      	ldr	r3, [r7, #4]
 800eabe:	336f      	adds	r3, #111	; 0x6f
 800eac0:	2204      	movs	r2, #4
 800eac2:	2100      	movs	r1, #0
 800eac4:	0018      	movs	r0, r3
 800eac6:	f004 ffce 	bl	8013a66 <memset>
          (void)memset(&Msg->Data[111], 0, sizeof(float));
 800eaca:	687b      	ldr	r3, [r7, #4]
 800eacc:	3373      	adds	r3, #115	; 0x73
 800eace:	2204      	movs	r2, #4
 800ead0:	2100      	movs	r1, #0
 800ead2:	0018      	movs	r0, r3
 800ead4:	f004 ffc7 	bl	8013a66 <memset>
 800ead8:	e034      	b.n	800eb44 <FX_Data_Handler+0x278>
        }
        else
        {
          (void)memcpy(&Msg->Data[55], (void *)pdata_out->quaternion_9X, 4U * sizeof(float));
 800eada:	687b      	ldr	r3, [r7, #4]
 800eadc:	333b      	adds	r3, #59	; 0x3b
 800eade:	2498      	movs	r4, #152	; 0x98
 800eae0:	193a      	adds	r2, r7, r4
 800eae2:	6811      	ldr	r1, [r2, #0]
 800eae4:	2210      	movs	r2, #16
 800eae6:	0018      	movs	r0, r3
 800eae8:	f004 ffb4 	bl	8013a54 <memcpy>
          (void)memcpy(&Msg->Data[71], (void *)pdata_out->rotation_9X, 3U * sizeof(float));
 800eaec:	687b      	ldr	r3, [r7, #4]
 800eaee:	334b      	adds	r3, #75	; 0x4b
 800eaf0:	0018      	movs	r0, r3
 800eaf2:	193b      	adds	r3, r7, r4
 800eaf4:	681b      	ldr	r3, [r3, #0]
 800eaf6:	3328      	adds	r3, #40	; 0x28
 800eaf8:	220c      	movs	r2, #12
 800eafa:	0019      	movs	r1, r3
 800eafc:	f004 ffaa 	bl	8013a54 <memcpy>
          (void)memcpy(&Msg->Data[83], (void *)pdata_out->gravity_9X, 3U * sizeof(float));
 800eb00:	687b      	ldr	r3, [r7, #4]
 800eb02:	3357      	adds	r3, #87	; 0x57
 800eb04:	0018      	movs	r0, r3
 800eb06:	193b      	adds	r3, r7, r4
 800eb08:	681b      	ldr	r3, [r3, #0]
 800eb0a:	3310      	adds	r3, #16
 800eb0c:	220c      	movs	r2, #12
 800eb0e:	0019      	movs	r1, r3
 800eb10:	f004 ffa0 	bl	8013a54 <memcpy>
          (void)memcpy(&Msg->Data[95], (void *)pdata_out->linear_acceleration_9X, 3U * sizeof(float));
 800eb14:	687b      	ldr	r3, [r7, #4]
 800eb16:	3363      	adds	r3, #99	; 0x63
 800eb18:	0018      	movs	r0, r3
 800eb1a:	193b      	adds	r3, r7, r4
 800eb1c:	681b      	ldr	r3, [r3, #0]
 800eb1e:	331c      	adds	r3, #28
 800eb20:	220c      	movs	r2, #12
 800eb22:	0019      	movs	r1, r3
 800eb24:	f004 ff96 	bl	8013a54 <memcpy>

          (void)memset(&Msg->Data[107], 0, sizeof(float));
 800eb28:	687b      	ldr	r3, [r7, #4]
 800eb2a:	336f      	adds	r3, #111	; 0x6f
 800eb2c:	2204      	movs	r2, #4
 800eb2e:	2100      	movs	r1, #0
 800eb30:	0018      	movs	r0, r3
 800eb32:	f004 ff98 	bl	8013a66 <memset>
          (void)memset(&Msg->Data[111], 0, sizeof(float));
 800eb36:	687b      	ldr	r3, [r7, #4]
 800eb38:	3373      	adds	r3, #115	; 0x73
 800eb3a:	2204      	movs	r2, #4
 800eb3c:	2100      	movs	r1, #0
 800eb3e:	0018      	movs	r0, r3
 800eb40:	f004 ff91 	bl	8013a66 <memset>
        }

        Serialize_s32(&Msg->Data[115], (int32_t)elapsed_time_us, 4);
 800eb44:	687b      	ldr	r3, [r7, #4]
 800eb46:	3377      	adds	r3, #119	; 0x77
 800eb48:	22a4      	movs	r2, #164	; 0xa4
 800eb4a:	18ba      	adds	r2, r7, r2
 800eb4c:	6811      	ldr	r1, [r2, #0]
 800eb4e:	2204      	movs	r2, #4
 800eb50:	0018      	movs	r0, r3
 800eb52:	f001 fb68 	bl	8010226 <Serialize_s32>
      }
    }
  }
}
 800eb56:	46c0      	nop			; (mov r8, r8)
 800eb58:	46bd      	mov	sp, r7
 800eb5a:	b02b      	add	sp, #172	; 0xac
 800eb5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800eb5e:	46c0      	nop			; (mov r8, r8)
 800eb60:	20000268 	.word	0x20000268
 800eb64:	20001004 	.word	0x20001004
 800eb68:	3a83126f 	.word	0x3a83126f
 800eb6c:	20000ff8 	.word	0x20000ff8
 800eb70:	20001010 	.word	0x20001010
 800eb74:	3b03126f 	.word	0x3b03126f
 800eb78:	3c23d70a 	.word	0x3c23d70a
 800eb7c:	20000ff0 	.word	0x20000ff0

0800eb80 <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None.
  */
void BSP_PB_Callback(Button_TypeDef Button)
{
 800eb80:	b580      	push	{r7, lr}
 800eb82:	b082      	sub	sp, #8
 800eb84:	af00      	add	r7, sp, #0
 800eb86:	0002      	movs	r2, r0
 800eb88:	1dfb      	adds	r3, r7, #7
 800eb8a:	701a      	strb	r2, [r3, #0]
  MagCalRequest = 1U;
 800eb8c:	4b03      	ldr	r3, [pc, #12]	; (800eb9c <BSP_PB_Callback+0x1c>)
 800eb8e:	2201      	movs	r2, #1
 800eb90:	701a      	strb	r2, [r3, #0]
}
 800eb92:	46c0      	nop			; (mov r8, r8)
 800eb94:	46bd      	mov	sp, r7
 800eb96:	b002      	add	sp, #8
 800eb98:	bd80      	pop	{r7, pc}
 800eb9a:	46c0      	nop			; (mov r8, r8)
 800eb9c:	20001028 	.word	0x20001028

0800eba0 <Accelero_Sensor_Handler>:
 * @brief  Handles the ACC axes data getting/sending
 * @param  Msg the ACC part of the stream
 * @retval None
 */
static void Accelero_Sensor_Handler(TMsg *Msg)
{
 800eba0:	b580      	push	{r7, lr}
 800eba2:	b082      	sub	sp, #8
 800eba4:	af00      	add	r7, sp, #0
 800eba6:	6078      	str	r0, [r7, #4]
  if ((SensorsEnabled & ACCELEROMETER_SENSOR) == ACCELEROMETER_SENSOR)
 800eba8:	4b25      	ldr	r3, [pc, #148]	; (800ec40 <Accelero_Sensor_Handler+0xa0>)
 800ebaa:	681b      	ldr	r3, [r3, #0]
 800ebac:	2210      	movs	r2, #16
 800ebae:	4013      	ands	r3, r2
 800ebb0:	2b10      	cmp	r3, #16
 800ebb2:	d141      	bne.n	800ec38 <Accelero_Sensor_Handler+0x98>
  {
    if (UseOfflineData == 1)
 800ebb4:	4b23      	ldr	r3, [pc, #140]	; (800ec44 <Accelero_Sensor_Handler+0xa4>)
 800ebb6:	781b      	ldrb	r3, [r3, #0]
 800ebb8:	2b01      	cmp	r3, #1
 800ebba:	d11e      	bne.n	800ebfa <Accelero_Sensor_Handler+0x5a>
    {
      AccValue.x = OfflineData[OfflineDataReadIndex].acceleration_x_mg;
 800ebbc:	4b22      	ldr	r3, [pc, #136]	; (800ec48 <Accelero_Sensor_Handler+0xa8>)
 800ebbe:	681b      	ldr	r3, [r3, #0]
 800ebc0:	4a22      	ldr	r2, [pc, #136]	; (800ec4c <Accelero_Sensor_Handler+0xac>)
 800ebc2:	2134      	movs	r1, #52	; 0x34
 800ebc4:	434b      	muls	r3, r1
 800ebc6:	18d3      	adds	r3, r2, r3
 800ebc8:	3310      	adds	r3, #16
 800ebca:	681a      	ldr	r2, [r3, #0]
 800ebcc:	4b20      	ldr	r3, [pc, #128]	; (800ec50 <Accelero_Sensor_Handler+0xb0>)
 800ebce:	601a      	str	r2, [r3, #0]
      AccValue.y = OfflineData[OfflineDataReadIndex].acceleration_y_mg;
 800ebd0:	4b1d      	ldr	r3, [pc, #116]	; (800ec48 <Accelero_Sensor_Handler+0xa8>)
 800ebd2:	681b      	ldr	r3, [r3, #0]
 800ebd4:	4a1d      	ldr	r2, [pc, #116]	; (800ec4c <Accelero_Sensor_Handler+0xac>)
 800ebd6:	2134      	movs	r1, #52	; 0x34
 800ebd8:	434b      	muls	r3, r1
 800ebda:	18d3      	adds	r3, r2, r3
 800ebdc:	3314      	adds	r3, #20
 800ebde:	681a      	ldr	r2, [r3, #0]
 800ebe0:	4b1b      	ldr	r3, [pc, #108]	; (800ec50 <Accelero_Sensor_Handler+0xb0>)
 800ebe2:	605a      	str	r2, [r3, #4]
      AccValue.z = OfflineData[OfflineDataReadIndex].acceleration_z_mg;
 800ebe4:	4b18      	ldr	r3, [pc, #96]	; (800ec48 <Accelero_Sensor_Handler+0xa8>)
 800ebe6:	681b      	ldr	r3, [r3, #0]
 800ebe8:	4a18      	ldr	r2, [pc, #96]	; (800ec4c <Accelero_Sensor_Handler+0xac>)
 800ebea:	2134      	movs	r1, #52	; 0x34
 800ebec:	434b      	muls	r3, r1
 800ebee:	18d3      	adds	r3, r2, r3
 800ebf0:	3318      	adds	r3, #24
 800ebf2:	681a      	ldr	r2, [r3, #0]
 800ebf4:	4b16      	ldr	r3, [pc, #88]	; (800ec50 <Accelero_Sensor_Handler+0xb0>)
 800ebf6:	609a      	str	r2, [r3, #8]
 800ebf8:	e003      	b.n	800ec02 <Accelero_Sensor_Handler+0x62>
    }
    else
    {
      BSP_SENSOR_ACC_GetAxes(&AccValue);
 800ebfa:	4b15      	ldr	r3, [pc, #84]	; (800ec50 <Accelero_Sensor_Handler+0xb0>)
 800ebfc:	0018      	movs	r0, r3
 800ebfe:	f001 f8bd 	bl	800fd7c <BSP_SENSOR_ACC_GetAxes>
    }

    Serialize_s32(&Msg->Data[19], (int32_t)AccValue.x, 4);
 800ec02:	687b      	ldr	r3, [r7, #4]
 800ec04:	3317      	adds	r3, #23
 800ec06:	0018      	movs	r0, r3
 800ec08:	4b11      	ldr	r3, [pc, #68]	; (800ec50 <Accelero_Sensor_Handler+0xb0>)
 800ec0a:	681b      	ldr	r3, [r3, #0]
 800ec0c:	2204      	movs	r2, #4
 800ec0e:	0019      	movs	r1, r3
 800ec10:	f001 fb09 	bl	8010226 <Serialize_s32>
    Serialize_s32(&Msg->Data[23], (int32_t)AccValue.y, 4);
 800ec14:	687b      	ldr	r3, [r7, #4]
 800ec16:	331b      	adds	r3, #27
 800ec18:	0018      	movs	r0, r3
 800ec1a:	4b0d      	ldr	r3, [pc, #52]	; (800ec50 <Accelero_Sensor_Handler+0xb0>)
 800ec1c:	685b      	ldr	r3, [r3, #4]
 800ec1e:	2204      	movs	r2, #4
 800ec20:	0019      	movs	r1, r3
 800ec22:	f001 fb00 	bl	8010226 <Serialize_s32>
    Serialize_s32(&Msg->Data[27], (int32_t)AccValue.z, 4);
 800ec26:	687b      	ldr	r3, [r7, #4]
 800ec28:	331f      	adds	r3, #31
 800ec2a:	0018      	movs	r0, r3
 800ec2c:	4b08      	ldr	r3, [pc, #32]	; (800ec50 <Accelero_Sensor_Handler+0xb0>)
 800ec2e:	689b      	ldr	r3, [r3, #8]
 800ec30:	2204      	movs	r2, #4
 800ec32:	0019      	movs	r1, r3
 800ec34:	f001 faf7 	bl	8010226 <Serialize_s32>
  }
}
 800ec38:	46c0      	nop			; (mov r8, r8)
 800ec3a:	46bd      	mov	sp, r7
 800ec3c:	b002      	add	sp, #8
 800ec3e:	bd80      	pop	{r7, pc}
 800ec40:	20000268 	.word	0x20000268
 800ec44:	20000e41 	.word	0x20000e41
 800ec48:	20000fe4 	.word	0x20000fe4
 800ec4c:	20000e44 	.word	0x20000e44
 800ec50:	20000ff8 	.word	0x20000ff8

0800ec54 <Gyro_Sensor_Handler>:
 * @brief  Handles the GYR axes data getting/sending
 * @param  Msg the GYR part of the stream
 * @retval None
 */
static void Gyro_Sensor_Handler(TMsg *Msg)
{
 800ec54:	b580      	push	{r7, lr}
 800ec56:	b082      	sub	sp, #8
 800ec58:	af00      	add	r7, sp, #0
 800ec5a:	6078      	str	r0, [r7, #4]
  if ((SensorsEnabled & GYROSCOPE_SENSOR) == GYROSCOPE_SENSOR)
 800ec5c:	4b25      	ldr	r3, [pc, #148]	; (800ecf4 <Gyro_Sensor_Handler+0xa0>)
 800ec5e:	681b      	ldr	r3, [r3, #0]
 800ec60:	2220      	movs	r2, #32
 800ec62:	4013      	ands	r3, r2
 800ec64:	2b20      	cmp	r3, #32
 800ec66:	d141      	bne.n	800ecec <Gyro_Sensor_Handler+0x98>
  {
    if (UseOfflineData == 1)
 800ec68:	4b23      	ldr	r3, [pc, #140]	; (800ecf8 <Gyro_Sensor_Handler+0xa4>)
 800ec6a:	781b      	ldrb	r3, [r3, #0]
 800ec6c:	2b01      	cmp	r3, #1
 800ec6e:	d11e      	bne.n	800ecae <Gyro_Sensor_Handler+0x5a>
    {
      GyrValue.x = OfflineData[OfflineDataReadIndex].angular_rate_x_mdps;
 800ec70:	4b22      	ldr	r3, [pc, #136]	; (800ecfc <Gyro_Sensor_Handler+0xa8>)
 800ec72:	681b      	ldr	r3, [r3, #0]
 800ec74:	4a22      	ldr	r2, [pc, #136]	; (800ed00 <Gyro_Sensor_Handler+0xac>)
 800ec76:	2134      	movs	r1, #52	; 0x34
 800ec78:	434b      	muls	r3, r1
 800ec7a:	18d3      	adds	r3, r2, r3
 800ec7c:	331c      	adds	r3, #28
 800ec7e:	681a      	ldr	r2, [r3, #0]
 800ec80:	4b20      	ldr	r3, [pc, #128]	; (800ed04 <Gyro_Sensor_Handler+0xb0>)
 800ec82:	601a      	str	r2, [r3, #0]
      GyrValue.y = OfflineData[OfflineDataReadIndex].angular_rate_y_mdps;
 800ec84:	4b1d      	ldr	r3, [pc, #116]	; (800ecfc <Gyro_Sensor_Handler+0xa8>)
 800ec86:	681b      	ldr	r3, [r3, #0]
 800ec88:	4a1d      	ldr	r2, [pc, #116]	; (800ed00 <Gyro_Sensor_Handler+0xac>)
 800ec8a:	2134      	movs	r1, #52	; 0x34
 800ec8c:	434b      	muls	r3, r1
 800ec8e:	18d3      	adds	r3, r2, r3
 800ec90:	3320      	adds	r3, #32
 800ec92:	681a      	ldr	r2, [r3, #0]
 800ec94:	4b1b      	ldr	r3, [pc, #108]	; (800ed04 <Gyro_Sensor_Handler+0xb0>)
 800ec96:	605a      	str	r2, [r3, #4]
      GyrValue.z = OfflineData[OfflineDataReadIndex].angular_rate_z_mdps;
 800ec98:	4b18      	ldr	r3, [pc, #96]	; (800ecfc <Gyro_Sensor_Handler+0xa8>)
 800ec9a:	681b      	ldr	r3, [r3, #0]
 800ec9c:	4a18      	ldr	r2, [pc, #96]	; (800ed00 <Gyro_Sensor_Handler+0xac>)
 800ec9e:	2134      	movs	r1, #52	; 0x34
 800eca0:	434b      	muls	r3, r1
 800eca2:	18d3      	adds	r3, r2, r3
 800eca4:	3324      	adds	r3, #36	; 0x24
 800eca6:	681a      	ldr	r2, [r3, #0]
 800eca8:	4b16      	ldr	r3, [pc, #88]	; (800ed04 <Gyro_Sensor_Handler+0xb0>)
 800ecaa:	609a      	str	r2, [r3, #8]
 800ecac:	e003      	b.n	800ecb6 <Gyro_Sensor_Handler+0x62>
    }
    else
    {
      BSP_SENSOR_GYR_GetAxes(&GyrValue);
 800ecae:	4b15      	ldr	r3, [pc, #84]	; (800ed04 <Gyro_Sensor_Handler+0xb0>)
 800ecb0:	0018      	movs	r0, r3
 800ecb2:	f001 f871 	bl	800fd98 <BSP_SENSOR_GYR_GetAxes>
    }

    Serialize_s32(&Msg->Data[31], GyrValue.x, 4);
 800ecb6:	687b      	ldr	r3, [r7, #4]
 800ecb8:	3323      	adds	r3, #35	; 0x23
 800ecba:	0018      	movs	r0, r3
 800ecbc:	4b11      	ldr	r3, [pc, #68]	; (800ed04 <Gyro_Sensor_Handler+0xb0>)
 800ecbe:	681b      	ldr	r3, [r3, #0]
 800ecc0:	2204      	movs	r2, #4
 800ecc2:	0019      	movs	r1, r3
 800ecc4:	f001 faaf 	bl	8010226 <Serialize_s32>
    Serialize_s32(&Msg->Data[35], GyrValue.y, 4);
 800ecc8:	687b      	ldr	r3, [r7, #4]
 800ecca:	3327      	adds	r3, #39	; 0x27
 800eccc:	0018      	movs	r0, r3
 800ecce:	4b0d      	ldr	r3, [pc, #52]	; (800ed04 <Gyro_Sensor_Handler+0xb0>)
 800ecd0:	685b      	ldr	r3, [r3, #4]
 800ecd2:	2204      	movs	r2, #4
 800ecd4:	0019      	movs	r1, r3
 800ecd6:	f001 faa6 	bl	8010226 <Serialize_s32>
    Serialize_s32(&Msg->Data[39], GyrValue.z, 4);
 800ecda:	687b      	ldr	r3, [r7, #4]
 800ecdc:	332b      	adds	r3, #43	; 0x2b
 800ecde:	0018      	movs	r0, r3
 800ece0:	4b08      	ldr	r3, [pc, #32]	; (800ed04 <Gyro_Sensor_Handler+0xb0>)
 800ece2:	689b      	ldr	r3, [r3, #8]
 800ece4:	2204      	movs	r2, #4
 800ece6:	0019      	movs	r1, r3
 800ece8:	f001 fa9d 	bl	8010226 <Serialize_s32>
  }
}
 800ecec:	46c0      	nop			; (mov r8, r8)
 800ecee:	46bd      	mov	sp, r7
 800ecf0:	b002      	add	sp, #8
 800ecf2:	bd80      	pop	{r7, pc}
 800ecf4:	20000268 	.word	0x20000268
 800ecf8:	20000e41 	.word	0x20000e41
 800ecfc:	20000fe4 	.word	0x20000fe4
 800ed00:	20000e44 	.word	0x20000e44
 800ed04:	20001004 	.word	0x20001004

0800ed08 <Magneto_Sensor_Handler>:
 * @brief  Handles the MAG axes data getting/sending
 * @param  Msg the MAG part of the stream
 * @retval None
 */
static void Magneto_Sensor_Handler(TMsg *Msg)
{
 800ed08:	b590      	push	{r4, r7, lr}
 800ed0a:	b08b      	sub	sp, #44	; 0x2c
 800ed0c:	af00      	add	r7, sp, #0
 800ed0e:	6078      	str	r0, [r7, #4]
  float ans_float;
  MFX_CM0P_MagCal_input_t mag_data_in;
  MFX_CM0P_MagCal_output_t mag_data_out;

  if ((SensorsEnabled & MAGNETIC_SENSOR) == MAGNETIC_SENSOR)
 800ed10:	4b66      	ldr	r3, [pc, #408]	; (800eeac <Magneto_Sensor_Handler+0x1a4>)
 800ed12:	681b      	ldr	r3, [r3, #0]
 800ed14:	2240      	movs	r2, #64	; 0x40
 800ed16:	4013      	ands	r3, r2
 800ed18:	2b40      	cmp	r3, #64	; 0x40
 800ed1a:	d000      	beq.n	800ed1e <Magneto_Sensor_Handler+0x16>
 800ed1c:	e0c1      	b.n	800eea2 <Magneto_Sensor_Handler+0x19a>
  {
    if (UseOfflineData == 1)
 800ed1e:	4b64      	ldr	r3, [pc, #400]	; (800eeb0 <Magneto_Sensor_Handler+0x1a8>)
 800ed20:	781b      	ldrb	r3, [r3, #0]
 800ed22:	2b01      	cmp	r3, #1
 800ed24:	d11e      	bne.n	800ed64 <Magneto_Sensor_Handler+0x5c>
    {
     MagValue.x = OfflineData[OfflineDataReadIndex].magnetic_field_x_mgauss;
 800ed26:	4b63      	ldr	r3, [pc, #396]	; (800eeb4 <Magneto_Sensor_Handler+0x1ac>)
 800ed28:	681b      	ldr	r3, [r3, #0]
 800ed2a:	4a63      	ldr	r2, [pc, #396]	; (800eeb8 <Magneto_Sensor_Handler+0x1b0>)
 800ed2c:	2134      	movs	r1, #52	; 0x34
 800ed2e:	434b      	muls	r3, r1
 800ed30:	18d3      	adds	r3, r2, r3
 800ed32:	3328      	adds	r3, #40	; 0x28
 800ed34:	681a      	ldr	r2, [r3, #0]
 800ed36:	4b61      	ldr	r3, [pc, #388]	; (800eebc <Magneto_Sensor_Handler+0x1b4>)
 800ed38:	601a      	str	r2, [r3, #0]
     MagValue.y = OfflineData[OfflineDataReadIndex].magnetic_field_y_mgauss;
 800ed3a:	4b5e      	ldr	r3, [pc, #376]	; (800eeb4 <Magneto_Sensor_Handler+0x1ac>)
 800ed3c:	681b      	ldr	r3, [r3, #0]
 800ed3e:	4a5e      	ldr	r2, [pc, #376]	; (800eeb8 <Magneto_Sensor_Handler+0x1b0>)
 800ed40:	2134      	movs	r1, #52	; 0x34
 800ed42:	434b      	muls	r3, r1
 800ed44:	18d3      	adds	r3, r2, r3
 800ed46:	332c      	adds	r3, #44	; 0x2c
 800ed48:	681a      	ldr	r2, [r3, #0]
 800ed4a:	4b5c      	ldr	r3, [pc, #368]	; (800eebc <Magneto_Sensor_Handler+0x1b4>)
 800ed4c:	605a      	str	r2, [r3, #4]
     MagValue.z = OfflineData[OfflineDataReadIndex].magnetic_field_z_mgauss;
 800ed4e:	4b59      	ldr	r3, [pc, #356]	; (800eeb4 <Magneto_Sensor_Handler+0x1ac>)
 800ed50:	681b      	ldr	r3, [r3, #0]
 800ed52:	4a59      	ldr	r2, [pc, #356]	; (800eeb8 <Magneto_Sensor_Handler+0x1b0>)
 800ed54:	2134      	movs	r1, #52	; 0x34
 800ed56:	434b      	muls	r3, r1
 800ed58:	18d3      	adds	r3, r2, r3
 800ed5a:	3330      	adds	r3, #48	; 0x30
 800ed5c:	681a      	ldr	r2, [r3, #0]
 800ed5e:	4b57      	ldr	r3, [pc, #348]	; (800eebc <Magneto_Sensor_Handler+0x1b4>)
 800ed60:	609a      	str	r2, [r3, #8]
 800ed62:	e083      	b.n	800ee6c <Magneto_Sensor_Handler+0x164>
    }
    else
    {
      BSP_SENSOR_MAG_GetAxes(&MagValue);
 800ed64:	4b55      	ldr	r3, [pc, #340]	; (800eebc <Magneto_Sensor_Handler+0x1b4>)
 800ed66:	0018      	movs	r0, r3
 800ed68:	f001 f824 	bl	800fdb4 <BSP_SENSOR_MAG_GetAxes>

      if (MagCalStatus == 0U)
 800ed6c:	4b54      	ldr	r3, [pc, #336]	; (800eec0 <Magneto_Sensor_Handler+0x1b8>)
 800ed6e:	781b      	ldrb	r3, [r3, #0]
 800ed70:	2b00      	cmp	r3, #0
 800ed72:	d166      	bne.n	800ee42 <Magneto_Sensor_Handler+0x13a>
      {
        mag_data_in.Mag[0] = (float)MagValue.x * FROM_MGAUSS_TO_UT50;
 800ed74:	4b51      	ldr	r3, [pc, #324]	; (800eebc <Magneto_Sensor_Handler+0x1b4>)
 800ed76:	681b      	ldr	r3, [r3, #0]
 800ed78:	0018      	movs	r0, r3
 800ed7a:	f7f2 fb21 	bl	80013c0 <__aeabi_i2f>
 800ed7e:	1c03      	adds	r3, r0, #0
 800ed80:	4950      	ldr	r1, [pc, #320]	; (800eec4 <Magneto_Sensor_Handler+0x1bc>)
 800ed82:	1c18      	adds	r0, r3, #0
 800ed84:	f7f2 f812 	bl	8000dac <__aeabi_fmul>
 800ed88:	1c03      	adds	r3, r0, #0
 800ed8a:	1c1a      	adds	r2, r3, #0
 800ed8c:	2418      	movs	r4, #24
 800ed8e:	193b      	adds	r3, r7, r4
 800ed90:	601a      	str	r2, [r3, #0]
        mag_data_in.Mag[1] = (float)MagValue.y * FROM_MGAUSS_TO_UT50;
 800ed92:	4b4a      	ldr	r3, [pc, #296]	; (800eebc <Magneto_Sensor_Handler+0x1b4>)
 800ed94:	685b      	ldr	r3, [r3, #4]
 800ed96:	0018      	movs	r0, r3
 800ed98:	f7f2 fb12 	bl	80013c0 <__aeabi_i2f>
 800ed9c:	1c03      	adds	r3, r0, #0
 800ed9e:	4949      	ldr	r1, [pc, #292]	; (800eec4 <Magneto_Sensor_Handler+0x1bc>)
 800eda0:	1c18      	adds	r0, r3, #0
 800eda2:	f7f2 f803 	bl	8000dac <__aeabi_fmul>
 800eda6:	1c03      	adds	r3, r0, #0
 800eda8:	1c1a      	adds	r2, r3, #0
 800edaa:	193b      	adds	r3, r7, r4
 800edac:	605a      	str	r2, [r3, #4]
        mag_data_in.Mag[2] = (float)MagValue.z * FROM_MGAUSS_TO_UT50;
 800edae:	4b43      	ldr	r3, [pc, #268]	; (800eebc <Magneto_Sensor_Handler+0x1b4>)
 800edb0:	689b      	ldr	r3, [r3, #8]
 800edb2:	0018      	movs	r0, r3
 800edb4:	f7f2 fb04 	bl	80013c0 <__aeabi_i2f>
 800edb8:	1c03      	adds	r3, r0, #0
 800edba:	4942      	ldr	r1, [pc, #264]	; (800eec4 <Magneto_Sensor_Handler+0x1bc>)
 800edbc:	1c18      	adds	r0, r3, #0
 800edbe:	f7f1 fff5 	bl	8000dac <__aeabi_fmul>
 800edc2:	1c03      	adds	r3, r0, #0
 800edc4:	1c1a      	adds	r2, r3, #0
 800edc6:	0021      	movs	r1, r4
 800edc8:	187b      	adds	r3, r7, r1
 800edca:	609a      	str	r2, [r3, #8]

        MotionFX_manager_MagCal_run(&mag_data_in, &mag_data_out);
 800edcc:	2408      	movs	r4, #8
 800edce:	193a      	adds	r2, r7, r4
 800edd0:	187b      	adds	r3, r7, r1
 800edd2:	0011      	movs	r1, r2
 800edd4:	0018      	movs	r0, r3
 800edd6:	f001 f8f6 	bl	800ffc6 <MotionFX_manager_MagCal_run>

        if (mag_data_out.CalQuality == MFX_CM0P_CALQSTATUSBEST)
 800edda:	193b      	adds	r3, r7, r4
 800eddc:	7b1b      	ldrb	r3, [r3, #12]
 800edde:	2b03      	cmp	r3, #3
 800ede0:	d12f      	bne.n	800ee42 <Magneto_Sensor_Handler+0x13a>
        {
          MagCalStatus = 1;
 800ede2:	4b37      	ldr	r3, [pc, #220]	; (800eec0 <Magneto_Sensor_Handler+0x1b8>)
 800ede4:	2201      	movs	r2, #1
 800ede6:	701a      	strb	r2, [r3, #0]

          ans_float = (mag_data_out.HI_Bias[0] * FROM_UT50_TO_MGAUSS);
 800ede8:	193b      	adds	r3, r7, r4
 800edea:	681b      	ldr	r3, [r3, #0]
 800edec:	4936      	ldr	r1, [pc, #216]	; (800eec8 <Magneto_Sensor_Handler+0x1c0>)
 800edee:	1c18      	adds	r0, r3, #0
 800edf0:	f7f1 ffdc 	bl	8000dac <__aeabi_fmul>
 800edf4:	1c03      	adds	r3, r0, #0
 800edf6:	627b      	str	r3, [r7, #36]	; 0x24
          MagOffset.x = (int32_t)ans_float;
 800edf8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800edfa:	f7f2 fac1 	bl	8001380 <__aeabi_f2iz>
 800edfe:	0002      	movs	r2, r0
 800ee00:	4b32      	ldr	r3, [pc, #200]	; (800eecc <Magneto_Sensor_Handler+0x1c4>)
 800ee02:	601a      	str	r2, [r3, #0]
          ans_float = (mag_data_out.HI_Bias[1] * FROM_UT50_TO_MGAUSS);
 800ee04:	193b      	adds	r3, r7, r4
 800ee06:	685b      	ldr	r3, [r3, #4]
 800ee08:	492f      	ldr	r1, [pc, #188]	; (800eec8 <Magneto_Sensor_Handler+0x1c0>)
 800ee0a:	1c18      	adds	r0, r3, #0
 800ee0c:	f7f1 ffce 	bl	8000dac <__aeabi_fmul>
 800ee10:	1c03      	adds	r3, r0, #0
 800ee12:	627b      	str	r3, [r7, #36]	; 0x24
          MagOffset.y = (int32_t)ans_float;
 800ee14:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ee16:	f7f2 fab3 	bl	8001380 <__aeabi_f2iz>
 800ee1a:	0002      	movs	r2, r0
 800ee1c:	4b2b      	ldr	r3, [pc, #172]	; (800eecc <Magneto_Sensor_Handler+0x1c4>)
 800ee1e:	605a      	str	r2, [r3, #4]
          ans_float = (mag_data_out.HI_Bias[2] * FROM_UT50_TO_MGAUSS);
 800ee20:	193b      	adds	r3, r7, r4
 800ee22:	689b      	ldr	r3, [r3, #8]
 800ee24:	4928      	ldr	r1, [pc, #160]	; (800eec8 <Magneto_Sensor_Handler+0x1c0>)
 800ee26:	1c18      	adds	r0, r3, #0
 800ee28:	f7f1 ffc0 	bl	8000dac <__aeabi_fmul>
 800ee2c:	1c03      	adds	r3, r0, #0
 800ee2e:	627b      	str	r3, [r7, #36]	; 0x24
          MagOffset.z = (int32_t)ans_float;
 800ee30:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ee32:	f7f2 faa5 	bl	8001380 <__aeabi_f2iz>
 800ee36:	0002      	movs	r2, r0
 800ee38:	4b24      	ldr	r3, [pc, #144]	; (800eecc <Magneto_Sensor_Handler+0x1c4>)
 800ee3a:	609a      	str	r2, [r3, #8]

          /* Disable magnetometer calibration */
          MotionFX_manager_MagCal_stop(ALGO_PERIOD);
 800ee3c:	200a      	movs	r0, #10
 800ee3e:	f001 f8e0 	bl	8010002 <MotionFX_manager_MagCal_stop>
        }
      }

      MagValue.x = (int32_t)(MagValue.x - MagOffset.x);
 800ee42:	4b1e      	ldr	r3, [pc, #120]	; (800eebc <Magneto_Sensor_Handler+0x1b4>)
 800ee44:	681a      	ldr	r2, [r3, #0]
 800ee46:	4b21      	ldr	r3, [pc, #132]	; (800eecc <Magneto_Sensor_Handler+0x1c4>)
 800ee48:	681b      	ldr	r3, [r3, #0]
 800ee4a:	1ad2      	subs	r2, r2, r3
 800ee4c:	4b1b      	ldr	r3, [pc, #108]	; (800eebc <Magneto_Sensor_Handler+0x1b4>)
 800ee4e:	601a      	str	r2, [r3, #0]
      MagValue.y = (int32_t)(MagValue.y - MagOffset.y);
 800ee50:	4b1a      	ldr	r3, [pc, #104]	; (800eebc <Magneto_Sensor_Handler+0x1b4>)
 800ee52:	685a      	ldr	r2, [r3, #4]
 800ee54:	4b1d      	ldr	r3, [pc, #116]	; (800eecc <Magneto_Sensor_Handler+0x1c4>)
 800ee56:	685b      	ldr	r3, [r3, #4]
 800ee58:	1ad2      	subs	r2, r2, r3
 800ee5a:	4b18      	ldr	r3, [pc, #96]	; (800eebc <Magneto_Sensor_Handler+0x1b4>)
 800ee5c:	605a      	str	r2, [r3, #4]
      MagValue.z = (int32_t)(MagValue.z - MagOffset.z);
 800ee5e:	4b17      	ldr	r3, [pc, #92]	; (800eebc <Magneto_Sensor_Handler+0x1b4>)
 800ee60:	689a      	ldr	r2, [r3, #8]
 800ee62:	4b1a      	ldr	r3, [pc, #104]	; (800eecc <Magneto_Sensor_Handler+0x1c4>)
 800ee64:	689b      	ldr	r3, [r3, #8]
 800ee66:	1ad2      	subs	r2, r2, r3
 800ee68:	4b14      	ldr	r3, [pc, #80]	; (800eebc <Magneto_Sensor_Handler+0x1b4>)
 800ee6a:	609a      	str	r2, [r3, #8]
    }

    Serialize_s32(&Msg->Data[43], MagValue.x, 4);
 800ee6c:	687b      	ldr	r3, [r7, #4]
 800ee6e:	332f      	adds	r3, #47	; 0x2f
 800ee70:	0018      	movs	r0, r3
 800ee72:	4b12      	ldr	r3, [pc, #72]	; (800eebc <Magneto_Sensor_Handler+0x1b4>)
 800ee74:	681b      	ldr	r3, [r3, #0]
 800ee76:	2204      	movs	r2, #4
 800ee78:	0019      	movs	r1, r3
 800ee7a:	f001 f9d4 	bl	8010226 <Serialize_s32>
    Serialize_s32(&Msg->Data[47], MagValue.y, 4);
 800ee7e:	687b      	ldr	r3, [r7, #4]
 800ee80:	3333      	adds	r3, #51	; 0x33
 800ee82:	0018      	movs	r0, r3
 800ee84:	4b0d      	ldr	r3, [pc, #52]	; (800eebc <Magneto_Sensor_Handler+0x1b4>)
 800ee86:	685b      	ldr	r3, [r3, #4]
 800ee88:	2204      	movs	r2, #4
 800ee8a:	0019      	movs	r1, r3
 800ee8c:	f001 f9cb 	bl	8010226 <Serialize_s32>
    Serialize_s32(&Msg->Data[51], MagValue.z, 4);
 800ee90:	687b      	ldr	r3, [r7, #4]
 800ee92:	3337      	adds	r3, #55	; 0x37
 800ee94:	0018      	movs	r0, r3
 800ee96:	4b09      	ldr	r3, [pc, #36]	; (800eebc <Magneto_Sensor_Handler+0x1b4>)
 800ee98:	689b      	ldr	r3, [r3, #8]
 800ee9a:	2204      	movs	r2, #4
 800ee9c:	0019      	movs	r1, r3
 800ee9e:	f001 f9c2 	bl	8010226 <Serialize_s32>
  }
}
 800eea2:	46c0      	nop			; (mov r8, r8)
 800eea4:	46bd      	mov	sp, r7
 800eea6:	b00b      	add	sp, #44	; 0x2c
 800eea8:	bd90      	pop	{r4, r7, pc}
 800eeaa:	46c0      	nop			; (mov r8, r8)
 800eeac:	20000268 	.word	0x20000268
 800eeb0:	20000e41 	.word	0x20000e41
 800eeb4:	20000fe4 	.word	0x20000fe4
 800eeb8:	20000e44 	.word	0x20000e44
 800eebc:	20001010 	.word	0x20001010
 800eec0:	20001038 	.word	0x20001038
 800eec4:	3b03126f 	.word	0x3b03126f
 800eec8:	43fa0000 	.word	0x43fa0000
 800eecc:	2000102c 	.word	0x2000102c

0800eed0 <Pressure_Sensor_Handler>:
 * @brief  Handles the PRESS sensor data getting/sending.
 * @param  Msg the PRESS part of the stream
 * @retval None
 */
static void Pressure_Sensor_Handler(TMsg *Msg)
{
 800eed0:	b580      	push	{r7, lr}
 800eed2:	b082      	sub	sp, #8
 800eed4:	af00      	add	r7, sp, #0
 800eed6:	6078      	str	r0, [r7, #4]
  if ((SensorsEnabled & PRESSURE_SENSOR) == PRESSURE_SENSOR)
 800eed8:	4b11      	ldr	r3, [pc, #68]	; (800ef20 <Pressure_Sensor_Handler+0x50>)
 800eeda:	681b      	ldr	r3, [r3, #0]
 800eedc:	2201      	movs	r2, #1
 800eede:	4013      	ands	r3, r2
 800eee0:	2b01      	cmp	r3, #1
 800eee2:	d119      	bne.n	800ef18 <Pressure_Sensor_Handler+0x48>
  {
    if (UseOfflineData == 1)
 800eee4:	4b0f      	ldr	r3, [pc, #60]	; (800ef24 <Pressure_Sensor_Handler+0x54>)
 800eee6:	781b      	ldrb	r3, [r3, #0]
 800eee8:	2b01      	cmp	r3, #1
 800eeea:	d10a      	bne.n	800ef02 <Pressure_Sensor_Handler+0x32>
    {
      PressValue = OfflineData[OfflineDataReadIndex].pressure;
 800eeec:	4b0e      	ldr	r3, [pc, #56]	; (800ef28 <Pressure_Sensor_Handler+0x58>)
 800eeee:	681b      	ldr	r3, [r3, #0]
 800eef0:	4a0e      	ldr	r2, [pc, #56]	; (800ef2c <Pressure_Sensor_Handler+0x5c>)
 800eef2:	2134      	movs	r1, #52	; 0x34
 800eef4:	434b      	muls	r3, r1
 800eef6:	18d3      	adds	r3, r2, r3
 800eef8:	3304      	adds	r3, #4
 800eefa:	681a      	ldr	r2, [r3, #0]
 800eefc:	4b0c      	ldr	r3, [pc, #48]	; (800ef30 <Pressure_Sensor_Handler+0x60>)
 800eefe:	601a      	str	r2, [r3, #0]
 800ef00:	e003      	b.n	800ef0a <Pressure_Sensor_Handler+0x3a>
    }
    else
    {
      BSP_SENSOR_PRESS_GetValue(&PressValue);
 800ef02:	4b0b      	ldr	r3, [pc, #44]	; (800ef30 <Pressure_Sensor_Handler+0x60>)
 800ef04:	0018      	movs	r0, r3
 800ef06:	f000 ff63 	bl	800fdd0 <BSP_SENSOR_PRESS_GetValue>
    }

    (void)memcpy(&Msg->Data[7], (void *)&PressValue, sizeof(float));
 800ef0a:	687b      	ldr	r3, [r7, #4]
 800ef0c:	330b      	adds	r3, #11
 800ef0e:	4908      	ldr	r1, [pc, #32]	; (800ef30 <Pressure_Sensor_Handler+0x60>)
 800ef10:	2204      	movs	r2, #4
 800ef12:	0018      	movs	r0, r3
 800ef14:	f004 fd9e 	bl	8013a54 <memcpy>
  }
}
 800ef18:	46c0      	nop			; (mov r8, r8)
 800ef1a:	46bd      	mov	sp, r7
 800ef1c:	b002      	add	sp, #8
 800ef1e:	bd80      	pop	{r7, pc}
 800ef20:	20000268 	.word	0x20000268
 800ef24:	20000e41 	.word	0x20000e41
 800ef28:	20000fe4 	.word	0x20000fe4
 800ef2c:	20000e44 	.word	0x20000e44
 800ef30:	2000101c 	.word	0x2000101c

0800ef34 <Temperature_Sensor_Handler>:
 * @brief  Handles the TEMP axes data getting/sending
 * @param  Msg the TEMP part of the stream
 * @retval None
 */
static void Temperature_Sensor_Handler(TMsg *Msg, SensorData *SD)
{
 800ef34:	b580      	push	{r7, lr}
 800ef36:	b082      	sub	sp, #8
 800ef38:	af00      	add	r7, sp, #0
 800ef3a:	6078      	str	r0, [r7, #4]
 800ef3c:	6039      	str	r1, [r7, #0]
  if ((SensorsEnabled & TEMPERATURE_SENSOR) == TEMPERATURE_SENSOR)
 800ef3e:	4b14      	ldr	r3, [pc, #80]	; (800ef90 <Temperature_Sensor_Handler+0x5c>)
 800ef40:	681b      	ldr	r3, [r3, #0]
 800ef42:	2202      	movs	r2, #2
 800ef44:	4013      	ands	r3, r2
 800ef46:	2b02      	cmp	r3, #2
 800ef48:	d11d      	bne.n	800ef86 <Temperature_Sensor_Handler+0x52>
  {
    if (UseOfflineData == 1)
 800ef4a:	4b12      	ldr	r3, [pc, #72]	; (800ef94 <Temperature_Sensor_Handler+0x60>)
 800ef4c:	781b      	ldrb	r3, [r3, #0]
 800ef4e:	2b01      	cmp	r3, #1
 800ef50:	d10a      	bne.n	800ef68 <Temperature_Sensor_Handler+0x34>
    {
      TempValue = OfflineData[OfflineDataReadIndex].temperature;
 800ef52:	4b11      	ldr	r3, [pc, #68]	; (800ef98 <Temperature_Sensor_Handler+0x64>)
 800ef54:	681b      	ldr	r3, [r3, #0]
 800ef56:	4a11      	ldr	r2, [pc, #68]	; (800ef9c <Temperature_Sensor_Handler+0x68>)
 800ef58:	2134      	movs	r1, #52	; 0x34
 800ef5a:	434b      	muls	r3, r1
 800ef5c:	18d3      	adds	r3, r2, r3
 800ef5e:	330c      	adds	r3, #12
 800ef60:	681a      	ldr	r2, [r3, #0]
 800ef62:	4b0f      	ldr	r3, [pc, #60]	; (800efa0 <Temperature_Sensor_Handler+0x6c>)
 800ef64:	601a      	str	r2, [r3, #0]
 800ef66:	e003      	b.n	800ef70 <Temperature_Sensor_Handler+0x3c>
    }
    else
    {
      BSP_SENSOR_TEMP_GetValue(&TempValue);
 800ef68:	4b0d      	ldr	r3, [pc, #52]	; (800efa0 <Temperature_Sensor_Handler+0x6c>)
 800ef6a:	0018      	movs	r0, r3
 800ef6c:	f000 ff3e 	bl	800fdec <BSP_SENSOR_TEMP_GetValue>
    }

    (void)memcpy(&Msg->Data[11], (void *)&TempValue, sizeof(float));
 800ef70:	687b      	ldr	r3, [r7, #4]
 800ef72:	330f      	adds	r3, #15
 800ef74:	490a      	ldr	r1, [pc, #40]	; (800efa0 <Temperature_Sensor_Handler+0x6c>)
 800ef76:	2204      	movs	r2, #4
 800ef78:	0018      	movs	r0, r3
 800ef7a:	f004 fd6b 	bl	8013a54 <memcpy>
    SD->Temperature = TempValue;
 800ef7e:	4b08      	ldr	r3, [pc, #32]	; (800efa0 <Temperature_Sensor_Handler+0x6c>)
 800ef80:	681a      	ldr	r2, [r3, #0]
 800ef82:	683b      	ldr	r3, [r7, #0]
 800ef84:	601a      	str	r2, [r3, #0]
  }
}
 800ef86:	46c0      	nop			; (mov r8, r8)
 800ef88:	46bd      	mov	sp, r7
 800ef8a:	b002      	add	sp, #8
 800ef8c:	bd80      	pop	{r7, pc}
 800ef8e:	46c0      	nop			; (mov r8, r8)
 800ef90:	20000268 	.word	0x20000268
 800ef94:	20000e41 	.word	0x20000e41
 800ef98:	20000fe4 	.word	0x20000fe4
 800ef9c:	20000e44 	.word	0x20000e44
 800efa0:	20001020 	.word	0x20001020

0800efa4 <Humidity_Sensor_Handler>:
 * @brief  Handles the HUM axes data getting/sending
 * @param  Msg the HUM part of the stream
 * @retval None
 */
static void Humidity_Sensor_Handler(TMsg *Msg, SensorData *SD)
{
 800efa4:	b580      	push	{r7, lr}
 800efa6:	b082      	sub	sp, #8
 800efa8:	af00      	add	r7, sp, #0
 800efaa:	6078      	str	r0, [r7, #4]
 800efac:	6039      	str	r1, [r7, #0]
  if ((SensorsEnabled & HUMIDITY_SENSOR) == HUMIDITY_SENSOR)
 800efae:	4b14      	ldr	r3, [pc, #80]	; (800f000 <Humidity_Sensor_Handler+0x5c>)
 800efb0:	681b      	ldr	r3, [r3, #0]
 800efb2:	2204      	movs	r2, #4
 800efb4:	4013      	ands	r3, r2
 800efb6:	2b04      	cmp	r3, #4
 800efb8:	d11d      	bne.n	800eff6 <Humidity_Sensor_Handler+0x52>
  {
    if (UseOfflineData == 1)
 800efba:	4b12      	ldr	r3, [pc, #72]	; (800f004 <Humidity_Sensor_Handler+0x60>)
 800efbc:	781b      	ldrb	r3, [r3, #0]
 800efbe:	2b01      	cmp	r3, #1
 800efc0:	d10a      	bne.n	800efd8 <Humidity_Sensor_Handler+0x34>
    {
      HumValue = OfflineData[OfflineDataReadIndex].humidity;
 800efc2:	4b11      	ldr	r3, [pc, #68]	; (800f008 <Humidity_Sensor_Handler+0x64>)
 800efc4:	681b      	ldr	r3, [r3, #0]
 800efc6:	4a11      	ldr	r2, [pc, #68]	; (800f00c <Humidity_Sensor_Handler+0x68>)
 800efc8:	2134      	movs	r1, #52	; 0x34
 800efca:	434b      	muls	r3, r1
 800efcc:	18d3      	adds	r3, r2, r3
 800efce:	3308      	adds	r3, #8
 800efd0:	681a      	ldr	r2, [r3, #0]
 800efd2:	4b0f      	ldr	r3, [pc, #60]	; (800f010 <Humidity_Sensor_Handler+0x6c>)
 800efd4:	601a      	str	r2, [r3, #0]
 800efd6:	e003      	b.n	800efe0 <Humidity_Sensor_Handler+0x3c>
    }
    else
    {
      BSP_SENSOR_HUM_GetValue(&HumValue);
 800efd8:	4b0d      	ldr	r3, [pc, #52]	; (800f010 <Humidity_Sensor_Handler+0x6c>)
 800efda:	0018      	movs	r0, r3
 800efdc:	f000 ff14 	bl	800fe08 <BSP_SENSOR_HUM_GetValue>
    }

    (void)memcpy(&Msg->Data[15], (void *)&HumValue, sizeof(float));
 800efe0:	687b      	ldr	r3, [r7, #4]
 800efe2:	3313      	adds	r3, #19
 800efe4:	490a      	ldr	r1, [pc, #40]	; (800f010 <Humidity_Sensor_Handler+0x6c>)
 800efe6:	2204      	movs	r2, #4
 800efe8:	0018      	movs	r0, r3
 800efea:	f004 fd33 	bl	8013a54 <memcpy>
    SD->Humidity = HumValue;
 800efee:	4b08      	ldr	r3, [pc, #32]	; (800f010 <Humidity_Sensor_Handler+0x6c>)
 800eff0:	681a      	ldr	r2, [r3, #0]
 800eff2:	683b      	ldr	r3, [r7, #0]
 800eff4:	605a      	str	r2, [r3, #4]
  }
}
 800eff6:	46c0      	nop			; (mov r8, r8)
 800eff8:	46bd      	mov	sp, r7
 800effa:	b002      	add	sp, #8
 800effc:	bd80      	pop	{r7, pc}
 800effe:	46c0      	nop			; (mov r8, r8)
 800f000:	20000268 	.word	0x20000268
 800f004:	20000e41 	.word	0x20000e41
 800f008:	20000fe4 	.word	0x20000fe4
 800f00c:	20000e44 	.word	0x20000e44
 800f010:	20001024 	.word	0x20001024

0800f014 <TIM_Config>:
 * @brief  Timer configuration
 * @param  Freq the desired Timer frequency
 * @retval None
 */
static void TIM_Config(uint32_t Freq)
{
 800f014:	b580      	push	{r7, lr}
 800f016:	b086      	sub	sp, #24
 800f018:	af00      	add	r7, sp, #0
 800f01a:	6078      	str	r0, [r7, #4]
  const uint32_t tim_counter_clock = 2000; /* TIM counter clock 2 kHz */
 800f01c:	23fa      	movs	r3, #250	; 0xfa
 800f01e:	00db      	lsls	r3, r3, #3
 800f020:	617b      	str	r3, [r7, #20]
  uint32_t prescaler_value = (uint32_t)((SystemCoreClock / tim_counter_clock) - 1);
 800f022:	4b15      	ldr	r3, [pc, #84]	; (800f078 <TIM_Config+0x64>)
 800f024:	681b      	ldr	r3, [r3, #0]
 800f026:	6979      	ldr	r1, [r7, #20]
 800f028:	0018      	movs	r0, r3
 800f02a:	f7f1 f877 	bl	800011c <__udivsi3>
 800f02e:	0003      	movs	r3, r0
 800f030:	3b01      	subs	r3, #1
 800f032:	613b      	str	r3, [r7, #16]
  uint32_t period = (tim_counter_clock / Freq) - 1;
 800f034:	6879      	ldr	r1, [r7, #4]
 800f036:	6978      	ldr	r0, [r7, #20]
 800f038:	f7f1 f870 	bl	800011c <__udivsi3>
 800f03c:	0003      	movs	r3, r0
 800f03e:	3b01      	subs	r3, #1
 800f040:	60fb      	str	r3, [r7, #12]

  BSP_IP_TIM_Handle.Init.Prescaler = prescaler_value;
 800f042:	4b0e      	ldr	r3, [pc, #56]	; (800f07c <TIM_Config+0x68>)
 800f044:	693a      	ldr	r2, [r7, #16]
 800f046:	605a      	str	r2, [r3, #4]
  BSP_IP_TIM_Handle.Init.CounterMode = TIM_COUNTERMODE_UP;
 800f048:	4b0c      	ldr	r3, [pc, #48]	; (800f07c <TIM_Config+0x68>)
 800f04a:	2200      	movs	r2, #0
 800f04c:	609a      	str	r2, [r3, #8]
  BSP_IP_TIM_Handle.Init.Period = period;
 800f04e:	4b0b      	ldr	r3, [pc, #44]	; (800f07c <TIM_Config+0x68>)
 800f050:	68fa      	ldr	r2, [r7, #12]
 800f052:	60da      	str	r2, [r3, #12]
  BSP_IP_TIM_Handle.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800f054:	4b09      	ldr	r3, [pc, #36]	; (800f07c <TIM_Config+0x68>)
 800f056:	2200      	movs	r2, #0
 800f058:	611a      	str	r2, [r3, #16]
  BSP_IP_TIM_Handle.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800f05a:	4b08      	ldr	r3, [pc, #32]	; (800f07c <TIM_Config+0x68>)
 800f05c:	2200      	movs	r2, #0
 800f05e:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&BSP_IP_TIM_Handle) != HAL_OK)
 800f060:	4b06      	ldr	r3, [pc, #24]	; (800f07c <TIM_Config+0x68>)
 800f062:	0018      	movs	r0, r3
 800f064:	f7fd fe50 	bl	800cd08 <HAL_TIM_Base_Init>
 800f068:	1e03      	subs	r3, r0, #0
 800f06a:	d001      	beq.n	800f070 <TIM_Config+0x5c>
  {
    Error_Handler();
 800f06c:	f7f2 fc3a 	bl	80018e4 <Error_Handler>
  }
}
 800f070:	46c0      	nop			; (mov r8, r8)
 800f072:	46bd      	mov	sp, r7
 800f074:	b006      	add	sp, #24
 800f076:	bd80      	pop	{r7, pc}
 800f078:	200000cc 	.word	0x200000cc
 800f07c:	20000b00 	.word	0x20000b00

0800f080 <UART_ReceivedMSG>:
 * @brief  Check if a message is received via UART
 * @param  Msg the pointer to the message to be received
 * @retval 1 if a complete message is found, 0 otherwise
 */
int UART_ReceivedMSG(TMsg *Msg)
{
 800f080:	b5b0      	push	{r4, r5, r7, lr}
 800f082:	b08a      	sub	sp, #40	; 0x28
 800f084:	af00      	add	r7, sp, #0
 800f086:	6078      	str	r0, [r7, #4]
  uint16_t i, j, k, j2;
  uint16_t dma_counter, length;
  uint8_t data;
  uint16_t source = 0;
 800f088:	231e      	movs	r3, #30
 800f08a:	18fb      	adds	r3, r7, r3
 800f08c:	2200      	movs	r2, #0
 800f08e:	801a      	strh	r2, [r3, #0]
  uint8_t inc;

  if (Get_DMA_Flag_Status(hcom_uart[COM1].hdmarx) == (uint32_t)RESET)
 800f090:	4b80      	ldr	r3, [pc, #512]	; (800f294 <UART_ReceivedMSG+0x214>)
 800f092:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f094:	0018      	movs	r0, r3
 800f096:	f000 f943 	bl	800f320 <Get_DMA_Flag_Status>
 800f09a:	1e03      	subs	r3, r0, #0
 800f09c:	d000      	beq.n	800f0a0 <UART_ReceivedMSG+0x20>
 800f09e:	e0f4      	b.n	800f28a <UART_ReceivedMSG+0x20a>
  {
    dma_counter = (uint16_t)UART_RxBufferSize - (uint16_t)Get_DMA_Counter(hcom_uart[COM1].hdmarx);
 800f0a0:	4b7c      	ldr	r3, [pc, #496]	; (800f294 <UART_ReceivedMSG+0x214>)
 800f0a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f0a4:	0018      	movs	r0, r3
 800f0a6:	f000 f985 	bl	800f3b4 <Get_DMA_Counter>
 800f0aa:	0003      	movs	r3, r0
 800f0ac:	b29a      	uxth	r2, r3
 800f0ae:	201c      	movs	r0, #28
 800f0b0:	183b      	adds	r3, r7, r0
 800f0b2:	2180      	movs	r1, #128	; 0x80
 800f0b4:	0089      	lsls	r1, r1, #2
 800f0b6:	1a8a      	subs	r2, r1, r2
 800f0b8:	801a      	strh	r2, [r3, #0]

    if (dma_counter >= UartEngine.StartOfMsg)
 800f0ba:	4b77      	ldr	r3, [pc, #476]	; (800f298 <UART_ReceivedMSG+0x218>)
 800f0bc:	889b      	ldrh	r3, [r3, #4]
 800f0be:	183a      	adds	r2, r7, r0
 800f0c0:	8812      	ldrh	r2, [r2, #0]
 800f0c2:	429a      	cmp	r2, r3
 800f0c4:	d308      	bcc.n	800f0d8 <UART_ReceivedMSG+0x58>
    {
      length = dma_counter - UartEngine.StartOfMsg;
 800f0c6:	4b74      	ldr	r3, [pc, #464]	; (800f298 <UART_ReceivedMSG+0x218>)
 800f0c8:	889a      	ldrh	r2, [r3, #4]
 800f0ca:	2320      	movs	r3, #32
 800f0cc:	18fb      	adds	r3, r7, r3
 800f0ce:	1839      	adds	r1, r7, r0
 800f0d0:	8809      	ldrh	r1, [r1, #0]
 800f0d2:	1a8a      	subs	r2, r1, r2
 800f0d4:	801a      	strh	r2, [r3, #0]
 800f0d6:	e00d      	b.n	800f0f4 <UART_ReceivedMSG+0x74>
    }
    else
    {
      length = (uint16_t)UART_RxBufferSize + dma_counter - UartEngine.StartOfMsg;
 800f0d8:	4b6f      	ldr	r3, [pc, #444]	; (800f298 <UART_ReceivedMSG+0x218>)
 800f0da:	889b      	ldrh	r3, [r3, #4]
 800f0dc:	221c      	movs	r2, #28
 800f0de:	18ba      	adds	r2, r7, r2
 800f0e0:	8812      	ldrh	r2, [r2, #0]
 800f0e2:	1ad3      	subs	r3, r2, r3
 800f0e4:	b29b      	uxth	r3, r3
 800f0e6:	2220      	movs	r2, #32
 800f0e8:	18ba      	adds	r2, r7, r2
 800f0ea:	2180      	movs	r1, #128	; 0x80
 800f0ec:	0089      	lsls	r1, r1, #2
 800f0ee:	468c      	mov	ip, r1
 800f0f0:	4463      	add	r3, ip
 800f0f2:	8013      	strh	r3, [r2, #0]
    }

    j = UartEngine.StartOfMsg;
 800f0f4:	2324      	movs	r3, #36	; 0x24
 800f0f6:	18fb      	adds	r3, r7, r3
 800f0f8:	4a67      	ldr	r2, [pc, #412]	; (800f298 <UART_ReceivedMSG+0x218>)
 800f0fa:	8892      	ldrh	r2, [r2, #4]
 800f0fc:	801a      	strh	r2, [r3, #0]

    for (k = 0; k < length; k++)
 800f0fe:	2322      	movs	r3, #34	; 0x22
 800f100:	18fb      	adds	r3, r7, r3
 800f102:	2200      	movs	r2, #0
 800f104:	801a      	strh	r2, [r3, #0]
 800f106:	e0ac      	b.n	800f262 <UART_ReceivedMSG+0x1e2>
    {
      data = UartRxBuffer[j];
 800f108:	2024      	movs	r0, #36	; 0x24
 800f10a:	183b      	adds	r3, r7, r0
 800f10c:	881a      	ldrh	r2, [r3, #0]
 800f10e:	231b      	movs	r3, #27
 800f110:	18fb      	adds	r3, r7, r3
 800f112:	4962      	ldr	r1, [pc, #392]	; (800f29c <UART_ReceivedMSG+0x21c>)
 800f114:	5c8a      	ldrb	r2, [r1, r2]
 800f116:	701a      	strb	r2, [r3, #0]
      j++;
 800f118:	183b      	adds	r3, r7, r0
 800f11a:	881a      	ldrh	r2, [r3, #0]
 800f11c:	183b      	adds	r3, r7, r0
 800f11e:	3201      	adds	r2, #1
 800f120:	801a      	strh	r2, [r3, #0]

      if (j >= (uint16_t)UART_RxBufferSize)
 800f122:	183b      	adds	r3, r7, r0
 800f124:	881a      	ldrh	r2, [r3, #0]
 800f126:	2380      	movs	r3, #128	; 0x80
 800f128:	009b      	lsls	r3, r3, #2
 800f12a:	429a      	cmp	r2, r3
 800f12c:	d302      	bcc.n	800f134 <UART_ReceivedMSG+0xb4>
      {
        j = 0;
 800f12e:	183b      	adds	r3, r7, r0
 800f130:	2200      	movs	r2, #0
 800f132:	801a      	strh	r2, [r3, #0]
      }

      if (data == (uint8_t)TMsg_EOF)
 800f134:	231b      	movs	r3, #27
 800f136:	18fb      	adds	r3, r7, r3
 800f138:	781b      	ldrb	r3, [r3, #0]
 800f13a:	2bf0      	cmp	r3, #240	; 0xf0
 800f13c:	d000      	beq.n	800f140 <UART_ReceivedMSG+0xc0>
 800f13e:	e08a      	b.n	800f256 <UART_ReceivedMSG+0x1d6>
      {
        j = UartEngine.StartOfMsg;
 800f140:	2324      	movs	r3, #36	; 0x24
 800f142:	18fb      	adds	r3, r7, r3
 800f144:	4a54      	ldr	r2, [pc, #336]	; (800f298 <UART_ReceivedMSG+0x218>)
 800f146:	8892      	ldrh	r2, [r2, #4]
 800f148:	801a      	strh	r2, [r3, #0]

        for (i = 0; i < k; i += inc)
 800f14a:	2326      	movs	r3, #38	; 0x26
 800f14c:	18fb      	adds	r3, r7, r3
 800f14e:	2200      	movs	r2, #0
 800f150:	801a      	strh	r2, [r3, #0]
 800f152:	e05d      	b.n	800f210 <UART_ReceivedMSG+0x190>
        {
          uint8_t  Source0;
          uint8_t  Source1;
          uint8_t *Dest;

          j2 = (j + 1U) % (uint16_t)UART_RxBufferSize;
 800f154:	2124      	movs	r1, #36	; 0x24
 800f156:	187b      	adds	r3, r7, r1
 800f158:	881b      	ldrh	r3, [r3, #0]
 800f15a:	3301      	adds	r3, #1
 800f15c:	b29a      	uxth	r2, r3
 800f15e:	2318      	movs	r3, #24
 800f160:	18fb      	adds	r3, r7, r3
 800f162:	05d2      	lsls	r2, r2, #23
 800f164:	0dd2      	lsrs	r2, r2, #23
 800f166:	801a      	strh	r2, [r3, #0]

          if (source >= TMsg_MaxLen)
 800f168:	231e      	movs	r3, #30
 800f16a:	18fb      	adds	r3, r7, r3
 800f16c:	881b      	ldrh	r3, [r3, #0]
 800f16e:	2bff      	cmp	r3, #255	; 0xff
 800f170:	d905      	bls.n	800f17e <UART_ReceivedMSG+0xfe>
          {
            UartEngine.StartOfMsg = j;
 800f172:	4b49      	ldr	r3, [pc, #292]	; (800f298 <UART_ReceivedMSG+0x218>)
 800f174:	187a      	adds	r2, r7, r1
 800f176:	8812      	ldrh	r2, [r2, #0]
 800f178:	809a      	strh	r2, [r3, #4]
            return 0;
 800f17a:	2300      	movs	r3, #0
 800f17c:	e086      	b.n	800f28c <UART_ReceivedMSG+0x20c>
          }

          Source0 = UartRxBuffer[j];
 800f17e:	2324      	movs	r3, #36	; 0x24
 800f180:	18fb      	adds	r3, r7, r3
 800f182:	881a      	ldrh	r2, [r3, #0]
 800f184:	2017      	movs	r0, #23
 800f186:	183b      	adds	r3, r7, r0
 800f188:	4944      	ldr	r1, [pc, #272]	; (800f29c <UART_ReceivedMSG+0x21c>)
 800f18a:	5c8a      	ldrb	r2, [r1, r2]
 800f18c:	701a      	strb	r2, [r3, #0]
          Source1 = UartRxBuffer[j2];
 800f18e:	2418      	movs	r4, #24
 800f190:	193b      	adds	r3, r7, r4
 800f192:	881a      	ldrh	r2, [r3, #0]
 800f194:	2516      	movs	r5, #22
 800f196:	197b      	adds	r3, r7, r5
 800f198:	4940      	ldr	r1, [pc, #256]	; (800f29c <UART_ReceivedMSG+0x21c>)
 800f19a:	5c8a      	ldrb	r2, [r1, r2]
 800f19c:	701a      	strb	r2, [r3, #0]
          Dest    = &Msg->Data[source];
 800f19e:	231e      	movs	r3, #30
 800f1a0:	18fb      	adds	r3, r7, r3
 800f1a2:	881b      	ldrh	r3, [r3, #0]
 800f1a4:	687a      	ldr	r2, [r7, #4]
 800f1a6:	18d3      	adds	r3, r2, r3
 800f1a8:	3304      	adds	r3, #4
 800f1aa:	613b      	str	r3, [r7, #16]

          inc = (uint8_t)ReverseByteStuffCopyByte2(Source0, Source1, Dest);
 800f1ac:	693a      	ldr	r2, [r7, #16]
 800f1ae:	197b      	adds	r3, r7, r5
 800f1b0:	7819      	ldrb	r1, [r3, #0]
 800f1b2:	183b      	adds	r3, r7, r0
 800f1b4:	781b      	ldrb	r3, [r3, #0]
 800f1b6:	0018      	movs	r0, r3
 800f1b8:	f000 ff8a 	bl	80100d0 <ReverseByteStuffCopyByte2>
 800f1bc:	0002      	movs	r2, r0
 800f1be:	210f      	movs	r1, #15
 800f1c0:	187b      	adds	r3, r7, r1
 800f1c2:	701a      	strb	r2, [r3, #0]

          if (inc == 0U)
 800f1c4:	187b      	adds	r3, r7, r1
 800f1c6:	781b      	ldrb	r3, [r3, #0]
 800f1c8:	2b00      	cmp	r3, #0
 800f1ca:	d105      	bne.n	800f1d8 <UART_ReceivedMSG+0x158>
          {
            UartEngine.StartOfMsg = j2;
 800f1cc:	4b32      	ldr	r3, [pc, #200]	; (800f298 <UART_ReceivedMSG+0x218>)
 800f1ce:	193a      	adds	r2, r7, r4
 800f1d0:	8812      	ldrh	r2, [r2, #0]
 800f1d2:	809a      	strh	r2, [r3, #4]
            return 0;
 800f1d4:	2300      	movs	r3, #0
 800f1d6:	e059      	b.n	800f28c <UART_ReceivedMSG+0x20c>
          }

          j = (j + inc) % (uint16_t)UART_RxBufferSize;
 800f1d8:	210f      	movs	r1, #15
 800f1da:	187b      	adds	r3, r7, r1
 800f1dc:	781b      	ldrb	r3, [r3, #0]
 800f1de:	b29a      	uxth	r2, r3
 800f1e0:	2024      	movs	r0, #36	; 0x24
 800f1e2:	183b      	adds	r3, r7, r0
 800f1e4:	881b      	ldrh	r3, [r3, #0]
 800f1e6:	18d3      	adds	r3, r2, r3
 800f1e8:	b29a      	uxth	r2, r3
 800f1ea:	183b      	adds	r3, r7, r0
 800f1ec:	05d2      	lsls	r2, r2, #23
 800f1ee:	0dd2      	lsrs	r2, r2, #23
 800f1f0:	801a      	strh	r2, [r3, #0]
          source++;
 800f1f2:	201e      	movs	r0, #30
 800f1f4:	183b      	adds	r3, r7, r0
 800f1f6:	881a      	ldrh	r2, [r3, #0]
 800f1f8:	183b      	adds	r3, r7, r0
 800f1fa:	3201      	adds	r2, #1
 800f1fc:	801a      	strh	r2, [r3, #0]
        for (i = 0; i < k; i += inc)
 800f1fe:	187b      	adds	r3, r7, r1
 800f200:	781b      	ldrb	r3, [r3, #0]
 800f202:	b299      	uxth	r1, r3
 800f204:	2226      	movs	r2, #38	; 0x26
 800f206:	18bb      	adds	r3, r7, r2
 800f208:	18ba      	adds	r2, r7, r2
 800f20a:	8812      	ldrh	r2, [r2, #0]
 800f20c:	188a      	adds	r2, r1, r2
 800f20e:	801a      	strh	r2, [r3, #0]
 800f210:	2326      	movs	r3, #38	; 0x26
 800f212:	18fa      	adds	r2, r7, r3
 800f214:	2322      	movs	r3, #34	; 0x22
 800f216:	18fb      	adds	r3, r7, r3
 800f218:	8812      	ldrh	r2, [r2, #0]
 800f21a:	881b      	ldrh	r3, [r3, #0]
 800f21c:	429a      	cmp	r2, r3
 800f21e:	d399      	bcc.n	800f154 <UART_ReceivedMSG+0xd4>
        }

        Msg->Len = source;
 800f220:	231e      	movs	r3, #30
 800f222:	18fb      	adds	r3, r7, r3
 800f224:	881a      	ldrh	r2, [r3, #0]
 800f226:	687b      	ldr	r3, [r7, #4]
 800f228:	601a      	str	r2, [r3, #0]
        j = (j + 1U) % (uint16_t)UART_RxBufferSize; /* skip TMsg_EOF */
 800f22a:	2124      	movs	r1, #36	; 0x24
 800f22c:	187b      	adds	r3, r7, r1
 800f22e:	881b      	ldrh	r3, [r3, #0]
 800f230:	3301      	adds	r3, #1
 800f232:	b29a      	uxth	r2, r3
 800f234:	187b      	adds	r3, r7, r1
 800f236:	05d2      	lsls	r2, r2, #23
 800f238:	0dd2      	lsrs	r2, r2, #23
 800f23a:	801a      	strh	r2, [r3, #0]
        UartEngine.StartOfMsg = j;
 800f23c:	4b16      	ldr	r3, [pc, #88]	; (800f298 <UART_ReceivedMSG+0x218>)
 800f23e:	187a      	adds	r2, r7, r1
 800f240:	8812      	ldrh	r2, [r2, #0]
 800f242:	809a      	strh	r2, [r3, #4]

        /* check message integrity */
        return (CHK_CheckAndRemove(Msg) != 0) ? 1 : 0;
 800f244:	687b      	ldr	r3, [r7, #4]
 800f246:	0018      	movs	r0, r3
 800f248:	f000 ff9c 	bl	8010184 <CHK_CheckAndRemove>
 800f24c:	0003      	movs	r3, r0
 800f24e:	1e5a      	subs	r2, r3, #1
 800f250:	4193      	sbcs	r3, r2
 800f252:	b2db      	uxtb	r3, r3
 800f254:	e01a      	b.n	800f28c <UART_ReceivedMSG+0x20c>
    for (k = 0; k < length; k++)
 800f256:	2122      	movs	r1, #34	; 0x22
 800f258:	187b      	adds	r3, r7, r1
 800f25a:	881a      	ldrh	r2, [r3, #0]
 800f25c:	187b      	adds	r3, r7, r1
 800f25e:	3201      	adds	r2, #1
 800f260:	801a      	strh	r2, [r3, #0]
 800f262:	2322      	movs	r3, #34	; 0x22
 800f264:	18fa      	adds	r2, r7, r3
 800f266:	2120      	movs	r1, #32
 800f268:	187b      	adds	r3, r7, r1
 800f26a:	8812      	ldrh	r2, [r2, #0]
 800f26c:	881b      	ldrh	r3, [r3, #0]
 800f26e:	429a      	cmp	r2, r3
 800f270:	d200      	bcs.n	800f274 <UART_ReceivedMSG+0x1f4>
 800f272:	e749      	b.n	800f108 <UART_ReceivedMSG+0x88>
      }
    }

    if (length > (uint16_t)Uart_Msg_Max_Size)
 800f274:	187b      	adds	r3, r7, r1
 800f276:	881a      	ldrh	r2, [r3, #0]
 800f278:	2380      	movs	r3, #128	; 0x80
 800f27a:	005b      	lsls	r3, r3, #1
 800f27c:	429a      	cmp	r2, r3
 800f27e:	d904      	bls.n	800f28a <UART_ReceivedMSG+0x20a>
    {
      UartEngine.StartOfMsg = dma_counter;
 800f280:	4b05      	ldr	r3, [pc, #20]	; (800f298 <UART_ReceivedMSG+0x218>)
 800f282:	221c      	movs	r2, #28
 800f284:	18ba      	adds	r2, r7, r2
 800f286:	8812      	ldrh	r2, [r2, #0]
 800f288:	809a      	strh	r2, [r3, #4]
    }
  }

  return 0;
 800f28a:	2300      	movs	r3, #0
}
 800f28c:	0018      	movs	r0, r3
 800f28e:	46bd      	mov	sp, r7
 800f290:	b00a      	add	sp, #40	; 0x28
 800f292:	bdb0      	pop	{r4, r5, r7, pc}
 800f294:	20000d44 	.word	0x20000d44
 800f298:	20001444 	.word	0x20001444
 800f29c:	20001244 	.word	0x20001244

0800f2a0 <UART_SendMsg>:
 * @brief  Send a message via UART
 * @param  Msg the pointer to the message to be sent
 * @retval None
 */
void UART_SendMsg(TMsg *Msg)
{
 800f2a0:	b590      	push	{r4, r7, lr}
 800f2a2:	b085      	sub	sp, #20
 800f2a4:	af00      	add	r7, sp, #0
 800f2a6:	6078      	str	r0, [r7, #4]
  uint16_t count_out;

  CHK_ComputeAndAdd(Msg);
 800f2a8:	687b      	ldr	r3, [r7, #4]
 800f2aa:	0018      	movs	r0, r3
 800f2ac:	f000 ff3b 	bl	8010126 <CHK_ComputeAndAdd>

  /* MISRA C-2012 rule 11.8 violation for purpose */
  count_out = (uint16_t)ByteStuffCopy((uint8_t *)UartTxBuffer, Msg);
 800f2b0:	687a      	ldr	r2, [r7, #4]
 800f2b2:	4b0a      	ldr	r3, [pc, #40]	; (800f2dc <UART_SendMsg+0x3c>)
 800f2b4:	0011      	movs	r1, r2
 800f2b6:	0018      	movs	r0, r3
 800f2b8:	f000 fedc 	bl	8010074 <ByteStuffCopy>
 800f2bc:	0002      	movs	r2, r0
 800f2be:	210e      	movs	r1, #14
 800f2c0:	187b      	adds	r3, r7, r1
 800f2c2:	801a      	strh	r2, [r3, #0]

  /* MISRA C-2012 rule 11.8 violation for purpose */
  (void)HAL_UART_Transmit(&hcom_uart[COM1], (uint8_t *)UartTxBuffer, count_out, 5000);
 800f2c4:	4c06      	ldr	r4, [pc, #24]	; (800f2e0 <UART_SendMsg+0x40>)
 800f2c6:	187b      	adds	r3, r7, r1
 800f2c8:	881a      	ldrh	r2, [r3, #0]
 800f2ca:	4904      	ldr	r1, [pc, #16]	; (800f2dc <UART_SendMsg+0x3c>)
 800f2cc:	4805      	ldr	r0, [pc, #20]	; (800f2e4 <UART_SendMsg+0x44>)
 800f2ce:	0023      	movs	r3, r4
 800f2d0:	f7fe f960 	bl	800d594 <HAL_UART_Transmit>
}
 800f2d4:	46c0      	nop			; (mov r8, r8)
 800f2d6:	46bd      	mov	sp, r7
 800f2d8:	b005      	add	sp, #20
 800f2da:	bd90      	pop	{r4, r7, pc}
 800f2dc:	2000144c 	.word	0x2000144c
 800f2e0:	00001388 	.word	0x00001388
 800f2e4:	20000d44 	.word	0x20000d44

0800f2e8 <UART_StartReceiveMsg>:
 * @brief  Start receiving messages via DMA
 * @param  None
 * @retval None
 */
void UART_StartReceiveMsg(void)
{
 800f2e8:	b580      	push	{r7, lr}
 800f2ea:	af00      	add	r7, sp, #0
  hcom_uart[COM1].pRxBuffPtr = (uint8_t *)UartRxBuffer; /* MISRA C-2012 rule 11.8 violation for purpose */
 800f2ec:	4b0a      	ldr	r3, [pc, #40]	; (800f318 <UART_StartReceiveMsg+0x30>)
 800f2ee:	4a0b      	ldr	r2, [pc, #44]	; (800f31c <UART_StartReceiveMsg+0x34>)
 800f2f0:	655a      	str	r2, [r3, #84]	; 0x54
  hcom_uart[COM1].RxXferSize = UART_RxBufferSize;
 800f2f2:	4b09      	ldr	r3, [pc, #36]	; (800f318 <UART_StartReceiveMsg+0x30>)
 800f2f4:	2258      	movs	r2, #88	; 0x58
 800f2f6:	2180      	movs	r1, #128	; 0x80
 800f2f8:	0089      	lsls	r1, r1, #2
 800f2fa:	5299      	strh	r1, [r3, r2]
  hcom_uart[COM1].ErrorCode = (uint32_t)HAL_UART_ERROR_NONE;
 800f2fc:	4b06      	ldr	r3, [pc, #24]	; (800f318 <UART_StartReceiveMsg+0x30>)
 800f2fe:	2280      	movs	r2, #128	; 0x80
 800f300:	2100      	movs	r1, #0
 800f302:	5099      	str	r1, [r3, r2]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
     in the UART CR3 register */
  /* MISRA C-2012 rule 11.8 violation for purpose */
  (void)HAL_UART_Receive_DMA(&hcom_uart[COM1], (uint8_t *)UartRxBuffer, UART_RxBufferSize);
 800f304:	2380      	movs	r3, #128	; 0x80
 800f306:	009a      	lsls	r2, r3, #2
 800f308:	4904      	ldr	r1, [pc, #16]	; (800f31c <UART_StartReceiveMsg+0x34>)
 800f30a:	4b03      	ldr	r3, [pc, #12]	; (800f318 <UART_StartReceiveMsg+0x30>)
 800f30c:	0018      	movs	r0, r3
 800f30e:	f7fe f9e9 	bl	800d6e4 <HAL_UART_Receive_DMA>
}
 800f312:	46c0      	nop			; (mov r8, r8)
 800f314:	46bd      	mov	sp, r7
 800f316:	bd80      	pop	{r7, pc}
 800f318:	20000d44 	.word	0x20000d44
 800f31c:	20001244 	.word	0x20001244

0800f320 <Get_DMA_Flag_Status>:
 * @brief  Get the DMA Stream pending flags
 * @param  handle_dma DMA handle
 * @retval The state of FLAG (SET or RESET)
 */
static uint32_t Get_DMA_Flag_Status(DMA_HandleTypeDef *handle_dma)
{
 800f320:	b580      	push	{r7, lr}
 800f322:	b082      	sub	sp, #8
 800f324:	af00      	add	r7, sp, #0
 800f326:	6078      	str	r0, [r7, #4]
  return (__HAL_DMA_GET_FLAG(handle_dma, __HAL_DMA_GET_TE_FLAG_INDEX(handle_dma)));
 800f328:	4b1b      	ldr	r3, [pc, #108]	; (800f398 <Get_DMA_Flag_Status+0x78>)
 800f32a:	681a      	ldr	r2, [r3, #0]
 800f32c:	687b      	ldr	r3, [r7, #4]
 800f32e:	681b      	ldr	r3, [r3, #0]
 800f330:	491a      	ldr	r1, [pc, #104]	; (800f39c <Get_DMA_Flag_Status+0x7c>)
 800f332:	428b      	cmp	r3, r1
 800f334:	d029      	beq.n	800f38a <Get_DMA_Flag_Status+0x6a>
 800f336:	687b      	ldr	r3, [r7, #4]
 800f338:	681b      	ldr	r3, [r3, #0]
 800f33a:	4919      	ldr	r1, [pc, #100]	; (800f3a0 <Get_DMA_Flag_Status+0x80>)
 800f33c:	428b      	cmp	r3, r1
 800f33e:	d022      	beq.n	800f386 <Get_DMA_Flag_Status+0x66>
 800f340:	687b      	ldr	r3, [r7, #4]
 800f342:	681b      	ldr	r3, [r3, #0]
 800f344:	4917      	ldr	r1, [pc, #92]	; (800f3a4 <Get_DMA_Flag_Status+0x84>)
 800f346:	428b      	cmp	r3, r1
 800f348:	d01a      	beq.n	800f380 <Get_DMA_Flag_Status+0x60>
 800f34a:	687b      	ldr	r3, [r7, #4]
 800f34c:	681b      	ldr	r3, [r3, #0]
 800f34e:	4916      	ldr	r1, [pc, #88]	; (800f3a8 <Get_DMA_Flag_Status+0x88>)
 800f350:	428b      	cmp	r3, r1
 800f352:	d012      	beq.n	800f37a <Get_DMA_Flag_Status+0x5a>
 800f354:	687b      	ldr	r3, [r7, #4]
 800f356:	681b      	ldr	r3, [r3, #0]
 800f358:	4914      	ldr	r1, [pc, #80]	; (800f3ac <Get_DMA_Flag_Status+0x8c>)
 800f35a:	428b      	cmp	r3, r1
 800f35c:	d00a      	beq.n	800f374 <Get_DMA_Flag_Status+0x54>
 800f35e:	687b      	ldr	r3, [r7, #4]
 800f360:	681b      	ldr	r3, [r3, #0]
 800f362:	4913      	ldr	r1, [pc, #76]	; (800f3b0 <Get_DMA_Flag_Status+0x90>)
 800f364:	428b      	cmp	r3, r1
 800f366:	d102      	bne.n	800f36e <Get_DMA_Flag_Status+0x4e>
 800f368:	2380      	movs	r3, #128	; 0x80
 800f36a:	041b      	lsls	r3, r3, #16
 800f36c:	e00e      	b.n	800f38c <Get_DMA_Flag_Status+0x6c>
 800f36e:	2380      	movs	r3, #128	; 0x80
 800f370:	051b      	lsls	r3, r3, #20
 800f372:	e00b      	b.n	800f38c <Get_DMA_Flag_Status+0x6c>
 800f374:	2380      	movs	r3, #128	; 0x80
 800f376:	031b      	lsls	r3, r3, #12
 800f378:	e008      	b.n	800f38c <Get_DMA_Flag_Status+0x6c>
 800f37a:	2380      	movs	r3, #128	; 0x80
 800f37c:	021b      	lsls	r3, r3, #8
 800f37e:	e005      	b.n	800f38c <Get_DMA_Flag_Status+0x6c>
 800f380:	2380      	movs	r3, #128	; 0x80
 800f382:	011b      	lsls	r3, r3, #4
 800f384:	e002      	b.n	800f38c <Get_DMA_Flag_Status+0x6c>
 800f386:	2380      	movs	r3, #128	; 0x80
 800f388:	e000      	b.n	800f38c <Get_DMA_Flag_Status+0x6c>
 800f38a:	2308      	movs	r3, #8
 800f38c:	4013      	ands	r3, r2
}
 800f38e:	0018      	movs	r0, r3
 800f390:	46bd      	mov	sp, r7
 800f392:	b002      	add	sp, #8
 800f394:	bd80      	pop	{r7, pc}
 800f396:	46c0      	nop			; (mov r8, r8)
 800f398:	40020000 	.word	0x40020000
 800f39c:	40020008 	.word	0x40020008
 800f3a0:	4002001c 	.word	0x4002001c
 800f3a4:	40020030 	.word	0x40020030
 800f3a8:	40020044 	.word	0x40020044
 800f3ac:	40020058 	.word	0x40020058
 800f3b0:	4002006c 	.word	0x4002006c

0800f3b4 <Get_DMA_Counter>:
 * @brief  Returns the number of remaining data units in the current DMAy Streamx transfer
 * @param  handle_dma DMA handle
 * @retval The number of remaining data units in the current DMA Stream transfer
 */
static uint32_t Get_DMA_Counter(DMA_HandleTypeDef *handle_dma)
{
 800f3b4:	b580      	push	{r7, lr}
 800f3b6:	b082      	sub	sp, #8
 800f3b8:	af00      	add	r7, sp, #0
 800f3ba:	6078      	str	r0, [r7, #4]
  return (__HAL_DMA_GET_COUNTER(handle_dma));
 800f3bc:	687b      	ldr	r3, [r7, #4]
 800f3be:	681b      	ldr	r3, [r3, #0]
 800f3c0:	685b      	ldr	r3, [r3, #4]
}
 800f3c2:	0018      	movs	r0, r3
 800f3c4:	46bd      	mov	sp, r7
 800f3c6:	b002      	add	sp, #8
 800f3c8:	bd80      	pop	{r7, pc}

0800f3ca <BUILD_REPLY_HEADER>:
 * @brief  Build the reply header
 * @param  Msg the pointer to the message to be built
 * @retval None
 */
void BUILD_REPLY_HEADER(TMsg *Msg)
{
 800f3ca:	b580      	push	{r7, lr}
 800f3cc:	b082      	sub	sp, #8
 800f3ce:	af00      	add	r7, sp, #0
 800f3d0:	6078      	str	r0, [r7, #4]
  Msg->Data[0] = Msg->Data[1];
 800f3d2:	687b      	ldr	r3, [r7, #4]
 800f3d4:	795a      	ldrb	r2, [r3, #5]
 800f3d6:	687b      	ldr	r3, [r7, #4]
 800f3d8:	711a      	strb	r2, [r3, #4]
  Msg->Data[1] = DEV_ADDR;
 800f3da:	687b      	ldr	r3, [r7, #4]
 800f3dc:	2232      	movs	r2, #50	; 0x32
 800f3de:	715a      	strb	r2, [r3, #5]
  Msg->Data[2] += CMD_Reply_Add;
 800f3e0:	687b      	ldr	r3, [r7, #4]
 800f3e2:	799b      	ldrb	r3, [r3, #6]
 800f3e4:	3b80      	subs	r3, #128	; 0x80
 800f3e6:	b2da      	uxtb	r2, r3
 800f3e8:	687b      	ldr	r3, [r7, #4]
 800f3ea:	719a      	strb	r2, [r3, #6]
}
 800f3ec:	46c0      	nop			; (mov r8, r8)
 800f3ee:	46bd      	mov	sp, r7
 800f3f0:	b002      	add	sp, #8
 800f3f2:	bd80      	pop	{r7, pc}

0800f3f4 <INIT_STREAMING_HEADER>:
 * @brief  Initialize the streaming header
 * @param  Msg the pointer to the header to be initialized
 * @retval None
 */
void INIT_STREAMING_HEADER(TMsg *Msg)
{
 800f3f4:	b580      	push	{r7, lr}
 800f3f6:	b082      	sub	sp, #8
 800f3f8:	af00      	add	r7, sp, #0
 800f3fa:	6078      	str	r0, [r7, #4]
  Msg->Data[0] = DataStreamingDest;
 800f3fc:	4b08      	ldr	r3, [pc, #32]	; (800f420 <INIT_STREAMING_HEADER+0x2c>)
 800f3fe:	781b      	ldrb	r3, [r3, #0]
 800f400:	b2da      	uxtb	r2, r3
 800f402:	687b      	ldr	r3, [r7, #4]
 800f404:	711a      	strb	r2, [r3, #4]
  Msg->Data[1] = DEV_ADDR;
 800f406:	687b      	ldr	r3, [r7, #4]
 800f408:	2232      	movs	r2, #50	; 0x32
 800f40a:	715a      	strb	r2, [r3, #5]
  Msg->Data[2] = CMD_Start_Data_Streaming;
 800f40c:	687b      	ldr	r3, [r7, #4]
 800f40e:	2208      	movs	r2, #8
 800f410:	719a      	strb	r2, [r3, #6]
  Msg->Len = 3;
 800f412:	687b      	ldr	r3, [r7, #4]
 800f414:	2203      	movs	r2, #3
 800f416:	601a      	str	r2, [r3, #0]
}
 800f418:	46c0      	nop			; (mov r8, r8)
 800f41a:	46bd      	mov	sp, r7
 800f41c:	b002      	add	sp, #8
 800f41e:	bd80      	pop	{r7, pc}
 800f420:	20000270 	.word	0x20000270

0800f424 <HandleMSG>:
 */
int HandleMSG(TMsg *Msg)
/*  DestAddr | SourceAddr | CMD | PAYLOAD
 *      1          1         1       N
 */
{
 800f424:	b580      	push	{r7, lr}
 800f426:	b098      	sub	sp, #96	; 0x60
 800f428:	af00      	add	r7, sp, #0
 800f42a:	6078      	str	r0, [r7, #4]
  int ret = 1;
 800f42c:	2301      	movs	r3, #1
 800f42e:	65fb      	str	r3, [r7, #92]	; 0x5c
  uint32_t i;
  char ps[64];
  uint32_t ps_len = 0;
 800f430:	2300      	movs	r3, #0
 800f432:	60fb      	str	r3, [r7, #12]
  static uint32_t sensors_enabled_prev = 0;
  int32_t msg_offset;
  uint32_t msg_count;

  if (Msg->Len < 2U)
 800f434:	687b      	ldr	r3, [r7, #4]
 800f436:	681b      	ldr	r3, [r3, #0]
 800f438:	2b01      	cmp	r3, #1
 800f43a:	d801      	bhi.n	800f440 <HandleMSG+0x1c>
  {
    return 0;
 800f43c:	2300      	movs	r3, #0
 800f43e:	e33a      	b.n	800fab6 <HandleMSG+0x692>
  }

  if (Msg->Data[0] != DEV_ADDR)
 800f440:	687b      	ldr	r3, [r7, #4]
 800f442:	791b      	ldrb	r3, [r3, #4]
 800f444:	2b32      	cmp	r3, #50	; 0x32
 800f446:	d001      	beq.n	800f44c <HandleMSG+0x28>
  {
    return 0;
 800f448:	2300      	movs	r3, #0
 800f44a:	e334      	b.n	800fab6 <HandleMSG+0x692>
  }

  switch (Msg->Data[2])   /* CMD */
 800f44c:	687b      	ldr	r3, [r7, #4]
 800f44e:	799b      	ldrb	r3, [r3, #6]
 800f450:	2b7a      	cmp	r3, #122	; 0x7a
 800f452:	d100      	bne.n	800f456 <HandleMSG+0x32>
 800f454:	e0b6      	b.n	800f5c4 <HandleMSG+0x1a0>
 800f456:	dd00      	ble.n	800f45a <HandleMSG+0x36>
 800f458:	e329      	b.n	800faae <HandleMSG+0x68a>
 800f45a:	2b76      	cmp	r3, #118	; 0x76
 800f45c:	d100      	bne.n	800f460 <HandleMSG+0x3c>
 800f45e:	e098      	b.n	800f592 <HandleMSG+0x16e>
 800f460:	dd00      	ble.n	800f464 <HandleMSG+0x40>
 800f462:	e324      	b.n	800faae <HandleMSG+0x68a>
 800f464:	2b62      	cmp	r3, #98	; 0x62
 800f466:	d100      	bne.n	800f46a <HandleMSG+0x46>
 800f468:	e07a      	b.n	800f560 <HandleMSG+0x13c>
 800f46a:	dd00      	ble.n	800f46e <HandleMSG+0x4a>
 800f46c:	e31f      	b.n	800faae <HandleMSG+0x68a>
 800f46e:	2b12      	cmp	r3, #18
 800f470:	dc0a      	bgt.n	800f488 <HandleMSG+0x64>
 800f472:	2b00      	cmp	r3, #0
 800f474:	dc00      	bgt.n	800f478 <HandleMSG+0x54>
 800f476:	e31a      	b.n	800faae <HandleMSG+0x68a>
 800f478:	2b12      	cmp	r3, #18
 800f47a:	d900      	bls.n	800f47e <HandleMSG+0x5a>
 800f47c:	e317      	b.n	800faae <HandleMSG+0x68a>
 800f47e:	009a      	lsls	r2, r3, #2
 800f480:	4bb5      	ldr	r3, [pc, #724]	; (800f758 <HandleMSG+0x334>)
 800f482:	18d3      	adds	r3, r2, r3
 800f484:	681b      	ldr	r3, [r3, #0]
 800f486:	469f      	mov	pc, r3
 800f488:	2b60      	cmp	r3, #96	; 0x60
 800f48a:	d050      	beq.n	800f52e <HandleMSG+0x10a>
 800f48c:	e30f      	b.n	800faae <HandleMSG+0x68a>
  {
    case CMD_Ping:
      if (Msg->Len != 3U)
 800f48e:	687b      	ldr	r3, [r7, #4]
 800f490:	681b      	ldr	r3, [r3, #0]
 800f492:	2b03      	cmp	r3, #3
 800f494:	d001      	beq.n	800f49a <HandleMSG+0x76>
      {
        return 0;
 800f496:	2300      	movs	r3, #0
 800f498:	e30d      	b.n	800fab6 <HandleMSG+0x692>
      }

      BUILD_REPLY_HEADER(Msg);
 800f49a:	687b      	ldr	r3, [r7, #4]
 800f49c:	0018      	movs	r0, r3
 800f49e:	f7ff ff94 	bl	800f3ca <BUILD_REPLY_HEADER>
      Msg->Len = 3;
 800f4a2:	687b      	ldr	r3, [r7, #4]
 800f4a4:	2203      	movs	r2, #3
 800f4a6:	601a      	str	r2, [r3, #0]
      UART_SendMsg(Msg);
 800f4a8:	687b      	ldr	r3, [r7, #4]
 800f4aa:	0018      	movs	r0, r3
 800f4ac:	f7ff fef8 	bl	800f2a0 <UART_SendMsg>
      break;
 800f4b0:	e300      	b.n	800fab4 <HandleMSG+0x690>

    case CMD_Enter_DFU_Mode:
      if (Msg->Len != 3U)
 800f4b2:	687b      	ldr	r3, [r7, #4]
 800f4b4:	681b      	ldr	r3, [r3, #0]
 800f4b6:	2b03      	cmp	r3, #3
 800f4b8:	d001      	beq.n	800f4be <HandleMSG+0x9a>
      {
        return 0;
 800f4ba:	2300      	movs	r3, #0
 800f4bc:	e2fb      	b.n	800fab6 <HandleMSG+0x692>
      }

      BUILD_REPLY_HEADER(Msg);
 800f4be:	687b      	ldr	r3, [r7, #4]
 800f4c0:	0018      	movs	r0, r3
 800f4c2:	f7ff ff82 	bl	800f3ca <BUILD_REPLY_HEADER>
      Msg->Len = 3;
 800f4c6:	687b      	ldr	r3, [r7, #4]
 800f4c8:	2203      	movs	r2, #3
 800f4ca:	601a      	str	r2, [r3, #0]
      break;
 800f4cc:	e2f2      	b.n	800fab4 <HandleMSG+0x690>

    case CMD_Read_PresString:
      if (Msg->Len != 3U)
 800f4ce:	687b      	ldr	r3, [r7, #4]
 800f4d0:	681b      	ldr	r3, [r3, #0]
 800f4d2:	2b03      	cmp	r3, #3
 800f4d4:	d001      	beq.n	800f4da <HandleMSG+0xb6>
      {
        return 0;
 800f4d6:	2300      	movs	r3, #0
 800f4d8:	e2ed      	b.n	800fab6 <HandleMSG+0x692>
      }

      BUILD_REPLY_HEADER(Msg);
 800f4da:	687b      	ldr	r3, [r7, #4]
 800f4dc:	0018      	movs	r0, r3
 800f4de:	f7ff ff74 	bl	800f3ca <BUILD_REPLY_HEADER>

      Get_PresentationString(ps, &ps_len);
 800f4e2:	230c      	movs	r3, #12
 800f4e4:	18fa      	adds	r2, r7, r3
 800f4e6:	2310      	movs	r3, #16
 800f4e8:	18fb      	adds	r3, r7, r3
 800f4ea:	0011      	movs	r1, r2
 800f4ec:	0018      	movs	r0, r3
 800f4ee:	f000 fb67 	bl	800fbc0 <Get_PresentationString>

      i = 0;
 800f4f2:	2300      	movs	r3, #0
 800f4f4:	65bb      	str	r3, [r7, #88]	; 0x58
      while (i < ps_len)
 800f4f6:	e00d      	b.n	800f514 <HandleMSG+0xf0>
      {
        Msg->Data[3U + i] = ps[i];
 800f4f8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f4fa:	3303      	adds	r3, #3
 800f4fc:	2210      	movs	r2, #16
 800f4fe:	18b9      	adds	r1, r7, r2
 800f500:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800f502:	188a      	adds	r2, r1, r2
 800f504:	7811      	ldrb	r1, [r2, #0]
 800f506:	687a      	ldr	r2, [r7, #4]
 800f508:	18d3      	adds	r3, r2, r3
 800f50a:	1c0a      	adds	r2, r1, #0
 800f50c:	711a      	strb	r2, [r3, #4]
        i++;
 800f50e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f510:	3301      	adds	r3, #1
 800f512:	65bb      	str	r3, [r7, #88]	; 0x58
      while (i < ps_len)
 800f514:	68fb      	ldr	r3, [r7, #12]
 800f516:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800f518:	429a      	cmp	r2, r3
 800f51a:	d3ed      	bcc.n	800f4f8 <HandleMSG+0xd4>
      }

      Msg->Len = 3U + i;
 800f51c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f51e:	1cda      	adds	r2, r3, #3
 800f520:	687b      	ldr	r3, [r7, #4]
 800f522:	601a      	str	r2, [r3, #0]
      UART_SendMsg(Msg);
 800f524:	687b      	ldr	r3, [r7, #4]
 800f526:	0018      	movs	r0, r3
 800f528:	f7ff feba 	bl	800f2a0 <UART_SendMsg>
      break;
 800f52c:	e2c2      	b.n	800fab4 <HandleMSG+0x690>

    case CMD_PRESSURE_Init:
      if (Msg->Len < 3U)
 800f52e:	687b      	ldr	r3, [r7, #4]
 800f530:	681b      	ldr	r3, [r3, #0]
 800f532:	2b02      	cmp	r3, #2
 800f534:	d801      	bhi.n	800f53a <HandleMSG+0x116>
      {
        return 0;
 800f536:	2300      	movs	r3, #0
 800f538:	e2bd      	b.n	800fab6 <HandleMSG+0x692>
      }

      BUILD_REPLY_HEADER(Msg);
 800f53a:	687b      	ldr	r3, [r7, #4]
 800f53c:	0018      	movs	r0, r3
 800f53e:	f7ff ff44 	bl	800f3ca <BUILD_REPLY_HEADER>
      Serialize_s32(&Msg->Data[3], PRESS_UNICLEO_ID, 4);
 800f542:	687b      	ldr	r3, [r7, #4]
 800f544:	3307      	adds	r3, #7
 800f546:	2204      	movs	r2, #4
 800f548:	2104      	movs	r1, #4
 800f54a:	0018      	movs	r0, r3
 800f54c:	f000 fe6b 	bl	8010226 <Serialize_s32>
      Msg->Len = 3 + 4;
 800f550:	687b      	ldr	r3, [r7, #4]
 800f552:	2207      	movs	r2, #7
 800f554:	601a      	str	r2, [r3, #0]
      UART_SendMsg(Msg);
 800f556:	687b      	ldr	r3, [r7, #4]
 800f558:	0018      	movs	r0, r3
 800f55a:	f7ff fea1 	bl	800f2a0 <UART_SendMsg>
      break;
 800f55e:	e2a9      	b.n	800fab4 <HandleMSG+0x690>

    case CMD_HUMIDITY_TEMPERATURE_Init:
      if (Msg->Len < 3U)
 800f560:	687b      	ldr	r3, [r7, #4]
 800f562:	681b      	ldr	r3, [r3, #0]
 800f564:	2b02      	cmp	r3, #2
 800f566:	d801      	bhi.n	800f56c <HandleMSG+0x148>
      {
        return 0;
 800f568:	2300      	movs	r3, #0
 800f56a:	e2a4      	b.n	800fab6 <HandleMSG+0x692>
      }

      BUILD_REPLY_HEADER(Msg);
 800f56c:	687b      	ldr	r3, [r7, #4]
 800f56e:	0018      	movs	r0, r3
 800f570:	f7ff ff2b 	bl	800f3ca <BUILD_REPLY_HEADER>
      Serialize_s32(&Msg->Data[3], HUM_TEMP_UNICLEO_ID, 4);
 800f574:	687b      	ldr	r3, [r7, #4]
 800f576:	3307      	adds	r3, #7
 800f578:	2204      	movs	r2, #4
 800f57a:	2101      	movs	r1, #1
 800f57c:	0018      	movs	r0, r3
 800f57e:	f000 fe52 	bl	8010226 <Serialize_s32>
      Msg->Len = 3 + 4;
 800f582:	687b      	ldr	r3, [r7, #4]
 800f584:	2207      	movs	r2, #7
 800f586:	601a      	str	r2, [r3, #0]
      UART_SendMsg(Msg);
 800f588:	687b      	ldr	r3, [r7, #4]
 800f58a:	0018      	movs	r0, r3
 800f58c:	f7ff fe88 	bl	800f2a0 <UART_SendMsg>
      break;
 800f590:	e290      	b.n	800fab4 <HandleMSG+0x690>

    case CMD_ACCELERO_GYRO_Init:
      if (Msg->Len < 3U)
 800f592:	687b      	ldr	r3, [r7, #4]
 800f594:	681b      	ldr	r3, [r3, #0]
 800f596:	2b02      	cmp	r3, #2
 800f598:	d801      	bhi.n	800f59e <HandleMSG+0x17a>
      {
        return 0;
 800f59a:	2300      	movs	r3, #0
 800f59c:	e28b      	b.n	800fab6 <HandleMSG+0x692>
      }

      BUILD_REPLY_HEADER(Msg);
 800f59e:	687b      	ldr	r3, [r7, #4]
 800f5a0:	0018      	movs	r0, r3
 800f5a2:	f7ff ff12 	bl	800f3ca <BUILD_REPLY_HEADER>
      Serialize_s32(&Msg->Data[3], ACC_GYR_UNICLEO_ID, 4);
 800f5a6:	687b      	ldr	r3, [r7, #4]
 800f5a8:	3307      	adds	r3, #7
 800f5aa:	2204      	movs	r2, #4
 800f5ac:	2107      	movs	r1, #7
 800f5ae:	0018      	movs	r0, r3
 800f5b0:	f000 fe39 	bl	8010226 <Serialize_s32>
      Msg->Len = 3 + 4;
 800f5b4:	687b      	ldr	r3, [r7, #4]
 800f5b6:	2207      	movs	r2, #7
 800f5b8:	601a      	str	r2, [r3, #0]
      UART_SendMsg(Msg);
 800f5ba:	687b      	ldr	r3, [r7, #4]
 800f5bc:	0018      	movs	r0, r3
 800f5be:	f7ff fe6f 	bl	800f2a0 <UART_SendMsg>
      break;
 800f5c2:	e277      	b.n	800fab4 <HandleMSG+0x690>

    case CMD_MAGNETO_Init:
      if (Msg->Len < 3U)
 800f5c4:	687b      	ldr	r3, [r7, #4]
 800f5c6:	681b      	ldr	r3, [r3, #0]
 800f5c8:	2b02      	cmp	r3, #2
 800f5ca:	d801      	bhi.n	800f5d0 <HandleMSG+0x1ac>
      {
        return 0;
 800f5cc:	2300      	movs	r3, #0
 800f5ce:	e272      	b.n	800fab6 <HandleMSG+0x692>
      }

      BUILD_REPLY_HEADER(Msg);
 800f5d0:	687b      	ldr	r3, [r7, #4]
 800f5d2:	0018      	movs	r0, r3
 800f5d4:	f7ff fef9 	bl	800f3ca <BUILD_REPLY_HEADER>
      Serialize_s32(&Msg->Data[3], MAG_UNICLEO_ID, 4);
 800f5d8:	687b      	ldr	r3, [r7, #4]
 800f5da:	3307      	adds	r3, #7
 800f5dc:	2204      	movs	r2, #4
 800f5de:	2103      	movs	r1, #3
 800f5e0:	0018      	movs	r0, r3
 800f5e2:	f000 fe20 	bl	8010226 <Serialize_s32>
      Msg->Len = 3 + 4;
 800f5e6:	687b      	ldr	r3, [r7, #4]
 800f5e8:	2207      	movs	r2, #7
 800f5ea:	601a      	str	r2, [r3, #0]
      UART_SendMsg(Msg);
 800f5ec:	687b      	ldr	r3, [r7, #4]
 800f5ee:	0018      	movs	r0, r3
 800f5f0:	f7ff fe56 	bl	800f2a0 <UART_SendMsg>
      break;
 800f5f4:	e25e      	b.n	800fab4 <HandleMSG+0x690>

    case CMD_Start_Data_Streaming:
      if (Msg->Len < 3U)
 800f5f6:	687b      	ldr	r3, [r7, #4]
 800f5f8:	681b      	ldr	r3, [r3, #0]
 800f5fa:	2b02      	cmp	r3, #2
 800f5fc:	d801      	bhi.n	800f602 <HandleMSG+0x1de>
      {
        return 0;
 800f5fe:	2300      	movs	r3, #0
 800f600:	e259      	b.n	800fab6 <HandleMSG+0x692>
      }

      SensorsEnabled = Deserialize(&Msg->Data[3], 4);
 800f602:	687b      	ldr	r3, [r7, #4]
 800f604:	3307      	adds	r3, #7
 800f606:	2104      	movs	r1, #4
 800f608:	0018      	movs	r0, r3
 800f60a:	f000 fde8 	bl	80101de <Deserialize>
 800f60e:	0002      	movs	r2, r0
 800f610:	4b52      	ldr	r3, [pc, #328]	; (800f75c <HandleMSG+0x338>)
 800f612:	601a      	str	r2, [r3, #0]

      /* Start enabled sensors */
      if ((SensorsEnabled & PRESSURE_SENSOR) == PRESSURE_SENSOR)
 800f614:	4b51      	ldr	r3, [pc, #324]	; (800f75c <HandleMSG+0x338>)
 800f616:	681b      	ldr	r3, [r3, #0]
 800f618:	2201      	movs	r2, #1
 800f61a:	4013      	ands	r3, r2
 800f61c:	2b01      	cmp	r3, #1
 800f61e:	d101      	bne.n	800f624 <HandleMSG+0x200>
      {
        BSP_SENSOR_PRESS_Enable();
 800f620:	f000 fb5b 	bl	800fcda <BSP_SENSOR_PRESS_Enable>
      }

      if ((SensorsEnabled & TEMPERATURE_SENSOR) == TEMPERATURE_SENSOR)
 800f624:	4b4d      	ldr	r3, [pc, #308]	; (800f75c <HandleMSG+0x338>)
 800f626:	681b      	ldr	r3, [r3, #0]
 800f628:	2202      	movs	r2, #2
 800f62a:	4013      	ands	r3, r2
 800f62c:	2b02      	cmp	r3, #2
 800f62e:	d101      	bne.n	800f634 <HandleMSG+0x210>
      {
        BSP_SENSOR_TEMP_Enable();
 800f630:	f000 fb5c 	bl	800fcec <BSP_SENSOR_TEMP_Enable>
      }

      if ((SensorsEnabled & HUMIDITY_SENSOR) == HUMIDITY_SENSOR)
 800f634:	4b49      	ldr	r3, [pc, #292]	; (800f75c <HandleMSG+0x338>)
 800f636:	681b      	ldr	r3, [r3, #0]
 800f638:	2204      	movs	r2, #4
 800f63a:	4013      	ands	r3, r2
 800f63c:	2b04      	cmp	r3, #4
 800f63e:	d101      	bne.n	800f644 <HandleMSG+0x220>
      {
        BSP_SENSOR_HUM_Enable();
 800f640:	f000 fb5d 	bl	800fcfe <BSP_SENSOR_HUM_Enable>
      }

      if ((SensorsEnabled & ACCELEROMETER_SENSOR) == ACCELEROMETER_SENSOR)
 800f644:	4b45      	ldr	r3, [pc, #276]	; (800f75c <HandleMSG+0x338>)
 800f646:	681b      	ldr	r3, [r3, #0]
 800f648:	2210      	movs	r2, #16
 800f64a:	4013      	ands	r3, r2
 800f64c:	2b10      	cmp	r3, #16
 800f64e:	d101      	bne.n	800f654 <HandleMSG+0x230>
      {
        BSP_SENSOR_ACC_Enable();
 800f650:	f000 fb28 	bl	800fca4 <BSP_SENSOR_ACC_Enable>
      }

      if ((SensorsEnabled & GYROSCOPE_SENSOR) == GYROSCOPE_SENSOR)
 800f654:	4b41      	ldr	r3, [pc, #260]	; (800f75c <HandleMSG+0x338>)
 800f656:	681b      	ldr	r3, [r3, #0]
 800f658:	2220      	movs	r2, #32
 800f65a:	4013      	ands	r3, r2
 800f65c:	2b20      	cmp	r3, #32
 800f65e:	d101      	bne.n	800f664 <HandleMSG+0x240>
      {
        BSP_SENSOR_GYR_Enable();
 800f660:	f000 fb29 	bl	800fcb6 <BSP_SENSOR_GYR_Enable>
      }

      if ((SensorsEnabled & MAGNETIC_SENSOR) == MAGNETIC_SENSOR)
 800f664:	4b3d      	ldr	r3, [pc, #244]	; (800f75c <HandleMSG+0x338>)
 800f666:	681b      	ldr	r3, [r3, #0]
 800f668:	2240      	movs	r2, #64	; 0x40
 800f66a:	4013      	ands	r3, r2
 800f66c:	2b40      	cmp	r3, #64	; 0x40
 800f66e:	d101      	bne.n	800f674 <HandleMSG+0x250>
      {
        BSP_SENSOR_MAG_Enable();
 800f670:	f000 fb2a 	bl	800fcc8 <BSP_SENSOR_MAG_Enable>
      }

      (void)HAL_TIM_Base_Start_IT(&BSP_IP_TIM_Handle);
 800f674:	4b3a      	ldr	r3, [pc, #232]	; (800f760 <HandleMSG+0x33c>)
 800f676:	0018      	movs	r0, r3
 800f678:	f7fd fb86 	bl	800cd88 <HAL_TIM_Base_Start_IT>
      DataLoggerActive = 1;
 800f67c:	4b39      	ldr	r3, [pc, #228]	; (800f764 <HandleMSG+0x340>)
 800f67e:	2201      	movs	r2, #1
 800f680:	701a      	strb	r2, [r3, #0]

      DataStreamingDest = Msg->Data[1];
 800f682:	687b      	ldr	r3, [r7, #4]
 800f684:	795a      	ldrb	r2, [r3, #5]
 800f686:	4b38      	ldr	r3, [pc, #224]	; (800f768 <HandleMSG+0x344>)
 800f688:	701a      	strb	r2, [r3, #0]
      BUILD_REPLY_HEADER(Msg);
 800f68a:	687b      	ldr	r3, [r7, #4]
 800f68c:	0018      	movs	r0, r3
 800f68e:	f7ff fe9c 	bl	800f3ca <BUILD_REPLY_HEADER>
      Msg->Len = 3;
 800f692:	687b      	ldr	r3, [r7, #4]
 800f694:	2203      	movs	r2, #3
 800f696:	601a      	str	r2, [r3, #0]
      UART_SendMsg(Msg);
 800f698:	687b      	ldr	r3, [r7, #4]
 800f69a:	0018      	movs	r0, r3
 800f69c:	f7ff fe00 	bl	800f2a0 <UART_SendMsg>
      break;
 800f6a0:	e208      	b.n	800fab4 <HandleMSG+0x690>

    case CMD_Stop_Data_Streaming:
      if (Msg->Len < 3U)
 800f6a2:	687b      	ldr	r3, [r7, #4]
 800f6a4:	681b      	ldr	r3, [r3, #0]
 800f6a6:	2b02      	cmp	r3, #2
 800f6a8:	d801      	bhi.n	800f6ae <HandleMSG+0x28a>
      {
        return 0;
 800f6aa:	2300      	movs	r3, #0
 800f6ac:	e203      	b.n	800fab6 <HandleMSG+0x692>
      }

      DataLoggerActive = 0;
 800f6ae:	4b2d      	ldr	r3, [pc, #180]	; (800f764 <HandleMSG+0x340>)
 800f6b0:	2200      	movs	r2, #0
 800f6b2:	701a      	strb	r2, [r3, #0]
      (void)HAL_TIM_Base_Stop_IT(&BSP_IP_TIM_Handle);
 800f6b4:	4b2a      	ldr	r3, [pc, #168]	; (800f760 <HandleMSG+0x33c>)
 800f6b6:	0018      	movs	r0, r3
 800f6b8:	f7fd fbb8 	bl	800ce2c <HAL_TIM_Base_Stop_IT>

      /* Disable all sensors */
      BSP_SENSOR_ACC_Disable();
 800f6bc:	f000 fb28 	bl	800fd10 <BSP_SENSOR_ACC_Disable>
      BSP_SENSOR_GYR_Disable();
 800f6c0:	f000 fb2f 	bl	800fd22 <BSP_SENSOR_GYR_Disable>
      BSP_SENSOR_MAG_Disable();
 800f6c4:	f000 fb36 	bl	800fd34 <BSP_SENSOR_MAG_Disable>
      BSP_SENSOR_PRESS_Disable();
 800f6c8:	f000 fb3d 	bl	800fd46 <BSP_SENSOR_PRESS_Disable>
      BSP_SENSOR_TEMP_Disable();
 800f6cc:	f000 fb44 	bl	800fd58 <BSP_SENSOR_TEMP_Disable>
      BSP_SENSOR_HUM_Disable();
 800f6d0:	f000 fb4b 	bl	800fd6a <BSP_SENSOR_HUM_Disable>

      SensorsEnabled = 0;
 800f6d4:	4b21      	ldr	r3, [pc, #132]	; (800f75c <HandleMSG+0x338>)
 800f6d6:	2200      	movs	r2, #0
 800f6d8:	601a      	str	r2, [r3, #0]
      UseOfflineData = 0;
 800f6da:	4b24      	ldr	r3, [pc, #144]	; (800f76c <HandleMSG+0x348>)
 800f6dc:	2200      	movs	r2, #0
 800f6de:	701a      	strb	r2, [r3, #0]

      BUILD_REPLY_HEADER(Msg);
 800f6e0:	687b      	ldr	r3, [r7, #4]
 800f6e2:	0018      	movs	r0, r3
 800f6e4:	f7ff fe71 	bl	800f3ca <BUILD_REPLY_HEADER>
      UART_SendMsg(Msg);
 800f6e8:	687b      	ldr	r3, [r7, #4]
 800f6ea:	0018      	movs	r0, r3
 800f6ec:	f7ff fdd8 	bl	800f2a0 <UART_SendMsg>
      break;
 800f6f0:	e1e0      	b.n	800fab4 <HandleMSG+0x690>

    case CMD_Set_DateTime:
      if (Msg->Len < 3U)
 800f6f2:	687b      	ldr	r3, [r7, #4]
 800f6f4:	681b      	ldr	r3, [r3, #0]
 800f6f6:	2b02      	cmp	r3, #2
 800f6f8:	d801      	bhi.n	800f6fe <HandleMSG+0x2da>
      {
        return 0;
 800f6fa:	2300      	movs	r3, #0
 800f6fc:	e1db      	b.n	800fab6 <HandleMSG+0x692>
      }

      BUILD_REPLY_HEADER(Msg);
 800f6fe:	687b      	ldr	r3, [r7, #4]
 800f700:	0018      	movs	r0, r3
 800f702:	f7ff fe62 	bl	800f3ca <BUILD_REPLY_HEADER>
      Msg->Len = 3;
 800f706:	687b      	ldr	r3, [r7, #4]
 800f708:	2203      	movs	r2, #3
 800f70a:	601a      	str	r2, [r3, #0]
      RTC_TimeRegulate(Msg->Data[3], Msg->Data[4], Msg->Data[5]);
 800f70c:	687b      	ldr	r3, [r7, #4]
 800f70e:	79d8      	ldrb	r0, [r3, #7]
 800f710:	687b      	ldr	r3, [r7, #4]
 800f712:	7a19      	ldrb	r1, [r3, #8]
 800f714:	687b      	ldr	r3, [r7, #4]
 800f716:	7a5b      	ldrb	r3, [r3, #9]
 800f718:	001a      	movs	r2, r3
 800f71a:	f000 fa19 	bl	800fb50 <RTC_TimeRegulate>
      RTC_DateRegulate(Msg->Data[6], Msg->Data[7], Msg->Data[8], Msg->Data[9]);
 800f71e:	687b      	ldr	r3, [r7, #4]
 800f720:	7a98      	ldrb	r0, [r3, #10]
 800f722:	687b      	ldr	r3, [r7, #4]
 800f724:	7ad9      	ldrb	r1, [r3, #11]
 800f726:	687b      	ldr	r3, [r7, #4]
 800f728:	7b1a      	ldrb	r2, [r3, #12]
 800f72a:	687b      	ldr	r3, [r7, #4]
 800f72c:	7b5b      	ldrb	r3, [r3, #13]
 800f72e:	f000 f9db 	bl	800fae8 <RTC_DateRegulate>
      UART_SendMsg(Msg);
 800f732:	687b      	ldr	r3, [r7, #4]
 800f734:	0018      	movs	r0, r3
 800f736:	f7ff fdb3 	bl	800f2a0 <UART_SendMsg>
      break;
 800f73a:	e1bb      	b.n	800fab4 <HandleMSG+0x690>

    case CMD_Offline_Data:
      if (Msg->Len < 55U)
 800f73c:	687b      	ldr	r3, [r7, #4]
 800f73e:	681b      	ldr	r3, [r3, #0]
 800f740:	2b36      	cmp	r3, #54	; 0x36
 800f742:	d801      	bhi.n	800f748 <HandleMSG+0x324>
      {
        return 0;
 800f744:	2300      	movs	r3, #0
 800f746:	e1b6      	b.n	800fab6 <HandleMSG+0x692>
      }

      msg_offset = 4;
 800f748:	2304      	movs	r3, #4
 800f74a:	657b      	str	r3, [r7, #84]	; 0x54
      msg_count = (uint32_t)Msg->Data[3];
 800f74c:	687b      	ldr	r3, [r7, #4]
 800f74e:	79db      	ldrb	r3, [r3, #7]
 800f750:	653b      	str	r3, [r7, #80]	; 0x50

      for (i = 0; i < msg_count; i++)
 800f752:	2300      	movs	r3, #0
 800f754:	65bb      	str	r3, [r7, #88]	; 0x58
 800f756:	e12f      	b.n	800f9b8 <HandleMSG+0x594>
 800f758:	08016308 	.word	0x08016308
 800f75c:	20000268 	.word	0x20000268
 800f760:	20000b00 	.word	0x20000b00
 800f764:	20000e14 	.word	0x20000e14
 800f768:	20000270 	.word	0x20000270
 800f76c:	20000e41 	.word	0x20000e41
      {
        memcpy(&OfflineData[OfflineDataWriteIndex].hours, &Msg->Data[msg_offset], 1);
 800f770:	4bd3      	ldr	r3, [pc, #844]	; (800fac0 <HandleMSG+0x69c>)
 800f772:	681b      	ldr	r3, [r3, #0]
 800f774:	2234      	movs	r2, #52	; 0x34
 800f776:	435a      	muls	r2, r3
 800f778:	4bd2      	ldr	r3, [pc, #840]	; (800fac4 <HandleMSG+0x6a0>)
 800f77a:	18d3      	adds	r3, r2, r3
 800f77c:	6879      	ldr	r1, [r7, #4]
 800f77e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800f780:	188a      	adds	r2, r1, r2
 800f782:	3204      	adds	r2, #4
 800f784:	7812      	ldrb	r2, [r2, #0]
 800f786:	701a      	strb	r2, [r3, #0]
        memcpy(&OfflineData[OfflineDataWriteIndex].minutes, &Msg->Data[msg_offset + 1], 1);
 800f788:	4bcd      	ldr	r3, [pc, #820]	; (800fac0 <HandleMSG+0x69c>)
 800f78a:	681b      	ldr	r3, [r3, #0]
 800f78c:	2234      	movs	r2, #52	; 0x34
 800f78e:	435a      	muls	r2, r3
 800f790:	4bcc      	ldr	r3, [pc, #816]	; (800fac4 <HandleMSG+0x6a0>)
 800f792:	18d3      	adds	r3, r2, r3
 800f794:	3301      	adds	r3, #1
 800f796:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800f798:	3201      	adds	r2, #1
 800f79a:	6879      	ldr	r1, [r7, #4]
 800f79c:	188a      	adds	r2, r1, r2
 800f79e:	3204      	adds	r2, #4
 800f7a0:	7812      	ldrb	r2, [r2, #0]
 800f7a2:	701a      	strb	r2, [r3, #0]
        memcpy(&OfflineData[OfflineDataWriteIndex].seconds, &Msg->Data[msg_offset + 2], 1);
 800f7a4:	4bc6      	ldr	r3, [pc, #792]	; (800fac0 <HandleMSG+0x69c>)
 800f7a6:	681b      	ldr	r3, [r3, #0]
 800f7a8:	2234      	movs	r2, #52	; 0x34
 800f7aa:	435a      	muls	r2, r3
 800f7ac:	4bc5      	ldr	r3, [pc, #788]	; (800fac4 <HandleMSG+0x6a0>)
 800f7ae:	18d3      	adds	r3, r2, r3
 800f7b0:	3302      	adds	r3, #2
 800f7b2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800f7b4:	3202      	adds	r2, #2
 800f7b6:	6879      	ldr	r1, [r7, #4]
 800f7b8:	188a      	adds	r2, r1, r2
 800f7ba:	3204      	adds	r2, #4
 800f7bc:	7812      	ldrb	r2, [r2, #0]
 800f7be:	701a      	strb	r2, [r3, #0]
        memcpy(&OfflineData[OfflineDataWriteIndex].subsec, &Msg->Data[msg_offset + 3], 1);
 800f7c0:	4bbf      	ldr	r3, [pc, #764]	; (800fac0 <HandleMSG+0x69c>)
 800f7c2:	681b      	ldr	r3, [r3, #0]
 800f7c4:	2234      	movs	r2, #52	; 0x34
 800f7c6:	435a      	muls	r2, r3
 800f7c8:	4bbe      	ldr	r3, [pc, #760]	; (800fac4 <HandleMSG+0x6a0>)
 800f7ca:	18d3      	adds	r3, r2, r3
 800f7cc:	3303      	adds	r3, #3
 800f7ce:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800f7d0:	3203      	adds	r2, #3
 800f7d2:	6879      	ldr	r1, [r7, #4]
 800f7d4:	188a      	adds	r2, r1, r2
 800f7d6:	3204      	adds	r2, #4
 800f7d8:	7812      	ldrb	r2, [r2, #0]
 800f7da:	701a      	strb	r2, [r3, #0]

        memcpy(&OfflineData[OfflineDataWriteIndex].pressure, &Msg->Data[msg_offset + 4], 4);
 800f7dc:	4bb8      	ldr	r3, [pc, #736]	; (800fac0 <HandleMSG+0x69c>)
 800f7de:	681b      	ldr	r3, [r3, #0]
 800f7e0:	2234      	movs	r2, #52	; 0x34
 800f7e2:	435a      	muls	r2, r3
 800f7e4:	4bb7      	ldr	r3, [pc, #732]	; (800fac4 <HandleMSG+0x6a0>)
 800f7e6:	18d3      	adds	r3, r2, r3
 800f7e8:	1d18      	adds	r0, r3, #4
 800f7ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f7ec:	3304      	adds	r3, #4
 800f7ee:	687a      	ldr	r2, [r7, #4]
 800f7f0:	18d3      	adds	r3, r2, r3
 800f7f2:	3304      	adds	r3, #4
 800f7f4:	2204      	movs	r2, #4
 800f7f6:	0019      	movs	r1, r3
 800f7f8:	f004 f92c 	bl	8013a54 <memcpy>
        memcpy(&OfflineData[OfflineDataWriteIndex].temperature, &Msg->Data[msg_offset + 8], 4);
 800f7fc:	4bb0      	ldr	r3, [pc, #704]	; (800fac0 <HandleMSG+0x69c>)
 800f7fe:	681b      	ldr	r3, [r3, #0]
 800f800:	2234      	movs	r2, #52	; 0x34
 800f802:	4353      	muls	r3, r2
 800f804:	3308      	adds	r3, #8
 800f806:	001a      	movs	r2, r3
 800f808:	4bae      	ldr	r3, [pc, #696]	; (800fac4 <HandleMSG+0x6a0>)
 800f80a:	18d3      	adds	r3, r2, r3
 800f80c:	1d18      	adds	r0, r3, #4
 800f80e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f810:	3308      	adds	r3, #8
 800f812:	687a      	ldr	r2, [r7, #4]
 800f814:	18d3      	adds	r3, r2, r3
 800f816:	3304      	adds	r3, #4
 800f818:	2204      	movs	r2, #4
 800f81a:	0019      	movs	r1, r3
 800f81c:	f004 f91a 	bl	8013a54 <memcpy>
        memcpy(&OfflineData[OfflineDataWriteIndex].humidity, &Msg->Data[msg_offset + 12], 4);
 800f820:	4ba7      	ldr	r3, [pc, #668]	; (800fac0 <HandleMSG+0x69c>)
 800f822:	681b      	ldr	r3, [r3, #0]
 800f824:	2234      	movs	r2, #52	; 0x34
 800f826:	4353      	muls	r3, r2
 800f828:	3308      	adds	r3, #8
 800f82a:	001a      	movs	r2, r3
 800f82c:	4ba5      	ldr	r3, [pc, #660]	; (800fac4 <HandleMSG+0x6a0>)
 800f82e:	18d0      	adds	r0, r2, r3
 800f830:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f832:	330c      	adds	r3, #12
 800f834:	687a      	ldr	r2, [r7, #4]
 800f836:	18d3      	adds	r3, r2, r3
 800f838:	3304      	adds	r3, #4
 800f83a:	2204      	movs	r2, #4
 800f83c:	0019      	movs	r1, r3
 800f83e:	f004 f909 	bl	8013a54 <memcpy>

        memcpy(&OfflineData[OfflineDataWriteIndex].acceleration_x_mg, &Msg->Data[msg_offset + 16], 4);
 800f842:	4b9f      	ldr	r3, [pc, #636]	; (800fac0 <HandleMSG+0x69c>)
 800f844:	681b      	ldr	r3, [r3, #0]
 800f846:	2234      	movs	r2, #52	; 0x34
 800f848:	4353      	muls	r3, r2
 800f84a:	3310      	adds	r3, #16
 800f84c:	001a      	movs	r2, r3
 800f84e:	4b9d      	ldr	r3, [pc, #628]	; (800fac4 <HandleMSG+0x6a0>)
 800f850:	18d0      	adds	r0, r2, r3
 800f852:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f854:	3310      	adds	r3, #16
 800f856:	687a      	ldr	r2, [r7, #4]
 800f858:	18d3      	adds	r3, r2, r3
 800f85a:	3304      	adds	r3, #4
 800f85c:	2204      	movs	r2, #4
 800f85e:	0019      	movs	r1, r3
 800f860:	f004 f8f8 	bl	8013a54 <memcpy>
        memcpy(&OfflineData[OfflineDataWriteIndex].acceleration_y_mg, &Msg->Data[msg_offset + 20], 4);
 800f864:	4b96      	ldr	r3, [pc, #600]	; (800fac0 <HandleMSG+0x69c>)
 800f866:	681b      	ldr	r3, [r3, #0]
 800f868:	2234      	movs	r2, #52	; 0x34
 800f86a:	4353      	muls	r3, r2
 800f86c:	3310      	adds	r3, #16
 800f86e:	001a      	movs	r2, r3
 800f870:	4b94      	ldr	r3, [pc, #592]	; (800fac4 <HandleMSG+0x6a0>)
 800f872:	18d3      	adds	r3, r2, r3
 800f874:	1d18      	adds	r0, r3, #4
 800f876:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f878:	3314      	adds	r3, #20
 800f87a:	687a      	ldr	r2, [r7, #4]
 800f87c:	18d3      	adds	r3, r2, r3
 800f87e:	3304      	adds	r3, #4
 800f880:	2204      	movs	r2, #4
 800f882:	0019      	movs	r1, r3
 800f884:	f004 f8e6 	bl	8013a54 <memcpy>
        memcpy(&OfflineData[OfflineDataWriteIndex].acceleration_z_mg, &Msg->Data[msg_offset + 24], 4);
 800f888:	4b8d      	ldr	r3, [pc, #564]	; (800fac0 <HandleMSG+0x69c>)
 800f88a:	681b      	ldr	r3, [r3, #0]
 800f88c:	2234      	movs	r2, #52	; 0x34
 800f88e:	4353      	muls	r3, r2
 800f890:	3318      	adds	r3, #24
 800f892:	001a      	movs	r2, r3
 800f894:	4b8b      	ldr	r3, [pc, #556]	; (800fac4 <HandleMSG+0x6a0>)
 800f896:	18d0      	adds	r0, r2, r3
 800f898:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f89a:	3318      	adds	r3, #24
 800f89c:	687a      	ldr	r2, [r7, #4]
 800f89e:	18d3      	adds	r3, r2, r3
 800f8a0:	3304      	adds	r3, #4
 800f8a2:	2204      	movs	r2, #4
 800f8a4:	0019      	movs	r1, r3
 800f8a6:	f004 f8d5 	bl	8013a54 <memcpy>

        memcpy(&OfflineData[OfflineDataWriteIndex].angular_rate_x_mdps, &Msg->Data[msg_offset + 28], 4);
 800f8aa:	4b85      	ldr	r3, [pc, #532]	; (800fac0 <HandleMSG+0x69c>)
 800f8ac:	681b      	ldr	r3, [r3, #0]
 800f8ae:	2234      	movs	r2, #52	; 0x34
 800f8b0:	4353      	muls	r3, r2
 800f8b2:	3318      	adds	r3, #24
 800f8b4:	001a      	movs	r2, r3
 800f8b6:	4b83      	ldr	r3, [pc, #524]	; (800fac4 <HandleMSG+0x6a0>)
 800f8b8:	18d3      	adds	r3, r2, r3
 800f8ba:	1d18      	adds	r0, r3, #4
 800f8bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f8be:	331c      	adds	r3, #28
 800f8c0:	687a      	ldr	r2, [r7, #4]
 800f8c2:	18d3      	adds	r3, r2, r3
 800f8c4:	3304      	adds	r3, #4
 800f8c6:	2204      	movs	r2, #4
 800f8c8:	0019      	movs	r1, r3
 800f8ca:	f004 f8c3 	bl	8013a54 <memcpy>
        memcpy(&OfflineData[OfflineDataWriteIndex].angular_rate_y_mdps, &Msg->Data[msg_offset + 32], 4);
 800f8ce:	4b7c      	ldr	r3, [pc, #496]	; (800fac0 <HandleMSG+0x69c>)
 800f8d0:	681b      	ldr	r3, [r3, #0]
 800f8d2:	2234      	movs	r2, #52	; 0x34
 800f8d4:	4353      	muls	r3, r2
 800f8d6:	3320      	adds	r3, #32
 800f8d8:	001a      	movs	r2, r3
 800f8da:	4b7a      	ldr	r3, [pc, #488]	; (800fac4 <HandleMSG+0x6a0>)
 800f8dc:	18d0      	adds	r0, r2, r3
 800f8de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f8e0:	3320      	adds	r3, #32
 800f8e2:	687a      	ldr	r2, [r7, #4]
 800f8e4:	18d3      	adds	r3, r2, r3
 800f8e6:	3304      	adds	r3, #4
 800f8e8:	2204      	movs	r2, #4
 800f8ea:	0019      	movs	r1, r3
 800f8ec:	f004 f8b2 	bl	8013a54 <memcpy>
        memcpy(&OfflineData[OfflineDataWriteIndex].angular_rate_z_mdps, &Msg->Data[msg_offset + 36], 4);
 800f8f0:	4b73      	ldr	r3, [pc, #460]	; (800fac0 <HandleMSG+0x69c>)
 800f8f2:	681b      	ldr	r3, [r3, #0]
 800f8f4:	2234      	movs	r2, #52	; 0x34
 800f8f6:	4353      	muls	r3, r2
 800f8f8:	3320      	adds	r3, #32
 800f8fa:	001a      	movs	r2, r3
 800f8fc:	4b71      	ldr	r3, [pc, #452]	; (800fac4 <HandleMSG+0x6a0>)
 800f8fe:	18d3      	adds	r3, r2, r3
 800f900:	1d18      	adds	r0, r3, #4
 800f902:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f904:	3324      	adds	r3, #36	; 0x24
 800f906:	687a      	ldr	r2, [r7, #4]
 800f908:	18d3      	adds	r3, r2, r3
 800f90a:	3304      	adds	r3, #4
 800f90c:	2204      	movs	r2, #4
 800f90e:	0019      	movs	r1, r3
 800f910:	f004 f8a0 	bl	8013a54 <memcpy>

        memcpy(&OfflineData[OfflineDataWriteIndex].magnetic_field_x_mgauss, &Msg->Data[msg_offset + 40], 4);
 800f914:	4b6a      	ldr	r3, [pc, #424]	; (800fac0 <HandleMSG+0x69c>)
 800f916:	681b      	ldr	r3, [r3, #0]
 800f918:	2234      	movs	r2, #52	; 0x34
 800f91a:	4353      	muls	r3, r2
 800f91c:	3328      	adds	r3, #40	; 0x28
 800f91e:	001a      	movs	r2, r3
 800f920:	4b68      	ldr	r3, [pc, #416]	; (800fac4 <HandleMSG+0x6a0>)
 800f922:	18d0      	adds	r0, r2, r3
 800f924:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f926:	3328      	adds	r3, #40	; 0x28
 800f928:	687a      	ldr	r2, [r7, #4]
 800f92a:	18d3      	adds	r3, r2, r3
 800f92c:	3304      	adds	r3, #4
 800f92e:	2204      	movs	r2, #4
 800f930:	0019      	movs	r1, r3
 800f932:	f004 f88f 	bl	8013a54 <memcpy>
        memcpy(&OfflineData[OfflineDataWriteIndex].magnetic_field_y_mgauss, &Msg->Data[msg_offset + 44], 4);
 800f936:	4b62      	ldr	r3, [pc, #392]	; (800fac0 <HandleMSG+0x69c>)
 800f938:	681b      	ldr	r3, [r3, #0]
 800f93a:	2234      	movs	r2, #52	; 0x34
 800f93c:	4353      	muls	r3, r2
 800f93e:	3328      	adds	r3, #40	; 0x28
 800f940:	001a      	movs	r2, r3
 800f942:	4b60      	ldr	r3, [pc, #384]	; (800fac4 <HandleMSG+0x6a0>)
 800f944:	18d3      	adds	r3, r2, r3
 800f946:	1d18      	adds	r0, r3, #4
 800f948:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f94a:	332c      	adds	r3, #44	; 0x2c
 800f94c:	687a      	ldr	r2, [r7, #4]
 800f94e:	18d3      	adds	r3, r2, r3
 800f950:	3304      	adds	r3, #4
 800f952:	2204      	movs	r2, #4
 800f954:	0019      	movs	r1, r3
 800f956:	f004 f87d 	bl	8013a54 <memcpy>
        memcpy(&OfflineData[OfflineDataWriteIndex].magnetic_field_z_mgauss, &Msg->Data[msg_offset + 48], 4);
 800f95a:	4b59      	ldr	r3, [pc, #356]	; (800fac0 <HandleMSG+0x69c>)
 800f95c:	681b      	ldr	r3, [r3, #0]
 800f95e:	2234      	movs	r2, #52	; 0x34
 800f960:	4353      	muls	r3, r2
 800f962:	3330      	adds	r3, #48	; 0x30
 800f964:	001a      	movs	r2, r3
 800f966:	4b57      	ldr	r3, [pc, #348]	; (800fac4 <HandleMSG+0x6a0>)
 800f968:	18d0      	adds	r0, r2, r3
 800f96a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f96c:	3330      	adds	r3, #48	; 0x30
 800f96e:	687a      	ldr	r2, [r7, #4]
 800f970:	18d3      	adds	r3, r2, r3
 800f972:	3304      	adds	r3, #4
 800f974:	2204      	movs	r2, #4
 800f976:	0019      	movs	r1, r3
 800f978:	f004 f86c 	bl	8013a54 <memcpy>

        msg_offset += 52;
 800f97c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f97e:	3334      	adds	r3, #52	; 0x34
 800f980:	657b      	str	r3, [r7, #84]	; 0x54

        OfflineDataCount++;
 800f982:	4b51      	ldr	r3, [pc, #324]	; (800fac8 <HandleMSG+0x6a4>)
 800f984:	681b      	ldr	r3, [r3, #0]
 800f986:	1c5a      	adds	r2, r3, #1
 800f988:	4b4f      	ldr	r3, [pc, #316]	; (800fac8 <HandleMSG+0x6a4>)
 800f98a:	601a      	str	r2, [r3, #0]
        if (OfflineDataCount > OFFLINE_DATA_SIZE)
 800f98c:	4b4e      	ldr	r3, [pc, #312]	; (800fac8 <HandleMSG+0x6a4>)
 800f98e:	681b      	ldr	r3, [r3, #0]
 800f990:	2b08      	cmp	r3, #8
 800f992:	dd02      	ble.n	800f99a <HandleMSG+0x576>
        {
          OfflineDataCount = OFFLINE_DATA_SIZE;
 800f994:	4b4c      	ldr	r3, [pc, #304]	; (800fac8 <HandleMSG+0x6a4>)
 800f996:	2208      	movs	r2, #8
 800f998:	601a      	str	r2, [r3, #0]
        }

        OfflineDataWriteIndex++;
 800f99a:	4b49      	ldr	r3, [pc, #292]	; (800fac0 <HandleMSG+0x69c>)
 800f99c:	681b      	ldr	r3, [r3, #0]
 800f99e:	1c5a      	adds	r2, r3, #1
 800f9a0:	4b47      	ldr	r3, [pc, #284]	; (800fac0 <HandleMSG+0x69c>)
 800f9a2:	601a      	str	r2, [r3, #0]
        if (OfflineDataWriteIndex >= OFFLINE_DATA_SIZE)
 800f9a4:	4b46      	ldr	r3, [pc, #280]	; (800fac0 <HandleMSG+0x69c>)
 800f9a6:	681b      	ldr	r3, [r3, #0]
 800f9a8:	2b07      	cmp	r3, #7
 800f9aa:	dd02      	ble.n	800f9b2 <HandleMSG+0x58e>
        {
          OfflineDataWriteIndex = 0;
 800f9ac:	4b44      	ldr	r3, [pc, #272]	; (800fac0 <HandleMSG+0x69c>)
 800f9ae:	2200      	movs	r2, #0
 800f9b0:	601a      	str	r2, [r3, #0]
      for (i = 0; i < msg_count; i++)
 800f9b2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f9b4:	3301      	adds	r3, #1
 800f9b6:	65bb      	str	r3, [r7, #88]	; 0x58
 800f9b8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800f9ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f9bc:	429a      	cmp	r2, r3
 800f9be:	d200      	bcs.n	800f9c2 <HandleMSG+0x59e>
 800f9c0:	e6d6      	b.n	800f770 <HandleMSG+0x34c>
        }
      }

      SensorReadRequest = 1;
 800f9c2:	4b42      	ldr	r3, [pc, #264]	; (800facc <HandleMSG+0x6a8>)
 800f9c4:	2201      	movs	r2, #1
 800f9c6:	701a      	strb	r2, [r3, #0]

      /* Mark Msg as read */
      BUILD_REPLY_HEADER(Msg);
 800f9c8:	687b      	ldr	r3, [r7, #4]
 800f9ca:	0018      	movs	r0, r3
 800f9cc:	f7ff fcfd 	bl	800f3ca <BUILD_REPLY_HEADER>
      Msg->Len = 3;
 800f9d0:	687b      	ldr	r3, [r7, #4]
 800f9d2:	2203      	movs	r2, #3
 800f9d4:	601a      	str	r2, [r3, #0]
      break;
 800f9d6:	e06d      	b.n	800fab4 <HandleMSG+0x690>

    case CMD_Use_Offline_Data:
      if (Msg->Len < 4U)
 800f9d8:	687b      	ldr	r3, [r7, #4]
 800f9da:	681b      	ldr	r3, [r3, #0]
 800f9dc:	2b03      	cmp	r3, #3
 800f9de:	d801      	bhi.n	800f9e4 <HandleMSG+0x5c0>
      {
        return 0;
 800f9e0:	2300      	movs	r3, #0
 800f9e2:	e068      	b.n	800fab6 <HandleMSG+0x692>
      }

      if (Msg->Data[3] == 1U)
 800f9e4:	687b      	ldr	r3, [r7, #4]
 800f9e6:	79db      	ldrb	r3, [r3, #7]
 800f9e8:	2b01      	cmp	r3, #1
 800f9ea:	d10f      	bne.n	800fa0c <HandleMSG+0x5e8>
      {
        UseOfflineData = 1U;
 800f9ec:	4b38      	ldr	r3, [pc, #224]	; (800fad0 <HandleMSG+0x6ac>)
 800f9ee:	2201      	movs	r2, #1
 800f9f0:	701a      	strb	r2, [r3, #0]
        sensors_enabled_prev = SensorsEnabled;
 800f9f2:	4b38      	ldr	r3, [pc, #224]	; (800fad4 <HandleMSG+0x6b0>)
 800f9f4:	681a      	ldr	r2, [r3, #0]
 800f9f6:	4b38      	ldr	r3, [pc, #224]	; (800fad8 <HandleMSG+0x6b4>)
 800f9f8:	601a      	str	r2, [r3, #0]
        SensorsEnabled = 0xFFFFFFFFU;
 800f9fa:	4b36      	ldr	r3, [pc, #216]	; (800fad4 <HandleMSG+0x6b0>)
 800f9fc:	2201      	movs	r2, #1
 800f9fe:	4252      	negs	r2, r2
 800fa00:	601a      	str	r2, [r3, #0]
        (void)HAL_TIM_Base_Stop_IT(&BSP_IP_TIM_Handle);
 800fa02:	4b36      	ldr	r3, [pc, #216]	; (800fadc <HandleMSG+0x6b8>)
 800fa04:	0018      	movs	r0, r3
 800fa06:	f7fd fa11 	bl	800ce2c <HAL_TIM_Base_Stop_IT>
 800fa0a:	e006      	b.n	800fa1a <HandleMSG+0x5f6>
      }
      else
      {
        UseOfflineData = 0U;
 800fa0c:	4b30      	ldr	r3, [pc, #192]	; (800fad0 <HandleMSG+0x6ac>)
 800fa0e:	2200      	movs	r2, #0
 800fa10:	701a      	strb	r2, [r3, #0]
        SensorsEnabled = sensors_enabled_prev;
 800fa12:	4b31      	ldr	r3, [pc, #196]	; (800fad8 <HandleMSG+0x6b4>)
 800fa14:	681a      	ldr	r2, [r3, #0]
 800fa16:	4b2f      	ldr	r3, [pc, #188]	; (800fad4 <HandleMSG+0x6b0>)
 800fa18:	601a      	str	r2, [r3, #0]
      }

      BUILD_REPLY_HEADER(Msg);
 800fa1a:	687b      	ldr	r3, [r7, #4]
 800fa1c:	0018      	movs	r0, r3
 800fa1e:	f7ff fcd4 	bl	800f3ca <BUILD_REPLY_HEADER>
      UART_SendMsg(Msg);
 800fa22:	687b      	ldr	r3, [r7, #4]
 800fa24:	0018      	movs	r0, r3
 800fa26:	f7ff fc3b 	bl	800f2a0 <UART_SendMsg>
      break;
 800fa2a:	e043      	b.n	800fab4 <HandleMSG+0x690>

    case CMD_Get_App_Info:
      if (Msg->Len < 3U)
 800fa2c:	687b      	ldr	r3, [r7, #4]
 800fa2e:	681b      	ldr	r3, [r3, #0]
 800fa30:	2b02      	cmp	r3, #2
 800fa32:	d801      	bhi.n	800fa38 <HandleMSG+0x614>
      {
        return 0;
 800fa34:	2300      	movs	r3, #0
 800fa36:	e03e      	b.n	800fab6 <HandleMSG+0x692>
      }

      Serialize_s32(&Msg->Data[3], AlgoFreq, 4);
 800fa38:	687b      	ldr	r3, [r7, #4]
 800fa3a:	1dd8      	adds	r0, r3, #7
 800fa3c:	4b28      	ldr	r3, [pc, #160]	; (800fae0 <HandleMSG+0x6bc>)
 800fa3e:	681b      	ldr	r3, [r3, #0]
 800fa40:	2204      	movs	r2, #4
 800fa42:	0019      	movs	r1, r3
 800fa44:	f000 fbef 	bl	8010226 <Serialize_s32>
      Serialize_s32(&Msg->Data[7], REQUIRED_DATA, 1);
 800fa48:	687b      	ldr	r3, [r7, #4]
 800fa4a:	330b      	adds	r3, #11
 800fa4c:	2201      	movs	r2, #1
 800fa4e:	2130      	movs	r1, #48	; 0x30
 800fa50:	0018      	movs	r0, r3
 800fa52:	f000 fbe8 	bl	8010226 <Serialize_s32>

      BUILD_REPLY_HEADER(Msg);
 800fa56:	687b      	ldr	r3, [r7, #4]
 800fa58:	0018      	movs	r0, r3
 800fa5a:	f7ff fcb6 	bl	800f3ca <BUILD_REPLY_HEADER>
      Msg->Len = 3 + 5;
 800fa5e:	687b      	ldr	r3, [r7, #4]
 800fa60:	2208      	movs	r2, #8
 800fa62:	601a      	str	r2, [r3, #0]
      UART_SendMsg(Msg);
 800fa64:	687b      	ldr	r3, [r7, #4]
 800fa66:	0018      	movs	r0, r3
 800fa68:	f7ff fc1a 	bl	800f2a0 <UART_SendMsg>
      break;
 800fa6c:	e022      	b.n	800fab4 <HandleMSG+0x690>

    case CMD_ChangeSF:
      if (Msg->Len < 3U)
 800fa6e:	687b      	ldr	r3, [r7, #4]
 800fa70:	681b      	ldr	r3, [r3, #0]
 800fa72:	2b02      	cmp	r3, #2
 800fa74:	d801      	bhi.n	800fa7a <HandleMSG+0x656>
      {
        return 0;
 800fa76:	2300      	movs	r3, #0
 800fa78:	e01d      	b.n	800fab6 <HandleMSG+0x692>
      }

      Enabled6X = Msg->Data[3];
 800fa7a:	687b      	ldr	r3, [r7, #4]
 800fa7c:	79da      	ldrb	r2, [r3, #7]
 800fa7e:	4b19      	ldr	r3, [pc, #100]	; (800fae4 <HandleMSG+0x6c0>)
 800fa80:	701a      	strb	r2, [r3, #0]

      if (Enabled6X == 1U)
 800fa82:	4b18      	ldr	r3, [pc, #96]	; (800fae4 <HandleMSG+0x6c0>)
 800fa84:	781b      	ldrb	r3, [r3, #0]
 800fa86:	2b01      	cmp	r3, #1
 800fa88:	d104      	bne.n	800fa94 <HandleMSG+0x670>
      {
        MotionFX_manager_stop_9X();
 800fa8a:	f000 fa83 	bl	800ff94 <MotionFX_manager_stop_9X>
        MotionFX_manager_start_6X();
 800fa8e:	f000 fa69 	bl	800ff64 <MotionFX_manager_start_6X>
 800fa92:	e003      	b.n	800fa9c <HandleMSG+0x678>
      }
      else
      {
        MotionFX_manager_stop_6X();
 800fa94:	f000 fa6e 	bl	800ff74 <MotionFX_manager_stop_6X>
        MotionFX_manager_start_9X();
 800fa98:	f000 fa74 	bl	800ff84 <MotionFX_manager_start_9X>
      }

      BUILD_REPLY_HEADER(Msg);
 800fa9c:	687b      	ldr	r3, [r7, #4]
 800fa9e:	0018      	movs	r0, r3
 800faa0:	f7ff fc93 	bl	800f3ca <BUILD_REPLY_HEADER>
      UART_SendMsg(Msg);
 800faa4:	687b      	ldr	r3, [r7, #4]
 800faa6:	0018      	movs	r0, r3
 800faa8:	f7ff fbfa 	bl	800f2a0 <UART_SendMsg>
      break;
 800faac:	e002      	b.n	800fab4 <HandleMSG+0x690>

    default:
      ret = 0;
 800faae:	2300      	movs	r3, #0
 800fab0:	65fb      	str	r3, [r7, #92]	; 0x5c
      break;
 800fab2:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 800fab4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
}
 800fab6:	0018      	movs	r0, r3
 800fab8:	46bd      	mov	sp, r7
 800faba:	b018      	add	sp, #96	; 0x60
 800fabc:	bd80      	pop	{r7, pc}
 800fabe:	46c0      	nop			; (mov r8, r8)
 800fac0:	20000fe8 	.word	0x20000fe8
 800fac4:	20000e44 	.word	0x20000e44
 800fac8:	20000fec 	.word	0x20000fec
 800facc:	20000e40 	.word	0x20000e40
 800fad0:	20000e41 	.word	0x20000e41
 800fad4:	20000268 	.word	0x20000268
 800fad8:	2000164c 	.word	0x2000164c
 800fadc:	20000b00 	.word	0x20000b00
 800fae0:	2000026c 	.word	0x2000026c
 800fae4:	20000ff0 	.word	0x20000ff0

0800fae8 <RTC_DateRegulate>:
 * @param  d the day value to be set
 * @param  dw the day-week value to be set
 * @retval None
 */
void RTC_DateRegulate(uint8_t y, uint8_t m, uint8_t d, uint8_t dw)
{
 800fae8:	b5b0      	push	{r4, r5, r7, lr}
 800faea:	b084      	sub	sp, #16
 800faec:	af00      	add	r7, sp, #0
 800faee:	0005      	movs	r5, r0
 800faf0:	000c      	movs	r4, r1
 800faf2:	0010      	movs	r0, r2
 800faf4:	0019      	movs	r1, r3
 800faf6:	1dfb      	adds	r3, r7, #7
 800faf8:	1c2a      	adds	r2, r5, #0
 800fafa:	701a      	strb	r2, [r3, #0]
 800fafc:	1dbb      	adds	r3, r7, #6
 800fafe:	1c22      	adds	r2, r4, #0
 800fb00:	701a      	strb	r2, [r3, #0]
 800fb02:	1d7b      	adds	r3, r7, #5
 800fb04:	1c02      	adds	r2, r0, #0
 800fb06:	701a      	strb	r2, [r3, #0]
 800fb08:	1d3b      	adds	r3, r7, #4
 800fb0a:	1c0a      	adds	r2, r1, #0
 800fb0c:	701a      	strb	r2, [r3, #0]
  RTC_DateTypeDef sdatestructure;

  sdatestructure.Year    = y;
 800fb0e:	210c      	movs	r1, #12
 800fb10:	187b      	adds	r3, r7, r1
 800fb12:	1dfa      	adds	r2, r7, #7
 800fb14:	7812      	ldrb	r2, [r2, #0]
 800fb16:	70da      	strb	r2, [r3, #3]
  sdatestructure.Month   = m;
 800fb18:	187b      	adds	r3, r7, r1
 800fb1a:	1dba      	adds	r2, r7, #6
 800fb1c:	7812      	ldrb	r2, [r2, #0]
 800fb1e:	705a      	strb	r2, [r3, #1]
  sdatestructure.Date    = d;
 800fb20:	187b      	adds	r3, r7, r1
 800fb22:	1d7a      	adds	r2, r7, #5
 800fb24:	7812      	ldrb	r2, [r2, #0]
 800fb26:	709a      	strb	r2, [r3, #2]
  sdatestructure.WeekDay = dw;
 800fb28:	187b      	adds	r3, r7, r1
 800fb2a:	1d3a      	adds	r2, r7, #4
 800fb2c:	7812      	ldrb	r2, [r2, #0]
 800fb2e:	701a      	strb	r2, [r3, #0]

  if (HAL_RTC_SetDate(&hrtc, &sdatestructure, FORMAT_BIN) != HAL_OK)
 800fb30:	1879      	adds	r1, r7, r1
 800fb32:	4b06      	ldr	r3, [pc, #24]	; (800fb4c <RTC_DateRegulate+0x64>)
 800fb34:	2200      	movs	r2, #0
 800fb36:	0018      	movs	r0, r3
 800fb38:	f7fc ff54 	bl	800c9e4 <HAL_RTC_SetDate>
 800fb3c:	1e03      	subs	r3, r0, #0
 800fb3e:	d001      	beq.n	800fb44 <RTC_DateRegulate+0x5c>
  {
    /* Initialization Error */
    Error_Handler();
 800fb40:	f7f1 fed0 	bl	80018e4 <Error_Handler>
  }
}
 800fb44:	46c0      	nop			; (mov r8, r8)
 800fb46:	46bd      	mov	sp, r7
 800fb48:	b004      	add	sp, #16
 800fb4a:	bdb0      	pop	{r4, r5, r7, pc}
 800fb4c:	20000adc 	.word	0x20000adc

0800fb50 <RTC_TimeRegulate>:
 * @param  mm the minute value to be set
 * @param  ss the second value to be set
 * @retval None
 */
void RTC_TimeRegulate(uint8_t hh, uint8_t mm, uint8_t ss)
{
 800fb50:	b590      	push	{r4, r7, lr}
 800fb52:	b089      	sub	sp, #36	; 0x24
 800fb54:	af00      	add	r7, sp, #0
 800fb56:	0004      	movs	r4, r0
 800fb58:	0008      	movs	r0, r1
 800fb5a:	0011      	movs	r1, r2
 800fb5c:	1dfb      	adds	r3, r7, #7
 800fb5e:	1c22      	adds	r2, r4, #0
 800fb60:	701a      	strb	r2, [r3, #0]
 800fb62:	1dbb      	adds	r3, r7, #6
 800fb64:	1c02      	adds	r2, r0, #0
 800fb66:	701a      	strb	r2, [r3, #0]
 800fb68:	1d7b      	adds	r3, r7, #5
 800fb6a:	1c0a      	adds	r2, r1, #0
 800fb6c:	701a      	strb	r2, [r3, #0]
  RTC_TimeTypeDef stimestructure;

  stimestructure.Hours          = hh;
 800fb6e:	210c      	movs	r1, #12
 800fb70:	187b      	adds	r3, r7, r1
 800fb72:	1dfa      	adds	r2, r7, #7
 800fb74:	7812      	ldrb	r2, [r2, #0]
 800fb76:	701a      	strb	r2, [r3, #0]
  stimestructure.Minutes        = mm;
 800fb78:	187b      	adds	r3, r7, r1
 800fb7a:	1dba      	adds	r2, r7, #6
 800fb7c:	7812      	ldrb	r2, [r2, #0]
 800fb7e:	705a      	strb	r2, [r3, #1]
  stimestructure.Seconds        = ss;
 800fb80:	187b      	adds	r3, r7, r1
 800fb82:	1d7a      	adds	r2, r7, #5
 800fb84:	7812      	ldrb	r2, [r2, #0]
 800fb86:	709a      	strb	r2, [r3, #2]
  stimestructure.SubSeconds     = 0;
 800fb88:	187b      	adds	r3, r7, r1
 800fb8a:	2200      	movs	r2, #0
 800fb8c:	605a      	str	r2, [r3, #4]
  stimestructure.TimeFormat     = RTC_HOURFORMAT12_AM;
 800fb8e:	187b      	adds	r3, r7, r1
 800fb90:	2200      	movs	r2, #0
 800fb92:	70da      	strb	r2, [r3, #3]
  stimestructure.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800fb94:	187b      	adds	r3, r7, r1
 800fb96:	2200      	movs	r2, #0
 800fb98:	60da      	str	r2, [r3, #12]
  stimestructure.StoreOperation = RTC_STOREOPERATION_RESET;
 800fb9a:	187b      	adds	r3, r7, r1
 800fb9c:	2200      	movs	r2, #0
 800fb9e:	611a      	str	r2, [r3, #16]

  if (HAL_RTC_SetTime(&hrtc, &stimestructure, FORMAT_BIN) != HAL_OK)
 800fba0:	1879      	adds	r1, r7, r1
 800fba2:	4b06      	ldr	r3, [pc, #24]	; (800fbbc <RTC_TimeRegulate+0x6c>)
 800fba4:	2200      	movs	r2, #0
 800fba6:	0018      	movs	r0, r3
 800fba8:	f7fc fdfc 	bl	800c7a4 <HAL_RTC_SetTime>
 800fbac:	1e03      	subs	r3, r0, #0
 800fbae:	d001      	beq.n	800fbb4 <RTC_TimeRegulate+0x64>
  {
    /* Initialization Error */
    Error_Handler();
 800fbb0:	f7f1 fe98 	bl	80018e4 <Error_Handler>
  }
}
 800fbb4:	46c0      	nop			; (mov r8, r8)
 800fbb6:	46bd      	mov	sp, r7
 800fbb8:	b009      	add	sp, #36	; 0x24
 800fbba:	bd90      	pop	{r4, r7, pc}
 800fbbc:	20000adc 	.word	0x20000adc

0800fbc0 <Get_PresentationString>:
 * @param  PresentationString the Presentation string
 * @param  Length the length of Presentation string
 * @retval None
 */
void Get_PresentationString(char *PresentationString, uint32_t *Length)
{
 800fbc0:	b5b0      	push	{r4, r5, r7, lr}
 800fbc2:	b09e      	sub	sp, #120	; 0x78
 800fbc4:	af00      	add	r7, sp, #0
 800fbc6:	6078      	str	r0, [r7, #4]
 800fbc8:	6039      	str	r1, [r7, #0]
  const uint8_t string_pointer_shift = strlen("ST MotionXX v"); /* Shift string pointer by this amount */
 800fbca:	2473      	movs	r4, #115	; 0x73
 800fbcc:	193b      	adds	r3, r7, r4
 800fbce:	220d      	movs	r2, #13
 800fbd0:	701a      	strb	r2, [r3, #0]
  char *lib_version_num;
  char lib_version_string[64];
  int lib_version_len = 0;
 800fbd2:	2300      	movs	r3, #0
 800fbd4:	62fb      	str	r3, [r7, #44]	; 0x2c
  const char ps[] = {"MEMS shield demo,4,"FW_VERSION",%s,"BOARD_NAME};
 800fbd6:	2308      	movs	r3, #8
 800fbd8:	18fb      	adds	r3, r7, r3
 800fbda:	4a16      	ldr	r2, [pc, #88]	; (800fc34 <Get_PresentationString+0x74>)
 800fbdc:	ca23      	ldmia	r2!, {r0, r1, r5}
 800fbde:	c323      	stmia	r3!, {r0, r1, r5}
 800fbe0:	ca23      	ldmia	r2!, {r0, r1, r5}
 800fbe2:	c323      	stmia	r3!, {r0, r1, r5}
 800fbe4:	ca23      	ldmia	r2!, {r0, r1, r5}
 800fbe6:	c323      	stmia	r3!, {r0, r1, r5}

  MotionFX_manager_get_version(lib_version_string, &lib_version_len);
 800fbe8:	232c      	movs	r3, #44	; 0x2c
 800fbea:	18fa      	adds	r2, r7, r3
 800fbec:	2530      	movs	r5, #48	; 0x30
 800fbee:	197b      	adds	r3, r7, r5
 800fbf0:	0011      	movs	r1, r2
 800fbf2:	0018      	movs	r0, r3
 800fbf4:	f000 f9d6 	bl	800ffa4 <MotionFX_manager_get_version>

  /* Shorten library version string (e.g.: ST MotionXX v1.0.0 resp. ST MotionXXX v1.0.0) to contain version number only (e.g.: 1.0.0) */
  if (lib_version_len > string_pointer_shift)
 800fbf8:	193b      	adds	r3, r7, r4
 800fbfa:	781a      	ldrb	r2, [r3, #0]
 800fbfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fbfe:	429a      	cmp	r2, r3
 800fc00:	da05      	bge.n	800fc0e <Get_PresentationString+0x4e>
  {
    lib_version_num = lib_version_string + string_pointer_shift;
 800fc02:	193b      	adds	r3, r7, r4
 800fc04:	781b      	ldrb	r3, [r3, #0]
 800fc06:	197a      	adds	r2, r7, r5
 800fc08:	18d3      	adds	r3, r2, r3
 800fc0a:	677b      	str	r3, [r7, #116]	; 0x74
 800fc0c:	e002      	b.n	800fc14 <Get_PresentationString+0x54>
  }
  else
  {
    lib_version_num = lib_version_string;
 800fc0e:	2330      	movs	r3, #48	; 0x30
 800fc10:	18fb      	adds	r3, r7, r3
 800fc12:	677b      	str	r3, [r7, #116]	; 0x74
  }

  *Length = snprintf(PresentationString, 64, ps, lib_version_num);
 800fc14:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800fc16:	2208      	movs	r2, #8
 800fc18:	18ba      	adds	r2, r7, r2
 800fc1a:	6878      	ldr	r0, [r7, #4]
 800fc1c:	2140      	movs	r1, #64	; 0x40
 800fc1e:	f003 ff2b 	bl	8013a78 <sniprintf>
 800fc22:	0003      	movs	r3, r0
 800fc24:	001a      	movs	r2, r3
 800fc26:	683b      	ldr	r3, [r7, #0]
 800fc28:	601a      	str	r2, [r3, #0]
}
 800fc2a:	46c0      	nop			; (mov r8, r8)
 800fc2c:	46bd      	mov	sp, r7
 800fc2e:	b01e      	add	sp, #120	; 0x78
 800fc30:	bdb0      	pop	{r4, r5, r7, pc}
 800fc32:	46c0      	nop			; (mov r8, r8)
 800fc34:	08015a14 	.word	0x08015a14

0800fc38 <BSP_SENSOR_ACC_Init>:
  * @brief  Initializes accelerometer
  * @param  None
  * @retval None
  */
void BSP_SENSOR_ACC_Init(void)
{
 800fc38:	b580      	push	{r7, lr}
 800fc3a:	af00      	add	r7, sp, #0
  (void)IKS01A3_MOTION_SENSOR_Init(IKS01A3_LSM6DSO_0, MOTION_ACCELERO);
 800fc3c:	2102      	movs	r1, #2
 800fc3e:	2000      	movs	r0, #0
 800fc40:	f7f9 f9cc 	bl	8008fdc <IKS01A3_MOTION_SENSOR_Init>
}
 800fc44:	46c0      	nop			; (mov r8, r8)
 800fc46:	46bd      	mov	sp, r7
 800fc48:	bd80      	pop	{r7, pc}

0800fc4a <BSP_SENSOR_GYR_Init>:
  * @brief  Initializes gyroscope
  * @param  None
  * @retval None
  */
void BSP_SENSOR_GYR_Init(void)
{
 800fc4a:	b580      	push	{r7, lr}
 800fc4c:	af00      	add	r7, sp, #0
  (void)IKS01A3_MOTION_SENSOR_Init(IKS01A3_LSM6DSO_0, MOTION_GYRO);
 800fc4e:	2101      	movs	r1, #1
 800fc50:	2000      	movs	r0, #0
 800fc52:	f7f9 f9c3 	bl	8008fdc <IKS01A3_MOTION_SENSOR_Init>
}
 800fc56:	46c0      	nop			; (mov r8, r8)
 800fc58:	46bd      	mov	sp, r7
 800fc5a:	bd80      	pop	{r7, pc}

0800fc5c <BSP_SENSOR_MAG_Init>:
  * @brief  Initializes magnetometer
  * @param  None
  * @retval None
  */
void BSP_SENSOR_MAG_Init(void)
{
 800fc5c:	b580      	push	{r7, lr}
 800fc5e:	af00      	add	r7, sp, #0
  (void)IKS01A3_MOTION_SENSOR_Init(IKS01A3_LIS2MDL_0, MOTION_MAGNETO);
 800fc60:	2104      	movs	r1, #4
 800fc62:	2002      	movs	r0, #2
 800fc64:	f7f9 f9ba 	bl	8008fdc <IKS01A3_MOTION_SENSOR_Init>
}
 800fc68:	46c0      	nop			; (mov r8, r8)
 800fc6a:	46bd      	mov	sp, r7
 800fc6c:	bd80      	pop	{r7, pc}

0800fc6e <BSP_SENSOR_PRESS_Init>:
  * @brief  Initializes pressure sensor
  * @param  None
  * @retval None
  */
void BSP_SENSOR_PRESS_Init(void)
{
 800fc6e:	b580      	push	{r7, lr}
 800fc70:	af00      	add	r7, sp, #0
  (void)IKS01A3_ENV_SENSOR_Init(IKS01A3_LPS22HH_0, ENV_PRESSURE);
 800fc72:	2102      	movs	r1, #2
 800fc74:	2001      	movs	r0, #1
 800fc76:	f7f8 fda1 	bl	80087bc <IKS01A3_ENV_SENSOR_Init>
}
 800fc7a:	46c0      	nop			; (mov r8, r8)
 800fc7c:	46bd      	mov	sp, r7
 800fc7e:	bd80      	pop	{r7, pc}

0800fc80 <BSP_SENSOR_TEMP_Init>:
  * @brief  Initializes temperature sensor
  * @param  None
  * @retval None
  */
void BSP_SENSOR_TEMP_Init(void)
{
 800fc80:	b580      	push	{r7, lr}
 800fc82:	af00      	add	r7, sp, #0
  (void)IKS01A3_ENV_SENSOR_Init(IKS01A3_HTS221_0, ENV_TEMPERATURE);
 800fc84:	2101      	movs	r1, #1
 800fc86:	2000      	movs	r0, #0
 800fc88:	f7f8 fd98 	bl	80087bc <IKS01A3_ENV_SENSOR_Init>
}
 800fc8c:	46c0      	nop			; (mov r8, r8)
 800fc8e:	46bd      	mov	sp, r7
 800fc90:	bd80      	pop	{r7, pc}

0800fc92 <BSP_SENSOR_HUM_Init>:
  * @brief  Initializes humidity sensor
  * @param  None
  * @retval None
  */
void BSP_SENSOR_HUM_Init(void)
{
 800fc92:	b580      	push	{r7, lr}
 800fc94:	af00      	add	r7, sp, #0
  (void)IKS01A3_ENV_SENSOR_Init(IKS01A3_HTS221_0, ENV_HUMIDITY);
 800fc96:	2104      	movs	r1, #4
 800fc98:	2000      	movs	r0, #0
 800fc9a:	f7f8 fd8f 	bl	80087bc <IKS01A3_ENV_SENSOR_Init>
}
 800fc9e:	46c0      	nop			; (mov r8, r8)
 800fca0:	46bd      	mov	sp, r7
 800fca2:	bd80      	pop	{r7, pc}

0800fca4 <BSP_SENSOR_ACC_Enable>:
  * @brief  Enables accelerometer
  * @param  None
  * @retval None
  */
void BSP_SENSOR_ACC_Enable(void)
{
 800fca4:	b580      	push	{r7, lr}
 800fca6:	af00      	add	r7, sp, #0
  (void)IKS01A3_MOTION_SENSOR_Enable(IKS01A3_LSM6DSO_0, MOTION_ACCELERO);
 800fca8:	2102      	movs	r1, #2
 800fcaa:	2000      	movs	r0, #0
 800fcac:	f7f9 faa2 	bl	80091f4 <IKS01A3_MOTION_SENSOR_Enable>
}
 800fcb0:	46c0      	nop			; (mov r8, r8)
 800fcb2:	46bd      	mov	sp, r7
 800fcb4:	bd80      	pop	{r7, pc}

0800fcb6 <BSP_SENSOR_GYR_Enable>:
  * @brief  Enables gyroscope
  * @param  None
  * @retval None
  */
void BSP_SENSOR_GYR_Enable(void)
{
 800fcb6:	b580      	push	{r7, lr}
 800fcb8:	af00      	add	r7, sp, #0
  (void)IKS01A3_MOTION_SENSOR_Enable(IKS01A3_LSM6DSO_0, MOTION_GYRO);
 800fcba:	2101      	movs	r1, #1
 800fcbc:	2000      	movs	r0, #0
 800fcbe:	f7f9 fa99 	bl	80091f4 <IKS01A3_MOTION_SENSOR_Enable>
}
 800fcc2:	46c0      	nop			; (mov r8, r8)
 800fcc4:	46bd      	mov	sp, r7
 800fcc6:	bd80      	pop	{r7, pc}

0800fcc8 <BSP_SENSOR_MAG_Enable>:
  * @brief  Enables magnetometer
  * @param  None
  * @retval None
  */
void BSP_SENSOR_MAG_Enable(void)
{
 800fcc8:	b580      	push	{r7, lr}
 800fcca:	af00      	add	r7, sp, #0
  (void)IKS01A3_MOTION_SENSOR_Enable(IKS01A3_LIS2MDL_0, MOTION_MAGNETO);
 800fccc:	2104      	movs	r1, #4
 800fcce:	2002      	movs	r0, #2
 800fcd0:	f7f9 fa90 	bl	80091f4 <IKS01A3_MOTION_SENSOR_Enable>
}
 800fcd4:	46c0      	nop			; (mov r8, r8)
 800fcd6:	46bd      	mov	sp, r7
 800fcd8:	bd80      	pop	{r7, pc}

0800fcda <BSP_SENSOR_PRESS_Enable>:
  * @brief  Enables pressure sensor
  * @param  None
  * @retval None
  */
void BSP_SENSOR_PRESS_Enable(void)
{
 800fcda:	b580      	push	{r7, lr}
 800fcdc:	af00      	add	r7, sp, #0
  (void)IKS01A3_ENV_SENSOR_Enable(IKS01A3_LPS22HH_0, ENV_PRESSURE);
 800fcde:	2102      	movs	r1, #2
 800fce0:	2001      	movs	r0, #1
 800fce2:	f7f8 fe77 	bl	80089d4 <IKS01A3_ENV_SENSOR_Enable>
}
 800fce6:	46c0      	nop			; (mov r8, r8)
 800fce8:	46bd      	mov	sp, r7
 800fcea:	bd80      	pop	{r7, pc}

0800fcec <BSP_SENSOR_TEMP_Enable>:
  * @brief  Enables temperature sensor
  * @param  None
  * @retval None
  */
void BSP_SENSOR_TEMP_Enable(void)
{
 800fcec:	b580      	push	{r7, lr}
 800fcee:	af00      	add	r7, sp, #0
  (void)IKS01A3_ENV_SENSOR_Enable(IKS01A3_HTS221_0, ENV_TEMPERATURE);
 800fcf0:	2101      	movs	r1, #1
 800fcf2:	2000      	movs	r0, #0
 800fcf4:	f7f8 fe6e 	bl	80089d4 <IKS01A3_ENV_SENSOR_Enable>
}
 800fcf8:	46c0      	nop			; (mov r8, r8)
 800fcfa:	46bd      	mov	sp, r7
 800fcfc:	bd80      	pop	{r7, pc}

0800fcfe <BSP_SENSOR_HUM_Enable>:
  * @brief  Enables humidity sensors
  * @param  None
  * @retval None
  */
void BSP_SENSOR_HUM_Enable(void)
{
 800fcfe:	b580      	push	{r7, lr}
 800fd00:	af00      	add	r7, sp, #0
  (void)IKS01A3_ENV_SENSOR_Enable(IKS01A3_HTS221_0, ENV_HUMIDITY);
 800fd02:	2104      	movs	r1, #4
 800fd04:	2000      	movs	r0, #0
 800fd06:	f7f8 fe65 	bl	80089d4 <IKS01A3_ENV_SENSOR_Enable>
}
 800fd0a:	46c0      	nop			; (mov r8, r8)
 800fd0c:	46bd      	mov	sp, r7
 800fd0e:	bd80      	pop	{r7, pc}

0800fd10 <BSP_SENSOR_ACC_Disable>:
  * @brief  Disables accelerometer
  * @param  None
  * @retval None
  */
void BSP_SENSOR_ACC_Disable(void)
{
 800fd10:	b580      	push	{r7, lr}
 800fd12:	af00      	add	r7, sp, #0
  (void)IKS01A3_MOTION_SENSOR_Disable(IKS01A3_LSM6DSO_0, MOTION_ACCELERO);
 800fd14:	2102      	movs	r1, #2
 800fd16:	2000      	movs	r0, #0
 800fd18:	f7f9 faae 	bl	8009278 <IKS01A3_MOTION_SENSOR_Disable>
}
 800fd1c:	46c0      	nop			; (mov r8, r8)
 800fd1e:	46bd      	mov	sp, r7
 800fd20:	bd80      	pop	{r7, pc}

0800fd22 <BSP_SENSOR_GYR_Disable>:
  * @brief  Disables gyroscope
  * @param  None
  * @retval None
  */
void BSP_SENSOR_GYR_Disable(void)
{
 800fd22:	b580      	push	{r7, lr}
 800fd24:	af00      	add	r7, sp, #0
  (void)IKS01A3_MOTION_SENSOR_Disable(IKS01A3_LSM6DSO_0, MOTION_GYRO);
 800fd26:	2101      	movs	r1, #1
 800fd28:	2000      	movs	r0, #0
 800fd2a:	f7f9 faa5 	bl	8009278 <IKS01A3_MOTION_SENSOR_Disable>
}
 800fd2e:	46c0      	nop			; (mov r8, r8)
 800fd30:	46bd      	mov	sp, r7
 800fd32:	bd80      	pop	{r7, pc}

0800fd34 <BSP_SENSOR_MAG_Disable>:
  * @brief  Disables magnetometer
  * @param  None
  * @retval None
  */
void BSP_SENSOR_MAG_Disable(void)
{
 800fd34:	b580      	push	{r7, lr}
 800fd36:	af00      	add	r7, sp, #0
  (void)IKS01A3_MOTION_SENSOR_Disable(IKS01A3_LIS2MDL_0, MOTION_MAGNETO);
 800fd38:	2104      	movs	r1, #4
 800fd3a:	2002      	movs	r0, #2
 800fd3c:	f7f9 fa9c 	bl	8009278 <IKS01A3_MOTION_SENSOR_Disable>
}
 800fd40:	46c0      	nop			; (mov r8, r8)
 800fd42:	46bd      	mov	sp, r7
 800fd44:	bd80      	pop	{r7, pc}

0800fd46 <BSP_SENSOR_PRESS_Disable>:
  * @brief  Disables pressure sensor
  * @param  None
  * @retval None
  */
void BSP_SENSOR_PRESS_Disable(void)
{
 800fd46:	b580      	push	{r7, lr}
 800fd48:	af00      	add	r7, sp, #0
  (void)IKS01A3_ENV_SENSOR_Disable(IKS01A3_LPS22HH_0, ENV_PRESSURE);
 800fd4a:	2102      	movs	r1, #2
 800fd4c:	2001      	movs	r0, #1
 800fd4e:	f7f8 fe83 	bl	8008a58 <IKS01A3_ENV_SENSOR_Disable>
}
 800fd52:	46c0      	nop			; (mov r8, r8)
 800fd54:	46bd      	mov	sp, r7
 800fd56:	bd80      	pop	{r7, pc}

0800fd58 <BSP_SENSOR_TEMP_Disable>:
  * @brief  Disables temperature sensor
  * @param  None
  * @retval None
  */
void BSP_SENSOR_TEMP_Disable(void)
{
 800fd58:	b580      	push	{r7, lr}
 800fd5a:	af00      	add	r7, sp, #0
  (void)IKS01A3_ENV_SENSOR_Disable(IKS01A3_HTS221_0, ENV_TEMPERATURE);
 800fd5c:	2101      	movs	r1, #1
 800fd5e:	2000      	movs	r0, #0
 800fd60:	f7f8 fe7a 	bl	8008a58 <IKS01A3_ENV_SENSOR_Disable>
}
 800fd64:	46c0      	nop			; (mov r8, r8)
 800fd66:	46bd      	mov	sp, r7
 800fd68:	bd80      	pop	{r7, pc}

0800fd6a <BSP_SENSOR_HUM_Disable>:
  * @brief  Disables humidity sensor
  * @param  None
  * @retval None
  */
void BSP_SENSOR_HUM_Disable(void)
{
 800fd6a:	b580      	push	{r7, lr}
 800fd6c:	af00      	add	r7, sp, #0
  (void)IKS01A3_ENV_SENSOR_Disable(IKS01A3_HTS221_0, ENV_HUMIDITY);
 800fd6e:	2104      	movs	r1, #4
 800fd70:	2000      	movs	r0, #0
 800fd72:	f7f8 fe71 	bl	8008a58 <IKS01A3_ENV_SENSOR_Disable>
}
 800fd76:	46c0      	nop			; (mov r8, r8)
 800fd78:	46bd      	mov	sp, r7
 800fd7a:	bd80      	pop	{r7, pc}

0800fd7c <BSP_SENSOR_ACC_GetAxes>:
  * @brief  Get accelerometer data
  * @param  Axes pointer to axes data structure
  * @retval None
  */
void BSP_SENSOR_ACC_GetAxes(IKS01A3_MOTION_SENSOR_Axes_t *Axes)
{
 800fd7c:	b580      	push	{r7, lr}
 800fd7e:	b082      	sub	sp, #8
 800fd80:	af00      	add	r7, sp, #0
 800fd82:	6078      	str	r0, [r7, #4]
  (void)IKS01A3_MOTION_SENSOR_GetAxes(IKS01A3_LSM6DSO_0, MOTION_ACCELERO, Axes);
 800fd84:	687b      	ldr	r3, [r7, #4]
 800fd86:	001a      	movs	r2, r3
 800fd88:	2102      	movs	r1, #2
 800fd8a:	2000      	movs	r0, #0
 800fd8c:	f7f9 fab6 	bl	80092fc <IKS01A3_MOTION_SENSOR_GetAxes>
}
 800fd90:	46c0      	nop			; (mov r8, r8)
 800fd92:	46bd      	mov	sp, r7
 800fd94:	b002      	add	sp, #8
 800fd96:	bd80      	pop	{r7, pc}

0800fd98 <BSP_SENSOR_GYR_GetAxes>:
  * @brief  Get gyroscope data
  * @param  Axes pointer to axes data structure
  * @retval None
  */
void BSP_SENSOR_GYR_GetAxes(IKS01A3_MOTION_SENSOR_Axes_t *Axes)
{
 800fd98:	b580      	push	{r7, lr}
 800fd9a:	b082      	sub	sp, #8
 800fd9c:	af00      	add	r7, sp, #0
 800fd9e:	6078      	str	r0, [r7, #4]
  (void)IKS01A3_MOTION_SENSOR_GetAxes(IKS01A3_LSM6DSO_0, MOTION_GYRO, Axes);
 800fda0:	687b      	ldr	r3, [r7, #4]
 800fda2:	001a      	movs	r2, r3
 800fda4:	2101      	movs	r1, #1
 800fda6:	2000      	movs	r0, #0
 800fda8:	f7f9 faa8 	bl	80092fc <IKS01A3_MOTION_SENSOR_GetAxes>
}
 800fdac:	46c0      	nop			; (mov r8, r8)
 800fdae:	46bd      	mov	sp, r7
 800fdb0:	b002      	add	sp, #8
 800fdb2:	bd80      	pop	{r7, pc}

0800fdb4 <BSP_SENSOR_MAG_GetAxes>:
  * @brief  Get magnetometer data
  * @param  Axes pointer to axes data structure
  * @retval None
  */
void BSP_SENSOR_MAG_GetAxes(IKS01A3_MOTION_SENSOR_Axes_t *Axes)
{
 800fdb4:	b580      	push	{r7, lr}
 800fdb6:	b082      	sub	sp, #8
 800fdb8:	af00      	add	r7, sp, #0
 800fdba:	6078      	str	r0, [r7, #4]
  (void)IKS01A3_MOTION_SENSOR_GetAxes(IKS01A3_LIS2MDL_0, MOTION_MAGNETO, Axes);
 800fdbc:	687b      	ldr	r3, [r7, #4]
 800fdbe:	001a      	movs	r2, r3
 800fdc0:	2104      	movs	r1, #4
 800fdc2:	2002      	movs	r0, #2
 800fdc4:	f7f9 fa9a 	bl	80092fc <IKS01A3_MOTION_SENSOR_GetAxes>
}
 800fdc8:	46c0      	nop			; (mov r8, r8)
 800fdca:	46bd      	mov	sp, r7
 800fdcc:	b002      	add	sp, #8
 800fdce:	bd80      	pop	{r7, pc}

0800fdd0 <BSP_SENSOR_PRESS_GetValue>:
  * @brief  Get pressure sensor data
  * @param  Value pointer to pressure value
  * @retval None
  */
void BSP_SENSOR_PRESS_GetValue(float *Value)
{
 800fdd0:	b580      	push	{r7, lr}
 800fdd2:	b082      	sub	sp, #8
 800fdd4:	af00      	add	r7, sp, #0
 800fdd6:	6078      	str	r0, [r7, #4]
  (void)IKS01A3_ENV_SENSOR_GetValue(IKS01A3_LPS22HH_0, ENV_PRESSURE, Value);
 800fdd8:	687b      	ldr	r3, [r7, #4]
 800fdda:	001a      	movs	r2, r3
 800fddc:	2102      	movs	r1, #2
 800fdde:	2001      	movs	r0, #1
 800fde0:	f7f8 fe7c 	bl	8008adc <IKS01A3_ENV_SENSOR_GetValue>
}
 800fde4:	46c0      	nop			; (mov r8, r8)
 800fde6:	46bd      	mov	sp, r7
 800fde8:	b002      	add	sp, #8
 800fdea:	bd80      	pop	{r7, pc}

0800fdec <BSP_SENSOR_TEMP_GetValue>:
  * @brief  Get temperature sensor data
  * @param  Value pointer to temperature value
  * @retval None
  */
void BSP_SENSOR_TEMP_GetValue(float *Value)
{
 800fdec:	b580      	push	{r7, lr}
 800fdee:	b082      	sub	sp, #8
 800fdf0:	af00      	add	r7, sp, #0
 800fdf2:	6078      	str	r0, [r7, #4]
  (void)IKS01A3_ENV_SENSOR_GetValue(IKS01A3_HTS221_0, ENV_TEMPERATURE, Value);
 800fdf4:	687b      	ldr	r3, [r7, #4]
 800fdf6:	001a      	movs	r2, r3
 800fdf8:	2101      	movs	r1, #1
 800fdfa:	2000      	movs	r0, #0
 800fdfc:	f7f8 fe6e 	bl	8008adc <IKS01A3_ENV_SENSOR_GetValue>
}
 800fe00:	46c0      	nop			; (mov r8, r8)
 800fe02:	46bd      	mov	sp, r7
 800fe04:	b002      	add	sp, #8
 800fe06:	bd80      	pop	{r7, pc}

0800fe08 <BSP_SENSOR_HUM_GetValue>:
  * @brief  Get humidity sensor data
  * @param  Value pointer to humidity value
  * @retval None
  */
void BSP_SENSOR_HUM_GetValue(float *Value)
{
 800fe08:	b580      	push	{r7, lr}
 800fe0a:	b082      	sub	sp, #8
 800fe0c:	af00      	add	r7, sp, #0
 800fe0e:	6078      	str	r0, [r7, #4]
  (void)IKS01A3_ENV_SENSOR_GetValue(IKS01A3_HTS221_0, ENV_HUMIDITY, Value);
 800fe10:	687b      	ldr	r3, [r7, #4]
 800fe12:	001a      	movs	r2, r3
 800fe14:	2104      	movs	r1, #4
 800fe16:	2000      	movs	r0, #0
 800fe18:	f7f8 fe60 	bl	8008adc <IKS01A3_ENV_SENSOR_GetValue>
}
 800fe1c:	46c0      	nop			; (mov r8, r8)
 800fe1e:	46bd      	mov	sp, r7
 800fe20:	b002      	add	sp, #8
 800fe22:	bd80      	pop	{r7, pc}

0800fe24 <BSP_SENSOR_ACC_SetOutputDataRate>:
  * @brief  Set output data rate for accelerometer
  * @param  Odr Output Data Rate value to be set
  * @retval None
  */
void BSP_SENSOR_ACC_SetOutputDataRate(float Odr)
{
 800fe24:	b580      	push	{r7, lr}
 800fe26:	b082      	sub	sp, #8
 800fe28:	af00      	add	r7, sp, #0
 800fe2a:	6078      	str	r0, [r7, #4]
  (void)IKS01A3_MOTION_SENSOR_SetOutputDataRate(IKS01A3_LSM6DSO_0, MOTION_ACCELERO, Odr);
 800fe2c:	687b      	ldr	r3, [r7, #4]
 800fe2e:	1c1a      	adds	r2, r3, #0
 800fe30:	2102      	movs	r1, #2
 800fe32:	2000      	movs	r0, #0
 800fe34:	f7f9 faa6 	bl	8009384 <IKS01A3_MOTION_SENSOR_SetOutputDataRate>
}
 800fe38:	46c0      	nop			; (mov r8, r8)
 800fe3a:	46bd      	mov	sp, r7
 800fe3c:	b002      	add	sp, #8
 800fe3e:	bd80      	pop	{r7, pc}

0800fe40 <BSP_SENSOR_ACC_SetFullScale>:
  * @brief  Set full scale for accelerometer
  * @param  Fullscale Fullscale value to be set
  * @retval None
  */
void BSP_SENSOR_ACC_SetFullScale(int32_t Fullscale)
{
 800fe40:	b580      	push	{r7, lr}
 800fe42:	b082      	sub	sp, #8
 800fe44:	af00      	add	r7, sp, #0
 800fe46:	6078      	str	r0, [r7, #4]
  (void)IKS01A3_MOTION_SENSOR_SetFullScale(IKS01A3_LSM6DSO_0, MOTION_ACCELERO, Fullscale);
 800fe48:	687b      	ldr	r3, [r7, #4]
 800fe4a:	001a      	movs	r2, r3
 800fe4c:	2102      	movs	r1, #2
 800fe4e:	2000      	movs	r0, #0
 800fe50:	f7f9 fadc 	bl	800940c <IKS01A3_MOTION_SENSOR_SetFullScale>
}
 800fe54:	46c0      	nop			; (mov r8, r8)
 800fe56:	46bd      	mov	sp, r7
 800fe58:	b002      	add	sp, #8
 800fe5a:	bd80      	pop	{r7, pc}

0800fe5c <BSP_SENSOR_ACC_GetOrientation>:
  * @brief  Get accelerometer sensor orientation
  * @param  Orientation Pointer to sensor orientation
  * @retval None
  */
void BSP_SENSOR_ACC_GetOrientation(char *Orientation)
{
 800fe5c:	b580      	push	{r7, lr}
 800fe5e:	b082      	sub	sp, #8
 800fe60:	af00      	add	r7, sp, #0
 800fe62:	6078      	str	r0, [r7, #4]
  Orientation[0] = 's';
 800fe64:	687b      	ldr	r3, [r7, #4]
 800fe66:	2273      	movs	r2, #115	; 0x73
 800fe68:	701a      	strb	r2, [r3, #0]
  Orientation[1] = 'e';
 800fe6a:	687b      	ldr	r3, [r7, #4]
 800fe6c:	3301      	adds	r3, #1
 800fe6e:	2265      	movs	r2, #101	; 0x65
 800fe70:	701a      	strb	r2, [r3, #0]
  Orientation[2] = 'u';
 800fe72:	687b      	ldr	r3, [r7, #4]
 800fe74:	3302      	adds	r3, #2
 800fe76:	2275      	movs	r2, #117	; 0x75
 800fe78:	701a      	strb	r2, [r3, #0]
}
 800fe7a:	46c0      	nop			; (mov r8, r8)
 800fe7c:	46bd      	mov	sp, r7
 800fe7e:	b002      	add	sp, #8
 800fe80:	bd80      	pop	{r7, pc}

0800fe82 <BSP_SENSOR_GYR_GetOrientation>:
  * @brief  Get gyroscope sensor orientation
  * @param  Orientation Pointer to sensor orientation
  * @retval None
  */
void BSP_SENSOR_GYR_GetOrientation(char *Orientation)
{
 800fe82:	b580      	push	{r7, lr}
 800fe84:	b082      	sub	sp, #8
 800fe86:	af00      	add	r7, sp, #0
 800fe88:	6078      	str	r0, [r7, #4]
  Orientation[0] = 's';
 800fe8a:	687b      	ldr	r3, [r7, #4]
 800fe8c:	2273      	movs	r2, #115	; 0x73
 800fe8e:	701a      	strb	r2, [r3, #0]
  Orientation[1] = 'e';
 800fe90:	687b      	ldr	r3, [r7, #4]
 800fe92:	3301      	adds	r3, #1
 800fe94:	2265      	movs	r2, #101	; 0x65
 800fe96:	701a      	strb	r2, [r3, #0]
  Orientation[2] = 'u';
 800fe98:	687b      	ldr	r3, [r7, #4]
 800fe9a:	3302      	adds	r3, #2
 800fe9c:	2275      	movs	r2, #117	; 0x75
 800fe9e:	701a      	strb	r2, [r3, #0]
}
 800fea0:	46c0      	nop			; (mov r8, r8)
 800fea2:	46bd      	mov	sp, r7
 800fea4:	b002      	add	sp, #8
 800fea6:	bd80      	pop	{r7, pc}

0800fea8 <BSP_SENSOR_MAG_GetOrientation>:
  * @brief  Get magnetometer sensor orientation
  * @param  Orientation Pointer to sensor orientation
  * @retval None
  */
void BSP_SENSOR_MAG_GetOrientation(char *Orientation)
{
 800fea8:	b580      	push	{r7, lr}
 800feaa:	b082      	sub	sp, #8
 800feac:	af00      	add	r7, sp, #0
 800feae:	6078      	str	r0, [r7, #4]
  Orientation[0] = 'n';
 800feb0:	687b      	ldr	r3, [r7, #4]
 800feb2:	226e      	movs	r2, #110	; 0x6e
 800feb4:	701a      	strb	r2, [r3, #0]
  Orientation[1] = 'e';
 800feb6:	687b      	ldr	r3, [r7, #4]
 800feb8:	3301      	adds	r3, #1
 800feba:	2265      	movs	r2, #101	; 0x65
 800febc:	701a      	strb	r2, [r3, #0]
  Orientation[2] = 'u';
 800febe:	687b      	ldr	r3, [r7, #4]
 800fec0:	3302      	adds	r3, #2
 800fec2:	2275      	movs	r2, #117	; 0x75
 800fec4:	701a      	strb	r2, [r3, #0]
}
 800fec6:	46c0      	nop			; (mov r8, r8)
 800fec8:	46bd      	mov	sp, r7
 800feca:	b002      	add	sp, #8
 800fecc:	bd80      	pop	{r7, pc}

0800fece <MotionFX_manager_init>:
 * @brief  Initialize the MotionFX engine
 * @param  None
 * @retval None
 */
void MotionFX_manager_init(void)
{
 800fece:	b5b0      	push	{r4, r5, r7, lr}
 800fed0:	b084      	sub	sp, #16
 800fed2:	af00      	add	r7, sp, #0
  char acc_orientation[4];
  char gyro_orientation[4];
  char mag_orientation[4];

  BSP_SENSOR_ACC_GetOrientation(acc_orientation);
 800fed4:	240c      	movs	r4, #12
 800fed6:	193b      	adds	r3, r7, r4
 800fed8:	0018      	movs	r0, r3
 800feda:	f7ff ffbf 	bl	800fe5c <BSP_SENSOR_ACC_GetOrientation>
  BSP_SENSOR_GYR_GetOrientation(gyro_orientation);
 800fede:	2508      	movs	r5, #8
 800fee0:	197b      	adds	r3, r7, r5
 800fee2:	0018      	movs	r0, r3
 800fee4:	f7ff ffcd 	bl	800fe82 <BSP_SENSOR_GYR_GetOrientation>
  BSP_SENSOR_MAG_GetOrientation(mag_orientation);
 800fee8:	1d3b      	adds	r3, r7, #4
 800feea:	0018      	movs	r0, r3
 800feec:	f7ff ffdc 	bl	800fea8 <BSP_SENSOR_MAG_GetOrientation>

  MotionFX_CM0P_initialize(MFX_CM0P_MCU_STM32);
 800fef0:	2000      	movs	r0, #0
 800fef2:	f002 fbf7 	bl	80126e4 <MotionFX_CM0P_initialize>

  MotionFX_CM0P_setOrientation(acc_orientation, gyro_orientation, mag_orientation);
 800fef6:	1d3a      	adds	r2, r7, #4
 800fef8:	1979      	adds	r1, r7, r5
 800fefa:	193b      	adds	r3, r7, r4
 800fefc:	0018      	movs	r0, r3
 800fefe:	f002 fd05 	bl	801290c <MotionFX_CM0P_setOrientation>

  MotionFX_CM0P_enable_gbias(MFX_CM0P_ENGINE_ENABLE);
 800ff02:	2001      	movs	r0, #1
 800ff04:	f002 fd40 	bl	8012988 <MotionFX_CM0P_enable_gbias>
  MotionFX_CM0P_enable_euler(MFX_CM0P_ENGINE_ENABLE);
 800ff08:	2001      	movs	r0, #1
 800ff0a:	f002 fd31 	bl	8012970 <MotionFX_CM0P_enable_euler>
  MotionFX_CM0P_enable_6X(MFX_CM0P_ENGINE_DISABLE);
 800ff0e:	2000      	movs	r0, #0
 800ff10:	f002 fd16 	bl	8012940 <MotionFX_CM0P_enable_6X>
  MotionFX_CM0P_enable_9X(MFX_CM0P_ENGINE_DISABLE);
 800ff14:	2000      	movs	r0, #0
 800ff16:	f002 fd1f 	bl	8012958 <MotionFX_CM0P_enable_9X>
}
 800ff1a:	46c0      	nop			; (mov r8, r8)
 800ff1c:	46bd      	mov	sp, r7
 800ff1e:	b004      	add	sp, #16
 800ff20:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800ff24 <MotionFX_manager_run>:
 * @param  data_out Structure containing output data
 * @param  delta_time Delta time
 * @retval None
 */
void MotionFX_manager_run(MFX_CM0P_input_t *data_in, MFX_CM0P_output_t *data_out, float delta_time)
{
 800ff24:	b580      	push	{r7, lr}
 800ff26:	b084      	sub	sp, #16
 800ff28:	af00      	add	r7, sp, #0
 800ff2a:	60f8      	str	r0, [r7, #12]
 800ff2c:	60b9      	str	r1, [r7, #8]
 800ff2e:	607a      	str	r2, [r7, #4]
  if (discardedCount == sampleToDiscard)
 800ff30:	4b0a      	ldr	r3, [pc, #40]	; (800ff5c <MotionFX_manager_run+0x38>)
 800ff32:	681a      	ldr	r2, [r3, #0]
 800ff34:	4b0a      	ldr	r3, [pc, #40]	; (800ff60 <MotionFX_manager_run+0x3c>)
 800ff36:	681b      	ldr	r3, [r3, #0]
 800ff38:	429a      	cmp	r2, r3
 800ff3a:	d106      	bne.n	800ff4a <MotionFX_manager_run+0x26>
  {
    MotionFX_CM0P_update(data_out, data_in, delta_time);
 800ff3c:	687a      	ldr	r2, [r7, #4]
 800ff3e:	68f9      	ldr	r1, [r7, #12]
 800ff40:	68bb      	ldr	r3, [r7, #8]
 800ff42:	0018      	movs	r0, r3
 800ff44:	f002 fd2c 	bl	80129a0 <MotionFX_CM0P_update>
  }
  else
  {
    discardedCount++;
  }
}
 800ff48:	e004      	b.n	800ff54 <MotionFX_manager_run+0x30>
    discardedCount++;
 800ff4a:	4b04      	ldr	r3, [pc, #16]	; (800ff5c <MotionFX_manager_run+0x38>)
 800ff4c:	681b      	ldr	r3, [r3, #0]
 800ff4e:	1c5a      	adds	r2, r3, #1
 800ff50:	4b02      	ldr	r3, [pc, #8]	; (800ff5c <MotionFX_manager_run+0x38>)
 800ff52:	601a      	str	r2, [r3, #0]
}
 800ff54:	46c0      	nop			; (mov r8, r8)
 800ff56:	46bd      	mov	sp, r7
 800ff58:	b004      	add	sp, #16
 800ff5a:	bd80      	pop	{r7, pc}
 800ff5c:	20001650 	.word	0x20001650
 800ff60:	20000274 	.word	0x20000274

0800ff64 <MotionFX_manager_start_6X>:
 * @brief  Start 6 axes MotionFX engine
 * @param  None
 * @retval None
 */
void MotionFX_manager_start_6X(void)
{
 800ff64:	b580      	push	{r7, lr}
 800ff66:	af00      	add	r7, sp, #0
  MotionFX_CM0P_enable_6X(MFX_CM0P_ENGINE_ENABLE);
 800ff68:	2001      	movs	r0, #1
 800ff6a:	f002 fce9 	bl	8012940 <MotionFX_CM0P_enable_6X>
}
 800ff6e:	46c0      	nop			; (mov r8, r8)
 800ff70:	46bd      	mov	sp, r7
 800ff72:	bd80      	pop	{r7, pc}

0800ff74 <MotionFX_manager_stop_6X>:
 * @brief  Stop 6 axes MotionFX engine
 * @param  None
 * @retval None
 */
void MotionFX_manager_stop_6X(void)
{
 800ff74:	b580      	push	{r7, lr}
 800ff76:	af00      	add	r7, sp, #0
  MotionFX_CM0P_enable_6X(MFX_CM0P_ENGINE_DISABLE);
 800ff78:	2000      	movs	r0, #0
 800ff7a:	f002 fce1 	bl	8012940 <MotionFX_CM0P_enable_6X>
}
 800ff7e:	46c0      	nop			; (mov r8, r8)
 800ff80:	46bd      	mov	sp, r7
 800ff82:	bd80      	pop	{r7, pc}

0800ff84 <MotionFX_manager_start_9X>:
 * @brief  Start 9 axes MotionFX engine
 * @param  None
 * @retval None
 */
void MotionFX_manager_start_9X(void)
{
 800ff84:	b580      	push	{r7, lr}
 800ff86:	af00      	add	r7, sp, #0
  MotionFX_CM0P_enable_9X(MFX_CM0P_ENGINE_ENABLE);
 800ff88:	2001      	movs	r0, #1
 800ff8a:	f002 fce5 	bl	8012958 <MotionFX_CM0P_enable_9X>
}
 800ff8e:	46c0      	nop			; (mov r8, r8)
 800ff90:	46bd      	mov	sp, r7
 800ff92:	bd80      	pop	{r7, pc}

0800ff94 <MotionFX_manager_stop_9X>:
 * @brief  Stop 9 axes MotionFX engine
 * @param  None
 * @retval None
 */
void MotionFX_manager_stop_9X(void)
{
 800ff94:	b580      	push	{r7, lr}
 800ff96:	af00      	add	r7, sp, #0
  MotionFX_CM0P_enable_9X(MFX_CM0P_ENGINE_DISABLE);
 800ff98:	2000      	movs	r0, #0
 800ff9a:	f002 fcdd 	bl	8012958 <MotionFX_CM0P_enable_9X>
}
 800ff9e:	46c0      	nop			; (mov r8, r8)
 800ffa0:	46bd      	mov	sp, r7
 800ffa2:	bd80      	pop	{r7, pc}

0800ffa4 <MotionFX_manager_get_version>:
 * @param  version  Library version string (must be array of 35 char)
 * @param  length  Library version string length
 * @retval None
 */
void MotionFX_manager_get_version(char *version, int *length)
{
 800ffa4:	b580      	push	{r7, lr}
 800ffa6:	b082      	sub	sp, #8
 800ffa8:	af00      	add	r7, sp, #0
 800ffaa:	6078      	str	r0, [r7, #4]
 800ffac:	6039      	str	r1, [r7, #0]
  *length = (int)MotionFX_CM0P_GetLibVersion(version);
 800ffae:	687b      	ldr	r3, [r7, #4]
 800ffb0:	0018      	movs	r0, r3
 800ffb2:	f003 fd01 	bl	80139b8 <MotionFX_CM0P_GetLibVersion>
 800ffb6:	0003      	movs	r3, r0
 800ffb8:	001a      	movs	r2, r3
 800ffba:	683b      	ldr	r3, [r7, #0]
 800ffbc:	601a      	str	r2, [r3, #0]
}
 800ffbe:	46c0      	nop			; (mov r8, r8)
 800ffc0:	46bd      	mov	sp, r7
 800ffc2:	b002      	add	sp, #8
 800ffc4:	bd80      	pop	{r7, pc}

0800ffc6 <MotionFX_manager_MagCal_run>:
 * @brief  Run magnetometer calibration algorithm
 * @param  None
 * @retval None
 */
void MotionFX_manager_MagCal_run(MFX_CM0P_MagCal_input_t *data_in, MFX_CM0P_MagCal_output_t *data_out)
{
 800ffc6:	b580      	push	{r7, lr}
 800ffc8:	b082      	sub	sp, #8
 800ffca:	af00      	add	r7, sp, #0
 800ffcc:	6078      	str	r0, [r7, #4]
 800ffce:	6039      	str	r1, [r7, #0]
  MotionFX_CM0P_MagCal_run(data_in);
 800ffd0:	687b      	ldr	r3, [r7, #4]
 800ffd2:	0018      	movs	r0, r3
 800ffd4:	f002 ff06 	bl	8012de4 <MotionFX_CM0P_MagCal_run>
  MotionFX_CM0P_MagCal_getParams(data_out);
 800ffd8:	683b      	ldr	r3, [r7, #0]
 800ffda:	0018      	movs	r0, r3
 800ffdc:	f003 fcce 	bl	801397c <MotionFX_CM0P_MagCal_getParams>
}
 800ffe0:	46c0      	nop			; (mov r8, r8)
 800ffe2:	46bd      	mov	sp, r7
 800ffe4:	b002      	add	sp, #8
 800ffe6:	bd80      	pop	{r7, pc}

0800ffe8 <MotionFX_manager_MagCal_start>:
 * @brief  Start magnetometer calibration
 * @param  None
 * @retval None
 */
void MotionFX_manager_MagCal_start(int sampletime)
{
 800ffe8:	b580      	push	{r7, lr}
 800ffea:	b082      	sub	sp, #8
 800ffec:	af00      	add	r7, sp, #0
 800ffee:	6078      	str	r0, [r7, #4]
  MotionFX_CM0P_MagCal_init(sampletime, 1);
 800fff0:	687b      	ldr	r3, [r7, #4]
 800fff2:	2101      	movs	r1, #1
 800fff4:	0018      	movs	r0, r3
 800fff6:	f002 fe3f 	bl	8012c78 <MotionFX_CM0P_MagCal_init>
}
 800fffa:	46c0      	nop			; (mov r8, r8)
 800fffc:	46bd      	mov	sp, r7
 800fffe:	b002      	add	sp, #8
 8010000:	bd80      	pop	{r7, pc}

08010002 <MotionFX_manager_MagCal_stop>:
 * @brief  Stop magnetometer calibration
 * @param  None
 * @retval None
 */
void MotionFX_manager_MagCal_stop(int sampletime)
{
 8010002:	b580      	push	{r7, lr}
 8010004:	b082      	sub	sp, #8
 8010006:	af00      	add	r7, sp, #0
 8010008:	6078      	str	r0, [r7, #4]
  MotionFX_CM0P_MagCal_init(sampletime, 0);
 801000a:	687b      	ldr	r3, [r7, #4]
 801000c:	2100      	movs	r1, #0
 801000e:	0018      	movs	r0, r3
 8010010:	f002 fe32 	bl	8012c78 <MotionFX_CM0P_MagCal_init>
}
 8010014:	46c0      	nop			; (mov r8, r8)
 8010016:	46bd      	mov	sp, r7
 8010018:	b002      	add	sp, #8
 801001a:	bd80      	pop	{r7, pc}

0801001c <ByteStuffCopyByte>:
 * @param  Dest destination
 * @param  Source source
 * @retval Total number of bytes processed
 */
int ByteStuffCopyByte(uint8_t *Dest, uint8_t Source)
{
 801001c:	b580      	push	{r7, lr}
 801001e:	b084      	sub	sp, #16
 8010020:	af00      	add	r7, sp, #0
 8010022:	6078      	str	r0, [r7, #4]
 8010024:	000a      	movs	r2, r1
 8010026:	1cfb      	adds	r3, r7, #3
 8010028:	701a      	strb	r2, [r3, #0]
  int ret = 2;
 801002a:	2302      	movs	r3, #2
 801002c:	60fb      	str	r3, [r7, #12]

  switch (Source)
 801002e:	1cfb      	adds	r3, r7, #3
 8010030:	781b      	ldrb	r3, [r3, #0]
 8010032:	2bf0      	cmp	r3, #240	; 0xf0
 8010034:	d002      	beq.n	801003c <ByteStuffCopyByte+0x20>
 8010036:	2bf1      	cmp	r3, #241	; 0xf1
 8010038:	d008      	beq.n	801004c <ByteStuffCopyByte+0x30>
 801003a:	e00f      	b.n	801005c <ByteStuffCopyByte+0x40>
  {
    case TMsg_EOF:
      Dest[0] = TMsg_BS;
 801003c:	687b      	ldr	r3, [r7, #4]
 801003e:	22f1      	movs	r2, #241	; 0xf1
 8010040:	701a      	strb	r2, [r3, #0]
      Dest[1] = TMsg_BS_EOF;
 8010042:	687b      	ldr	r3, [r7, #4]
 8010044:	3301      	adds	r3, #1
 8010046:	22f2      	movs	r2, #242	; 0xf2
 8010048:	701a      	strb	r2, [r3, #0]
      break;
 801004a:	e00e      	b.n	801006a <ByteStuffCopyByte+0x4e>

    case TMsg_BS:
      Dest[0] = TMsg_BS;
 801004c:	687b      	ldr	r3, [r7, #4]
 801004e:	22f1      	movs	r2, #241	; 0xf1
 8010050:	701a      	strb	r2, [r3, #0]
      Dest[1] = TMsg_BS;
 8010052:	687b      	ldr	r3, [r7, #4]
 8010054:	3301      	adds	r3, #1
 8010056:	22f1      	movs	r2, #241	; 0xf1
 8010058:	701a      	strb	r2, [r3, #0]
      break;
 801005a:	e006      	b.n	801006a <ByteStuffCopyByte+0x4e>

    default:
      Dest[0] = Source;
 801005c:	687b      	ldr	r3, [r7, #4]
 801005e:	1cfa      	adds	r2, r7, #3
 8010060:	7812      	ldrb	r2, [r2, #0]
 8010062:	701a      	strb	r2, [r3, #0]
      ret = 1;
 8010064:	2301      	movs	r3, #1
 8010066:	60fb      	str	r3, [r7, #12]
      break;
 8010068:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 801006a:	68fb      	ldr	r3, [r7, #12]
}
 801006c:	0018      	movs	r0, r3
 801006e:	46bd      	mov	sp, r7
 8010070:	b004      	add	sp, #16
 8010072:	bd80      	pop	{r7, pc}

08010074 <ByteStuffCopy>:
 * @param  Dest destination
 * @param  Source source
 * @retval Total number of bytes processed
 */
int ByteStuffCopy(uint8_t *Dest, TMsg *Source)
{
 8010074:	b580      	push	{r7, lr}
 8010076:	b084      	sub	sp, #16
 8010078:	af00      	add	r7, sp, #0
 801007a:	6078      	str	r0, [r7, #4]
 801007c:	6039      	str	r1, [r7, #0]
  uint32_t i;
  int32_t count = 0;
 801007e:	2300      	movs	r3, #0
 8010080:	60bb      	str	r3, [r7, #8]

  for (i = 0; i < Source->Len; i++)
 8010082:	2300      	movs	r3, #0
 8010084:	60fb      	str	r3, [r7, #12]
 8010086:	e011      	b.n	80100ac <ByteStuffCopy+0x38>
  {
    count += ByteStuffCopyByte(&Dest[count], Source->Data[i]);
 8010088:	68bb      	ldr	r3, [r7, #8]
 801008a:	687a      	ldr	r2, [r7, #4]
 801008c:	18d0      	adds	r0, r2, r3
 801008e:	683a      	ldr	r2, [r7, #0]
 8010090:	68fb      	ldr	r3, [r7, #12]
 8010092:	18d3      	adds	r3, r2, r3
 8010094:	3304      	adds	r3, #4
 8010096:	781b      	ldrb	r3, [r3, #0]
 8010098:	0019      	movs	r1, r3
 801009a:	f7ff ffbf 	bl	801001c <ByteStuffCopyByte>
 801009e:	0002      	movs	r2, r0
 80100a0:	68bb      	ldr	r3, [r7, #8]
 80100a2:	189b      	adds	r3, r3, r2
 80100a4:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < Source->Len; i++)
 80100a6:	68fb      	ldr	r3, [r7, #12]
 80100a8:	3301      	adds	r3, #1
 80100aa:	60fb      	str	r3, [r7, #12]
 80100ac:	683b      	ldr	r3, [r7, #0]
 80100ae:	681b      	ldr	r3, [r3, #0]
 80100b0:	68fa      	ldr	r2, [r7, #12]
 80100b2:	429a      	cmp	r2, r3
 80100b4:	d3e8      	bcc.n	8010088 <ByteStuffCopy+0x14>
  }

  Dest[count] = TMsg_EOF;
 80100b6:	68bb      	ldr	r3, [r7, #8]
 80100b8:	687a      	ldr	r2, [r7, #4]
 80100ba:	18d3      	adds	r3, r2, r3
 80100bc:	22f0      	movs	r2, #240	; 0xf0
 80100be:	701a      	strb	r2, [r3, #0]
  count++;
 80100c0:	68bb      	ldr	r3, [r7, #8]
 80100c2:	3301      	adds	r3, #1
 80100c4:	60bb      	str	r3, [r7, #8]
  return count;
 80100c6:	68bb      	ldr	r3, [r7, #8]
}
 80100c8:	0018      	movs	r0, r3
 80100ca:	46bd      	mov	sp, r7
 80100cc:	b004      	add	sp, #16
 80100ce:	bd80      	pop	{r7, pc}

080100d0 <ReverseByteStuffCopyByte2>:
 * @param  Source1 input data
 * @param  Dest the destination data
 * @retval Number of input bytes processed (1 or 2) or 0 for invalid sequence
 */
int ReverseByteStuffCopyByte2(uint8_t Source0, uint8_t Source1, uint8_t *Dest)
{
 80100d0:	b580      	push	{r7, lr}
 80100d2:	b082      	sub	sp, #8
 80100d4:	af00      	add	r7, sp, #0
 80100d6:	603a      	str	r2, [r7, #0]
 80100d8:	1dfb      	adds	r3, r7, #7
 80100da:	1c02      	adds	r2, r0, #0
 80100dc:	701a      	strb	r2, [r3, #0]
 80100de:	1dbb      	adds	r3, r7, #6
 80100e0:	1c0a      	adds	r2, r1, #0
 80100e2:	701a      	strb	r2, [r3, #0]
  if (Source0 == (uint8_t)TMsg_BS)
 80100e4:	1dfb      	adds	r3, r7, #7
 80100e6:	781b      	ldrb	r3, [r3, #0]
 80100e8:	2bf1      	cmp	r3, #241	; 0xf1
 80100ea:	d113      	bne.n	8010114 <ReverseByteStuffCopyByte2+0x44>
  {
    if (Source1 == (uint8_t)TMsg_BS)
 80100ec:	1dbb      	adds	r3, r7, #6
 80100ee:	781b      	ldrb	r3, [r3, #0]
 80100f0:	2bf1      	cmp	r3, #241	; 0xf1
 80100f2:	d104      	bne.n	80100fe <ReverseByteStuffCopyByte2+0x2e>
    {
      *Dest = TMsg_BS;
 80100f4:	683b      	ldr	r3, [r7, #0]
 80100f6:	22f1      	movs	r2, #241	; 0xf1
 80100f8:	701a      	strb	r2, [r3, #0]
      return 2;
 80100fa:	2302      	movs	r3, #2
 80100fc:	e00f      	b.n	801011e <ReverseByteStuffCopyByte2+0x4e>
    }

    if (Source1 == (uint8_t)TMsg_BS_EOF)
 80100fe:	1dbb      	adds	r3, r7, #6
 8010100:	781b      	ldrb	r3, [r3, #0]
 8010102:	2bf2      	cmp	r3, #242	; 0xf2
 8010104:	d104      	bne.n	8010110 <ReverseByteStuffCopyByte2+0x40>
    {
      *Dest = TMsg_EOF;
 8010106:	683b      	ldr	r3, [r7, #0]
 8010108:	22f0      	movs	r2, #240	; 0xf0
 801010a:	701a      	strb	r2, [r3, #0]
      return 2;
 801010c:	2302      	movs	r3, #2
 801010e:	e006      	b.n	801011e <ReverseByteStuffCopyByte2+0x4e>
    }

    return 0; // invalid sequence
 8010110:	2300      	movs	r3, #0
 8010112:	e004      	b.n	801011e <ReverseByteStuffCopyByte2+0x4e>
  }
  else
  {
    *Dest = Source0;
 8010114:	683b      	ldr	r3, [r7, #0]
 8010116:	1dfa      	adds	r2, r7, #7
 8010118:	7812      	ldrb	r2, [r2, #0]
 801011a:	701a      	strb	r2, [r3, #0]
    return 1;
 801011c:	2301      	movs	r3, #1
  }
}
 801011e:	0018      	movs	r0, r3
 8010120:	46bd      	mov	sp, r7
 8010122:	b002      	add	sp, #8
 8010124:	bd80      	pop	{r7, pc}

08010126 <CHK_ComputeAndAdd>:
 * @brief  Compute and add checksum
 * @param  Msg pointer to the message
 * @retval None
 */
void CHK_ComputeAndAdd(TMsg *Msg)
{
 8010126:	b580      	push	{r7, lr}
 8010128:	b084      	sub	sp, #16
 801012a:	af00      	add	r7, sp, #0
 801012c:	6078      	str	r0, [r7, #4]
  uint8_t chk = 0;
 801012e:	230f      	movs	r3, #15
 8010130:	18fb      	adds	r3, r7, r3
 8010132:	2200      	movs	r2, #0
 8010134:	701a      	strb	r2, [r3, #0]
  uint32_t i;

  for (i = 0; i < Msg->Len; i++)
 8010136:	2300      	movs	r3, #0
 8010138:	60bb      	str	r3, [r7, #8]
 801013a:	e00d      	b.n	8010158 <CHK_ComputeAndAdd+0x32>
  {
    chk -= Msg->Data[i];
 801013c:	687a      	ldr	r2, [r7, #4]
 801013e:	68bb      	ldr	r3, [r7, #8]
 8010140:	18d3      	adds	r3, r2, r3
 8010142:	3304      	adds	r3, #4
 8010144:	781a      	ldrb	r2, [r3, #0]
 8010146:	210f      	movs	r1, #15
 8010148:	187b      	adds	r3, r7, r1
 801014a:	1879      	adds	r1, r7, r1
 801014c:	7809      	ldrb	r1, [r1, #0]
 801014e:	1a8a      	subs	r2, r1, r2
 8010150:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < Msg->Len; i++)
 8010152:	68bb      	ldr	r3, [r7, #8]
 8010154:	3301      	adds	r3, #1
 8010156:	60bb      	str	r3, [r7, #8]
 8010158:	687b      	ldr	r3, [r7, #4]
 801015a:	681b      	ldr	r3, [r3, #0]
 801015c:	68ba      	ldr	r2, [r7, #8]
 801015e:	429a      	cmp	r2, r3
 8010160:	d3ec      	bcc.n	801013c <CHK_ComputeAndAdd+0x16>
  }

  Msg->Data[i] = chk;
 8010162:	687a      	ldr	r2, [r7, #4]
 8010164:	68bb      	ldr	r3, [r7, #8]
 8010166:	18d3      	adds	r3, r2, r3
 8010168:	3304      	adds	r3, #4
 801016a:	220f      	movs	r2, #15
 801016c:	18ba      	adds	r2, r7, r2
 801016e:	7812      	ldrb	r2, [r2, #0]
 8010170:	701a      	strb	r2, [r3, #0]
  Msg->Len++;
 8010172:	687b      	ldr	r3, [r7, #4]
 8010174:	681b      	ldr	r3, [r3, #0]
 8010176:	1c5a      	adds	r2, r3, #1
 8010178:	687b      	ldr	r3, [r7, #4]
 801017a:	601a      	str	r2, [r3, #0]
}
 801017c:	46c0      	nop			; (mov r8, r8)
 801017e:	46bd      	mov	sp, r7
 8010180:	b004      	add	sp, #16
 8010182:	bd80      	pop	{r7, pc}

08010184 <CHK_CheckAndRemove>:
 * @brief  Compute and remove checksum
 * @param  Msg pointer to the message
 * @retval A number different from 0 if the operation succeeds, 0 if an error occurs
 */
int CHK_CheckAndRemove(TMsg *Msg)
{
 8010184:	b580      	push	{r7, lr}
 8010186:	b084      	sub	sp, #16
 8010188:	af00      	add	r7, sp, #0
 801018a:	6078      	str	r0, [r7, #4]
  uint8_t chk = 0;
 801018c:	230f      	movs	r3, #15
 801018e:	18fb      	adds	r3, r7, r3
 8010190:	2200      	movs	r2, #0
 8010192:	701a      	strb	r2, [r3, #0]
  uint32_t i;

  for (i = 0; i < Msg->Len; i++)
 8010194:	2300      	movs	r3, #0
 8010196:	60bb      	str	r3, [r7, #8]
 8010198:	e00d      	b.n	80101b6 <CHK_CheckAndRemove+0x32>
  {
    chk += Msg->Data[i];
 801019a:	687a      	ldr	r2, [r7, #4]
 801019c:	68bb      	ldr	r3, [r7, #8]
 801019e:	18d3      	adds	r3, r2, r3
 80101a0:	3304      	adds	r3, #4
 80101a2:	7819      	ldrb	r1, [r3, #0]
 80101a4:	220f      	movs	r2, #15
 80101a6:	18bb      	adds	r3, r7, r2
 80101a8:	18ba      	adds	r2, r7, r2
 80101aa:	7812      	ldrb	r2, [r2, #0]
 80101ac:	188a      	adds	r2, r1, r2
 80101ae:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < Msg->Len; i++)
 80101b0:	68bb      	ldr	r3, [r7, #8]
 80101b2:	3301      	adds	r3, #1
 80101b4:	60bb      	str	r3, [r7, #8]
 80101b6:	687b      	ldr	r3, [r7, #4]
 80101b8:	681b      	ldr	r3, [r3, #0]
 80101ba:	68ba      	ldr	r2, [r7, #8]
 80101bc:	429a      	cmp	r2, r3
 80101be:	d3ec      	bcc.n	801019a <CHK_CheckAndRemove+0x16>
  }

  Msg->Len--;
 80101c0:	687b      	ldr	r3, [r7, #4]
 80101c2:	681b      	ldr	r3, [r3, #0]
 80101c4:	1e5a      	subs	r2, r3, #1
 80101c6:	687b      	ldr	r3, [r7, #4]
 80101c8:	601a      	str	r2, [r3, #0]
  return (int32_t)(chk == 0U);
 80101ca:	230f      	movs	r3, #15
 80101cc:	18fb      	adds	r3, r7, r3
 80101ce:	781b      	ldrb	r3, [r3, #0]
 80101d0:	425a      	negs	r2, r3
 80101d2:	4153      	adcs	r3, r2
 80101d4:	b2db      	uxtb	r3, r3
}
 80101d6:	0018      	movs	r0, r3
 80101d8:	46bd      	mov	sp, r7
 80101da:	b004      	add	sp, #16
 80101dc:	bd80      	pop	{r7, pc}

080101de <Deserialize>:
 * @param  Source source
 * @param  Len number of bytes
 * @retval Rebuild unsigned int variable
 */
uint32_t Deserialize(uint8_t *Source, uint32_t Len)
{
 80101de:	b580      	push	{r7, lr}
 80101e0:	b084      	sub	sp, #16
 80101e2:	af00      	add	r7, sp, #0
 80101e4:	6078      	str	r0, [r7, #4]
 80101e6:	6039      	str	r1, [r7, #0]
  uint32_t app;

  app = Source[--Len];
 80101e8:	683b      	ldr	r3, [r7, #0]
 80101ea:	3b01      	subs	r3, #1
 80101ec:	603b      	str	r3, [r7, #0]
 80101ee:	687a      	ldr	r2, [r7, #4]
 80101f0:	683b      	ldr	r3, [r7, #0]
 80101f2:	18d3      	adds	r3, r2, r3
 80101f4:	781b      	ldrb	r3, [r3, #0]
 80101f6:	60fb      	str	r3, [r7, #12]
  while (Len > 0U)
 80101f8:	e00d      	b.n	8010216 <Deserialize+0x38>
  {
    app <<= 8;
 80101fa:	68fb      	ldr	r3, [r7, #12]
 80101fc:	021b      	lsls	r3, r3, #8
 80101fe:	60fb      	str	r3, [r7, #12]
    app += Source[--Len];
 8010200:	683b      	ldr	r3, [r7, #0]
 8010202:	3b01      	subs	r3, #1
 8010204:	603b      	str	r3, [r7, #0]
 8010206:	687a      	ldr	r2, [r7, #4]
 8010208:	683b      	ldr	r3, [r7, #0]
 801020a:	18d3      	adds	r3, r2, r3
 801020c:	781b      	ldrb	r3, [r3, #0]
 801020e:	001a      	movs	r2, r3
 8010210:	68fb      	ldr	r3, [r7, #12]
 8010212:	189b      	adds	r3, r3, r2
 8010214:	60fb      	str	r3, [r7, #12]
  while (Len > 0U)
 8010216:	683b      	ldr	r3, [r7, #0]
 8010218:	2b00      	cmp	r3, #0
 801021a:	d1ee      	bne.n	80101fa <Deserialize+0x1c>
  }

  return app;
 801021c:	68fb      	ldr	r3, [r7, #12]
}
 801021e:	0018      	movs	r0, r3
 8010220:	46bd      	mov	sp, r7
 8010222:	b004      	add	sp, #16
 8010224:	bd80      	pop	{r7, pc}

08010226 <Serialize_s32>:
 * @param  Source source
 * @param  Len number of bytes
 * @retval None
 */
void Serialize_s32(uint8_t *Dest, int32_t Source, uint32_t Len)
{
 8010226:	b580      	push	{r7, lr}
 8010228:	b086      	sub	sp, #24
 801022a:	af00      	add	r7, sp, #0
 801022c:	60f8      	str	r0, [r7, #12]
 801022e:	60b9      	str	r1, [r7, #8]
 8010230:	607a      	str	r2, [r7, #4]
  uint32_t i;
  uint32_t source_uint32;

  for (i = 0; i < Len; i++)
 8010232:	2300      	movs	r3, #0
 8010234:	617b      	str	r3, [r7, #20]
 8010236:	e00f      	b.n	8010258 <Serialize_s32+0x32>
  {
    source_uint32 = (uint32_t)Source;
 8010238:	68bb      	ldr	r3, [r7, #8]
 801023a:	613b      	str	r3, [r7, #16]
    Dest[i] = (uint8_t)(source_uint32 & 0xFFU);
 801023c:	68fa      	ldr	r2, [r7, #12]
 801023e:	697b      	ldr	r3, [r7, #20]
 8010240:	18d3      	adds	r3, r2, r3
 8010242:	693a      	ldr	r2, [r7, #16]
 8010244:	b2d2      	uxtb	r2, r2
 8010246:	701a      	strb	r2, [r3, #0]
    source_uint32 >>= 8;
 8010248:	693b      	ldr	r3, [r7, #16]
 801024a:	0a1b      	lsrs	r3, r3, #8
 801024c:	613b      	str	r3, [r7, #16]
    Source = (int32_t)source_uint32;
 801024e:	693b      	ldr	r3, [r7, #16]
 8010250:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < Len; i++)
 8010252:	697b      	ldr	r3, [r7, #20]
 8010254:	3301      	adds	r3, #1
 8010256:	617b      	str	r3, [r7, #20]
 8010258:	697a      	ldr	r2, [r7, #20]
 801025a:	687b      	ldr	r3, [r7, #4]
 801025c:	429a      	cmp	r2, r3
 801025e:	d3eb      	bcc.n	8010238 <Serialize_s32+0x12>
  }
}
 8010260:	46c0      	nop			; (mov r8, r8)
 8010262:	46c0      	nop			; (mov r8, r8)
 8010264:	46bd      	mov	sp, r7
 8010266:	b006      	add	sp, #24
 8010268:	bd80      	pop	{r7, pc}
	...

0801026c <rotate>:
 801026c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801026e:	0006      	movs	r6, r0
 8010270:	2000      	movs	r0, #0
 8010272:	0014      	movs	r4, r2
 8010274:	5608      	ldrsb	r0, [r1, r0]
 8010276:	000d      	movs	r5, r1
 8010278:	f7f1 f8a2 	bl	80013c0 <__aeabi_i2f>
 801027c:	6821      	ldr	r1, [r4, #0]
 801027e:	f7f0 fd95 	bl	8000dac <__aeabi_fmul>
 8010282:	1c07      	adds	r7, r0, #0
 8010284:	2001      	movs	r0, #1
 8010286:	5628      	ldrsb	r0, [r5, r0]
 8010288:	f7f1 f89a 	bl	80013c0 <__aeabi_i2f>
 801028c:	6861      	ldr	r1, [r4, #4]
 801028e:	f7f0 fd8d 	bl	8000dac <__aeabi_fmul>
 8010292:	1c01      	adds	r1, r0, #0
 8010294:	1c38      	adds	r0, r7, #0
 8010296:	f7f0 fa23 	bl	80006e0 <__aeabi_fadd>
 801029a:	1c07      	adds	r7, r0, #0
 801029c:	2002      	movs	r0, #2
 801029e:	5628      	ldrsb	r0, [r5, r0]
 80102a0:	f7f1 f88e 	bl	80013c0 <__aeabi_i2f>
 80102a4:	68a1      	ldr	r1, [r4, #8]
 80102a6:	f7f0 fd81 	bl	8000dac <__aeabi_fmul>
 80102aa:	1c01      	adds	r1, r0, #0
 80102ac:	1c38      	adds	r0, r7, #0
 80102ae:	f7f0 fa17 	bl	80006e0 <__aeabi_fadd>
 80102b2:	6030      	str	r0, [r6, #0]
 80102b4:	2003      	movs	r0, #3
 80102b6:	5628      	ldrsb	r0, [r5, r0]
 80102b8:	f7f1 f882 	bl	80013c0 <__aeabi_i2f>
 80102bc:	6821      	ldr	r1, [r4, #0]
 80102be:	f7f0 fd75 	bl	8000dac <__aeabi_fmul>
 80102c2:	1c07      	adds	r7, r0, #0
 80102c4:	2004      	movs	r0, #4
 80102c6:	5628      	ldrsb	r0, [r5, r0]
 80102c8:	f7f1 f87a 	bl	80013c0 <__aeabi_i2f>
 80102cc:	6861      	ldr	r1, [r4, #4]
 80102ce:	f7f0 fd6d 	bl	8000dac <__aeabi_fmul>
 80102d2:	1c01      	adds	r1, r0, #0
 80102d4:	1c38      	adds	r0, r7, #0
 80102d6:	f7f0 fa03 	bl	80006e0 <__aeabi_fadd>
 80102da:	1c07      	adds	r7, r0, #0
 80102dc:	2005      	movs	r0, #5
 80102de:	5628      	ldrsb	r0, [r5, r0]
 80102e0:	f7f1 f86e 	bl	80013c0 <__aeabi_i2f>
 80102e4:	68a1      	ldr	r1, [r4, #8]
 80102e6:	f7f0 fd61 	bl	8000dac <__aeabi_fmul>
 80102ea:	1c01      	adds	r1, r0, #0
 80102ec:	1c38      	adds	r0, r7, #0
 80102ee:	f7f0 f9f7 	bl	80006e0 <__aeabi_fadd>
 80102f2:	6070      	str	r0, [r6, #4]
 80102f4:	2006      	movs	r0, #6
 80102f6:	5628      	ldrsb	r0, [r5, r0]
 80102f8:	f7f1 f862 	bl	80013c0 <__aeabi_i2f>
 80102fc:	6821      	ldr	r1, [r4, #0]
 80102fe:	f7f0 fd55 	bl	8000dac <__aeabi_fmul>
 8010302:	1c07      	adds	r7, r0, #0
 8010304:	2007      	movs	r0, #7
 8010306:	5628      	ldrsb	r0, [r5, r0]
 8010308:	f7f1 f85a 	bl	80013c0 <__aeabi_i2f>
 801030c:	6861      	ldr	r1, [r4, #4]
 801030e:	f7f0 fd4d 	bl	8000dac <__aeabi_fmul>
 8010312:	1c01      	adds	r1, r0, #0
 8010314:	1c38      	adds	r0, r7, #0
 8010316:	f7f0 f9e3 	bl	80006e0 <__aeabi_fadd>
 801031a:	1c07      	adds	r7, r0, #0
 801031c:	2008      	movs	r0, #8
 801031e:	5628      	ldrsb	r0, [r5, r0]
 8010320:	f7f1 f84e 	bl	80013c0 <__aeabi_i2f>
 8010324:	68a1      	ldr	r1, [r4, #8]
 8010326:	f7f0 fd41 	bl	8000dac <__aeabi_fmul>
 801032a:	1c01      	adds	r1, r0, #0
 801032c:	1c38      	adds	r0, r7, #0
 801032e:	f7f0 f9d7 	bl	80006e0 <__aeabi_fadd>
 8010332:	60b0      	str	r0, [r6, #8]
 8010334:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010336:	46c0      	nop			; (mov r8, r8)

08010338 <inemo_set_orientation>:
 8010338:	b530      	push	{r4, r5, lr}
 801033a:	000d      	movs	r5, r1
 801033c:	2209      	movs	r2, #9
 801033e:	2100      	movs	r1, #0
 8010340:	b083      	sub	sp, #12
 8010342:	0004      	movs	r4, r0
 8010344:	f003 fb8f 	bl	8013a66 <memset>
 8010348:	782b      	ldrb	r3, [r5, #0]
 801034a:	001a      	movs	r2, r3
 801034c:	3a42      	subs	r2, #66	; 0x42
 801034e:	2a17      	cmp	r2, #23
 8010350:	d934      	bls.n	80103bc <inemo_set_orientation+0x84>
 8010352:	aa01      	add	r2, sp, #4
 8010354:	7013      	strb	r3, [r2, #0]
 8010356:	786b      	ldrb	r3, [r5, #1]
 8010358:	0019      	movs	r1, r3
 801035a:	3942      	subs	r1, #66	; 0x42
 801035c:	2917      	cmp	r1, #23
 801035e:	d800      	bhi.n	8010362 <inemo_set_orientation+0x2a>
 8010360:	3320      	adds	r3, #32
 8010362:	7053      	strb	r3, [r2, #1]
 8010364:	78ab      	ldrb	r3, [r5, #2]
 8010366:	0019      	movs	r1, r3
 8010368:	3942      	subs	r1, #66	; 0x42
 801036a:	2917      	cmp	r1, #23
 801036c:	d824      	bhi.n	80103b8 <inemo_set_orientation+0x80>
 801036e:	3320      	adds	r3, #32
 8010370:	7093      	strb	r3, [r2, #2]
 8010372:	7813      	ldrb	r3, [r2, #0]
 8010374:	3b64      	subs	r3, #100	; 0x64
 8010376:	b2db      	uxtb	r3, r3
 8010378:	2b13      	cmp	r3, #19
 801037a:	d805      	bhi.n	8010388 <inemo_set_orientation+0x50>
 801037c:	4928      	ldr	r1, [pc, #160]	; (8010420 <inemo_set_orientation+0xe8>)
 801037e:	009b      	lsls	r3, r3, #2
 8010380:	58cb      	ldr	r3, [r1, r3]
 8010382:	469f      	mov	pc, r3
 8010384:	23ff      	movs	r3, #255	; 0xff
 8010386:	71a3      	strb	r3, [r4, #6]
 8010388:	7853      	ldrb	r3, [r2, #1]
 801038a:	3b64      	subs	r3, #100	; 0x64
 801038c:	b2db      	uxtb	r3, r3
 801038e:	2b13      	cmp	r3, #19
 8010390:	d805      	bhi.n	801039e <inemo_set_orientation+0x66>
 8010392:	4924      	ldr	r1, [pc, #144]	; (8010424 <inemo_set_orientation+0xec>)
 8010394:	009b      	lsls	r3, r3, #2
 8010396:	58cb      	ldr	r3, [r1, r3]
 8010398:	469f      	mov	pc, r3
 801039a:	23ff      	movs	r3, #255	; 0xff
 801039c:	71e3      	strb	r3, [r4, #7]
 801039e:	7893      	ldrb	r3, [r2, #2]
 80103a0:	3b64      	subs	r3, #100	; 0x64
 80103a2:	b2db      	uxtb	r3, r3
 80103a4:	2b13      	cmp	r3, #19
 80103a6:	d805      	bhi.n	80103b4 <inemo_set_orientation+0x7c>
 80103a8:	4a1f      	ldr	r2, [pc, #124]	; (8010428 <inemo_set_orientation+0xf0>)
 80103aa:	009b      	lsls	r3, r3, #2
 80103ac:	58d3      	ldr	r3, [r2, r3]
 80103ae:	469f      	mov	pc, r3
 80103b0:	23ff      	movs	r3, #255	; 0xff
 80103b2:	7223      	strb	r3, [r4, #8]
 80103b4:	b003      	add	sp, #12
 80103b6:	bd30      	pop	{r4, r5, pc}
 80103b8:	7093      	strb	r3, [r2, #2]
 80103ba:	e7da      	b.n	8010372 <inemo_set_orientation+0x3a>
 80103bc:	aa01      	add	r2, sp, #4
 80103be:	3320      	adds	r3, #32
 80103c0:	7013      	strb	r3, [r2, #0]
 80103c2:	e7c8      	b.n	8010356 <inemo_set_orientation+0x1e>
 80103c4:	23ff      	movs	r3, #255	; 0xff
 80103c6:	70a3      	strb	r3, [r4, #2]
 80103c8:	e7f4      	b.n	80103b4 <inemo_set_orientation+0x7c>
 80103ca:	2301      	movs	r3, #1
 80103cc:	7023      	strb	r3, [r4, #0]
 80103ce:	e7db      	b.n	8010388 <inemo_set_orientation+0x50>
 80103d0:	2301      	movs	r3, #1
 80103d2:	70e3      	strb	r3, [r4, #3]
 80103d4:	e7d8      	b.n	8010388 <inemo_set_orientation+0x50>
 80103d6:	23ff      	movs	r3, #255	; 0xff
 80103d8:	70e3      	strb	r3, [r4, #3]
 80103da:	e7d5      	b.n	8010388 <inemo_set_orientation+0x50>
 80103dc:	2301      	movs	r3, #1
 80103de:	71a3      	strb	r3, [r4, #6]
 80103e0:	e7d2      	b.n	8010388 <inemo_set_orientation+0x50>
 80103e2:	23ff      	movs	r3, #255	; 0xff
 80103e4:	7023      	strb	r3, [r4, #0]
 80103e6:	e7cf      	b.n	8010388 <inemo_set_orientation+0x50>
 80103e8:	2301      	movs	r3, #1
 80103ea:	7063      	strb	r3, [r4, #1]
 80103ec:	e7d7      	b.n	801039e <inemo_set_orientation+0x66>
 80103ee:	2301      	movs	r3, #1
 80103f0:	7123      	strb	r3, [r4, #4]
 80103f2:	e7d4      	b.n	801039e <inemo_set_orientation+0x66>
 80103f4:	23ff      	movs	r3, #255	; 0xff
 80103f6:	7123      	strb	r3, [r4, #4]
 80103f8:	e7d1      	b.n	801039e <inemo_set_orientation+0x66>
 80103fa:	2301      	movs	r3, #1
 80103fc:	71e3      	strb	r3, [r4, #7]
 80103fe:	e7ce      	b.n	801039e <inemo_set_orientation+0x66>
 8010400:	23ff      	movs	r3, #255	; 0xff
 8010402:	7063      	strb	r3, [r4, #1]
 8010404:	e7cb      	b.n	801039e <inemo_set_orientation+0x66>
 8010406:	2301      	movs	r3, #1
 8010408:	70a3      	strb	r3, [r4, #2]
 801040a:	e7d3      	b.n	80103b4 <inemo_set_orientation+0x7c>
 801040c:	2301      	movs	r3, #1
 801040e:	7163      	strb	r3, [r4, #5]
 8010410:	e7d0      	b.n	80103b4 <inemo_set_orientation+0x7c>
 8010412:	23ff      	movs	r3, #255	; 0xff
 8010414:	7163      	strb	r3, [r4, #5]
 8010416:	e7cd      	b.n	80103b4 <inemo_set_orientation+0x7c>
 8010418:	2301      	movs	r3, #1
 801041a:	7223      	strb	r3, [r4, #8]
 801041c:	e7ca      	b.n	80103b4 <inemo_set_orientation+0x7c>
 801041e:	46c0      	nop			; (mov r8, r8)
 8010420:	08015a38 	.word	0x08015a38
 8010424:	08015a88 	.word	0x08015a88
 8010428:	08015ad8 	.word	0x08015ad8

0801042c <quat_mult>:
 801042c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801042e:	46c6      	mov	lr, r8
 8010430:	000c      	movs	r4, r1
 8010432:	b500      	push	{lr}
 8010434:	6811      	ldr	r1, [r2, #0]
 8010436:	0006      	movs	r6, r0
 8010438:	68e0      	ldr	r0, [r4, #12]
 801043a:	0015      	movs	r5, r2
 801043c:	f7f0 fcb6 	bl	8000dac <__aeabi_fmul>
 8010440:	68e9      	ldr	r1, [r5, #12]
 8010442:	1c07      	adds	r7, r0, #0
 8010444:	6820      	ldr	r0, [r4, #0]
 8010446:	f7f0 fcb1 	bl	8000dac <__aeabi_fmul>
 801044a:	1c01      	adds	r1, r0, #0
 801044c:	1c38      	adds	r0, r7, #0
 801044e:	f7f0 f947 	bl	80006e0 <__aeabi_fadd>
 8010452:	68a9      	ldr	r1, [r5, #8]
 8010454:	1c07      	adds	r7, r0, #0
 8010456:	6860      	ldr	r0, [r4, #4]
 8010458:	f7f0 fca8 	bl	8000dac <__aeabi_fmul>
 801045c:	1c01      	adds	r1, r0, #0
 801045e:	1c38      	adds	r0, r7, #0
 8010460:	f7f0 f93e 	bl	80006e0 <__aeabi_fadd>
 8010464:	6869      	ldr	r1, [r5, #4]
 8010466:	1c07      	adds	r7, r0, #0
 8010468:	68a0      	ldr	r0, [r4, #8]
 801046a:	f7f0 fc9f 	bl	8000dac <__aeabi_fmul>
 801046e:	1c01      	adds	r1, r0, #0
 8010470:	1c38      	adds	r0, r7, #0
 8010472:	f7f0 fdc1 	bl	8000ff8 <__aeabi_fsub>
 8010476:	6030      	str	r0, [r6, #0]
 8010478:	6869      	ldr	r1, [r5, #4]
 801047a:	68e0      	ldr	r0, [r4, #12]
 801047c:	f7f0 fc96 	bl	8000dac <__aeabi_fmul>
 8010480:	68e9      	ldr	r1, [r5, #12]
 8010482:	1c07      	adds	r7, r0, #0
 8010484:	6860      	ldr	r0, [r4, #4]
 8010486:	f7f0 fc91 	bl	8000dac <__aeabi_fmul>
 801048a:	1c01      	adds	r1, r0, #0
 801048c:	1c38      	adds	r0, r7, #0
 801048e:	f7f0 f927 	bl	80006e0 <__aeabi_fadd>
 8010492:	6829      	ldr	r1, [r5, #0]
 8010494:	1c07      	adds	r7, r0, #0
 8010496:	68a0      	ldr	r0, [r4, #8]
 8010498:	f7f0 fc88 	bl	8000dac <__aeabi_fmul>
 801049c:	1c01      	adds	r1, r0, #0
 801049e:	1c38      	adds	r0, r7, #0
 80104a0:	f7f0 f91e 	bl	80006e0 <__aeabi_fadd>
 80104a4:	68a9      	ldr	r1, [r5, #8]
 80104a6:	1c07      	adds	r7, r0, #0
 80104a8:	6820      	ldr	r0, [r4, #0]
 80104aa:	f7f0 fc7f 	bl	8000dac <__aeabi_fmul>
 80104ae:	1c01      	adds	r1, r0, #0
 80104b0:	1c38      	adds	r0, r7, #0
 80104b2:	f7f0 fda1 	bl	8000ff8 <__aeabi_fsub>
 80104b6:	6070      	str	r0, [r6, #4]
 80104b8:	68a9      	ldr	r1, [r5, #8]
 80104ba:	68e0      	ldr	r0, [r4, #12]
 80104bc:	f7f0 fc76 	bl	8000dac <__aeabi_fmul>
 80104c0:	6869      	ldr	r1, [r5, #4]
 80104c2:	1c07      	adds	r7, r0, #0
 80104c4:	6820      	ldr	r0, [r4, #0]
 80104c6:	f7f0 fc71 	bl	8000dac <__aeabi_fmul>
 80104ca:	1c01      	adds	r1, r0, #0
 80104cc:	1c38      	adds	r0, r7, #0
 80104ce:	f7f0 f907 	bl	80006e0 <__aeabi_fadd>
 80104d2:	68e9      	ldr	r1, [r5, #12]
 80104d4:	1c07      	adds	r7, r0, #0
 80104d6:	68a0      	ldr	r0, [r4, #8]
 80104d8:	f7f0 fc68 	bl	8000dac <__aeabi_fmul>
 80104dc:	1c01      	adds	r1, r0, #0
 80104de:	1c38      	adds	r0, r7, #0
 80104e0:	f7f0 f8fe 	bl	80006e0 <__aeabi_fadd>
 80104e4:	6829      	ldr	r1, [r5, #0]
 80104e6:	1c07      	adds	r7, r0, #0
 80104e8:	6860      	ldr	r0, [r4, #4]
 80104ea:	f7f0 fc5f 	bl	8000dac <__aeabi_fmul>
 80104ee:	1c01      	adds	r1, r0, #0
 80104f0:	1c38      	adds	r0, r7, #0
 80104f2:	f7f0 fd81 	bl	8000ff8 <__aeabi_fsub>
 80104f6:	60b0      	str	r0, [r6, #8]
 80104f8:	68e9      	ldr	r1, [r5, #12]
 80104fa:	68e0      	ldr	r0, [r4, #12]
 80104fc:	f7f0 fc56 	bl	8000dac <__aeabi_fmul>
 8010500:	6829      	ldr	r1, [r5, #0]
 8010502:	1c07      	adds	r7, r0, #0
 8010504:	6820      	ldr	r0, [r4, #0]
 8010506:	f7f0 fc51 	bl	8000dac <__aeabi_fmul>
 801050a:	6869      	ldr	r1, [r5, #4]
 801050c:	4680      	mov	r8, r0
 801050e:	6860      	ldr	r0, [r4, #4]
 8010510:	f7f0 fc4c 	bl	8000dac <__aeabi_fmul>
 8010514:	1c01      	adds	r1, r0, #0
 8010516:	4640      	mov	r0, r8
 8010518:	f7f0 f8e2 	bl	80006e0 <__aeabi_fadd>
 801051c:	1c01      	adds	r1, r0, #0
 801051e:	1c38      	adds	r0, r7, #0
 8010520:	f7f0 fd6a 	bl	8000ff8 <__aeabi_fsub>
 8010524:	68a9      	ldr	r1, [r5, #8]
 8010526:	1c07      	adds	r7, r0, #0
 8010528:	68a0      	ldr	r0, [r4, #8]
 801052a:	f7f0 fc3f 	bl	8000dac <__aeabi_fmul>
 801052e:	1c01      	adds	r1, r0, #0
 8010530:	1c38      	adds	r0, r7, #0
 8010532:	f7f0 fd61 	bl	8000ff8 <__aeabi_fsub>
 8010536:	60f0      	str	r0, [r6, #12]
 8010538:	bc80      	pop	{r7}
 801053a:	46b8      	mov	r8, r7
 801053c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801053e:	46c0      	nop			; (mov r8, r8)

08010540 <quat_rot>:
 8010540:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010542:	46c6      	mov	lr, r8
 8010544:	b500      	push	{lr}
 8010546:	b090      	sub	sp, #64	; 0x40
 8010548:	000c      	movs	r4, r1
 801054a:	0005      	movs	r5, r0
 801054c:	0011      	movs	r1, r2
 801054e:	a808      	add	r0, sp, #32
 8010550:	220c      	movs	r2, #12
 8010552:	f003 fa7f 	bl	8013a54 <memcpy>
 8010556:	2280      	movs	r2, #128	; 0x80
 8010558:	2300      	movs	r3, #0
 801055a:	0612      	lsls	r2, r2, #24
 801055c:	4694      	mov	ip, r2
 801055e:	930b      	str	r3, [sp, #44]	; 0x2c
 8010560:	6823      	ldr	r3, [r4, #0]
 8010562:	0021      	movs	r1, r4
 8010564:	4463      	add	r3, ip
 8010566:	9300      	str	r3, [sp, #0]
 8010568:	6863      	ldr	r3, [r4, #4]
 801056a:	aa08      	add	r2, sp, #32
 801056c:	4463      	add	r3, ip
 801056e:	9301      	str	r3, [sp, #4]
 8010570:	68a3      	ldr	r3, [r4, #8]
 8010572:	a804      	add	r0, sp, #16
 8010574:	4463      	add	r3, ip
 8010576:	9302      	str	r3, [sp, #8]
 8010578:	68e3      	ldr	r3, [r4, #12]
 801057a:	9303      	str	r3, [sp, #12]
 801057c:	f7ff ff56 	bl	801042c <quat_mult>
 8010580:	466a      	mov	r2, sp
 8010582:	a904      	add	r1, sp, #16
 8010584:	a80c      	add	r0, sp, #48	; 0x30
 8010586:	f7ff ff51 	bl	801042c <quat_mult>
 801058a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801058c:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 801058e:	1c19      	adds	r1, r3, #0
 8010590:	1c18      	adds	r0, r3, #0
 8010592:	4698      	mov	r8, r3
 8010594:	f7f0 fc0a 	bl	8000dac <__aeabi_fmul>
 8010598:	1c39      	adds	r1, r7, #0
 801059a:	1c04      	adds	r4, r0, #0
 801059c:	1c38      	adds	r0, r7, #0
 801059e:	f7f0 fc05 	bl	8000dac <__aeabi_fmul>
 80105a2:	1c01      	adds	r1, r0, #0
 80105a4:	1c20      	adds	r0, r4, #0
 80105a6:	f7f0 f89b 	bl	80006e0 <__aeabi_fadd>
 80105aa:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 80105ac:	1c04      	adds	r4, r0, #0
 80105ae:	1c31      	adds	r1, r6, #0
 80105b0:	1c30      	adds	r0, r6, #0
 80105b2:	f7f0 fbfb 	bl	8000dac <__aeabi_fmul>
 80105b6:	1c21      	adds	r1, r4, #0
 80105b8:	f7f0 f892 	bl	80006e0 <__aeabi_fadd>
 80105bc:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80105be:	1c04      	adds	r4, r0, #0
 80105c0:	1c08      	adds	r0, r1, #0
 80105c2:	f7f0 fbf3 	bl	8000dac <__aeabi_fmul>
 80105c6:	1c21      	adds	r1, r4, #0
 80105c8:	f7f0 f88a 	bl	80006e0 <__aeabi_fadd>
 80105cc:	f003 ffd0 	bl	8014570 <sqrtf>
 80105d0:	1c01      	adds	r1, r0, #0
 80105d2:	20fe      	movs	r0, #254	; 0xfe
 80105d4:	0580      	lsls	r0, r0, #22
 80105d6:	f7f0 fa21 	bl	8000a1c <__aeabi_fdiv>
 80105da:	4641      	mov	r1, r8
 80105dc:	1c04      	adds	r4, r0, #0
 80105de:	f7f0 fbe5 	bl	8000dac <__aeabi_fmul>
 80105e2:	1c39      	adds	r1, r7, #0
 80105e4:	900c      	str	r0, [sp, #48]	; 0x30
 80105e6:	1c20      	adds	r0, r4, #0
 80105e8:	f7f0 fbe0 	bl	8000dac <__aeabi_fmul>
 80105ec:	1c31      	adds	r1, r6, #0
 80105ee:	900d      	str	r0, [sp, #52]	; 0x34
 80105f0:	1c20      	adds	r0, r4, #0
 80105f2:	f7f0 fbdb 	bl	8000dac <__aeabi_fmul>
 80105f6:	220c      	movs	r2, #12
 80105f8:	900e      	str	r0, [sp, #56]	; 0x38
 80105fa:	a90c      	add	r1, sp, #48	; 0x30
 80105fc:	0028      	movs	r0, r5
 80105fe:	f003 fa29 	bl	8013a54 <memcpy>
 8010602:	b010      	add	sp, #64	; 0x40
 8010604:	bc80      	pop	{r7}
 8010606:	46b8      	mov	r8, r7
 8010608:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801060a:	46c0      	nop			; (mov r8, r8)

0801060c <quat_2_euler>:
 801060c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801060e:	4645      	mov	r5, r8
 8010610:	4657      	mov	r7, sl
 8010612:	464e      	mov	r6, r9
 8010614:	46de      	mov	lr, fp
 8010616:	b5e0      	push	{r5, r6, r7, lr}
 8010618:	68cf      	ldr	r7, [r1, #12]
 801061a:	4680      	mov	r8, r0
 801061c:	684c      	ldr	r4, [r1, #4]
 801061e:	688d      	ldr	r5, [r1, #8]
 8010620:	680e      	ldr	r6, [r1, #0]
 8010622:	b083      	sub	sp, #12
 8010624:	2100      	movs	r1, #0
 8010626:	1c38      	adds	r0, r7, #0
 8010628:	f7ef ff00 	bl	800042c <__aeabi_fcmplt>
 801062c:	2800      	cmp	r0, #0
 801062e:	d006      	beq.n	801063e <quat_2_euler+0x32>
 8010630:	2380      	movs	r3, #128	; 0x80
 8010632:	061b      	lsls	r3, r3, #24
 8010634:	469c      	mov	ip, r3
 8010636:	4464      	add	r4, ip
 8010638:	4465      	add	r5, ip
 801063a:	4466      	add	r6, ip
 801063c:	4467      	add	r7, ip
 801063e:	1c21      	adds	r1, r4, #0
 8010640:	1c20      	adds	r0, r4, #0
 8010642:	f7f0 fbb3 	bl	8000dac <__aeabi_fmul>
 8010646:	4682      	mov	sl, r0
 8010648:	1c29      	adds	r1, r5, #0
 801064a:	1c28      	adds	r0, r5, #0
 801064c:	f7f0 fbae 	bl	8000dac <__aeabi_fmul>
 8010650:	4651      	mov	r1, sl
 8010652:	f7f0 f845 	bl	80006e0 <__aeabi_fadd>
 8010656:	1c01      	adds	r1, r0, #0
 8010658:	f7f0 f842 	bl	80006e0 <__aeabi_fadd>
 801065c:	1c01      	adds	r1, r0, #0
 801065e:	20fe      	movs	r0, #254	; 0xfe
 8010660:	0580      	lsls	r0, r0, #22
 8010662:	f7f0 fcc9 	bl	8000ff8 <__aeabi_fsub>
 8010666:	1c39      	adds	r1, r7, #0
 8010668:	4681      	mov	r9, r0
 801066a:	1c28      	adds	r0, r5, #0
 801066c:	f7f0 fb9e 	bl	8000dac <__aeabi_fmul>
 8010670:	1c31      	adds	r1, r6, #0
 8010672:	4683      	mov	fp, r0
 8010674:	1c20      	adds	r0, r4, #0
 8010676:	f7f0 fb99 	bl	8000dac <__aeabi_fmul>
 801067a:	1c01      	adds	r1, r0, #0
 801067c:	4658      	mov	r0, fp
 801067e:	f7f0 f82f 	bl	80006e0 <__aeabi_fadd>
 8010682:	1c01      	adds	r1, r0, #0
 8010684:	f7f0 f82c 	bl	80006e0 <__aeabi_fadd>
 8010688:	4649      	mov	r1, r9
 801068a:	f003 ff6d 	bl	8014568 <atan2f>
 801068e:	2380      	movs	r3, #128	; 0x80
 8010690:	4681      	mov	r9, r0
 8010692:	061b      	lsls	r3, r3, #24
 8010694:	444b      	add	r3, r9
 8010696:	1c31      	adds	r1, r6, #0
 8010698:	1c30      	adds	r0, r6, #0
 801069a:	469b      	mov	fp, r3
 801069c:	f7f0 fb86 	bl	8000dac <__aeabi_fmul>
 80106a0:	4651      	mov	r1, sl
 80106a2:	f7f0 f81d 	bl	80006e0 <__aeabi_fadd>
 80106a6:	1c01      	adds	r1, r0, #0
 80106a8:	f7f0 f81a 	bl	80006e0 <__aeabi_fadd>
 80106ac:	1c01      	adds	r1, r0, #0
 80106ae:	20fe      	movs	r0, #254	; 0xfe
 80106b0:	0580      	lsls	r0, r0, #22
 80106b2:	f7f0 fca1 	bl	8000ff8 <__aeabi_fsub>
 80106b6:	1c29      	adds	r1, r5, #0
 80106b8:	9001      	str	r0, [sp, #4]
 80106ba:	1c20      	adds	r0, r4, #0
 80106bc:	f7f0 fb76 	bl	8000dac <__aeabi_fmul>
 80106c0:	1c39      	adds	r1, r7, #0
 80106c2:	4682      	mov	sl, r0
 80106c4:	1c30      	adds	r0, r6, #0
 80106c6:	f7f0 fb71 	bl	8000dac <__aeabi_fmul>
 80106ca:	1c01      	adds	r1, r0, #0
 80106cc:	4650      	mov	r0, sl
 80106ce:	f7f0 f807 	bl	80006e0 <__aeabi_fadd>
 80106d2:	1c01      	adds	r1, r0, #0
 80106d4:	f7f0 f804 	bl	80006e0 <__aeabi_fadd>
 80106d8:	9901      	ldr	r1, [sp, #4]
 80106da:	f003 ff45 	bl	8014568 <atan2f>
 80106de:	2380      	movs	r3, #128	; 0x80
 80106e0:	061b      	lsls	r3, r3, #24
 80106e2:	469c      	mov	ip, r3
 80106e4:	1c31      	adds	r1, r6, #0
 80106e6:	4484      	add	ip, r0
 80106e8:	1c28      	adds	r0, r5, #0
 80106ea:	46e2      	mov	sl, ip
 80106ec:	f7f0 fb5e 	bl	8000dac <__aeabi_fmul>
 80106f0:	1c39      	adds	r1, r7, #0
 80106f2:	1c05      	adds	r5, r0, #0
 80106f4:	1c20      	adds	r0, r4, #0
 80106f6:	f7f0 fb59 	bl	8000dac <__aeabi_fmul>
 80106fa:	1c01      	adds	r1, r0, #0
 80106fc:	1c28      	adds	r0, r5, #0
 80106fe:	f7f0 fc7b 	bl	8000ff8 <__aeabi_fsub>
 8010702:	1c01      	adds	r1, r0, #0
 8010704:	f7ef ffec 	bl	80006e0 <__aeabi_fadd>
 8010708:	f003 ff0e 	bl	8014528 <asinf>
 801070c:	2100      	movs	r1, #0
 801070e:	1c04      	adds	r4, r0, #0
 8010710:	4648      	mov	r0, r9
 8010712:	f7ef fe9f 	bl	8000454 <__aeabi_fcmpgt>
 8010716:	2800      	cmp	r0, #0
 8010718:	d004      	beq.n	8010724 <quat_2_euler+0x118>
 801071a:	4649      	mov	r1, r9
 801071c:	480e      	ldr	r0, [pc, #56]	; (8010758 <quat_2_euler+0x14c>)
 801071e:	f7f0 fc6b 	bl	8000ff8 <__aeabi_fsub>
 8010722:	4683      	mov	fp, r0
 8010724:	4658      	mov	r0, fp
 8010726:	490d      	ldr	r1, [pc, #52]	; (801075c <quat_2_euler+0x150>)
 8010728:	f7f0 fb40 	bl	8000dac <__aeabi_fmul>
 801072c:	4643      	mov	r3, r8
 801072e:	490b      	ldr	r1, [pc, #44]	; (801075c <quat_2_euler+0x150>)
 8010730:	6018      	str	r0, [r3, #0]
 8010732:	4650      	mov	r0, sl
 8010734:	f7f0 fb3a 	bl	8000dac <__aeabi_fmul>
 8010738:	4643      	mov	r3, r8
 801073a:	4908      	ldr	r1, [pc, #32]	; (801075c <quat_2_euler+0x150>)
 801073c:	6058      	str	r0, [r3, #4]
 801073e:	1c20      	adds	r0, r4, #0
 8010740:	f7f0 fb34 	bl	8000dac <__aeabi_fmul>
 8010744:	4643      	mov	r3, r8
 8010746:	6098      	str	r0, [r3, #8]
 8010748:	b003      	add	sp, #12
 801074a:	bcf0      	pop	{r4, r5, r6, r7}
 801074c:	46bb      	mov	fp, r7
 801074e:	46b2      	mov	sl, r6
 8010750:	46a9      	mov	r9, r5
 8010752:	46a0      	mov	r8, r4
 8010754:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010756:	46c0      	nop			; (mov r8, r8)
 8010758:	40c90fdb 	.word	0x40c90fdb
 801075c:	42652ee0 	.word	0x42652ee0

08010760 <update_accel>:
 8010760:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010762:	46de      	mov	lr, fp
 8010764:	464e      	mov	r6, r9
 8010766:	4645      	mov	r5, r8
 8010768:	4657      	mov	r7, sl
 801076a:	4b60      	ldr	r3, [pc, #384]	; (80108ec <update_accel+0x18c>)
 801076c:	b5e0      	push	{r5, r6, r7, lr}
 801076e:	0004      	movs	r4, r0
 8010770:	000d      	movs	r5, r1
 8010772:	1c10      	adds	r0, r2, #0
 8010774:	68d9      	ldr	r1, [r3, #12]
 8010776:	f7f0 fb19 	bl	8000dac <__aeabi_fmul>
 801077a:	495d      	ldr	r1, [pc, #372]	; (80108f0 <update_accel+0x190>)
 801077c:	1c06      	adds	r6, r0, #0
 801077e:	f7ef fe69 	bl	8000454 <__aeabi_fcmpgt>
 8010782:	2800      	cmp	r0, #0
 8010784:	d000      	beq.n	8010788 <update_accel+0x28>
 8010786:	e098      	b.n	80108ba <update_accel+0x15a>
 8010788:	495a      	ldr	r1, [pc, #360]	; (80108f4 <update_accel+0x194>)
 801078a:	1c30      	adds	r0, r6, #0
 801078c:	f7f0 fb0e 	bl	8000dac <__aeabi_fmul>
 8010790:	1c01      	adds	r1, r0, #0
 8010792:	1c07      	adds	r7, r0, #0
 8010794:	20fe      	movs	r0, #254	; 0xfe
 8010796:	0580      	lsls	r0, r0, #22
 8010798:	f7f0 fc2e 	bl	8000ff8 <__aeabi_fsub>
 801079c:	4680      	mov	r8, r0
 801079e:	21d0      	movs	r1, #208	; 0xd0
 80107a0:	682b      	ldr	r3, [r5, #0]
 80107a2:	0589      	lsls	r1, r1, #22
 80107a4:	0058      	lsls	r0, r3, #1
 80107a6:	0840      	lsrs	r0, r0, #1
 80107a8:	f7ef fe40 	bl	800042c <__aeabi_fcmplt>
 80107ac:	2800      	cmp	r0, #0
 80107ae:	d009      	beq.n	80107c4 <update_accel+0x64>
 80107b0:	21d0      	movs	r1, #208	; 0xd0
 80107b2:	686b      	ldr	r3, [r5, #4]
 80107b4:	0589      	lsls	r1, r1, #22
 80107b6:	0058      	lsls	r0, r3, #1
 80107b8:	0840      	lsrs	r0, r0, #1
 80107ba:	f7ef fe37 	bl	800042c <__aeabi_fcmplt>
 80107be:	2800      	cmp	r0, #0
 80107c0:	d000      	beq.n	80107c4 <update_accel+0x64>
 80107c2:	e087      	b.n	80108d4 <update_accel+0x174>
 80107c4:	0023      	movs	r3, r4
 80107c6:	cd07      	ldmia	r5!, {r0, r1, r2}
 80107c8:	c307      	stmia	r3!, {r0, r1, r2}
 80107ca:	6823      	ldr	r3, [r4, #0]
 80107cc:	469b      	mov	fp, r3
 80107ce:	6863      	ldr	r3, [r4, #4]
 80107d0:	4659      	mov	r1, fp
 80107d2:	469a      	mov	sl, r3
 80107d4:	68a3      	ldr	r3, [r4, #8]
 80107d6:	4658      	mov	r0, fp
 80107d8:	4699      	mov	r9, r3
 80107da:	f7f0 fae7 	bl	8000dac <__aeabi_fmul>
 80107de:	4651      	mov	r1, sl
 80107e0:	1c05      	adds	r5, r0, #0
 80107e2:	4650      	mov	r0, sl
 80107e4:	f7f0 fae2 	bl	8000dac <__aeabi_fmul>
 80107e8:	1c01      	adds	r1, r0, #0
 80107ea:	1c28      	adds	r0, r5, #0
 80107ec:	f7ef ff78 	bl	80006e0 <__aeabi_fadd>
 80107f0:	4649      	mov	r1, r9
 80107f2:	1c05      	adds	r5, r0, #0
 80107f4:	4648      	mov	r0, r9
 80107f6:	f7f0 fad9 	bl	8000dac <__aeabi_fmul>
 80107fa:	1c01      	adds	r1, r0, #0
 80107fc:	1c28      	adds	r0, r5, #0
 80107fe:	f7ef ff6f 	bl	80006e0 <__aeabi_fadd>
 8010802:	f003 feb5 	bl	8014570 <sqrtf>
 8010806:	1c01      	adds	r1, r0, #0
 8010808:	1c06      	adds	r6, r0, #0
 801080a:	20fe      	movs	r0, #254	; 0xfe
 801080c:	0580      	lsls	r0, r0, #22
 801080e:	f7f0 f905 	bl	8000a1c <__aeabi_fdiv>
 8010812:	4659      	mov	r1, fp
 8010814:	1c05      	adds	r5, r0, #0
 8010816:	f7f0 fac9 	bl	8000dac <__aeabi_fmul>
 801081a:	4651      	mov	r1, sl
 801081c:	6020      	str	r0, [r4, #0]
 801081e:	1c28      	adds	r0, r5, #0
 8010820:	f7f0 fac4 	bl	8000dac <__aeabi_fmul>
 8010824:	4649      	mov	r1, r9
 8010826:	6060      	str	r0, [r4, #4]
 8010828:	1c28      	adds	r0, r5, #0
 801082a:	f7f0 fabf 	bl	8000dac <__aeabi_fmul>
 801082e:	2385      	movs	r3, #133	; 0x85
 8010830:	60a0      	str	r0, [r4, #8]
 8010832:	5ce3      	ldrb	r3, [r4, r3]
 8010834:	2b00      	cmp	r3, #0
 8010836:	d13d      	bne.n	80108b4 <update_accel+0x154>
 8010838:	68e3      	ldr	r3, [r4, #12]
 801083a:	1c30      	adds	r0, r6, #0
 801083c:	1c19      	adds	r1, r3, #0
 801083e:	469a      	mov	sl, r3
 8010840:	f7f0 fbda 	bl	8000ff8 <__aeabi_fsub>
 8010844:	1c39      	adds	r1, r7, #0
 8010846:	1c05      	adds	r5, r0, #0
 8010848:	f7f0 fab0 	bl	8000dac <__aeabi_fmul>
 801084c:	1c01      	adds	r1, r0, #0
 801084e:	4681      	mov	r9, r0
 8010850:	4650      	mov	r0, sl
 8010852:	f7ef ff45 	bl	80006e0 <__aeabi_fadd>
 8010856:	4649      	mov	r1, r9
 8010858:	1c07      	adds	r7, r0, #0
 801085a:	1c28      	adds	r0, r5, #0
 801085c:	f7f0 faa6 	bl	8000dac <__aeabi_fmul>
 8010860:	6921      	ldr	r1, [r4, #16]
 8010862:	60e7      	str	r7, [r4, #12]
 8010864:	f7ef ff3c 	bl	80006e0 <__aeabi_fadd>
 8010868:	4641      	mov	r1, r8
 801086a:	f7f0 fa9f 	bl	8000dac <__aeabi_fmul>
 801086e:	21fe      	movs	r1, #254	; 0xfe
 8010870:	6120      	str	r0, [r4, #16]
 8010872:	0589      	lsls	r1, r1, #22
 8010874:	1c05      	adds	r5, r0, #0
 8010876:	1c38      	adds	r0, r7, #0
 8010878:	f7f0 fbbe 	bl	8000ff8 <__aeabi_fsub>
 801087c:	0040      	lsls	r0, r0, #1
 801087e:	491e      	ldr	r1, [pc, #120]	; (80108f8 <update_accel+0x198>)
 8010880:	0840      	lsrs	r0, r0, #1
 8010882:	f7ef fde7 	bl	8000454 <__aeabi_fcmpgt>
 8010886:	2700      	movs	r7, #0
 8010888:	2800      	cmp	r0, #0
 801088a:	d10b      	bne.n	80108a4 <update_accel+0x144>
 801088c:	21fe      	movs	r1, #254	; 0xfe
 801088e:	1c30      	adds	r0, r6, #0
 8010890:	0589      	lsls	r1, r1, #22
 8010892:	f7f0 fbb1 	bl	8000ff8 <__aeabi_fsub>
 8010896:	0040      	lsls	r0, r0, #1
 8010898:	4917      	ldr	r1, [pc, #92]	; (80108f8 <update_accel+0x198>)
 801089a:	0840      	lsrs	r0, r0, #1
 801089c:	f7ef fdda 	bl	8000454 <__aeabi_fcmpgt>
 80108a0:	2800      	cmp	r0, #0
 80108a2:	d00f      	beq.n	80108c4 <update_accel+0x164>
 80108a4:	238c      	movs	r3, #140	; 0x8c
 80108a6:	54e7      	strb	r7, [r4, r3]
 80108a8:	bcf0      	pop	{r4, r5, r6, r7}
 80108aa:	46bb      	mov	fp, r7
 80108ac:	46b2      	mov	sl, r6
 80108ae:	46a9      	mov	r9, r5
 80108b0:	46a0      	mov	r8, r4
 80108b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80108b4:	2000      	movs	r0, #0
 80108b6:	1c37      	adds	r7, r6, #0
 80108b8:	e7d2      	b.n	8010860 <update_accel+0x100>
 80108ba:	2300      	movs	r3, #0
 80108bc:	27fe      	movs	r7, #254	; 0xfe
 80108be:	4698      	mov	r8, r3
 80108c0:	05bf      	lsls	r7, r7, #22
 80108c2:	e76c      	b.n	801079e <update_accel+0x3e>
 80108c4:	490d      	ldr	r1, [pc, #52]	; (80108fc <update_accel+0x19c>)
 80108c6:	1c28      	adds	r0, r5, #0
 80108c8:	f7ef fdba 	bl	8000440 <__aeabi_fcmple>
 80108cc:	0007      	movs	r7, r0
 80108ce:	1e78      	subs	r0, r7, #1
 80108d0:	4187      	sbcs	r7, r0
 80108d2:	e7e7      	b.n	80108a4 <update_accel+0x144>
 80108d4:	21d0      	movs	r1, #208	; 0xd0
 80108d6:	68ab      	ldr	r3, [r5, #8]
 80108d8:	0589      	lsls	r1, r1, #22
 80108da:	0058      	lsls	r0, r3, #1
 80108dc:	0840      	lsrs	r0, r0, #1
 80108de:	f7ef fda5 	bl	800042c <__aeabi_fcmplt>
 80108e2:	2800      	cmp	r0, #0
 80108e4:	d000      	beq.n	80108e8 <update_accel+0x188>
 80108e6:	e770      	b.n	80107ca <update_accel+0x6a>
 80108e8:	e76c      	b.n	80107c4 <update_accel+0x64>
 80108ea:	46c0      	nop			; (mov r8, r8)
 80108ec:	20000000 	.word	0x20000000
 80108f0:	3c23d70a 	.word	0x3c23d70a
 80108f4:	42c80000 	.word	0x42c80000
 80108f8:	3dcccccd 	.word	0x3dcccccd
 80108fc:	3d4ccccd 	.word	0x3d4ccccd

08010900 <calibrate>:
 8010900:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010902:	46de      	mov	lr, fp
 8010904:	4645      	mov	r5, r8
 8010906:	4657      	mov	r7, sl
 8010908:	464e      	mov	r6, r9
 801090a:	b5e0      	push	{r5, r6, r7, lr}
 801090c:	4b98      	ldr	r3, [pc, #608]	; (8010b70 <calibrate+0x270>)
 801090e:	4c99      	ldr	r4, [pc, #612]	; (8010b74 <calibrate+0x274>)
 8010910:	44a5      	add	sp, r4
 8010912:	681c      	ldr	r4, [r3, #0]
 8010914:	921d      	str	r2, [sp, #116]	; 0x74
 8010916:	6865      	ldr	r5, [r4, #4]
 8010918:	229e      	movs	r2, #158	; 0x9e
 801091a:	46ac      	mov	ip, r5
 801091c:	00d2      	lsls	r2, r2, #3
 801091e:	4462      	add	r2, ip
 8010920:	911c      	str	r1, [sp, #112]	; 0x70
 8010922:	921a      	str	r2, [sp, #104]	; 0x68
 8010924:	0011      	movs	r1, r2
 8010926:	22b4      	movs	r2, #180	; 0xb4
 8010928:	901b      	str	r0, [sp, #108]	; 0x6c
 801092a:	0052      	lsls	r2, r2, #1
 801092c:	a842      	add	r0, sp, #264	; 0x108
 801092e:	9419      	str	r4, [sp, #100]	; 0x64
 8010930:	9515      	str	r5, [sp, #84]	; 0x54
 8010932:	f003 f88f 	bl	8013a54 <memcpy>
 8010936:	46ac      	mov	ip, r5
 8010938:	498f      	ldr	r1, [pc, #572]	; (8010b78 <calibrate+0x278>)
 801093a:	220c      	movs	r2, #12
 801093c:	4461      	add	r1, ip
 801093e:	a821      	add	r0, sp, #132	; 0x84
 8010940:	f003 f888 	bl	8013a54 <memcpy>
 8010944:	6823      	ldr	r3, [r4, #0]
 8010946:	9316      	str	r3, [sp, #88]	; 0x58
 8010948:	781b      	ldrb	r3, [r3, #0]
 801094a:	9317      	str	r3, [sp, #92]	; 0x5c
 801094c:	2b01      	cmp	r3, #1
 801094e:	d100      	bne.n	8010952 <calibrate+0x52>
 8010950:	e25b      	b.n	8010e0a <calibrate+0x50a>
 8010952:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8010954:	21a0      	movs	r1, #160	; 0xa0
 8010956:	934c      	str	r3, [sp, #304]	; 0x130
 8010958:	9b44      	ldr	r3, [sp, #272]	; 0x110
 801095a:	aa1a      	add	r2, sp, #104	; 0x68
 801095c:	9356      	str	r3, [sp, #344]	; 0x158
 801095e:	9b4e      	ldr	r3, [sp, #312]	; 0x138
 8010960:	1852      	adds	r2, r2, r1
 8010962:	9357      	str	r3, [sp, #348]	; 0x15c
 8010964:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8010966:	9360      	str	r3, [sp, #384]	; 0x180
 8010968:	9b4f      	ldr	r3, [sp, #316]	; 0x13c
 801096a:	9361      	str	r3, [sp, #388]	; 0x184
 801096c:	9b59      	ldr	r3, [sp, #356]	; 0x164
 801096e:	9300      	str	r3, [sp, #0]
 8010970:	2380      	movs	r3, #128	; 0x80
 8010972:	9900      	ldr	r1, [sp, #0]
 8010974:	50d1      	str	r1, [r2, r3]
 8010976:	3b7c      	subs	r3, #124	; 0x7c
 8010978:	469b      	mov	fp, r3
 801097a:	9318      	str	r3, [sp, #96]	; 0x60
 801097c:	22b4      	movs	r2, #180	; 0xb4
 801097e:	a942      	add	r1, sp, #264	; 0x108
 8010980:	0052      	lsls	r2, r2, #1
 8010982:	a89c      	add	r0, sp, #624	; 0x270
 8010984:	f003 f866 	bl	8013a54 <memcpy>
 8010988:	465b      	mov	r3, fp
 801098a:	3b01      	subs	r3, #1
 801098c:	1c1a      	adds	r2, r3, #0
 801098e:	b2db      	uxtb	r3, r3
 8010990:	455b      	cmp	r3, fp
 8010992:	d900      	bls.n	8010996 <calibrate+0x96>
 8010994:	465a      	mov	r2, fp
 8010996:	b2d3      	uxtb	r3, r2
 8010998:	9314      	str	r3, [sp, #80]	; 0x50
 801099a:	ab9c      	add	r3, sp, #624	; 0x270
 801099c:	469a      	mov	sl, r3
 801099e:	9313      	str	r3, [sp, #76]	; 0x4c
 80109a0:	2304      	movs	r3, #4
 80109a2:	930c      	str	r3, [sp, #48]	; 0x30
 80109a4:	3b01      	subs	r3, #1
 80109a6:	930a      	str	r3, [sp, #40]	; 0x28
 80109a8:	3b01      	subs	r3, #1
 80109aa:	9309      	str	r3, [sp, #36]	; 0x24
 80109ac:	3b01      	subs	r3, #1
 80109ae:	9310      	str	r3, [sp, #64]	; 0x40
 80109b0:	2300      	movs	r3, #0
 80109b2:	465d      	mov	r5, fp
 80109b4:	9306      	str	r3, [sp, #24]
 80109b6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80109b8:	2700      	movs	r7, #0
 80109ba:	001e      	movs	r6, r3
 80109bc:	001a      	movs	r2, r3
 80109be:	0019      	movs	r1, r3
 80109c0:	2308      	movs	r3, #8
 80109c2:	4699      	mov	r9, r3
 80109c4:	3304      	adds	r3, #4
 80109c6:	469b      	mov	fp, r3
 80109c8:	3304      	adds	r3, #4
 80109ca:	469c      	mov	ip, r3
 80109cc:	44b4      	add	ip, r6
 80109ce:	4663      	mov	r3, ip
 80109d0:	9300      	str	r3, [sp, #0]
 80109d2:	2314      	movs	r3, #20
 80109d4:	469c      	mov	ip, r3
 80109d6:	44b4      	add	ip, r6
 80109d8:	4663      	mov	r3, ip
 80109da:	9301      	str	r3, [sp, #4]
 80109dc:	2318      	movs	r3, #24
 80109de:	469c      	mov	ip, r3
 80109e0:	44b4      	add	ip, r6
 80109e2:	4663      	mov	r3, ip
 80109e4:	9302      	str	r3, [sp, #8]
 80109e6:	231c      	movs	r3, #28
 80109e8:	469c      	mov	ip, r3
 80109ea:	44b4      	add	ip, r6
 80109ec:	4663      	mov	r3, ip
 80109ee:	9303      	str	r3, [sp, #12]
 80109f0:	2320      	movs	r3, #32
 80109f2:	469c      	mov	ip, r3
 80109f4:	44b4      	add	ip, r6
 80109f6:	4663      	mov	r3, ip
 80109f8:	3224      	adds	r2, #36	; 0x24
 80109fa:	9205      	str	r2, [sp, #20]
 80109fc:	9304      	str	r3, [sp, #16]
 80109fe:	2240      	movs	r2, #64	; 0x40
 8010a00:	466b      	mov	r3, sp
 8010a02:	189b      	adds	r3, r3, r2
 8010a04:	781b      	ldrb	r3, [r3, #0]
 8010a06:	9a06      	ldr	r2, [sp, #24]
 8010a08:	930b      	str	r3, [sp, #44]	; 0x2c
 8010a0a:	1d53      	adds	r3, r2, #5
 8010a0c:	b2db      	uxtb	r3, r3
 8010a0e:	930d      	str	r3, [sp, #52]	; 0x34
 8010a10:	1d93      	adds	r3, r2, #6
 8010a12:	b2db      	uxtb	r3, r3
 8010a14:	930e      	str	r3, [sp, #56]	; 0x38
 8010a16:	1dd3      	adds	r3, r2, #7
 8010a18:	b2db      	uxtb	r3, r3
 8010a1a:	930f      	str	r3, [sp, #60]	; 0x3c
 8010a1c:	0013      	movs	r3, r2
 8010a1e:	3308      	adds	r3, #8
 8010a20:	b2db      	uxtb	r3, r3
 8010a22:	9311      	str	r3, [sp, #68]	; 0x44
 8010a24:	0013      	movs	r3, r2
 8010a26:	3309      	adds	r3, #9
 8010a28:	44b3      	add	fp, r6
 8010a2a:	b2db      	uxtb	r3, r3
 8010a2c:	9312      	str	r3, [sp, #72]	; 0x48
 8010a2e:	465b      	mov	r3, fp
 8010a30:	44b1      	add	r9, r6
 8010a32:	3104      	adds	r1, #4
 8010a34:	46cb      	mov	fp, r9
 8010a36:	4688      	mov	r8, r1
 8010a38:	46b1      	mov	r9, r6
 8010a3a:	4656      	mov	r6, sl
 8010a3c:	469a      	mov	sl, r3
 8010a3e:	9113      	str	r1, [sp, #76]	; 0x4c
 8010a40:	9b06      	ldr	r3, [sp, #24]
 8010a42:	429f      	cmp	r7, r3
 8010a44:	d100      	bne.n	8010a48 <calibrate+0x148>
 8010a46:	e099      	b.n	8010b7c <calibrate+0x27c>
 8010a48:	464b      	mov	r3, r9
 8010a4a:	6832      	ldr	r2, [r6, #0]
 8010a4c:	681b      	ldr	r3, [r3, #0]
 8010a4e:	1c11      	adds	r1, r2, #0
 8010a50:	1c18      	adds	r0, r3, #0
 8010a52:	9307      	str	r3, [sp, #28]
 8010a54:	9208      	str	r2, [sp, #32]
 8010a56:	f7ef ffe1 	bl	8000a1c <__aeabi_fdiv>
 8010a5a:	1c01      	adds	r1, r0, #0
 8010a5c:	1c04      	adds	r4, r0, #0
 8010a5e:	9808      	ldr	r0, [sp, #32]
 8010a60:	f7f0 f9a4 	bl	8000dac <__aeabi_fmul>
 8010a64:	1c01      	adds	r1, r0, #0
 8010a66:	9807      	ldr	r0, [sp, #28]
 8010a68:	f7f0 fac6 	bl	8000ff8 <__aeabi_fsub>
 8010a6c:	464b      	mov	r3, r9
 8010a6e:	6018      	str	r0, [r3, #0]
 8010a70:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010a72:	429d      	cmp	r5, r3
 8010a74:	d200      	bcs.n	8010a78 <calibrate+0x178>
 8010a76:	e081      	b.n	8010b7c <calibrate+0x27c>
 8010a78:	6871      	ldr	r1, [r6, #4]
 8010a7a:	1c20      	adds	r0, r4, #0
 8010a7c:	f7f0 f996 	bl	8000dac <__aeabi_fmul>
 8010a80:	4643      	mov	r3, r8
 8010a82:	1c01      	adds	r1, r0, #0
 8010a84:	6818      	ldr	r0, [r3, #0]
 8010a86:	f7f0 fab7 	bl	8000ff8 <__aeabi_fsub>
 8010a8a:	4643      	mov	r3, r8
 8010a8c:	6018      	str	r0, [r3, #0]
 8010a8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010a90:	42ab      	cmp	r3, r5
 8010a92:	d873      	bhi.n	8010b7c <calibrate+0x27c>
 8010a94:	68b1      	ldr	r1, [r6, #8]
 8010a96:	1c20      	adds	r0, r4, #0
 8010a98:	f7f0 f988 	bl	8000dac <__aeabi_fmul>
 8010a9c:	465b      	mov	r3, fp
 8010a9e:	1c01      	adds	r1, r0, #0
 8010aa0:	6818      	ldr	r0, [r3, #0]
 8010aa2:	f7f0 faa9 	bl	8000ff8 <__aeabi_fsub>
 8010aa6:	465b      	mov	r3, fp
 8010aa8:	6018      	str	r0, [r3, #0]
 8010aaa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010aac:	429d      	cmp	r5, r3
 8010aae:	d365      	bcc.n	8010b7c <calibrate+0x27c>
 8010ab0:	68f1      	ldr	r1, [r6, #12]
 8010ab2:	1c20      	adds	r0, r4, #0
 8010ab4:	f7f0 f97a 	bl	8000dac <__aeabi_fmul>
 8010ab8:	4653      	mov	r3, sl
 8010aba:	1c01      	adds	r1, r0, #0
 8010abc:	6818      	ldr	r0, [r3, #0]
 8010abe:	f7f0 fa9b 	bl	8000ff8 <__aeabi_fsub>
 8010ac2:	4653      	mov	r3, sl
 8010ac4:	6018      	str	r0, [r3, #0]
 8010ac6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010ac8:	429d      	cmp	r5, r3
 8010aca:	d357      	bcc.n	8010b7c <calibrate+0x27c>
 8010acc:	6931      	ldr	r1, [r6, #16]
 8010ace:	1c20      	adds	r0, r4, #0
 8010ad0:	f7f0 f96c 	bl	8000dac <__aeabi_fmul>
 8010ad4:	9b00      	ldr	r3, [sp, #0]
 8010ad6:	1c01      	adds	r1, r0, #0
 8010ad8:	6818      	ldr	r0, [r3, #0]
 8010ada:	f7f0 fa8d 	bl	8000ff8 <__aeabi_fsub>
 8010ade:	9b00      	ldr	r3, [sp, #0]
 8010ae0:	6018      	str	r0, [r3, #0]
 8010ae2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010ae4:	429d      	cmp	r5, r3
 8010ae6:	d349      	bcc.n	8010b7c <calibrate+0x27c>
 8010ae8:	6971      	ldr	r1, [r6, #20]
 8010aea:	1c20      	adds	r0, r4, #0
 8010aec:	f7f0 f95e 	bl	8000dac <__aeabi_fmul>
 8010af0:	9b01      	ldr	r3, [sp, #4]
 8010af2:	1c01      	adds	r1, r0, #0
 8010af4:	6818      	ldr	r0, [r3, #0]
 8010af6:	f7f0 fa7f 	bl	8000ff8 <__aeabi_fsub>
 8010afa:	9b01      	ldr	r3, [sp, #4]
 8010afc:	6018      	str	r0, [r3, #0]
 8010afe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010b00:	429d      	cmp	r5, r3
 8010b02:	d33b      	bcc.n	8010b7c <calibrate+0x27c>
 8010b04:	69b1      	ldr	r1, [r6, #24]
 8010b06:	1c20      	adds	r0, r4, #0
 8010b08:	f7f0 f950 	bl	8000dac <__aeabi_fmul>
 8010b0c:	9b02      	ldr	r3, [sp, #8]
 8010b0e:	1c01      	adds	r1, r0, #0
 8010b10:	6818      	ldr	r0, [r3, #0]
 8010b12:	f7f0 fa71 	bl	8000ff8 <__aeabi_fsub>
 8010b16:	9b02      	ldr	r3, [sp, #8]
 8010b18:	6018      	str	r0, [r3, #0]
 8010b1a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8010b1c:	429d      	cmp	r5, r3
 8010b1e:	d32d      	bcc.n	8010b7c <calibrate+0x27c>
 8010b20:	69f1      	ldr	r1, [r6, #28]
 8010b22:	1c20      	adds	r0, r4, #0
 8010b24:	f7f0 f942 	bl	8000dac <__aeabi_fmul>
 8010b28:	9b03      	ldr	r3, [sp, #12]
 8010b2a:	1c01      	adds	r1, r0, #0
 8010b2c:	6818      	ldr	r0, [r3, #0]
 8010b2e:	f7f0 fa63 	bl	8000ff8 <__aeabi_fsub>
 8010b32:	9b03      	ldr	r3, [sp, #12]
 8010b34:	6018      	str	r0, [r3, #0]
 8010b36:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8010b38:	429d      	cmp	r5, r3
 8010b3a:	d31f      	bcc.n	8010b7c <calibrate+0x27c>
 8010b3c:	6a31      	ldr	r1, [r6, #32]
 8010b3e:	1c20      	adds	r0, r4, #0
 8010b40:	f7f0 f934 	bl	8000dac <__aeabi_fmul>
 8010b44:	9b04      	ldr	r3, [sp, #16]
 8010b46:	1c01      	adds	r1, r0, #0
 8010b48:	6818      	ldr	r0, [r3, #0]
 8010b4a:	f7f0 fa55 	bl	8000ff8 <__aeabi_fsub>
 8010b4e:	9b04      	ldr	r3, [sp, #16]
 8010b50:	6018      	str	r0, [r3, #0]
 8010b52:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8010b54:	429d      	cmp	r5, r3
 8010b56:	d311      	bcc.n	8010b7c <calibrate+0x27c>
 8010b58:	6a71      	ldr	r1, [r6, #36]	; 0x24
 8010b5a:	1c20      	adds	r0, r4, #0
 8010b5c:	f7f0 f926 	bl	8000dac <__aeabi_fmul>
 8010b60:	9c05      	ldr	r4, [sp, #20]
 8010b62:	1c01      	adds	r1, r0, #0
 8010b64:	6820      	ldr	r0, [r4, #0]
 8010b66:	f7f0 fa47 	bl	8000ff8 <__aeabi_fsub>
 8010b6a:	6020      	str	r0, [r4, #0]
 8010b6c:	e006      	b.n	8010b7c <calibrate+0x27c>
 8010b6e:	46c0      	nop			; (mov r8, r8)
 8010b70:	200002f8 	.word	0x200002f8
 8010b74:	fffffc24 	.word	0xfffffc24
 8010b78:	0000065c 	.word	0x0000065c
 8010b7c:	9b05      	ldr	r3, [sp, #20]
 8010b7e:	3701      	adds	r7, #1
 8010b80:	3328      	adds	r3, #40	; 0x28
 8010b82:	9305      	str	r3, [sp, #20]
 8010b84:	2328      	movs	r3, #40	; 0x28
 8010b86:	469c      	mov	ip, r3
 8010b88:	9b00      	ldr	r3, [sp, #0]
 8010b8a:	b2ff      	uxtb	r7, r7
 8010b8c:	3328      	adds	r3, #40	; 0x28
 8010b8e:	9300      	str	r3, [sp, #0]
 8010b90:	9b01      	ldr	r3, [sp, #4]
 8010b92:	44e1      	add	r9, ip
 8010b94:	3328      	adds	r3, #40	; 0x28
 8010b96:	9301      	str	r3, [sp, #4]
 8010b98:	9b02      	ldr	r3, [sp, #8]
 8010b9a:	44e0      	add	r8, ip
 8010b9c:	3328      	adds	r3, #40	; 0x28
 8010b9e:	9302      	str	r3, [sp, #8]
 8010ba0:	9b03      	ldr	r3, [sp, #12]
 8010ba2:	44e3      	add	fp, ip
 8010ba4:	3328      	adds	r3, #40	; 0x28
 8010ba6:	9303      	str	r3, [sp, #12]
 8010ba8:	9b04      	ldr	r3, [sp, #16]
 8010baa:	44e2      	add	sl, ip
 8010bac:	3328      	adds	r3, #40	; 0x28
 8010bae:	9304      	str	r3, [sp, #16]
 8010bb0:	42af      	cmp	r7, r5
 8010bb2:	d000      	beq.n	8010bb6 <calibrate+0x2b6>
 8010bb4:	e744      	b.n	8010a40 <calibrate+0x140>
 8010bb6:	9b06      	ldr	r3, [sp, #24]
 8010bb8:	46b2      	mov	sl, r6
 8010bba:	3301      	adds	r3, #1
 8010bbc:	b2da      	uxtb	r2, r3
 8010bbe:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8010bc0:	9206      	str	r2, [sp, #24]
 8010bc2:	3301      	adds	r3, #1
 8010bc4:	9310      	str	r3, [sp, #64]	; 0x40
 8010bc6:	232c      	movs	r3, #44	; 0x2c
 8010bc8:	469c      	mov	ip, r3
 8010bca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010bcc:	44e2      	add	sl, ip
 8010bce:	3301      	adds	r3, #1
 8010bd0:	b2db      	uxtb	r3, r3
 8010bd2:	9309      	str	r3, [sp, #36]	; 0x24
 8010bd4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010bd6:	3301      	adds	r3, #1
 8010bd8:	b2db      	uxtb	r3, r3
 8010bda:	930a      	str	r3, [sp, #40]	; 0x28
 8010bdc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010bde:	3301      	adds	r3, #1
 8010be0:	b2db      	uxtb	r3, r3
 8010be2:	930c      	str	r3, [sp, #48]	; 0x30
 8010be4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8010be6:	429a      	cmp	r2, r3
 8010be8:	d800      	bhi.n	8010bec <calibrate+0x2ec>
 8010bea:	e6e4      	b.n	80109b6 <calibrate+0xb6>
 8010bec:	2582      	movs	r5, #130	; 0x82
 8010bee:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8010bf0:	00ad      	lsls	r5, r5, #2
 8010bf2:	aa1a      	add	r2, sp, #104	; 0x68
 8010bf4:	00a3      	lsls	r3, r4, #2
 8010bf6:	1952      	adds	r2, r2, r5
 8010bf8:	58d0      	ldr	r0, [r2, r3]
 8010bfa:	999c      	ldr	r1, [sp, #624]	; 0x270
 8010bfc:	f7ef ff0e 	bl	8000a1c <__aeabi_fdiv>
 8010c00:	0023      	movs	r3, r4
 8010c02:	aa1a      	add	r2, sp, #104	; 0x68
 8010c04:	330a      	adds	r3, #10
 8010c06:	009b      	lsls	r3, r3, #2
 8010c08:	1952      	adds	r2, r2, r5
 8010c0a:	99a7      	ldr	r1, [sp, #668]	; 0x29c
 8010c0c:	9027      	str	r0, [sp, #156]	; 0x9c
 8010c0e:	4682      	mov	sl, r0
 8010c10:	58d0      	ldr	r0, [r2, r3]
 8010c12:	f7ef ff03 	bl	8000a1c <__aeabi_fdiv>
 8010c16:	0023      	movs	r3, r4
 8010c18:	aa1a      	add	r2, sp, #104	; 0x68
 8010c1a:	3314      	adds	r3, #20
 8010c1c:	009b      	lsls	r3, r3, #2
 8010c1e:	1952      	adds	r2, r2, r5
 8010c20:	99b2      	ldr	r1, [sp, #712]	; 0x2c8
 8010c22:	9028      	str	r0, [sp, #160]	; 0xa0
 8010c24:	58d0      	ldr	r0, [r2, r3]
 8010c26:	f7ef fef9 	bl	8000a1c <__aeabi_fdiv>
 8010c2a:	2284      	movs	r2, #132	; 0x84
 8010c2c:	0023      	movs	r3, r4
 8010c2e:	a91a      	add	r1, sp, #104	; 0x68
 8010c30:	1949      	adds	r1, r1, r5
 8010c32:	5889      	ldr	r1, [r1, r2]
 8010c34:	331e      	adds	r3, #30
 8010c36:	aa1a      	add	r2, sp, #104	; 0x68
 8010c38:	009b      	lsls	r3, r3, #2
 8010c3a:	1952      	adds	r2, r2, r5
 8010c3c:	9029      	str	r0, [sp, #164]	; 0xa4
 8010c3e:	58d0      	ldr	r0, [r2, r3]
 8010c40:	f7ef feec 	bl	8000a1c <__aeabi_fdiv>
 8010c44:	902a      	str	r0, [sp, #168]	; 0xa8
 8010c46:	2f04      	cmp	r7, #4
 8010c48:	d04b      	beq.n	8010ce2 <calibrate+0x3e2>
 8010c4a:	22b0      	movs	r2, #176	; 0xb0
 8010c4c:	0023      	movs	r3, r4
 8010c4e:	a91a      	add	r1, sp, #104	; 0x68
 8010c50:	1949      	adds	r1, r1, r5
 8010c52:	5889      	ldr	r1, [r1, r2]
 8010c54:	3328      	adds	r3, #40	; 0x28
 8010c56:	aa1a      	add	r2, sp, #104	; 0x68
 8010c58:	009b      	lsls	r3, r3, #2
 8010c5a:	1952      	adds	r2, r2, r5
 8010c5c:	58d0      	ldr	r0, [r2, r3]
 8010c5e:	f7ef fedd 	bl	8000a1c <__aeabi_fdiv>
 8010c62:	902b      	str	r0, [sp, #172]	; 0xac
 8010c64:	2f05      	cmp	r7, #5
 8010c66:	d03c      	beq.n	8010ce2 <calibrate+0x3e2>
 8010c68:	22dc      	movs	r2, #220	; 0xdc
 8010c6a:	0023      	movs	r3, r4
 8010c6c:	a91a      	add	r1, sp, #104	; 0x68
 8010c6e:	1949      	adds	r1, r1, r5
 8010c70:	5889      	ldr	r1, [r1, r2]
 8010c72:	3332      	adds	r3, #50	; 0x32
 8010c74:	aa1a      	add	r2, sp, #104	; 0x68
 8010c76:	009b      	lsls	r3, r3, #2
 8010c78:	1952      	adds	r2, r2, r5
 8010c7a:	58d0      	ldr	r0, [r2, r3]
 8010c7c:	f7ef fece 	bl	8000a1c <__aeabi_fdiv>
 8010c80:	902c      	str	r0, [sp, #176]	; 0xb0
 8010c82:	2f06      	cmp	r7, #6
 8010c84:	d02d      	beq.n	8010ce2 <calibrate+0x3e2>
 8010c86:	2284      	movs	r2, #132	; 0x84
 8010c88:	0023      	movs	r3, r4
 8010c8a:	a91a      	add	r1, sp, #104	; 0x68
 8010c8c:	0052      	lsls	r2, r2, #1
 8010c8e:	1949      	adds	r1, r1, r5
 8010c90:	5889      	ldr	r1, [r1, r2]
 8010c92:	333c      	adds	r3, #60	; 0x3c
 8010c94:	aa1a      	add	r2, sp, #104	; 0x68
 8010c96:	009b      	lsls	r3, r3, #2
 8010c98:	1952      	adds	r2, r2, r5
 8010c9a:	58d0      	ldr	r0, [r2, r3]
 8010c9c:	f7ef febe 	bl	8000a1c <__aeabi_fdiv>
 8010ca0:	902d      	str	r0, [sp, #180]	; 0xb4
 8010ca2:	2f07      	cmp	r7, #7
 8010ca4:	d01d      	beq.n	8010ce2 <calibrate+0x3e2>
 8010ca6:	229a      	movs	r2, #154	; 0x9a
 8010ca8:	0023      	movs	r3, r4
 8010caa:	a91a      	add	r1, sp, #104	; 0x68
 8010cac:	0052      	lsls	r2, r2, #1
 8010cae:	1949      	adds	r1, r1, r5
 8010cb0:	5889      	ldr	r1, [r1, r2]
 8010cb2:	3346      	adds	r3, #70	; 0x46
 8010cb4:	aa1a      	add	r2, sp, #104	; 0x68
 8010cb6:	009b      	lsls	r3, r3, #2
 8010cb8:	1952      	adds	r2, r2, r5
 8010cba:	58d0      	ldr	r0, [r2, r3]
 8010cbc:	f7ef feae 	bl	8000a1c <__aeabi_fdiv>
 8010cc0:	902e      	str	r0, [sp, #184]	; 0xb8
 8010cc2:	2f09      	cmp	r7, #9
 8010cc4:	d10d      	bne.n	8010ce2 <calibrate+0x3e2>
 8010cc6:	22b0      	movs	r2, #176	; 0xb0
 8010cc8:	0023      	movs	r3, r4
 8010cca:	a91a      	add	r1, sp, #104	; 0x68
 8010ccc:	0052      	lsls	r2, r2, #1
 8010cce:	1949      	adds	r1, r1, r5
 8010cd0:	5889      	ldr	r1, [r1, r2]
 8010cd2:	3350      	adds	r3, #80	; 0x50
 8010cd4:	aa1a      	add	r2, sp, #104	; 0x68
 8010cd6:	009b      	lsls	r3, r3, #2
 8010cd8:	1952      	adds	r2, r2, r5
 8010cda:	58d0      	ldr	r0, [r2, r3]
 8010cdc:	f7ef fe9e 	bl	8000a1c <__aeabi_fdiv>
 8010ce0:	902f      	str	r0, [sp, #188]	; 0xbc
 8010ce2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8010ce4:	2b00      	cmp	r3, #0
 8010ce6:	d000      	beq.n	8010cea <calibrate+0x3ea>
 8010ce8:	e1b4      	b.n	8011054 <calibrate+0x754>
 8010cea:	21fc      	movs	r1, #252	; 0xfc
 8010cec:	4650      	mov	r0, sl
 8010cee:	0589      	lsls	r1, r1, #22
 8010cf0:	f7f0 f85c 	bl	8000dac <__aeabi_fmul>
 8010cf4:	9f15      	ldr	r7, [sp, #84]	; 0x54
 8010cf6:	4bd0      	ldr	r3, [pc, #832]	; (8011038 <calibrate+0x738>)
 8010cf8:	1c06      	adds	r6, r0, #0
 8010cfa:	1c01      	adds	r1, r0, #0
 8010cfc:	9027      	str	r0, [sp, #156]	; 0x9c
 8010cfe:	58f8      	ldr	r0, [r7, r3]
 8010d00:	f7ef fcee 	bl	80006e0 <__aeabi_fadd>
 8010d04:	21fc      	movs	r1, #252	; 0xfc
 8010d06:	4bcd      	ldr	r3, [pc, #820]	; (801103c <calibrate+0x73c>)
 8010d08:	0589      	lsls	r1, r1, #22
 8010d0a:	50f8      	str	r0, [r7, r3]
 8010d0c:	9828      	ldr	r0, [sp, #160]	; 0xa0
 8010d0e:	f7f0 f84d 	bl	8000dac <__aeabi_fmul>
 8010d12:	239d      	movs	r3, #157	; 0x9d
 8010d14:	00db      	lsls	r3, r3, #3
 8010d16:	1c05      	adds	r5, r0, #0
 8010d18:	1c01      	adds	r1, r0, #0
 8010d1a:	9028      	str	r0, [sp, #160]	; 0xa0
 8010d1c:	58f8      	ldr	r0, [r7, r3]
 8010d1e:	f7ef fcdf 	bl	80006e0 <__aeabi_fadd>
 8010d22:	23cc      	movs	r3, #204	; 0xcc
 8010d24:	21fc      	movs	r1, #252	; 0xfc
 8010d26:	00db      	lsls	r3, r3, #3
 8010d28:	50f8      	str	r0, [r7, r3]
 8010d2a:	0589      	lsls	r1, r1, #22
 8010d2c:	9829      	ldr	r0, [sp, #164]	; 0xa4
 8010d2e:	f7f0 f83d 	bl	8000dac <__aeabi_fmul>
 8010d32:	4bc3      	ldr	r3, [pc, #780]	; (8011040 <calibrate+0x740>)
 8010d34:	1c04      	adds	r4, r0, #0
 8010d36:	1c01      	adds	r1, r0, #0
 8010d38:	9029      	str	r0, [sp, #164]	; 0xa4
 8010d3a:	58f8      	ldr	r0, [r7, r3]
 8010d3c:	f7ef fcd0 	bl	80006e0 <__aeabi_fadd>
 8010d40:	4bc0      	ldr	r3, [pc, #768]	; (8011044 <calibrate+0x744>)
 8010d42:	1c31      	adds	r1, r6, #0
 8010d44:	50f8      	str	r0, [r7, r3]
 8010d46:	1c30      	adds	r0, r6, #0
 8010d48:	f7f0 f830 	bl	8000dac <__aeabi_fmul>
 8010d4c:	1c29      	adds	r1, r5, #0
 8010d4e:	1c06      	adds	r6, r0, #0
 8010d50:	1c28      	adds	r0, r5, #0
 8010d52:	f7f0 f82b 	bl	8000dac <__aeabi_fmul>
 8010d56:	1c01      	adds	r1, r0, #0
 8010d58:	1c30      	adds	r0, r6, #0
 8010d5a:	f7ef fcc1 	bl	80006e0 <__aeabi_fadd>
 8010d5e:	992a      	ldr	r1, [sp, #168]	; 0xa8
 8010d60:	f7ef fcbe 	bl	80006e0 <__aeabi_fadd>
 8010d64:	1c21      	adds	r1, r4, #0
 8010d66:	1c05      	adds	r5, r0, #0
 8010d68:	1c20      	adds	r0, r4, #0
 8010d6a:	f7f0 f81f 	bl	8000dac <__aeabi_fmul>
 8010d6e:	1c01      	adds	r1, r0, #0
 8010d70:	1c28      	adds	r0, r5, #0
 8010d72:	f7ef fcb5 	bl	80006e0 <__aeabi_fadd>
 8010d76:	f003 fbfb 	bl	8014570 <sqrtf>
 8010d7a:	4bb3      	ldr	r3, [pc, #716]	; (8011048 <calibrate+0x748>)
 8010d7c:	1c05      	adds	r5, r0, #0
 8010d7e:	50f8      	str	r0, [r7, r3]
 8010d80:	ac24      	add	r4, sp, #144	; 0x90
 8010d82:	9e15      	ldr	r6, [sp, #84]	; 0x54
 8010d84:	4bad      	ldr	r3, [pc, #692]	; (801103c <calibrate+0x73c>)
 8010d86:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8010d88:	58f1      	ldr	r1, [r6, r3]
 8010d8a:	f7f0 f935 	bl	8000ff8 <__aeabi_fsub>
 8010d8e:	23cc      	movs	r3, #204	; 0xcc
 8010d90:	00db      	lsls	r3, r3, #3
 8010d92:	58f1      	ldr	r1, [r6, r3]
 8010d94:	9024      	str	r0, [sp, #144]	; 0x90
 8010d96:	981c      	ldr	r0, [sp, #112]	; 0x70
 8010d98:	f7f0 f92e 	bl	8000ff8 <__aeabi_fsub>
 8010d9c:	4ba9      	ldr	r3, [pc, #676]	; (8011044 <calibrate+0x744>)
 8010d9e:	6060      	str	r0, [r4, #4]
 8010da0:	58f1      	ldr	r1, [r6, r3]
 8010da2:	981d      	ldr	r0, [sp, #116]	; 0x74
 8010da4:	f7f0 f928 	bl	8000ff8 <__aeabi_fsub>
 8010da8:	60a0      	str	r0, [r4, #8]
 8010daa:	1c06      	adds	r6, r0, #0
 8010dac:	9924      	ldr	r1, [sp, #144]	; 0x90
 8010dae:	6867      	ldr	r7, [r4, #4]
 8010db0:	1c08      	adds	r0, r1, #0
 8010db2:	f7ef fffb 	bl	8000dac <__aeabi_fmul>
 8010db6:	1c39      	adds	r1, r7, #0
 8010db8:	1c04      	adds	r4, r0, #0
 8010dba:	1c38      	adds	r0, r7, #0
 8010dbc:	f7ef fff6 	bl	8000dac <__aeabi_fmul>
 8010dc0:	1c01      	adds	r1, r0, #0
 8010dc2:	1c20      	adds	r0, r4, #0
 8010dc4:	f7ef fc8c 	bl	80006e0 <__aeabi_fadd>
 8010dc8:	1c31      	adds	r1, r6, #0
 8010dca:	1c04      	adds	r4, r0, #0
 8010dcc:	1c30      	adds	r0, r6, #0
 8010dce:	f7ef ffed 	bl	8000dac <__aeabi_fmul>
 8010dd2:	1c01      	adds	r1, r0, #0
 8010dd4:	1c20      	adds	r0, r4, #0
 8010dd6:	f7ef fc83 	bl	80006e0 <__aeabi_fadd>
 8010dda:	f003 fbc9 	bl	8014570 <sqrtf>
 8010dde:	1c29      	adds	r1, r5, #0
 8010de0:	f7f0 f90a 	bl	8000ff8 <__aeabi_fsub>
 8010de4:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8010de6:	0040      	lsls	r0, r0, #1
 8010de8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8010dea:	0840      	lsrs	r0, r0, #1
 8010dec:	f7ef fb32 	bl	8000454 <__aeabi_fcmpgt>
 8010df0:	2800      	cmp	r0, #0
 8010df2:	d000      	beq.n	8010df6 <calibrate+0x4f6>
 8010df4:	e101      	b.n	8010ffa <calibrate+0x6fa>
 8010df6:	2001      	movs	r0, #1
 8010df8:	23f7      	movs	r3, #247	; 0xf7
 8010dfa:	009b      	lsls	r3, r3, #2
 8010dfc:	449d      	add	sp, r3
 8010dfe:	bcf0      	pop	{r4, r5, r6, r7}
 8010e00:	46bb      	mov	fp, r7
 8010e02:	46b2      	mov	sl, r6
 8010e04:	46a9      	mov	r9, r5
 8010e06:	46a0      	mov	r8, r4
 8010e08:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010e0a:	20cd      	movs	r0, #205	; 0xcd
 8010e0c:	00c0      	lsls	r0, r0, #3
 8010e0e:	4684      	mov	ip, r0
 8010e10:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010e12:	2224      	movs	r2, #36	; 0x24
 8010e14:	4463      	add	r3, ip
 8010e16:	0019      	movs	r1, r3
 8010e18:	a839      	add	r0, sp, #228	; 0xe4
 8010e1a:	f002 fe1b 	bl	8013a54 <memcpy>
 8010e1e:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8010e20:	22a0      	movs	r2, #160	; 0xa0
 8010e22:	934c      	str	r3, [sp, #304]	; 0x130
 8010e24:	9b44      	ldr	r3, [sp, #272]	; 0x110
 8010e26:	a91a      	add	r1, sp, #104	; 0x68
 8010e28:	9356      	str	r3, [sp, #344]	; 0x158
 8010e2a:	9b4e      	ldr	r3, [sp, #312]	; 0x138
 8010e2c:	1889      	adds	r1, r1, r2
 8010e2e:	9357      	str	r3, [sp, #348]	; 0x15c
 8010e30:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8010e32:	9360      	str	r3, [sp, #384]	; 0x180
 8010e34:	9b4f      	ldr	r3, [sp, #316]	; 0x13c
 8010e36:	9361      	str	r3, [sp, #388]	; 0x184
 8010e38:	9b59      	ldr	r3, [sp, #356]	; 0x164
 8010e3a:	9300      	str	r3, [sp, #0]
 8010e3c:	2380      	movs	r3, #128	; 0x80
 8010e3e:	9800      	ldr	r0, [sp, #0]
 8010e40:	50c8      	str	r0, [r1, r3]
 8010e42:	9b46      	ldr	r3, [sp, #280]	; 0x118
 8010e44:	a91a      	add	r1, sp, #104	; 0x68
 8010e46:	9300      	str	r3, [sp, #0]
 8010e48:	23a0      	movs	r3, #160	; 0xa0
 8010e4a:	9800      	ldr	r0, [sp, #0]
 8010e4c:	1889      	adds	r1, r1, r2
 8010e4e:	50c8      	str	r0, [r1, r3]
 8010e50:	9b50      	ldr	r3, [sp, #320]	; 0x140
 8010e52:	a91a      	add	r1, sp, #104	; 0x68
 8010e54:	9300      	str	r3, [sp, #0]
 8010e56:	23a4      	movs	r3, #164	; 0xa4
 8010e58:	9800      	ldr	r0, [sp, #0]
 8010e5a:	1889      	adds	r1, r1, r2
 8010e5c:	50c8      	str	r0, [r1, r3]
 8010e5e:	9b5a      	ldr	r3, [sp, #360]	; 0x168
 8010e60:	a91a      	add	r1, sp, #104	; 0x68
 8010e62:	9300      	str	r3, [sp, #0]
 8010e64:	23a8      	movs	r3, #168	; 0xa8
 8010e66:	9800      	ldr	r0, [sp, #0]
 8010e68:	1889      	adds	r1, r1, r2
 8010e6a:	50c8      	str	r0, [r1, r3]
 8010e6c:	0011      	movs	r1, r2
 8010e6e:	a81a      	add	r0, sp, #104	; 0x68
 8010e70:	3b20      	subs	r3, #32
 8010e72:	1882      	adds	r2, r0, r2
 8010e74:	58d2      	ldr	r2, [r2, r3]
 8010e76:	1840      	adds	r0, r0, r1
 8010e78:	3324      	adds	r3, #36	; 0x24
 8010e7a:	50c2      	str	r2, [r0, r3]
 8010e7c:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8010e7e:	a81a      	add	r0, sp, #104	; 0x68
 8010e80:	9300      	str	r3, [sp, #0]
 8010e82:	23c8      	movs	r3, #200	; 0xc8
 8010e84:	000a      	movs	r2, r1
 8010e86:	1841      	adds	r1, r0, r1
 8010e88:	9800      	ldr	r0, [sp, #0]
 8010e8a:	50c8      	str	r0, [r1, r3]
 8010e8c:	9b51      	ldr	r3, [sp, #324]	; 0x144
 8010e8e:	a91a      	add	r1, sp, #104	; 0x68
 8010e90:	9300      	str	r3, [sp, #0]
 8010e92:	23cc      	movs	r3, #204	; 0xcc
 8010e94:	9800      	ldr	r0, [sp, #0]
 8010e96:	1889      	adds	r1, r1, r2
 8010e98:	50c8      	str	r0, [r1, r3]
 8010e9a:	9b5b      	ldr	r3, [sp, #364]	; 0x16c
 8010e9c:	a91a      	add	r1, sp, #104	; 0x68
 8010e9e:	9300      	str	r3, [sp, #0]
 8010ea0:	23d0      	movs	r3, #208	; 0xd0
 8010ea2:	9800      	ldr	r0, [sp, #0]
 8010ea4:	1889      	adds	r1, r1, r2
 8010ea6:	50c8      	str	r0, [r1, r3]
 8010ea8:	0011      	movs	r1, r2
 8010eaa:	a81a      	add	r0, sp, #104	; 0x68
 8010eac:	3b44      	subs	r3, #68	; 0x44
 8010eae:	1882      	adds	r2, r0, r2
 8010eb0:	58d2      	ldr	r2, [r2, r3]
 8010eb2:	1840      	adds	r0, r0, r1
 8010eb4:	3348      	adds	r3, #72	; 0x48
 8010eb6:	50c2      	str	r2, [r0, r3]
 8010eb8:	3b20      	subs	r3, #32
 8010eba:	58c2      	ldr	r2, [r0, r3]
 8010ebc:	a81a      	add	r0, sp, #104	; 0x68
 8010ebe:	1840      	adds	r0, r0, r1
 8010ec0:	3324      	adds	r3, #36	; 0x24
 8010ec2:	50c2      	str	r2, [r0, r3]
 8010ec4:	9b48      	ldr	r3, [sp, #288]	; 0x120
 8010ec6:	a81a      	add	r0, sp, #104	; 0x68
 8010ec8:	9300      	str	r3, [sp, #0]
 8010eca:	23f0      	movs	r3, #240	; 0xf0
 8010ecc:	000a      	movs	r2, r1
 8010ece:	1841      	adds	r1, r0, r1
 8010ed0:	9800      	ldr	r0, [sp, #0]
 8010ed2:	50c8      	str	r0, [r1, r3]
 8010ed4:	9b52      	ldr	r3, [sp, #328]	; 0x148
 8010ed6:	a91a      	add	r1, sp, #104	; 0x68
 8010ed8:	9300      	str	r3, [sp, #0]
 8010eda:	23f4      	movs	r3, #244	; 0xf4
 8010edc:	9800      	ldr	r0, [sp, #0]
 8010ede:	1889      	adds	r1, r1, r2
 8010ee0:	50c8      	str	r0, [r1, r3]
 8010ee2:	9b5c      	ldr	r3, [sp, #368]	; 0x170
 8010ee4:	a91a      	add	r1, sp, #104	; 0x68
 8010ee6:	9300      	str	r3, [sp, #0]
 8010ee8:	23f8      	movs	r3, #248	; 0xf8
 8010eea:	9800      	ldr	r0, [sp, #0]
 8010eec:	1889      	adds	r1, r1, r2
 8010eee:	50c8      	str	r0, [r1, r3]
 8010ef0:	0011      	movs	r1, r2
 8010ef2:	a81a      	add	r0, sp, #104	; 0x68
 8010ef4:	3b68      	subs	r3, #104	; 0x68
 8010ef6:	1882      	adds	r2, r0, r2
 8010ef8:	58d2      	ldr	r2, [r2, r3]
 8010efa:	1840      	adds	r0, r0, r1
 8010efc:	336c      	adds	r3, #108	; 0x6c
 8010efe:	50c2      	str	r2, [r0, r3]
 8010f00:	3b44      	subs	r3, #68	; 0x44
 8010f02:	58c2      	ldr	r2, [r0, r3]
 8010f04:	a81a      	add	r0, sp, #104	; 0x68
 8010f06:	1840      	adds	r0, r0, r1
 8010f08:	3348      	adds	r3, #72	; 0x48
 8010f0a:	50c2      	str	r2, [r0, r3]
 8010f0c:	3b20      	subs	r3, #32
 8010f0e:	58c2      	ldr	r2, [r0, r3]
 8010f10:	a81a      	add	r0, sp, #104	; 0x68
 8010f12:	1840      	adds	r0, r0, r1
 8010f14:	3324      	adds	r3, #36	; 0x24
 8010f16:	50c2      	str	r2, [r0, r3]
 8010f18:	9b49      	ldr	r3, [sp, #292]	; 0x124
 8010f1a:	a81a      	add	r0, sp, #104	; 0x68
 8010f1c:	9300      	str	r3, [sp, #0]
 8010f1e:	238c      	movs	r3, #140	; 0x8c
 8010f20:	000a      	movs	r2, r1
 8010f22:	1841      	adds	r1, r0, r1
 8010f24:	9800      	ldr	r0, [sp, #0]
 8010f26:	005b      	lsls	r3, r3, #1
 8010f28:	50c8      	str	r0, [r1, r3]
 8010f2a:	9b53      	ldr	r3, [sp, #332]	; 0x14c
 8010f2c:	a91a      	add	r1, sp, #104	; 0x68
 8010f2e:	9300      	str	r3, [sp, #0]
 8010f30:	238e      	movs	r3, #142	; 0x8e
 8010f32:	9800      	ldr	r0, [sp, #0]
 8010f34:	1889      	adds	r1, r1, r2
 8010f36:	005b      	lsls	r3, r3, #1
 8010f38:	50c8      	str	r0, [r1, r3]
 8010f3a:	9b5d      	ldr	r3, [sp, #372]	; 0x174
 8010f3c:	a91a      	add	r1, sp, #104	; 0x68
 8010f3e:	9300      	str	r3, [sp, #0]
 8010f40:	2390      	movs	r3, #144	; 0x90
 8010f42:	9800      	ldr	r0, [sp, #0]
 8010f44:	1889      	adds	r1, r1, r2
 8010f46:	005b      	lsls	r3, r3, #1
 8010f48:	50c8      	str	r0, [r1, r3]
 8010f4a:	0011      	movs	r1, r2
 8010f4c:	a81a      	add	r0, sp, #104	; 0x68
 8010f4e:	3b8c      	subs	r3, #140	; 0x8c
 8010f50:	1882      	adds	r2, r0, r2
 8010f52:	58d2      	ldr	r2, [r2, r3]
 8010f54:	1840      	adds	r0, r0, r1
 8010f56:	3390      	adds	r3, #144	; 0x90
 8010f58:	50c2      	str	r2, [r0, r3]
 8010f5a:	3b68      	subs	r3, #104	; 0x68
 8010f5c:	58c2      	ldr	r2, [r0, r3]
 8010f5e:	a81a      	add	r0, sp, #104	; 0x68
 8010f60:	1840      	adds	r0, r0, r1
 8010f62:	336c      	adds	r3, #108	; 0x6c
 8010f64:	50c2      	str	r2, [r0, r3]
 8010f66:	3b44      	subs	r3, #68	; 0x44
 8010f68:	58c2      	ldr	r2, [r0, r3]
 8010f6a:	a81a      	add	r0, sp, #104	; 0x68
 8010f6c:	1840      	adds	r0, r0, r1
 8010f6e:	3348      	adds	r3, #72	; 0x48
 8010f70:	50c2      	str	r2, [r0, r3]
 8010f72:	3b20      	subs	r3, #32
 8010f74:	58c2      	ldr	r2, [r0, r3]
 8010f76:	a81a      	add	r0, sp, #104	; 0x68
 8010f78:	1840      	adds	r0, r0, r1
 8010f7a:	3324      	adds	r3, #36	; 0x24
 8010f7c:	50c2      	str	r2, [r0, r3]
 8010f7e:	9b4a      	ldr	r3, [sp, #296]	; 0x128
 8010f80:	a81a      	add	r0, sp, #104	; 0x68
 8010f82:	9300      	str	r3, [sp, #0]
 8010f84:	23a0      	movs	r3, #160	; 0xa0
 8010f86:	000a      	movs	r2, r1
 8010f88:	1841      	adds	r1, r0, r1
 8010f8a:	9800      	ldr	r0, [sp, #0]
 8010f8c:	005b      	lsls	r3, r3, #1
 8010f8e:	50c8      	str	r0, [r1, r3]
 8010f90:	9b54      	ldr	r3, [sp, #336]	; 0x150
 8010f92:	a91a      	add	r1, sp, #104	; 0x68
 8010f94:	9300      	str	r3, [sp, #0]
 8010f96:	23a2      	movs	r3, #162	; 0xa2
 8010f98:	9800      	ldr	r0, [sp, #0]
 8010f9a:	1889      	adds	r1, r1, r2
 8010f9c:	005b      	lsls	r3, r3, #1
 8010f9e:	50c8      	str	r0, [r1, r3]
 8010fa0:	9b5e      	ldr	r3, [sp, #376]	; 0x178
 8010fa2:	a91a      	add	r1, sp, #104	; 0x68
 8010fa4:	9300      	str	r3, [sp, #0]
 8010fa6:	23a4      	movs	r3, #164	; 0xa4
 8010fa8:	9800      	ldr	r0, [sp, #0]
 8010faa:	1889      	adds	r1, r1, r2
 8010fac:	005b      	lsls	r3, r3, #1
 8010fae:	50c8      	str	r0, [r1, r3]
 8010fb0:	0011      	movs	r1, r2
 8010fb2:	a81a      	add	r0, sp, #104	; 0x68
 8010fb4:	3bb0      	subs	r3, #176	; 0xb0
 8010fb6:	1882      	adds	r2, r0, r2
 8010fb8:	58d2      	ldr	r2, [r2, r3]
 8010fba:	1840      	adds	r0, r0, r1
 8010fbc:	33b4      	adds	r3, #180	; 0xb4
 8010fbe:	50c2      	str	r2, [r0, r3]
 8010fc0:	3b8c      	subs	r3, #140	; 0x8c
 8010fc2:	58c2      	ldr	r2, [r0, r3]
 8010fc4:	a81a      	add	r0, sp, #104	; 0x68
 8010fc6:	1840      	adds	r0, r0, r1
 8010fc8:	3390      	adds	r3, #144	; 0x90
 8010fca:	50c2      	str	r2, [r0, r3]
 8010fcc:	3b68      	subs	r3, #104	; 0x68
 8010fce:	58c2      	ldr	r2, [r0, r3]
 8010fd0:	a81a      	add	r0, sp, #104	; 0x68
 8010fd2:	1840      	adds	r0, r0, r1
 8010fd4:	336c      	adds	r3, #108	; 0x6c
 8010fd6:	50c2      	str	r2, [r0, r3]
 8010fd8:	3b44      	subs	r3, #68	; 0x44
 8010fda:	58c2      	ldr	r2, [r0, r3]
 8010fdc:	a81a      	add	r0, sp, #104	; 0x68
 8010fde:	1840      	adds	r0, r0, r1
 8010fe0:	3348      	adds	r3, #72	; 0x48
 8010fe2:	50c2      	str	r2, [r0, r3]
 8010fe4:	3b20      	subs	r3, #32
 8010fe6:	58c2      	ldr	r2, [r0, r3]
 8010fe8:	a81a      	add	r0, sp, #104	; 0x68
 8010fea:	3324      	adds	r3, #36	; 0x24
 8010fec:	1841      	adds	r1, r0, r1
 8010fee:	50ca      	str	r2, [r1, r3]
 8010ff0:	3b54      	subs	r3, #84	; 0x54
 8010ff2:	3bff      	subs	r3, #255	; 0xff
 8010ff4:	469b      	mov	fp, r3
 8010ff6:	9318      	str	r3, [sp, #96]	; 0x60
 8010ff8:	e4c0      	b.n	801097c <calibrate+0x7c>
 8010ffa:	4b14      	ldr	r3, [pc, #80]	; (801104c <calibrate+0x74c>)
 8010ffc:	9915      	ldr	r1, [sp, #84]	; 0x54
 8010ffe:	4a14      	ldr	r2, [pc, #80]	; (8011050 <calibrate+0x750>)
 8011000:	981a      	ldr	r0, [sp, #104]	; 0x68
 8011002:	50ca      	str	r2, [r1, r3]
 8011004:	22b4      	movs	r2, #180	; 0xb4
 8011006:	2100      	movs	r1, #0
 8011008:	0052      	lsls	r2, r2, #1
 801100a:	f002 fd2c 	bl	8013a66 <memset>
 801100e:	4a0b      	ldr	r2, [pc, #44]	; (801103c <calibrate+0x73c>)
 8011010:	9c19      	ldr	r4, [sp, #100]	; 0x64
 8011012:	4694      	mov	ip, r2
 8011014:	6863      	ldr	r3, [r4, #4]
 8011016:	220c      	movs	r2, #12
 8011018:	9300      	str	r3, [sp, #0]
 801101a:	4463      	add	r3, ip
 801101c:	0018      	movs	r0, r3
 801101e:	a921      	add	r1, sp, #132	; 0x84
 8011020:	f002 fd18 	bl	8013a54 <memcpy>
 8011024:	6823      	ldr	r3, [r4, #0]
 8011026:	9300      	str	r3, [sp, #0]
 8011028:	781b      	ldrb	r3, [r3, #0]
 801102a:	2b01      	cmp	r3, #1
 801102c:	d101      	bne.n	8011032 <calibrate+0x732>
 801102e:	f000 ff5e 	bl	8011eee <calibrate+0x15ee>
 8011032:	2000      	movs	r0, #0
 8011034:	e6e0      	b.n	8010df8 <calibrate+0x4f8>
 8011036:	46c0      	nop			; (mov r8, r8)
 8011038:	000004e4 	.word	0x000004e4
 801103c:	0000065c 	.word	0x0000065c
 8011040:	000004ec 	.word	0x000004ec
 8011044:	00000664 	.word	0x00000664
 8011048:	0000068c 	.word	0x0000068c
 801104c:	000004cc 	.word	0x000004cc
 8011050:	ffff0000 	.word	0xffff0000
 8011054:	4653      	mov	r3, sl
 8011056:	9342      	str	r3, [sp, #264]	; 0x108
 8011058:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801105a:	2580      	movs	r5, #128	; 0x80
 801105c:	469b      	mov	fp, r3
 801105e:	9343      	str	r3, [sp, #268]	; 0x10c
 8011060:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8011062:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8011064:	9344      	str	r3, [sp, #272]	; 0x110
 8011066:	9301      	str	r3, [sp, #4]
 8011068:	9356      	str	r3, [sp, #344]	; 0x158
 801106a:	23a0      	movs	r3, #160	; 0xa0
 801106c:	4659      	mov	r1, fp
 801106e:	9406      	str	r4, [sp, #24]
 8011070:	9458      	str	r4, [sp, #352]	; 0x160
 8011072:	ae1a      	add	r6, sp, #104	; 0x68
 8011074:	9c2f      	ldr	r4, [sp, #188]	; 0xbc
 8011076:	18f6      	adds	r6, r6, r3
 8011078:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 801107a:	5174      	str	r4, [r6, r5]
 801107c:	2684      	movs	r6, #132	; 0x84
 801107e:	9245      	str	r2, [sp, #276]	; 0x114
 8011080:	9202      	str	r2, [sp, #8]
 8011082:	9260      	str	r2, [sp, #384]	; 0x180
 8011084:	22b4      	movs	r2, #180	; 0xb4
 8011086:	914c      	str	r1, [sp, #304]	; 0x130
 8011088:	9928      	ldr	r1, [sp, #160]	; 0xa0
 801108a:	4df3      	ldr	r5, [pc, #972]	; (8011458 <calibrate+0xb58>)
 801108c:	af1a      	add	r7, sp, #104	; 0x68
 801108e:	18ff      	adds	r7, r7, r3
 8011090:	9104      	str	r1, [sp, #16]
 8011092:	914d      	str	r1, [sp, #308]	; 0x134
 8011094:	992c      	ldr	r1, [sp, #176]	; 0xb0
 8011096:	982e      	ldr	r0, [sp, #184]	; 0xb8
 8011098:	51bd      	str	r5, [r7, r6]
 801109a:	af42      	add	r7, sp, #264	; 0x108
 801109c:	914e      	str	r1, [sp, #312]	; 0x138
 801109e:	9103      	str	r1, [sp, #12]
 80110a0:	9157      	str	r1, [sp, #348]	; 0x15c
 80110a2:	0039      	movs	r1, r7
 80110a4:	af9c      	add	r7, sp, #624	; 0x270
 80110a6:	0052      	lsls	r2, r2, #1
 80110a8:	904f      	str	r0, [sp, #316]	; 0x13c
 80110aa:	9005      	str	r0, [sp, #20]
 80110ac:	9061      	str	r0, [sp, #388]	; 0x184
 80110ae:	0038      	movs	r0, r7
 80110b0:	9459      	str	r4, [sp, #356]	; 0x164
 80110b2:	9407      	str	r4, [sp, #28]
 80110b4:	f002 fcce 	bl	8013a54 <memcpy>
 80110b8:	9f9c      	ldr	r7, [sp, #624]	; 0x270
 80110ba:	98a6      	ldr	r0, [sp, #664]	; 0x298
 80110bc:	1c39      	adds	r1, r7, #0
 80110be:	f7ef fcad 	bl	8000a1c <__aeabi_fdiv>
 80110c2:	999d      	ldr	r1, [sp, #628]	; 0x274
 80110c4:	1c04      	adds	r4, r0, #0
 80110c6:	f7ef fe71 	bl	8000dac <__aeabi_fmul>
 80110ca:	1c01      	adds	r1, r0, #0
 80110cc:	98a7      	ldr	r0, [sp, #668]	; 0x29c
 80110ce:	f7ef ff93 	bl	8000ff8 <__aeabi_fsub>
 80110d2:	999e      	ldr	r1, [sp, #632]	; 0x278
 80110d4:	4681      	mov	r9, r0
 80110d6:	90a7      	str	r0, [sp, #668]	; 0x29c
 80110d8:	1c20      	adds	r0, r4, #0
 80110da:	f7ef fe67 	bl	8000dac <__aeabi_fmul>
 80110de:	1c01      	adds	r1, r0, #0
 80110e0:	98a8      	ldr	r0, [sp, #672]	; 0x2a0
 80110e2:	f7ef ff89 	bl	8000ff8 <__aeabi_fsub>
 80110e6:	999f      	ldr	r1, [sp, #636]	; 0x27c
 80110e8:	1c06      	adds	r6, r0, #0
 80110ea:	90a8      	str	r0, [sp, #672]	; 0x2a0
 80110ec:	1c20      	adds	r0, r4, #0
 80110ee:	f7ef fe5d 	bl	8000dac <__aeabi_fmul>
 80110f2:	1c01      	adds	r1, r0, #0
 80110f4:	98a9      	ldr	r0, [sp, #676]	; 0x2a4
 80110f6:	f7ef ff7f 	bl	8000ff8 <__aeabi_fsub>
 80110fa:	1c39      	adds	r1, r7, #0
 80110fc:	9000      	str	r0, [sp, #0]
 80110fe:	98b0      	ldr	r0, [sp, #704]	; 0x2c0
 8011100:	9708      	str	r7, [sp, #32]
 8011102:	f7ef fc8b 	bl	8000a1c <__aeabi_fdiv>
 8011106:	999d      	ldr	r1, [sp, #628]	; 0x274
 8011108:	1c07      	adds	r7, r0, #0
 801110a:	f7ef fe4f 	bl	8000dac <__aeabi_fmul>
 801110e:	1c01      	adds	r1, r0, #0
 8011110:	98b1      	ldr	r0, [sp, #708]	; 0x2c4
 8011112:	f7ef ff71 	bl	8000ff8 <__aeabi_fsub>
 8011116:	999e      	ldr	r1, [sp, #632]	; 0x278
 8011118:	1c04      	adds	r4, r0, #0
 801111a:	90b1      	str	r0, [sp, #708]	; 0x2c4
 801111c:	1c38      	adds	r0, r7, #0
 801111e:	f7ef fe45 	bl	8000dac <__aeabi_fmul>
 8011122:	1c01      	adds	r1, r0, #0
 8011124:	98b2      	ldr	r0, [sp, #712]	; 0x2c8
 8011126:	f7ef ff67 	bl	8000ff8 <__aeabi_fsub>
 801112a:	999f      	ldr	r1, [sp, #636]	; 0x27c
 801112c:	1c05      	adds	r5, r0, #0
 801112e:	1c38      	adds	r0, r7, #0
 8011130:	f7ef fe3c 	bl	8000dac <__aeabi_fmul>
 8011134:	1c01      	adds	r1, r0, #0
 8011136:	98b3      	ldr	r0, [sp, #716]	; 0x2cc
 8011138:	f7ef ff5e 	bl	8000ff8 <__aeabi_fsub>
 801113c:	4649      	mov	r1, r9
 801113e:	9009      	str	r0, [sp, #36]	; 0x24
 8011140:	989d      	ldr	r0, [sp, #628]	; 0x274
 8011142:	f7ef fc6b 	bl	8000a1c <__aeabi_fdiv>
 8011146:	1c31      	adds	r1, r6, #0
 8011148:	4680      	mov	r8, r0
 801114a:	f7ef fe2f 	bl	8000dac <__aeabi_fmul>
 801114e:	1c01      	adds	r1, r0, #0
 8011150:	989e      	ldr	r0, [sp, #632]	; 0x278
 8011152:	f7ef ff51 	bl	8000ff8 <__aeabi_fsub>
 8011156:	9900      	ldr	r1, [sp, #0]
 8011158:	1c07      	adds	r7, r0, #0
 801115a:	909e      	str	r0, [sp, #632]	; 0x278
 801115c:	4640      	mov	r0, r8
 801115e:	f7ef fe25 	bl	8000dac <__aeabi_fmul>
 8011162:	1c01      	adds	r1, r0, #0
 8011164:	989f      	ldr	r0, [sp, #636]	; 0x27c
 8011166:	f7ef ff47 	bl	8000ff8 <__aeabi_fsub>
 801116a:	4649      	mov	r1, r9
 801116c:	4680      	mov	r8, r0
 801116e:	1c20      	adds	r0, r4, #0
 8011170:	f7ef fc54 	bl	8000a1c <__aeabi_fdiv>
 8011174:	1c31      	adds	r1, r6, #0
 8011176:	1c04      	adds	r4, r0, #0
 8011178:	f7ef fe18 	bl	8000dac <__aeabi_fmul>
 801117c:	1c01      	adds	r1, r0, #0
 801117e:	1c28      	adds	r0, r5, #0
 8011180:	f7ef ff3a 	bl	8000ff8 <__aeabi_fsub>
 8011184:	9900      	ldr	r1, [sp, #0]
 8011186:	1c05      	adds	r5, r0, #0
 8011188:	90b2      	str	r0, [sp, #712]	; 0x2c8
 801118a:	1c20      	adds	r0, r4, #0
 801118c:	f7ef fe0e 	bl	8000dac <__aeabi_fmul>
 8011190:	1c01      	adds	r1, r0, #0
 8011192:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011194:	f7ef ff30 	bl	8000ff8 <__aeabi_fsub>
 8011198:	1c29      	adds	r1, r5, #0
 801119a:	1c04      	adds	r4, r0, #0
 801119c:	90b3      	str	r0, [sp, #716]	; 0x2cc
 801119e:	1c38      	adds	r0, r7, #0
 80111a0:	f7ef fc3c 	bl	8000a1c <__aeabi_fdiv>
 80111a4:	1c21      	adds	r1, r4, #0
 80111a6:	f7ef fe01 	bl	8000dac <__aeabi_fmul>
 80111aa:	1c01      	adds	r1, r0, #0
 80111ac:	4640      	mov	r0, r8
 80111ae:	f7ef ff23 	bl	8000ff8 <__aeabi_fsub>
 80111b2:	1c29      	adds	r1, r5, #0
 80111b4:	1c07      	adds	r7, r0, #0
 80111b6:	909f      	str	r0, [sp, #636]	; 0x27c
 80111b8:	1c30      	adds	r0, r6, #0
 80111ba:	f7ef fc2f 	bl	8000a1c <__aeabi_fdiv>
 80111be:	1c21      	adds	r1, r4, #0
 80111c0:	f7ef fdf4 	bl	8000dac <__aeabi_fmul>
 80111c4:	1c01      	adds	r1, r0, #0
 80111c6:	9800      	ldr	r0, [sp, #0]
 80111c8:	f7ef ff16 	bl	8000ff8 <__aeabi_fsub>
 80111cc:	9908      	ldr	r1, [sp, #32]
 80111ce:	1c06      	adds	r6, r0, #0
 80111d0:	90a9      	str	r0, [sp, #676]	; 0x2a4
 80111d2:	1c38      	adds	r0, r7, #0
 80111d4:	f7ef fc22 	bl	8000a1c <__aeabi_fdiv>
 80111d8:	4649      	mov	r1, r9
 80111da:	9000      	str	r0, [sp, #0]
 80111dc:	1c30      	adds	r0, r6, #0
 80111de:	f7ef fc1d 	bl	8000a1c <__aeabi_fdiv>
 80111e2:	1c29      	adds	r1, r5, #0
 80111e4:	4680      	mov	r8, r0
 80111e6:	1c20      	adds	r0, r4, #0
 80111e8:	f7ef fc18 	bl	8000a1c <__aeabi_fdiv>
 80111ec:	1c07      	adds	r7, r0, #0
 80111ee:	2080      	movs	r0, #128	; 0x80
 80111f0:	9b00      	ldr	r3, [sp, #0]
 80111f2:	0600      	lsls	r0, r0, #24
 80111f4:	4684      	mov	ip, r0
 80111f6:	001d      	movs	r5, r3
 80111f8:	9c15      	ldr	r4, [sp, #84]	; 0x54
 80111fa:	1c19      	adds	r1, r3, #0
 80111fc:	4b97      	ldr	r3, [pc, #604]	; (801145c <calibrate+0xb5c>)
 80111fe:	4465      	add	r5, ip
 8011200:	58e0      	ldr	r0, [r4, r3]
 8011202:	9527      	str	r5, [sp, #156]	; 0x9c
 8011204:	f7ef fef8 	bl	8000ff8 <__aeabi_fsub>
 8011208:	002e      	movs	r6, r5
 801120a:	2580      	movs	r5, #128	; 0x80
 801120c:	4b94      	ldr	r3, [pc, #592]	; (8011460 <calibrate+0xb60>)
 801120e:	062d      	lsls	r5, r5, #24
 8011210:	50e0      	str	r0, [r4, r3]
 8011212:	3b75      	subs	r3, #117	; 0x75
 8011214:	3bff      	subs	r3, #255	; 0xff
 8011216:	4445      	add	r5, r8
 8011218:	58e0      	ldr	r0, [r4, r3]
 801121a:	4641      	mov	r1, r8
 801121c:	9528      	str	r5, [sp, #160]	; 0xa0
 801121e:	f7ef feeb 	bl	8000ff8 <__aeabi_fsub>
 8011222:	23cc      	movs	r3, #204	; 0xcc
 8011224:	00db      	lsls	r3, r3, #3
 8011226:	50e0      	str	r0, [r4, r3]
 8011228:	2080      	movs	r0, #128	; 0x80
 801122a:	0022      	movs	r2, r4
 801122c:	4b8d      	ldr	r3, [pc, #564]	; (8011464 <calibrate+0xb64>)
 801122e:	0600      	lsls	r0, r0, #24
 8011230:	183c      	adds	r4, r7, r0
 8011232:	1c39      	adds	r1, r7, #0
 8011234:	9429      	str	r4, [sp, #164]	; 0xa4
 8011236:	58d0      	ldr	r0, [r2, r3]
 8011238:	0017      	movs	r7, r2
 801123a:	f7ef fedd 	bl	8000ff8 <__aeabi_fsub>
 801123e:	4b8a      	ldr	r3, [pc, #552]	; (8011468 <calibrate+0xb68>)
 8011240:	1c29      	adds	r1, r5, #0
 8011242:	50f8      	str	r0, [r7, r3]
 8011244:	27fe      	movs	r7, #254	; 0xfe
 8011246:	4658      	mov	r0, fp
 8011248:	05bf      	lsls	r7, r7, #22
 801124a:	972a      	str	r7, [sp, #168]	; 0xa8
 801124c:	f7ef fdae 	bl	8000dac <__aeabi_fmul>
 8011250:	1c31      	adds	r1, r6, #0
 8011252:	1c07      	adds	r7, r0, #0
 8011254:	4650      	mov	r0, sl
 8011256:	f7ef fda9 	bl	8000dac <__aeabi_fmul>
 801125a:	1c01      	adds	r1, r0, #0
 801125c:	1c38      	adds	r0, r7, #0
 801125e:	f7ef fa3f 	bl	80006e0 <__aeabi_fadd>
 8011262:	9902      	ldr	r1, [sp, #8]
 8011264:	f7ef fa3c 	bl	80006e0 <__aeabi_fadd>
 8011268:	9b01      	ldr	r3, [sp, #4]
 801126a:	1c07      	adds	r7, r0, #0
 801126c:	1c21      	adds	r1, r4, #0
 801126e:	1c18      	adds	r0, r3, #0
 8011270:	4699      	mov	r9, r3
 8011272:	f7ef fd9b 	bl	8000dac <__aeabi_fmul>
 8011276:	1c39      	adds	r1, r7, #0
 8011278:	f7ef fa32 	bl	80006e0 <__aeabi_fadd>
 801127c:	1c29      	adds	r1, r5, #0
 801127e:	9000      	str	r0, [sp, #0]
 8011280:	9060      	str	r0, [sp, #384]	; 0x180
 8011282:	9804      	ldr	r0, [sp, #16]
 8011284:	f7ef fd92 	bl	8000dac <__aeabi_fmul>
 8011288:	1c31      	adds	r1, r6, #0
 801128a:	1c07      	adds	r7, r0, #0
 801128c:	4658      	mov	r0, fp
 801128e:	f7ef fd8d 	bl	8000dac <__aeabi_fmul>
 8011292:	1c01      	adds	r1, r0, #0
 8011294:	1c38      	adds	r0, r7, #0
 8011296:	f7ef fa23 	bl	80006e0 <__aeabi_fadd>
 801129a:	9905      	ldr	r1, [sp, #20]
 801129c:	f7ef fa20 	bl	80006e0 <__aeabi_fadd>
 80112a0:	1c21      	adds	r1, r4, #0
 80112a2:	1c07      	adds	r7, r0, #0
 80112a4:	9803      	ldr	r0, [sp, #12]
 80112a6:	f7ef fd81 	bl	8000dac <__aeabi_fmul>
 80112aa:	1c39      	adds	r1, r7, #0
 80112ac:	f7ef fa18 	bl	80006e0 <__aeabi_fadd>
 80112b0:	1c29      	adds	r1, r5, #0
 80112b2:	4680      	mov	r8, r0
 80112b4:	9061      	str	r0, [sp, #388]	; 0x184
 80112b6:	9803      	ldr	r0, [sp, #12]
 80112b8:	f7ef fd78 	bl	8000dac <__aeabi_fmul>
 80112bc:	464b      	mov	r3, r9
 80112be:	1c07      	adds	r7, r0, #0
 80112c0:	1c31      	adds	r1, r6, #0
 80112c2:	4648      	mov	r0, r9
 80112c4:	9301      	str	r3, [sp, #4]
 80112c6:	f7ef fd71 	bl	8000dac <__aeabi_fmul>
 80112ca:	1c01      	adds	r1, r0, #0
 80112cc:	1c38      	adds	r0, r7, #0
 80112ce:	f7ef fa07 	bl	80006e0 <__aeabi_fadd>
 80112d2:	9907      	ldr	r1, [sp, #28]
 80112d4:	f7ef fa04 	bl	80006e0 <__aeabi_fadd>
 80112d8:	1c21      	adds	r1, r4, #0
 80112da:	1c07      	adds	r7, r0, #0
 80112dc:	9806      	ldr	r0, [sp, #24]
 80112de:	f7ef fd65 	bl	8000dac <__aeabi_fmul>
 80112e2:	1c39      	adds	r1, r7, #0
 80112e4:	f7ef f9fc 	bl	80006e0 <__aeabi_fadd>
 80112e8:	23a0      	movs	r3, #160	; 0xa0
 80112ea:	2280      	movs	r2, #128	; 0x80
 80112ec:	a91a      	add	r1, sp, #104	; 0x68
 80112ee:	18cb      	adds	r3, r1, r3
 80112f0:	5098      	str	r0, [r3, r2]
 80112f2:	1c07      	adds	r7, r0, #0
 80112f4:	1c31      	adds	r1, r6, #0
 80112f6:	9802      	ldr	r0, [sp, #8]
 80112f8:	f7ef fd58 	bl	8000dac <__aeabi_fmul>
 80112fc:	1c29      	adds	r1, r5, #0
 80112fe:	4681      	mov	r9, r0
 8011300:	9805      	ldr	r0, [sp, #20]
 8011302:	f7ef fd53 	bl	8000dac <__aeabi_fmul>
 8011306:	1c01      	adds	r1, r0, #0
 8011308:	4648      	mov	r0, r9
 801130a:	f7ef f9e9 	bl	80006e0 <__aeabi_fadd>
 801130e:	21fe      	movs	r1, #254	; 0xfe
 8011310:	0589      	lsls	r1, r1, #22
 8011312:	f7ef fe71 	bl	8000ff8 <__aeabi_fsub>
 8011316:	4681      	mov	r9, r0
 8011318:	1c21      	adds	r1, r4, #0
 801131a:	9807      	ldr	r0, [sp, #28]
 801131c:	f7ef fd46 	bl	8000dac <__aeabi_fmul>
 8011320:	4649      	mov	r1, r9
 8011322:	f7ef f9dd 	bl	80006e0 <__aeabi_fadd>
 8011326:	1c31      	adds	r1, r6, #0
 8011328:	4681      	mov	r9, r0
 801132a:	9800      	ldr	r0, [sp, #0]
 801132c:	f7ef fd3e 	bl	8000dac <__aeabi_fmul>
 8011330:	1c29      	adds	r1, r5, #0
 8011332:	1c06      	adds	r6, r0, #0
 8011334:	4640      	mov	r0, r8
 8011336:	f7ef fd39 	bl	8000dac <__aeabi_fmul>
 801133a:	1c31      	adds	r1, r6, #0
 801133c:	f7ef f9d0 	bl	80006e0 <__aeabi_fadd>
 8011340:	1c39      	adds	r1, r7, #0
 8011342:	1c05      	adds	r5, r0, #0
 8011344:	1c20      	adds	r0, r4, #0
 8011346:	f7ef fd31 	bl	8000dac <__aeabi_fmul>
 801134a:	1c01      	adds	r1, r0, #0
 801134c:	1c28      	adds	r0, r5, #0
 801134e:	f7ef f9c7 	bl	80006e0 <__aeabi_fadd>
 8011352:	4649      	mov	r1, r9
 8011354:	f7ef f9c4 	bl	80006e0 <__aeabi_fadd>
 8011358:	23a0      	movs	r3, #160	; 0xa0
 801135a:	2684      	movs	r6, #132	; 0x84
 801135c:	aa1a      	add	r2, sp, #104	; 0x68
 801135e:	18d2      	adds	r2, r2, r3
 8011360:	5190      	str	r0, [r2, r6]
 8011362:	1c01      	adds	r1, r0, #0
 8011364:	20fe      	movs	r0, #254	; 0xfe
 8011366:	0580      	lsls	r0, r0, #22
 8011368:	f7ef fb58 	bl	8000a1c <__aeabi_fdiv>
 801136c:	2680      	movs	r6, #128	; 0x80
 801136e:	1c05      	adds	r5, r0, #0
 8011370:	1c01      	adds	r1, r0, #0
 8011372:	4650      	mov	r0, sl
 8011374:	f7ef fd1a 	bl	8000dac <__aeabi_fmul>
 8011378:	0636      	lsls	r6, r6, #24
 801137a:	46b4      	mov	ip, r6
 801137c:	0002      	movs	r2, r0
 801137e:	1c29      	adds	r1, r5, #0
 8011380:	4462      	add	r2, ip
 8011382:	9000      	str	r0, [sp, #0]
 8011384:	4658      	mov	r0, fp
 8011386:	0016      	movs	r6, r2
 8011388:	9205      	str	r2, [sp, #20]
 801138a:	9242      	str	r2, [sp, #264]	; 0x108
 801138c:	f7ef fd0e 	bl	8000dac <__aeabi_fmul>
 8011390:	2280      	movs	r2, #128	; 0x80
 8011392:	0612      	lsls	r2, r2, #24
 8011394:	4694      	mov	ip, r2
 8011396:	4484      	add	ip, r0
 8011398:	4662      	mov	r2, ip
 801139a:	1c04      	adds	r4, r0, #0
 801139c:	1c29      	adds	r1, r5, #0
 801139e:	9801      	ldr	r0, [sp, #4]
 80113a0:	46e0      	mov	r8, ip
 80113a2:	9243      	str	r2, [sp, #268]	; 0x10c
 80113a4:	f7ef fd02 	bl	8000dac <__aeabi_fmul>
 80113a8:	2380      	movs	r3, #128	; 0x80
 80113aa:	4682      	mov	sl, r0
 80113ac:	061b      	lsls	r3, r3, #24
 80113ae:	4453      	add	r3, sl
 80113b0:	001f      	movs	r7, r3
 80113b2:	9344      	str	r3, [sp, #272]	; 0x110
 80113b4:	4643      	mov	r3, r8
 80113b6:	1c29      	adds	r1, r5, #0
 80113b8:	9804      	ldr	r0, [sp, #16]
 80113ba:	934c      	str	r3, [sp, #304]	; 0x130
 80113bc:	f7ef fcf6 	bl	8000dac <__aeabi_fmul>
 80113c0:	2280      	movs	r2, #128	; 0x80
 80113c2:	0612      	lsls	r2, r2, #24
 80113c4:	4694      	mov	ip, r2
 80113c6:	1c03      	adds	r3, r0, #0
 80113c8:	4463      	add	r3, ip
 80113ca:	1c29      	adds	r1, r5, #0
 80113cc:	9001      	str	r0, [sp, #4]
 80113ce:	9803      	ldr	r0, [sp, #12]
 80113d0:	9302      	str	r3, [sp, #8]
 80113d2:	934d      	str	r3, [sp, #308]	; 0x134
 80113d4:	f7ef fcea 	bl	8000dac <__aeabi_fmul>
 80113d8:	2280      	movs	r2, #128	; 0x80
 80113da:	4681      	mov	r9, r0
 80113dc:	0612      	lsls	r2, r2, #24
 80113de:	444a      	add	r2, r9
 80113e0:	1c29      	adds	r1, r5, #0
 80113e2:	9806      	ldr	r0, [sp, #24]
 80113e4:	4693      	mov	fp, r2
 80113e6:	924e      	str	r2, [sp, #312]	; 0x138
 80113e8:	9257      	str	r2, [sp, #348]	; 0x15c
 80113ea:	9756      	str	r7, [sp, #344]	; 0x158
 80113ec:	f7ef fcde 	bl	8000dac <__aeabi_fmul>
 80113f0:	2180      	movs	r1, #128	; 0x80
 80113f2:	0609      	lsls	r1, r1, #24
 80113f4:	468c      	mov	ip, r1
 80113f6:	0002      	movs	r2, r0
 80113f8:	9003      	str	r0, [sp, #12]
 80113fa:	4462      	add	r2, ip
 80113fc:	1c21      	adds	r1, r4, #0
 80113fe:	1c20      	adds	r0, r4, #0
 8011400:	9206      	str	r2, [sp, #24]
 8011402:	9258      	str	r2, [sp, #352]	; 0x160
 8011404:	f7ef fcd2 	bl	8000dac <__aeabi_fmul>
 8011408:	4651      	mov	r1, sl
 801140a:	1c05      	adds	r5, r0, #0
 801140c:	9009      	str	r0, [sp, #36]	; 0x24
 801140e:	4650      	mov	r0, sl
 8011410:	f7ef fccc 	bl	8000dac <__aeabi_fmul>
 8011414:	1c01      	adds	r1, r0, #0
 8011416:	900a      	str	r0, [sp, #40]	; 0x28
 8011418:	1c28      	adds	r0, r5, #0
 801141a:	f7ef f961 	bl	80006e0 <__aeabi_fadd>
 801141e:	4649      	mov	r1, r9
 8011420:	1c05      	adds	r5, r0, #0
 8011422:	9008      	str	r0, [sp, #32]
 8011424:	4648      	mov	r0, r9
 8011426:	f7ef fcc1 	bl	8000dac <__aeabi_fmul>
 801142a:	1c01      	adds	r1, r0, #0
 801142c:	9004      	str	r0, [sp, #16]
 801142e:	1c28      	adds	r0, r5, #0
 8011430:	f7ef f956 	bl	80006e0 <__aeabi_fadd>
 8011434:	2100      	movs	r1, #0
 8011436:	1c05      	adds	r5, r0, #0
 8011438:	f7ee fff2 	bl	8000420 <__aeabi_fcmpeq>
 801143c:	2800      	cmp	r0, #0
 801143e:	d101      	bne.n	8011444 <calibrate+0xb44>
 8011440:	f000 fca4 	bl	8011d8c <calibrate+0x148c>
 8011444:	9a06      	ldr	r2, [sp, #24]
 8011446:	9b02      	ldr	r3, [sp, #8]
 8011448:	4693      	mov	fp, r2
 801144a:	961e      	str	r6, [sp, #120]	; 0x78
 801144c:	931f      	str	r3, [sp, #124]	; 0x7c
 801144e:	9220      	str	r2, [sp, #128]	; 0x80
 8011450:	930b      	str	r3, [sp, #44]	; 0x2c
 8011452:	9607      	str	r6, [sp, #28]
 8011454:	e00a      	b.n	801146c <calibrate+0xb6c>
 8011456:	46c0      	nop			; (mov r8, r8)
 8011458:	bf800000 	.word	0xbf800000
 801145c:	000004e4 	.word	0x000004e4
 8011460:	0000065c 	.word	0x0000065c
 8011464:	000004ec 	.word	0x000004ec
 8011468:	00000664 	.word	0x00000664
 801146c:	9f05      	ldr	r7, [sp, #20]
 801146e:	4659      	mov	r1, fp
 8011470:	1c38      	adds	r0, r7, #0
 8011472:	f7ef fdc1 	bl	8000ff8 <__aeabi_fsub>
 8011476:	9e1f      	ldr	r6, [sp, #124]	; 0x7c
 8011478:	1c05      	adds	r5, r0, #0
 801147a:	1c31      	adds	r1, r6, #0
 801147c:	1c38      	adds	r0, r7, #0
 801147e:	f7ef fdbb 	bl	8000ff8 <__aeabi_fsub>
 8011482:	1c01      	adds	r1, r0, #0
 8011484:	1c28      	adds	r0, r5, #0
 8011486:	f7ef fc91 	bl	8000dac <__aeabi_fmul>
 801148a:	9908      	ldr	r1, [sp, #32]
 801148c:	f7ef f928 	bl	80006e0 <__aeabi_fadd>
 8011490:	1c01      	adds	r1, r0, #0
 8011492:	1c07      	adds	r7, r0, #0
 8011494:	9030      	str	r0, [sp, #192]	; 0xc0
 8011496:	f7ef fc89 	bl	8000dac <__aeabi_fmul>
 801149a:	4651      	mov	r1, sl
 801149c:	4680      	mov	r8, r0
 801149e:	4648      	mov	r0, r9
 80114a0:	f7ef fc84 	bl	8000dac <__aeabi_fmul>
 80114a4:	9901      	ldr	r1, [sp, #4]
 80114a6:	1c05      	adds	r5, r0, #0
 80114a8:	900c      	str	r0, [sp, #48]	; 0x30
 80114aa:	1c30      	adds	r0, r6, #0
 80114ac:	9605      	str	r6, [sp, #20]
 80114ae:	f7ef f917 	bl	80006e0 <__aeabi_fadd>
 80114b2:	1c21      	adds	r1, r4, #0
 80114b4:	f7ef fc7a 	bl	8000dac <__aeabi_fmul>
 80114b8:	1c29      	adds	r1, r5, #0
 80114ba:	f7ef f911 	bl	80006e0 <__aeabi_fadd>
 80114be:	9900      	ldr	r1, [sp, #0]
 80114c0:	1c05      	adds	r5, r0, #0
 80114c2:	4658      	mov	r0, fp
 80114c4:	f7ef f90c 	bl	80006e0 <__aeabi_fadd>
 80114c8:	1c21      	adds	r1, r4, #0
 80114ca:	f7ef fc6f 	bl	8000dac <__aeabi_fmul>
 80114ce:	1c01      	adds	r1, r0, #0
 80114d0:	1c28      	adds	r0, r5, #0
 80114d2:	f7ef f905 	bl	80006e0 <__aeabi_fadd>
 80114d6:	1c01      	adds	r1, r0, #0
 80114d8:	1c06      	adds	r6, r0, #0
 80114da:	9033      	str	r0, [sp, #204]	; 0xcc
 80114dc:	f7ef fc66 	bl	8000dac <__aeabi_fmul>
 80114e0:	4641      	mov	r1, r8
 80114e2:	1c05      	adds	r5, r0, #0
 80114e4:	4640      	mov	r0, r8
 80114e6:	f7ef fc61 	bl	8000dac <__aeabi_fmul>
 80114ea:	1c29      	adds	r1, r5, #0
 80114ec:	4680      	mov	r8, r0
 80114ee:	1c28      	adds	r0, r5, #0
 80114f0:	f7ef fc5c 	bl	8000dac <__aeabi_fmul>
 80114f4:	1c01      	adds	r1, r0, #0
 80114f6:	4640      	mov	r0, r8
 80114f8:	f7ef f8f2 	bl	80006e0 <__aeabi_fadd>
 80114fc:	1c21      	adds	r1, r4, #0
 80114fe:	4680      	mov	r8, r0
 8011500:	4648      	mov	r0, r9
 8011502:	f7ef fc53 	bl	8000dac <__aeabi_fmul>
 8011506:	9900      	ldr	r1, [sp, #0]
 8011508:	1c05      	adds	r5, r0, #0
 801150a:	9008      	str	r0, [sp, #32]
 801150c:	9805      	ldr	r0, [sp, #20]
 801150e:	f7ef f8e7 	bl	80006e0 <__aeabi_fadd>
 8011512:	9903      	ldr	r1, [sp, #12]
 8011514:	f7ef f8e4 	bl	80006e0 <__aeabi_fadd>
 8011518:	4659      	mov	r1, fp
 801151a:	f7ef f8e1 	bl	80006e0 <__aeabi_fadd>
 801151e:	4651      	mov	r1, sl
 8011520:	f7ef fc44 	bl	8000dac <__aeabi_fmul>
 8011524:	1c29      	adds	r1, r5, #0
 8011526:	f7ef f8db 	bl	80006e0 <__aeabi_fadd>
 801152a:	1c01      	adds	r1, r0, #0
 801152c:	1c05      	adds	r5, r0, #0
 801152e:	9036      	str	r0, [sp, #216]	; 0xd8
 8011530:	f7ef fc3c 	bl	8000dac <__aeabi_fmul>
 8011534:	1c01      	adds	r1, r0, #0
 8011536:	f7ef fc39 	bl	8000dac <__aeabi_fmul>
 801153a:	4641      	mov	r1, r8
 801153c:	f7ef f8d0 	bl	80006e0 <__aeabi_fadd>
 8011540:	f003 f816 	bl	8014570 <sqrtf>
 8011544:	2100      	movs	r1, #0
 8011546:	4680      	mov	r8, r0
 8011548:	1c38      	adds	r0, r7, #0
 801154a:	f7ee ff69 	bl	8000420 <__aeabi_fcmpeq>
 801154e:	2800      	cmp	r0, #0
 8011550:	d104      	bne.n	801155c <calibrate+0xc5c>
 8011552:	4641      	mov	r1, r8
 8011554:	1c38      	adds	r0, r7, #0
 8011556:	f7ef fa61 	bl	8000a1c <__aeabi_fdiv>
 801155a:	9030      	str	r0, [sp, #192]	; 0xc0
 801155c:	2100      	movs	r1, #0
 801155e:	1c30      	adds	r0, r6, #0
 8011560:	f7ee ff5e 	bl	8000420 <__aeabi_fcmpeq>
 8011564:	2800      	cmp	r0, #0
 8011566:	d104      	bne.n	8011572 <calibrate+0xc72>
 8011568:	4641      	mov	r1, r8
 801156a:	1c30      	adds	r0, r6, #0
 801156c:	f7ef fa56 	bl	8000a1c <__aeabi_fdiv>
 8011570:	9033      	str	r0, [sp, #204]	; 0xcc
 8011572:	2100      	movs	r1, #0
 8011574:	1c28      	adds	r0, r5, #0
 8011576:	f7ee ff53 	bl	8000420 <__aeabi_fcmpeq>
 801157a:	2800      	cmp	r0, #0
 801157c:	d104      	bne.n	8011588 <calibrate+0xc88>
 801157e:	4641      	mov	r1, r8
 8011580:	1c28      	adds	r0, r5, #0
 8011582:	f7ef fa4b 	bl	8000a1c <__aeabi_fdiv>
 8011586:	9036      	str	r0, [sp, #216]	; 0xd8
 8011588:	9b07      	ldr	r3, [sp, #28]
 801158a:	9900      	ldr	r1, [sp, #0]
 801158c:	1c18      	adds	r0, r3, #0
 801158e:	4698      	mov	r8, r3
 8011590:	f7ef f8a6 	bl	80006e0 <__aeabi_fadd>
 8011594:	9901      	ldr	r1, [sp, #4]
 8011596:	1c05      	adds	r5, r0, #0
 8011598:	4658      	mov	r0, fp
 801159a:	f7ef f8a1 	bl	80006e0 <__aeabi_fadd>
 801159e:	1c01      	adds	r1, r0, #0
 80115a0:	1c28      	adds	r0, r5, #0
 80115a2:	f7ef f89d 	bl	80006e0 <__aeabi_fadd>
 80115a6:	1c21      	adds	r1, r4, #0
 80115a8:	f7ef fc00 	bl	8000dac <__aeabi_fmul>
 80115ac:	990c      	ldr	r1, [sp, #48]	; 0x30
 80115ae:	f7ef f897 	bl	80006e0 <__aeabi_fadd>
 80115b2:	1c01      	adds	r1, r0, #0
 80115b4:	1c06      	adds	r6, r0, #0
 80115b6:	9031      	str	r0, [sp, #196]	; 0xc4
 80115b8:	f7ef fbf8 	bl	8000dac <__aeabi_fmul>
 80115bc:	4659      	mov	r1, fp
 80115be:	1c07      	adds	r7, r0, #0
 80115c0:	9802      	ldr	r0, [sp, #8]
 80115c2:	f7ef fd19 	bl	8000ff8 <__aeabi_fsub>
 80115c6:	4641      	mov	r1, r8
 80115c8:	1c05      	adds	r5, r0, #0
 80115ca:	9802      	ldr	r0, [sp, #8]
 80115cc:	f7ef fd14 	bl	8000ff8 <__aeabi_fsub>
 80115d0:	1c01      	adds	r1, r0, #0
 80115d2:	1c28      	adds	r0, r5, #0
 80115d4:	f7ef fbea 	bl	8000dac <__aeabi_fmul>
 80115d8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80115da:	f7ef f881 	bl	80006e0 <__aeabi_fadd>
 80115de:	9904      	ldr	r1, [sp, #16]
 80115e0:	f7ef f87e 	bl	80006e0 <__aeabi_fadd>
 80115e4:	1c01      	adds	r1, r0, #0
 80115e6:	9034      	str	r0, [sp, #208]	; 0xd0
 80115e8:	f7ef fbe0 	bl	8000dac <__aeabi_fmul>
 80115ec:	1c39      	adds	r1, r7, #0
 80115ee:	1c05      	adds	r5, r0, #0
 80115f0:	1c38      	adds	r0, r7, #0
 80115f2:	f7ef fbdb 	bl	8000dac <__aeabi_fmul>
 80115f6:	1c29      	adds	r1, r5, #0
 80115f8:	1c07      	adds	r7, r0, #0
 80115fa:	1c28      	adds	r0, r5, #0
 80115fc:	f7ef fbd6 	bl	8000dac <__aeabi_fmul>
 8011600:	1c01      	adds	r1, r0, #0
 8011602:	1c38      	adds	r0, r7, #0
 8011604:	f7ef f86c 	bl	80006e0 <__aeabi_fadd>
 8011608:	9901      	ldr	r1, [sp, #4]
 801160a:	1c07      	adds	r7, r0, #0
 801160c:	4658      	mov	r0, fp
 801160e:	f7ef f867 	bl	80006e0 <__aeabi_fadd>
 8011612:	4649      	mov	r1, r9
 8011614:	f7ef fbca 	bl	8000dac <__aeabi_fmul>
 8011618:	1c21      	adds	r1, r4, #0
 801161a:	1c05      	adds	r5, r0, #0
 801161c:	4650      	mov	r0, sl
 801161e:	f7ef fbc5 	bl	8000dac <__aeabi_fmul>
 8011622:	1c01      	adds	r1, r0, #0
 8011624:	1c28      	adds	r0, r5, #0
 8011626:	f7ef f85b 	bl	80006e0 <__aeabi_fadd>
 801162a:	9903      	ldr	r1, [sp, #12]
 801162c:	1c05      	adds	r5, r0, #0
 801162e:	4640      	mov	r0, r8
 8011630:	f7ef f856 	bl	80006e0 <__aeabi_fadd>
 8011634:	4649      	mov	r1, r9
 8011636:	f7ef fbb9 	bl	8000dac <__aeabi_fmul>
 801163a:	1c01      	adds	r1, r0, #0
 801163c:	1c28      	adds	r0, r5, #0
 801163e:	f7ef f84f 	bl	80006e0 <__aeabi_fadd>
 8011642:	1c01      	adds	r1, r0, #0
 8011644:	1c05      	adds	r5, r0, #0
 8011646:	9037      	str	r0, [sp, #220]	; 0xdc
 8011648:	f7ef fbb0 	bl	8000dac <__aeabi_fmul>
 801164c:	1c01      	adds	r1, r0, #0
 801164e:	f7ef fbad 	bl	8000dac <__aeabi_fmul>
 8011652:	1c39      	adds	r1, r7, #0
 8011654:	f7ef f844 	bl	80006e0 <__aeabi_fadd>
 8011658:	f002 ff8a 	bl	8014570 <sqrtf>
 801165c:	2100      	movs	r1, #0
 801165e:	1c07      	adds	r7, r0, #0
 8011660:	1c30      	adds	r0, r6, #0
 8011662:	f7ee fedd 	bl	8000420 <__aeabi_fcmpeq>
 8011666:	2800      	cmp	r0, #0
 8011668:	d104      	bne.n	8011674 <calibrate+0xd74>
 801166a:	1c39      	adds	r1, r7, #0
 801166c:	1c30      	adds	r0, r6, #0
 801166e:	f7ef f9d5 	bl	8000a1c <__aeabi_fdiv>
 8011672:	9031      	str	r0, [sp, #196]	; 0xc4
 8011674:	9e34      	ldr	r6, [sp, #208]	; 0xd0
 8011676:	2100      	movs	r1, #0
 8011678:	1c30      	adds	r0, r6, #0
 801167a:	f7ee fed1 	bl	8000420 <__aeabi_fcmpeq>
 801167e:	2800      	cmp	r0, #0
 8011680:	d104      	bne.n	801168c <calibrate+0xd8c>
 8011682:	1c39      	adds	r1, r7, #0
 8011684:	1c30      	adds	r0, r6, #0
 8011686:	f7ef f9c9 	bl	8000a1c <__aeabi_fdiv>
 801168a:	9034      	str	r0, [sp, #208]	; 0xd0
 801168c:	2100      	movs	r1, #0
 801168e:	1c28      	adds	r0, r5, #0
 8011690:	f7ee fec6 	bl	8000420 <__aeabi_fcmpeq>
 8011694:	2800      	cmp	r0, #0
 8011696:	d104      	bne.n	80116a2 <calibrate+0xda2>
 8011698:	1c39      	adds	r1, r7, #0
 801169a:	1c28      	adds	r0, r5, #0
 801169c:	f7ef f9be 	bl	8000a1c <__aeabi_fdiv>
 80116a0:	9037      	str	r0, [sp, #220]	; 0xdc
 80116a2:	991e      	ldr	r1, [sp, #120]	; 0x78
 80116a4:	9800      	ldr	r0, [sp, #0]
 80116a6:	f7ef f81b 	bl	80006e0 <__aeabi_fadd>
 80116aa:	4651      	mov	r1, sl
 80116ac:	f7ef fb7e 	bl	8000dac <__aeabi_fmul>
 80116b0:	9908      	ldr	r1, [sp, #32]
 80116b2:	f7ef f815 	bl	80006e0 <__aeabi_fadd>
 80116b6:	9b03      	ldr	r3, [sp, #12]
 80116b8:	1c05      	adds	r5, r0, #0
 80116ba:	1c19      	adds	r1, r3, #0
 80116bc:	469b      	mov	fp, r3
 80116be:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80116c0:	1c18      	adds	r0, r3, #0
 80116c2:	4698      	mov	r8, r3
 80116c4:	f7ef f80c 	bl	80006e0 <__aeabi_fadd>
 80116c8:	4651      	mov	r1, sl
 80116ca:	f7ef fb6f 	bl	8000dac <__aeabi_fmul>
 80116ce:	1c01      	adds	r1, r0, #0
 80116d0:	1c28      	adds	r0, r5, #0
 80116d2:	f7ef f805 	bl	80006e0 <__aeabi_fadd>
 80116d6:	1c01      	adds	r1, r0, #0
 80116d8:	1c05      	adds	r5, r0, #0
 80116da:	9032      	str	r0, [sp, #200]	; 0xc8
 80116dc:	f7ef fb66 	bl	8000dac <__aeabi_fmul>
 80116e0:	991e      	ldr	r1, [sp, #120]	; 0x78
 80116e2:	1c06      	adds	r6, r0, #0
 80116e4:	9801      	ldr	r0, [sp, #4]
 80116e6:	f7ee fffb 	bl	80006e0 <__aeabi_fadd>
 80116ea:	4649      	mov	r1, r9
 80116ec:	f7ef fb5e 	bl	8000dac <__aeabi_fmul>
 80116f0:	1c21      	adds	r1, r4, #0
 80116f2:	1c07      	adds	r7, r0, #0
 80116f4:	4650      	mov	r0, sl
 80116f6:	f7ef fb59 	bl	8000dac <__aeabi_fmul>
 80116fa:	1c01      	adds	r1, r0, #0
 80116fc:	1c38      	adds	r0, r7, #0
 80116fe:	f7ee ffef 	bl	80006e0 <__aeabi_fadd>
 8011702:	4659      	mov	r1, fp
 8011704:	1c04      	adds	r4, r0, #0
 8011706:	4640      	mov	r0, r8
 8011708:	f7ee ffea 	bl	80006e0 <__aeabi_fadd>
 801170c:	4649      	mov	r1, r9
 801170e:	f7ef fb4d 	bl	8000dac <__aeabi_fmul>
 8011712:	1c01      	adds	r1, r0, #0
 8011714:	1c20      	adds	r0, r4, #0
 8011716:	f7ee ffe3 	bl	80006e0 <__aeabi_fadd>
 801171a:	1c01      	adds	r1, r0, #0
 801171c:	9035      	str	r0, [sp, #212]	; 0xd4
 801171e:	f7ef fb45 	bl	8000dac <__aeabi_fmul>
 8011722:	1c01      	adds	r1, r0, #0
 8011724:	f7ef fb42 	bl	8000dac <__aeabi_fmul>
 8011728:	1c31      	adds	r1, r6, #0
 801172a:	1c04      	adds	r4, r0, #0
 801172c:	1c30      	adds	r0, r6, #0
 801172e:	f7ef fb3d 	bl	8000dac <__aeabi_fmul>
 8011732:	1c01      	adds	r1, r0, #0
 8011734:	1c20      	adds	r0, r4, #0
 8011736:	f7ee ffd3 	bl	80006e0 <__aeabi_fadd>
 801173a:	9b06      	ldr	r3, [sp, #24]
 801173c:	991e      	ldr	r1, [sp, #120]	; 0x78
 801173e:	1c06      	adds	r6, r0, #0
 8011740:	1c18      	adds	r0, r3, #0
 8011742:	4647      	mov	r7, r8
 8011744:	4698      	mov	r8, r3
 8011746:	f7ef fc57 	bl	8000ff8 <__aeabi_fsub>
 801174a:	1c39      	adds	r1, r7, #0
 801174c:	1c04      	adds	r4, r0, #0
 801174e:	4640      	mov	r0, r8
 8011750:	f7ef fc52 	bl	8000ff8 <__aeabi_fsub>
 8011754:	1c01      	adds	r1, r0, #0
 8011756:	1c20      	adds	r0, r4, #0
 8011758:	f7ef fb28 	bl	8000dac <__aeabi_fmul>
 801175c:	9904      	ldr	r1, [sp, #16]
 801175e:	1c04      	adds	r4, r0, #0
 8011760:	980a      	ldr	r0, [sp, #40]	; 0x28
 8011762:	f7ee ffbd 	bl	80006e0 <__aeabi_fadd>
 8011766:	1c01      	adds	r1, r0, #0
 8011768:	1c20      	adds	r0, r4, #0
 801176a:	f7ee ffb9 	bl	80006e0 <__aeabi_fadd>
 801176e:	1c01      	adds	r1, r0, #0
 8011770:	1c04      	adds	r4, r0, #0
 8011772:	9038      	str	r0, [sp, #224]	; 0xe0
 8011774:	f7ef fb1a 	bl	8000dac <__aeabi_fmul>
 8011778:	1c01      	adds	r1, r0, #0
 801177a:	f7ef fb17 	bl	8000dac <__aeabi_fmul>
 801177e:	1c31      	adds	r1, r6, #0
 8011780:	f7ee ffae 	bl	80006e0 <__aeabi_fadd>
 8011784:	f002 fef4 	bl	8014570 <sqrtf>
 8011788:	2100      	movs	r1, #0
 801178a:	1c06      	adds	r6, r0, #0
 801178c:	1c28      	adds	r0, r5, #0
 801178e:	f7ee fe47 	bl	8000420 <__aeabi_fcmpeq>
 8011792:	2800      	cmp	r0, #0
 8011794:	d104      	bne.n	80117a0 <calibrate+0xea0>
 8011796:	1c31      	adds	r1, r6, #0
 8011798:	1c28      	adds	r0, r5, #0
 801179a:	f7ef f93f 	bl	8000a1c <__aeabi_fdiv>
 801179e:	9032      	str	r0, [sp, #200]	; 0xc8
 80117a0:	9d35      	ldr	r5, [sp, #212]	; 0xd4
 80117a2:	2100      	movs	r1, #0
 80117a4:	1c28      	adds	r0, r5, #0
 80117a6:	f7ee fe3b 	bl	8000420 <__aeabi_fcmpeq>
 80117aa:	2800      	cmp	r0, #0
 80117ac:	d104      	bne.n	80117b8 <calibrate+0xeb8>
 80117ae:	1c31      	adds	r1, r6, #0
 80117b0:	1c28      	adds	r0, r5, #0
 80117b2:	f7ef f933 	bl	8000a1c <__aeabi_fdiv>
 80117b6:	9035      	str	r0, [sp, #212]	; 0xd4
 80117b8:	2100      	movs	r1, #0
 80117ba:	1c20      	adds	r0, r4, #0
 80117bc:	f7ee fe30 	bl	8000420 <__aeabi_fcmpeq>
 80117c0:	2800      	cmp	r0, #0
 80117c2:	d104      	bne.n	80117ce <calibrate+0xece>
 80117c4:	1c31      	adds	r1, r6, #0
 80117c6:	1c20      	adds	r0, r4, #0
 80117c8:	f7ef f928 	bl	8000a1c <__aeabi_fdiv>
 80117cc:	9038      	str	r0, [sp, #224]	; 0xe0
 80117ce:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80117d0:	49cb      	ldr	r1, [pc, #812]	; (8011b00 <calibrate+0x1200>)
 80117d2:	005c      	lsls	r4, r3, #1
 80117d4:	0864      	lsrs	r4, r4, #1
 80117d6:	1c20      	adds	r0, r4, #0
 80117d8:	1c27      	adds	r7, r4, #0
 80117da:	f7ee fe31 	bl	8000440 <__aeabi_fcmple>
 80117de:	2800      	cmp	r0, #0
 80117e0:	d100      	bne.n	80117e4 <calibrate+0xee4>
 80117e2:	4fc7      	ldr	r7, [pc, #796]	; (8011b00 <calibrate+0x1200>)
 80117e4:	2100      	movs	r1, #0
 80117e6:	1c20      	adds	r0, r4, #0
 80117e8:	f7ee fe3e 	bl	8000468 <__aeabi_fcmpge>
 80117ec:	2800      	cmp	r0, #0
 80117ee:	d100      	bne.n	80117f2 <calibrate+0xef2>
 80117f0:	2400      	movs	r4, #0
 80117f2:	9b05      	ldr	r3, [sp, #20]
 80117f4:	1c39      	adds	r1, r7, #0
 80117f6:	005d      	lsls	r5, r3, #1
 80117f8:	086d      	lsrs	r5, r5, #1
 80117fa:	1c28      	adds	r0, r5, #0
 80117fc:	1c2e      	adds	r6, r5, #0
 80117fe:	f7ee fe1f 	bl	8000440 <__aeabi_fcmple>
 8011802:	2800      	cmp	r0, #0
 8011804:	d100      	bne.n	8011808 <calibrate+0xf08>
 8011806:	1c3e      	adds	r6, r7, #0
 8011808:	1c21      	adds	r1, r4, #0
 801180a:	1c28      	adds	r0, r5, #0
 801180c:	1c2f      	adds	r7, r5, #0
 801180e:	f7ee fe2b 	bl	8000468 <__aeabi_fcmpge>
 8011812:	2800      	cmp	r0, #0
 8011814:	d100      	bne.n	8011818 <calibrate+0xf18>
 8011816:	1c27      	adds	r7, r4, #0
 8011818:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801181a:	1c39      	adds	r1, r7, #0
 801181c:	005c      	lsls	r4, r3, #1
 801181e:	0864      	lsrs	r4, r4, #1
 8011820:	1c20      	adds	r0, r4, #0
 8011822:	46a0      	mov	r8, r4
 8011824:	f7ee fe20 	bl	8000468 <__aeabi_fcmpge>
 8011828:	2800      	cmp	r0, #0
 801182a:	d100      	bne.n	801182e <calibrate+0xf2e>
 801182c:	46b8      	mov	r8, r7
 801182e:	1c31      	adds	r1, r6, #0
 8011830:	1c20      	adds	r0, r4, #0
 8011832:	1c27      	adds	r7, r4, #0
 8011834:	f7ee fe04 	bl	8000440 <__aeabi_fcmple>
 8011838:	2800      	cmp	r0, #0
 801183a:	d100      	bne.n	801183e <calibrate+0xf3e>
 801183c:	1c37      	adds	r7, r6, #0
 801183e:	1c39      	adds	r1, r7, #0
 8011840:	4640      	mov	r0, r8
 8011842:	f7ef f8eb 	bl	8000a1c <__aeabi_fdiv>
 8011846:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8011848:	6a99      	ldr	r1, [r3, #40]	; 0x28
 801184a:	f7ee fe03 	bl	8000454 <__aeabi_fcmpgt>
 801184e:	2800      	cmp	r0, #0
 8011850:	d001      	beq.n	8011856 <calibrate+0xf56>
 8011852:	f7ff fbd2 	bl	8010ffa <calibrate+0x6fa>
 8011856:	9b07      	ldr	r3, [sp, #28]
 8011858:	0058      	lsls	r0, r3, #1
 801185a:	0840      	lsrs	r0, r0, #1
 801185c:	f002 fe88 	bl	8014570 <sqrtf>
 8011860:	1c06      	adds	r6, r0, #0
 8011862:	1c28      	adds	r0, r5, #0
 8011864:	f002 fe84 	bl	8014570 <sqrtf>
 8011868:	1c05      	adds	r5, r0, #0
 801186a:	1c20      	adds	r0, r4, #0
 801186c:	f002 fe80 	bl	8014570 <sqrtf>
 8011870:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 8011872:	1c04      	adds	r4, r0, #0
 8011874:	1c19      	adds	r1, r3, #0
 8011876:	1c30      	adds	r0, r6, #0
 8011878:	9301      	str	r3, [sp, #4]
 801187a:	f7ef fa97 	bl	8000dac <__aeabi_fmul>
 801187e:	23cd      	movs	r3, #205	; 0xcd
 8011880:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8011882:	9f31      	ldr	r7, [sp, #196]	; 0xc4
 8011884:	00db      	lsls	r3, r3, #3
 8011886:	50d0      	str	r0, [r2, r3]
 8011888:	900d      	str	r0, [sp, #52]	; 0x34
 801188a:	1c39      	adds	r1, r7, #0
 801188c:	1c28      	adds	r0, r5, #0
 801188e:	f7ef fa8d 	bl	8000dac <__aeabi_fmul>
 8011892:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8011894:	4b9b      	ldr	r3, [pc, #620]	; (8011b04 <calibrate+0x1204>)
 8011896:	900c      	str	r0, [sp, #48]	; 0x30
 8011898:	50d0      	str	r0, [r2, r3]
 801189a:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 801189c:	1c20      	adds	r0, r4, #0
 801189e:	1c19      	adds	r1, r3, #0
 80118a0:	469a      	mov	sl, r3
 80118a2:	f7ef fa83 	bl	8000dac <__aeabi_fmul>
 80118a6:	23ce      	movs	r3, #206	; 0xce
 80118a8:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80118aa:	00db      	lsls	r3, r3, #3
 80118ac:	50d0      	str	r0, [r2, r3]
 80118ae:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 80118b0:	900b      	str	r0, [sp, #44]	; 0x2c
 80118b2:	1c19      	adds	r1, r3, #0
 80118b4:	1c30      	adds	r0, r6, #0
 80118b6:	4699      	mov	r9, r3
 80118b8:	f7ef fa78 	bl	8000dac <__aeabi_fmul>
 80118bc:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80118be:	4b92      	ldr	r3, [pc, #584]	; (8011b08 <calibrate+0x1208>)
 80118c0:	900a      	str	r0, [sp, #40]	; 0x28
 80118c2:	50d0      	str	r0, [r2, r3]
 80118c4:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 80118c6:	1c28      	adds	r0, r5, #0
 80118c8:	1c19      	adds	r1, r3, #0
 80118ca:	9300      	str	r3, [sp, #0]
 80118cc:	f7ef fa6e 	bl	8000dac <__aeabi_fmul>
 80118d0:	23cf      	movs	r3, #207	; 0xcf
 80118d2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80118d4:	00db      	lsls	r3, r3, #3
 80118d6:	50d0      	str	r0, [r2, r3]
 80118d8:	9b35      	ldr	r3, [sp, #212]	; 0xd4
 80118da:	9009      	str	r0, [sp, #36]	; 0x24
 80118dc:	1c19      	adds	r1, r3, #0
 80118de:	1c20      	adds	r0, r4, #0
 80118e0:	469b      	mov	fp, r3
 80118e2:	f7ef fa63 	bl	8000dac <__aeabi_fmul>
 80118e6:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80118e8:	4b88      	ldr	r3, [pc, #544]	; (8011b0c <calibrate+0x120c>)
 80118ea:	1c31      	adds	r1, r6, #0
 80118ec:	50d0      	str	r0, [r2, r3]
 80118ee:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 80118f0:	9008      	str	r0, [sp, #32]
 80118f2:	1c18      	adds	r0, r3, #0
 80118f4:	4698      	mov	r8, r3
 80118f6:	f7ef fa59 	bl	8000dac <__aeabi_fmul>
 80118fa:	23d0      	movs	r3, #208	; 0xd0
 80118fc:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80118fe:	9e37      	ldr	r6, [sp, #220]	; 0xdc
 8011900:	00db      	lsls	r3, r3, #3
 8011902:	50d0      	str	r0, [r2, r3]
 8011904:	1c29      	adds	r1, r5, #0
 8011906:	9005      	str	r0, [sp, #20]
 8011908:	1c30      	adds	r0, r6, #0
 801190a:	f7ef fa4f 	bl	8000dac <__aeabi_fmul>
 801190e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8011910:	4b7f      	ldr	r3, [pc, #508]	; (8011b10 <calibrate+0x1210>)
 8011912:	9d38      	ldr	r5, [sp, #224]	; 0xe0
 8011914:	50d0      	str	r0, [r2, r3]
 8011916:	9006      	str	r0, [sp, #24]
 8011918:	1c21      	adds	r1, r4, #0
 801191a:	1c28      	adds	r0, r5, #0
 801191c:	f7ef fa46 	bl	8000dac <__aeabi_fmul>
 8011920:	23d1      	movs	r3, #209	; 0xd1
 8011922:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8011924:	00db      	lsls	r3, r3, #3
 8011926:	9007      	str	r0, [sp, #28]
 8011928:	1c39      	adds	r1, r7, #0
 801192a:	50d0      	str	r0, [r2, r3]
 801192c:	4648      	mov	r0, r9
 801192e:	f7ee fd77 	bl	8000420 <__aeabi_fcmpeq>
 8011932:	2800      	cmp	r0, #0
 8011934:	d100      	bne.n	8011938 <calibrate+0x1038>
 8011936:	e2e7      	b.n	8011f08 <calibrate+0x1608>
 8011938:	4651      	mov	r1, sl
 801193a:	4640      	mov	r0, r8
 801193c:	f7ee fd70 	bl	8000420 <__aeabi_fcmpeq>
 8011940:	2800      	cmp	r0, #0
 8011942:	d100      	bne.n	8011946 <calibrate+0x1046>
 8011944:	e2e0      	b.n	8011f08 <calibrate+0x1608>
 8011946:	4659      	mov	r1, fp
 8011948:	1c30      	adds	r0, r6, #0
 801194a:	f7ee fd69 	bl	8000420 <__aeabi_fcmpeq>
 801194e:	0003      	movs	r3, r0
 8011950:	1e58      	subs	r0, r3, #1
 8011952:	4183      	sbcs	r3, r0
 8011954:	930f      	str	r3, [sp, #60]	; 0x3c
 8011956:	9900      	ldr	r1, [sp, #0]
 8011958:	1c28      	adds	r0, r5, #0
 801195a:	f7ef fa27 	bl	8000dac <__aeabi_fmul>
 801195e:	4659      	mov	r1, fp
 8011960:	1c04      	adds	r4, r0, #0
 8011962:	1c30      	adds	r0, r6, #0
 8011964:	f7ef fa22 	bl	8000dac <__aeabi_fmul>
 8011968:	1c01      	adds	r1, r0, #0
 801196a:	1c20      	adds	r0, r4, #0
 801196c:	f7ef fb44 	bl	8000ff8 <__aeabi_fsub>
 8011970:	4659      	mov	r1, fp
 8011972:	9004      	str	r0, [sp, #16]
 8011974:	909c      	str	r0, [sp, #624]	; 0x270
 8011976:	4640      	mov	r0, r8
 8011978:	f7ef fa18 	bl	8000dac <__aeabi_fmul>
 801197c:	4649      	mov	r1, r9
 801197e:	1c04      	adds	r4, r0, #0
 8011980:	1c28      	adds	r0, r5, #0
 8011982:	f7ef fa13 	bl	8000dac <__aeabi_fmul>
 8011986:	1c01      	adds	r1, r0, #0
 8011988:	1c20      	adds	r0, r4, #0
 801198a:	f7ef fb35 	bl	8000ff8 <__aeabi_fsub>
 801198e:	4649      	mov	r1, r9
 8011990:	9002      	str	r0, [sp, #8]
 8011992:	909f      	str	r0, [sp, #636]	; 0x27c
 8011994:	1c30      	adds	r0, r6, #0
 8011996:	f7ef fa09 	bl	8000dac <__aeabi_fmul>
 801199a:	9900      	ldr	r1, [sp, #0]
 801199c:	1c04      	adds	r4, r0, #0
 801199e:	4640      	mov	r0, r8
 80119a0:	f7ef fa04 	bl	8000dac <__aeabi_fmul>
 80119a4:	1c01      	adds	r1, r0, #0
 80119a6:	1c20      	adds	r0, r4, #0
 80119a8:	f7ef fb26 	bl	8000ff8 <__aeabi_fsub>
 80119ac:	9901      	ldr	r1, [sp, #4]
 80119ae:	9003      	str	r0, [sp, #12]
 80119b0:	90a2      	str	r0, [sp, #648]	; 0x288
 80119b2:	9804      	ldr	r0, [sp, #16]
 80119b4:	f7ef f9fa 	bl	8000dac <__aeabi_fmul>
 80119b8:	1c39      	adds	r1, r7, #0
 80119ba:	1c04      	adds	r4, r0, #0
 80119bc:	9802      	ldr	r0, [sp, #8]
 80119be:	f7ef f9f5 	bl	8000dac <__aeabi_fmul>
 80119c2:	1c01      	adds	r1, r0, #0
 80119c4:	1c20      	adds	r0, r4, #0
 80119c6:	f7ee fe8b 	bl	80006e0 <__aeabi_fadd>
 80119ca:	4651      	mov	r1, sl
 80119cc:	1c04      	adds	r4, r0, #0
 80119ce:	9803      	ldr	r0, [sp, #12]
 80119d0:	f7ef f9ec 	bl	8000dac <__aeabi_fmul>
 80119d4:	1c01      	adds	r1, r0, #0
 80119d6:	1c20      	adds	r0, r4, #0
 80119d8:	f7ee fe82 	bl	80006e0 <__aeabi_fadd>
 80119dc:	2100      	movs	r1, #0
 80119de:	900e      	str	r0, [sp, #56]	; 0x38
 80119e0:	f7ee fd1e 	bl	8000420 <__aeabi_fcmpeq>
 80119e4:	2800      	cmp	r0, #0
 80119e6:	d000      	beq.n	80119ea <calibrate+0x10ea>
 80119e8:	e094      	b.n	8011b14 <calibrate+0x1214>
 80119ea:	9901      	ldr	r1, [sp, #4]
 80119ec:	1c28      	adds	r0, r5, #0
 80119ee:	f7ef f9dd 	bl	8000dac <__aeabi_fmul>
 80119f2:	4651      	mov	r1, sl
 80119f4:	1c04      	adds	r4, r0, #0
 80119f6:	4640      	mov	r0, r8
 80119f8:	f7ef f9d8 	bl	8000dac <__aeabi_fmul>
 80119fc:	1c01      	adds	r1, r0, #0
 80119fe:	1c20      	adds	r0, r4, #0
 8011a00:	f7ef fafa 	bl	8000ff8 <__aeabi_fsub>
 8011a04:	1c39      	adds	r1, r7, #0
 8011a06:	9010      	str	r0, [sp, #64]	; 0x40
 8011a08:	4640      	mov	r0, r8
 8011a0a:	f7ef f9cf 	bl	8000dac <__aeabi_fmul>
 8011a0e:	9901      	ldr	r1, [sp, #4]
 8011a10:	1c04      	adds	r4, r0, #0
 8011a12:	1c30      	adds	r0, r6, #0
 8011a14:	f7ef f9ca 	bl	8000dac <__aeabi_fmul>
 8011a18:	1c01      	adds	r1, r0, #0
 8011a1a:	1c20      	adds	r0, r4, #0
 8011a1c:	f7ef faec 	bl	8000ff8 <__aeabi_fsub>
 8011a20:	9901      	ldr	r1, [sp, #4]
 8011a22:	4680      	mov	r8, r0
 8011a24:	9800      	ldr	r0, [sp, #0]
 8011a26:	f7ef f9c1 	bl	8000dac <__aeabi_fmul>
 8011a2a:	1c39      	adds	r1, r7, #0
 8011a2c:	1c04      	adds	r4, r0, #0
 8011a2e:	4648      	mov	r0, r9
 8011a30:	f7ef f9bc 	bl	8000dac <__aeabi_fmul>
 8011a34:	1c01      	adds	r1, r0, #0
 8011a36:	1c20      	adds	r0, r4, #0
 8011a38:	f7ef fade 	bl	8000ff8 <__aeabi_fsub>
 8011a3c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011a3e:	9011      	str	r0, [sp, #68]	; 0x44
 8011a40:	2b00      	cmp	r3, #0
 8011a42:	d000      	beq.n	8011a46 <calibrate+0x1146>
 8011a44:	e28f      	b.n	8011f66 <calibrate+0x1666>
 8011a46:	4651      	mov	r1, sl
 8011a48:	1c30      	adds	r0, r6, #0
 8011a4a:	f7ef f9af 	bl	8000dac <__aeabi_fmul>
 8011a4e:	1c39      	adds	r1, r7, #0
 8011a50:	1c04      	adds	r4, r0, #0
 8011a52:	1c28      	adds	r0, r5, #0
 8011a54:	f7ef f9aa 	bl	8000dac <__aeabi_fmul>
 8011a58:	1c01      	adds	r1, r0, #0
 8011a5a:	1c20      	adds	r0, r4, #0
 8011a5c:	f7ef facc 	bl	8000ff8 <__aeabi_fsub>
 8011a60:	1c39      	adds	r1, r7, #0
 8011a62:	909d      	str	r0, [sp, #628]	; 0x274
 8011a64:	4658      	mov	r0, fp
 8011a66:	f7ef f9a1 	bl	8000dac <__aeabi_fmul>
 8011a6a:	4651      	mov	r1, sl
 8011a6c:	1c04      	adds	r4, r0, #0
 8011a6e:	9800      	ldr	r0, [sp, #0]
 8011a70:	f7ef f99c 	bl	8000dac <__aeabi_fmul>
 8011a74:	1c01      	adds	r1, r0, #0
 8011a76:	1c20      	adds	r0, r4, #0
 8011a78:	f7ef fabe 	bl	8000ff8 <__aeabi_fsub>
 8011a7c:	4651      	mov	r1, sl
 8011a7e:	909e      	str	r0, [sp, #632]	; 0x278
 8011a80:	4648      	mov	r0, r9
 8011a82:	f7ef f993 	bl	8000dac <__aeabi_fmul>
 8011a86:	9901      	ldr	r1, [sp, #4]
 8011a88:	1c04      	adds	r4, r0, #0
 8011a8a:	4658      	mov	r0, fp
 8011a8c:	f7ef f98e 	bl	8000dac <__aeabi_fmul>
 8011a90:	1c01      	adds	r1, r0, #0
 8011a92:	1c20      	adds	r0, r4, #0
 8011a94:	f7ef fab0 	bl	8000ff8 <__aeabi_fsub>
 8011a98:	90a1      	str	r0, [sp, #644]	; 0x284
 8011a9a:	20fe      	movs	r0, #254	; 0xfe
 8011a9c:	990e      	ldr	r1, [sp, #56]	; 0x38
 8011a9e:	0580      	lsls	r0, r0, #22
 8011aa0:	f7ee ffbc 	bl	8000a1c <__aeabi_fdiv>
 8011aa4:	9904      	ldr	r1, [sp, #16]
 8011aa6:	1c04      	adds	r4, r0, #0
 8011aa8:	f7ef f980 	bl	8000dac <__aeabi_fmul>
 8011aac:	1c21      	adds	r1, r4, #0
 8011aae:	909c      	str	r0, [sp, #624]	; 0x270
 8011ab0:	989d      	ldr	r0, [sp, #628]	; 0x274
 8011ab2:	f7ef f97b 	bl	8000dac <__aeabi_fmul>
 8011ab6:	1c21      	adds	r1, r4, #0
 8011ab8:	909d      	str	r0, [sp, #628]	; 0x274
 8011aba:	989e      	ldr	r0, [sp, #632]	; 0x278
 8011abc:	f7ef f976 	bl	8000dac <__aeabi_fmul>
 8011ac0:	9902      	ldr	r1, [sp, #8]
 8011ac2:	909e      	str	r0, [sp, #632]	; 0x278
 8011ac4:	1c20      	adds	r0, r4, #0
 8011ac6:	f7ef f971 	bl	8000dac <__aeabi_fmul>
 8011aca:	9910      	ldr	r1, [sp, #64]	; 0x40
 8011acc:	909f      	str	r0, [sp, #636]	; 0x27c
 8011ace:	1c20      	adds	r0, r4, #0
 8011ad0:	f7ef f96c 	bl	8000dac <__aeabi_fmul>
 8011ad4:	1c21      	adds	r1, r4, #0
 8011ad6:	90a0      	str	r0, [sp, #640]	; 0x280
 8011ad8:	98a1      	ldr	r0, [sp, #644]	; 0x284
 8011ada:	f7ef f967 	bl	8000dac <__aeabi_fmul>
 8011ade:	9903      	ldr	r1, [sp, #12]
 8011ae0:	90a1      	str	r0, [sp, #644]	; 0x284
 8011ae2:	1c20      	adds	r0, r4, #0
 8011ae4:	f7ef f962 	bl	8000dac <__aeabi_fmul>
 8011ae8:	4641      	mov	r1, r8
 8011aea:	90a2      	str	r0, [sp, #648]	; 0x288
 8011aec:	1c20      	adds	r0, r4, #0
 8011aee:	f7ef f95d 	bl	8000dac <__aeabi_fmul>
 8011af2:	9911      	ldr	r1, [sp, #68]	; 0x44
 8011af4:	90a3      	str	r0, [sp, #652]	; 0x28c
 8011af6:	1c20      	adds	r0, r4, #0
 8011af8:	f7ef f958 	bl	8000dac <__aeabi_fmul>
 8011afc:	90a4      	str	r0, [sp, #656]	; 0x290
 8011afe:	e009      	b.n	8011b14 <calibrate+0x1214>
 8011b00:	7f7fffff 	.word	0x7f7fffff
 8011b04:	0000066c 	.word	0x0000066c
 8011b08:	00000674 	.word	0x00000674
 8011b0c:	0000067c 	.word	0x0000067c
 8011b10:	00000684 	.word	0x00000684
 8011b14:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011b16:	999c      	ldr	r1, [sp, #624]	; 0x270
 8011b18:	1c18      	adds	r0, r3, #0
 8011b1a:	4699      	mov	r9, r3
 8011b1c:	f7ef f946 	bl	8000dac <__aeabi_fmul>
 8011b20:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8011b22:	999f      	ldr	r1, [sp, #636]	; 0x27c
 8011b24:	1c04      	adds	r4, r0, #0
 8011b26:	1c38      	adds	r0, r7, #0
 8011b28:	f7ef f940 	bl	8000dac <__aeabi_fmul>
 8011b2c:	1c01      	adds	r1, r0, #0
 8011b2e:	1c20      	adds	r0, r4, #0
 8011b30:	f7ee fdd6 	bl	80006e0 <__aeabi_fadd>
 8011b34:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8011b36:	99a2      	ldr	r1, [sp, #648]	; 0x288
 8011b38:	1c04      	adds	r4, r0, #0
 8011b3a:	1c28      	adds	r0, r5, #0
 8011b3c:	f7ef f936 	bl	8000dac <__aeabi_fmul>
 8011b40:	1c01      	adds	r1, r0, #0
 8011b42:	1c20      	adds	r0, r4, #0
 8011b44:	f7ee fdcc 	bl	80006e0 <__aeabi_fadd>
 8011b48:	999d      	ldr	r1, [sp, #628]	; 0x274
 8011b4a:	4680      	mov	r8, r0
 8011b4c:	9042      	str	r0, [sp, #264]	; 0x108
 8011b4e:	4648      	mov	r0, r9
 8011b50:	f7ef f92c 	bl	8000dac <__aeabi_fmul>
 8011b54:	99a0      	ldr	r1, [sp, #640]	; 0x280
 8011b56:	1c04      	adds	r4, r0, #0
 8011b58:	1c38      	adds	r0, r7, #0
 8011b5a:	f7ef f927 	bl	8000dac <__aeabi_fmul>
 8011b5e:	1c01      	adds	r1, r0, #0
 8011b60:	1c20      	adds	r0, r4, #0
 8011b62:	f7ee fdbd 	bl	80006e0 <__aeabi_fadd>
 8011b66:	99a3      	ldr	r1, [sp, #652]	; 0x28c
 8011b68:	1c04      	adds	r4, r0, #0
 8011b6a:	1c28      	adds	r0, r5, #0
 8011b6c:	f7ef f91e 	bl	8000dac <__aeabi_fmul>
 8011b70:	1c01      	adds	r1, r0, #0
 8011b72:	1c20      	adds	r0, r4, #0
 8011b74:	f7ee fdb4 	bl	80006e0 <__aeabi_fadd>
 8011b78:	999e      	ldr	r1, [sp, #632]	; 0x278
 8011b7a:	1c06      	adds	r6, r0, #0
 8011b7c:	9043      	str	r0, [sp, #268]	; 0x10c
 8011b7e:	904c      	str	r0, [sp, #304]	; 0x130
 8011b80:	4648      	mov	r0, r9
 8011b82:	f7ef f913 	bl	8000dac <__aeabi_fmul>
 8011b86:	99a1      	ldr	r1, [sp, #644]	; 0x284
 8011b88:	1c04      	adds	r4, r0, #0
 8011b8a:	1c38      	adds	r0, r7, #0
 8011b8c:	f7ef f90e 	bl	8000dac <__aeabi_fmul>
 8011b90:	1c01      	adds	r1, r0, #0
 8011b92:	1c20      	adds	r0, r4, #0
 8011b94:	f7ee fda4 	bl	80006e0 <__aeabi_fadd>
 8011b98:	99a4      	ldr	r1, [sp, #656]	; 0x290
 8011b9a:	1c04      	adds	r4, r0, #0
 8011b9c:	1c28      	adds	r0, r5, #0
 8011b9e:	f7ef f905 	bl	8000dac <__aeabi_fmul>
 8011ba2:	1c01      	adds	r1, r0, #0
 8011ba4:	1c20      	adds	r0, r4, #0
 8011ba6:	f7ee fd9b 	bl	80006e0 <__aeabi_fadd>
 8011baa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011bac:	999d      	ldr	r1, [sp, #628]	; 0x274
 8011bae:	1c07      	adds	r7, r0, #0
 8011bb0:	9044      	str	r0, [sp, #272]	; 0x110
 8011bb2:	9056      	str	r0, [sp, #344]	; 0x158
 8011bb4:	1c18      	adds	r0, r3, #0
 8011bb6:	469b      	mov	fp, r3
 8011bb8:	f7ef f8f8 	bl	8000dac <__aeabi_fmul>
 8011bbc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011bbe:	1c04      	adds	r4, r0, #0
 8011bc0:	99a0      	ldr	r1, [sp, #640]	; 0x280
 8011bc2:	1c18      	adds	r0, r3, #0
 8011bc4:	469a      	mov	sl, r3
 8011bc6:	f7ef f8f1 	bl	8000dac <__aeabi_fmul>
 8011bca:	1c01      	adds	r1, r0, #0
 8011bcc:	1c20      	adds	r0, r4, #0
 8011bce:	f7ee fd87 	bl	80006e0 <__aeabi_fadd>
 8011bd2:	9d08      	ldr	r5, [sp, #32]
 8011bd4:	99a3      	ldr	r1, [sp, #652]	; 0x28c
 8011bd6:	1c04      	adds	r4, r0, #0
 8011bd8:	1c28      	adds	r0, r5, #0
 8011bda:	f7ef f8e7 	bl	8000dac <__aeabi_fmul>
 8011bde:	1c01      	adds	r1, r0, #0
 8011be0:	1c20      	adds	r0, r4, #0
 8011be2:	f7ee fd7d 	bl	80006e0 <__aeabi_fadd>
 8011be6:	999e      	ldr	r1, [sp, #632]	; 0x278
 8011be8:	4681      	mov	r9, r0
 8011bea:	904d      	str	r0, [sp, #308]	; 0x134
 8011bec:	4658      	mov	r0, fp
 8011bee:	f7ef f8dd 	bl	8000dac <__aeabi_fmul>
 8011bf2:	99a1      	ldr	r1, [sp, #644]	; 0x284
 8011bf4:	1c04      	adds	r4, r0, #0
 8011bf6:	4650      	mov	r0, sl
 8011bf8:	f7ef f8d8 	bl	8000dac <__aeabi_fmul>
 8011bfc:	1c01      	adds	r1, r0, #0
 8011bfe:	1c20      	adds	r0, r4, #0
 8011c00:	f7ee fd6e 	bl	80006e0 <__aeabi_fadd>
 8011c04:	99a4      	ldr	r1, [sp, #656]	; 0x290
 8011c06:	1c04      	adds	r4, r0, #0
 8011c08:	1c28      	adds	r0, r5, #0
 8011c0a:	f7ef f8cf 	bl	8000dac <__aeabi_fmul>
 8011c0e:	1c01      	adds	r1, r0, #0
 8011c10:	1c20      	adds	r0, r4, #0
 8011c12:	f7ee fd65 	bl	80006e0 <__aeabi_fadd>
 8011c16:	99a1      	ldr	r1, [sp, #644]	; 0x284
 8011c18:	1c04      	adds	r4, r0, #0
 8011c1a:	904e      	str	r0, [sp, #312]	; 0x138
 8011c1c:	9057      	str	r0, [sp, #348]	; 0x15c
 8011c1e:	9806      	ldr	r0, [sp, #24]
 8011c20:	f7ef f8c4 	bl	8000dac <__aeabi_fmul>
 8011c24:	999e      	ldr	r1, [sp, #632]	; 0x278
 8011c26:	1c05      	adds	r5, r0, #0
 8011c28:	9805      	ldr	r0, [sp, #20]
 8011c2a:	f7ef f8bf 	bl	8000dac <__aeabi_fmul>
 8011c2e:	1c01      	adds	r1, r0, #0
 8011c30:	1c28      	adds	r0, r5, #0
 8011c32:	f7ee fd55 	bl	80006e0 <__aeabi_fadd>
 8011c36:	99a4      	ldr	r1, [sp, #656]	; 0x290
 8011c38:	1c05      	adds	r5, r0, #0
 8011c3a:	9807      	ldr	r0, [sp, #28]
 8011c3c:	f7ef f8b6 	bl	8000dac <__aeabi_fmul>
 8011c40:	1c01      	adds	r1, r0, #0
 8011c42:	1c28      	adds	r0, r5, #0
 8011c44:	f7ee fd4c 	bl	80006e0 <__aeabi_fadd>
 8011c48:	22cd      	movs	r2, #205	; 0xcd
 8011c4a:	4641      	mov	r1, r8
 8011c4c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011c4e:	00d2      	lsls	r2, r2, #3
 8011c50:	5099      	str	r1, [r3, r2]
 8011c52:	4ad3      	ldr	r2, [pc, #844]	; (8011fa0 <calibrate+0x16a0>)
 8011c54:	9058      	str	r0, [sp, #352]	; 0x160
 8011c56:	509e      	str	r6, [r3, r2]
 8011c58:	4692      	mov	sl, r2
 8011c5a:	3204      	adds	r2, #4
 8011c5c:	509f      	str	r7, [r3, r2]
 8011c5e:	4ad1      	ldr	r2, [pc, #836]	; (8011fa4 <calibrate+0x16a4>)
 8011c60:	2100      	movs	r1, #0
 8011c62:	509e      	str	r6, [r3, r2]
 8011c64:	26cf      	movs	r6, #207	; 0xcf
 8011c66:	464a      	mov	r2, r9
 8011c68:	00f6      	lsls	r6, r6, #3
 8011c6a:	519a      	str	r2, [r3, r6]
 8011c6c:	4ace      	ldr	r2, [pc, #824]	; (8011fa8 <calibrate+0x16a8>)
 8011c6e:	509c      	str	r4, [r3, r2]
 8011c70:	4691      	mov	r9, r2
 8011c72:	3204      	adds	r2, #4
 8011c74:	509f      	str	r7, [r3, r2]
 8011c76:	4acd      	ldr	r2, [pc, #820]	; (8011fac <calibrate+0x16ac>)
 8011c78:	509c      	str	r4, [r3, r2]
 8011c7a:	001a      	movs	r2, r3
 8011c7c:	23d1      	movs	r3, #209	; 0xd1
 8011c7e:	00db      	lsls	r3, r3, #3
 8011c80:	50d0      	str	r0, [r2, r3]
 8011c82:	4bcb      	ldr	r3, [pc, #812]	; (8011fb0 <calibrate+0x16b0>)
 8011c84:	ac24      	add	r4, sp, #144	; 0x90
 8011c86:	58d5      	ldr	r5, [r2, r3]
 8011c88:	0020      	movs	r0, r4
 8011c8a:	220c      	movs	r2, #12
 8011c8c:	f001 feeb 	bl	8013a66 <memset>
 8011c90:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8011c92:	2b01      	cmp	r3, #1
 8011c94:	d001      	beq.n	8011c9a <calibrate+0x139a>
 8011c96:	f7ff f874 	bl	8010d82 <calibrate+0x482>
 8011c9a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8011c9c:	4bc5      	ldr	r3, [pc, #788]	; (8011fb4 <calibrate+0x16b4>)
 8011c9e:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8011ca0:	58d1      	ldr	r1, [r2, r3]
 8011ca2:	f7ef f9a9 	bl	8000ff8 <__aeabi_fsub>
 8011ca6:	23cc      	movs	r3, #204	; 0xcc
 8011ca8:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8011caa:	00db      	lsls	r3, r3, #3
 8011cac:	58d1      	ldr	r1, [r2, r3]
 8011cae:	1c07      	adds	r7, r0, #0
 8011cb0:	981c      	ldr	r0, [sp, #112]	; 0x70
 8011cb2:	f7ef f9a1 	bl	8000ff8 <__aeabi_fsub>
 8011cb6:	4651      	mov	r1, sl
 8011cb8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011cba:	4680      	mov	r8, r0
 8011cbc:	5859      	ldr	r1, [r3, r1]
 8011cbe:	1c38      	adds	r0, r7, #0
 8011cc0:	f7ef f874 	bl	8000dac <__aeabi_fmul>
 8011cc4:	9925      	ldr	r1, [sp, #148]	; 0x94
 8011cc6:	f7ee fd0b 	bl	80006e0 <__aeabi_fadd>
 8011cca:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011ccc:	4682      	mov	sl, r0
 8011cce:	5999      	ldr	r1, [r3, r6]
 8011cd0:	4640      	mov	r0, r8
 8011cd2:	f7ef f86b 	bl	8000dac <__aeabi_fmul>
 8011cd6:	1c01      	adds	r1, r0, #0
 8011cd8:	4650      	mov	r0, sl
 8011cda:	f7ee fd01 	bl	80006e0 <__aeabi_fadd>
 8011cde:	22ce      	movs	r2, #206	; 0xce
 8011ce0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011ce2:	00d2      	lsls	r2, r2, #3
 8011ce4:	5899      	ldr	r1, [r3, r2]
 8011ce6:	4682      	mov	sl, r0
 8011ce8:	1c38      	adds	r0, r7, #0
 8011cea:	f7ef f85f 	bl	8000dac <__aeabi_fmul>
 8011cee:	9926      	ldr	r1, [sp, #152]	; 0x98
 8011cf0:	f7ee fcf6 	bl	80006e0 <__aeabi_fadd>
 8011cf4:	464a      	mov	r2, r9
 8011cf6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011cf8:	1c06      	adds	r6, r0, #0
 8011cfa:	5899      	ldr	r1, [r3, r2]
 8011cfc:	4640      	mov	r0, r8
 8011cfe:	f7ef f855 	bl	8000dac <__aeabi_fmul>
 8011d02:	1c01      	adds	r1, r0, #0
 8011d04:	1c30      	adds	r0, r6, #0
 8011d06:	f7ee fceb 	bl	80006e0 <__aeabi_fadd>
 8011d0a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8011d0c:	4baa      	ldr	r3, [pc, #680]	; (8011fb8 <calibrate+0x16b8>)
 8011d0e:	4681      	mov	r9, r0
 8011d10:	58d1      	ldr	r1, [r2, r3]
 8011d12:	981d      	ldr	r0, [sp, #116]	; 0x74
 8011d14:	f7ef f970 	bl	8000ff8 <__aeabi_fsub>
 8011d18:	22cd      	movs	r2, #205	; 0xcd
 8011d1a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011d1c:	00d2      	lsls	r2, r2, #3
 8011d1e:	5899      	ldr	r1, [r3, r2]
 8011d20:	1c06      	adds	r6, r0, #0
 8011d22:	1c38      	adds	r0, r7, #0
 8011d24:	f7ef f842 	bl	8000dac <__aeabi_fmul>
 8011d28:	9924      	ldr	r1, [sp, #144]	; 0x90
 8011d2a:	f7ee fcd9 	bl	80006e0 <__aeabi_fadd>
 8011d2e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011d30:	4a9c      	ldr	r2, [pc, #624]	; (8011fa4 <calibrate+0x16a4>)
 8011d32:	1c07      	adds	r7, r0, #0
 8011d34:	5899      	ldr	r1, [r3, r2]
 8011d36:	4640      	mov	r0, r8
 8011d38:	f7ef f838 	bl	8000dac <__aeabi_fmul>
 8011d3c:	1c01      	adds	r1, r0, #0
 8011d3e:	1c38      	adds	r0, r7, #0
 8011d40:	f7ee fcce 	bl	80006e0 <__aeabi_fadd>
 8011d44:	22d0      	movs	r2, #208	; 0xd0
 8011d46:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011d48:	00d2      	lsls	r2, r2, #3
 8011d4a:	5899      	ldr	r1, [r3, r2]
 8011d4c:	1c07      	adds	r7, r0, #0
 8011d4e:	1c30      	adds	r0, r6, #0
 8011d50:	f7ef f82c 	bl	8000dac <__aeabi_fmul>
 8011d54:	1c01      	adds	r1, r0, #0
 8011d56:	1c38      	adds	r0, r7, #0
 8011d58:	f7ee fcc2 	bl	80006e0 <__aeabi_fadd>
 8011d5c:	4b93      	ldr	r3, [pc, #588]	; (8011fac <calibrate+0x16ac>)
 8011d5e:	9f15      	ldr	r7, [sp, #84]	; 0x54
 8011d60:	9024      	str	r0, [sp, #144]	; 0x90
 8011d62:	58f9      	ldr	r1, [r7, r3]
 8011d64:	1c30      	adds	r0, r6, #0
 8011d66:	f7ef f821 	bl	8000dac <__aeabi_fmul>
 8011d6a:	4651      	mov	r1, sl
 8011d6c:	f7ee fcb8 	bl	80006e0 <__aeabi_fadd>
 8011d70:	23d1      	movs	r3, #209	; 0xd1
 8011d72:	00db      	lsls	r3, r3, #3
 8011d74:	58f9      	ldr	r1, [r7, r3]
 8011d76:	6060      	str	r0, [r4, #4]
 8011d78:	1c30      	adds	r0, r6, #0
 8011d7a:	f7ef f817 	bl	8000dac <__aeabi_fmul>
 8011d7e:	4649      	mov	r1, r9
 8011d80:	f7ee fcae 	bl	80006e0 <__aeabi_fadd>
 8011d84:	60a0      	str	r0, [r4, #8]
 8011d86:	1c06      	adds	r6, r0, #0
 8011d88:	f7ff f810 	bl	8010dac <calibrate+0x4ac>
 8011d8c:	9900      	ldr	r1, [sp, #0]
 8011d8e:	9802      	ldr	r0, [sp, #8]
 8011d90:	f7ef f932 	bl	8000ff8 <__aeabi_fsub>
 8011d94:	9903      	ldr	r1, [sp, #12]
 8011d96:	f7ef f92f 	bl	8000ff8 <__aeabi_fsub>
 8011d9a:	4988      	ldr	r1, [pc, #544]	; (8011fbc <calibrate+0x16bc>)
 8011d9c:	f7ef f806 	bl	8000dac <__aeabi_fmul>
 8011da0:	1c06      	adds	r6, r0, #0
 8011da2:	1c01      	adds	r1, r0, #0
 8011da4:	9805      	ldr	r0, [sp, #20]
 8011da6:	f7ef f927 	bl	8000ff8 <__aeabi_fsub>
 8011daa:	1c31      	adds	r1, r6, #0
 8011dac:	9007      	str	r0, [sp, #28]
 8011dae:	9802      	ldr	r0, [sp, #8]
 8011db0:	960c      	str	r6, [sp, #48]	; 0x30
 8011db2:	f7ef f921 	bl	8000ff8 <__aeabi_fsub>
 8011db6:	990c      	ldr	r1, [sp, #48]	; 0x30
 8011db8:	1c06      	adds	r6, r0, #0
 8011dba:	9806      	ldr	r0, [sp, #24]
 8011dbc:	f7ef f91c 	bl	8000ff8 <__aeabi_fsub>
 8011dc0:	9907      	ldr	r1, [sp, #28]
 8011dc2:	900b      	str	r0, [sp, #44]	; 0x2c
 8011dc4:	1c08      	adds	r0, r1, #0
 8011dc6:	f7ee fff1 	bl	8000dac <__aeabi_fmul>
 8011dca:	1c31      	adds	r1, r6, #0
 8011dcc:	900d      	str	r0, [sp, #52]	; 0x34
 8011dce:	1c30      	adds	r0, r6, #0
 8011dd0:	f7ee ffec 	bl	8000dac <__aeabi_fmul>
 8011dd4:	1c01      	adds	r1, r0, #0
 8011dd6:	980d      	ldr	r0, [sp, #52]	; 0x34
 8011dd8:	f7ee fc82 	bl	80006e0 <__aeabi_fadd>
 8011ddc:	1c29      	adds	r1, r5, #0
 8011dde:	900d      	str	r0, [sp, #52]	; 0x34
 8011de0:	1c28      	adds	r0, r5, #0
 8011de2:	f7ee fc7d 	bl	80006e0 <__aeabi_fadd>
 8011de6:	1c01      	adds	r1, r0, #0
 8011de8:	980d      	ldr	r0, [sp, #52]	; 0x34
 8011dea:	f7ee fc79 	bl	80006e0 <__aeabi_fadd>
 8011dee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011df0:	1c05      	adds	r5, r0, #0
 8011df2:	1c19      	adds	r1, r3, #0
 8011df4:	1c18      	adds	r0, r3, #0
 8011df6:	f7ee ffd9 	bl	8000dac <__aeabi_fmul>
 8011dfa:	1c01      	adds	r1, r0, #0
 8011dfc:	1c28      	adds	r0, r5, #0
 8011dfe:	f7ee fc6f 	bl	80006e0 <__aeabi_fadd>
 8011e02:	496f      	ldr	r1, [pc, #444]	; (8011fc0 <calibrate+0x16c0>)
 8011e04:	f7ee ffd2 	bl	8000dac <__aeabi_fmul>
 8011e08:	f002 fbb2 	bl	8014570 <sqrtf>
 8011e0c:	1c01      	adds	r1, r0, #0
 8011e0e:	900e      	str	r0, [sp, #56]	; 0x38
 8011e10:	20fe      	movs	r0, #254	; 0xfe
 8011e12:	0580      	lsls	r0, r0, #22
 8011e14:	f7ee fe02 	bl	8000a1c <__aeabi_fdiv>
 8011e18:	1c05      	adds	r5, r0, #0
 8011e1a:	1c01      	adds	r1, r0, #0
 8011e1c:	4640      	mov	r0, r8
 8011e1e:	f7ee ffc5 	bl	8000dac <__aeabi_fmul>
 8011e22:	1c29      	adds	r1, r5, #0
 8011e24:	4680      	mov	r8, r0
 8011e26:	1c30      	adds	r0, r6, #0
 8011e28:	f7ee ffc0 	bl	8000dac <__aeabi_fmul>
 8011e2c:	1c29      	adds	r1, r5, #0
 8011e2e:	900d      	str	r0, [sp, #52]	; 0x34
 8011e30:	4658      	mov	r0, fp
 8011e32:	f7ee ffbb 	bl	8000dac <__aeabi_fmul>
 8011e36:	1c29      	adds	r1, r5, #0
 8011e38:	1c06      	adds	r6, r0, #0
 8011e3a:	1c38      	adds	r0, r7, #0
 8011e3c:	f7ee ffb6 	bl	8000dac <__aeabi_fmul>
 8011e40:	1c29      	adds	r1, r5, #0
 8011e42:	4683      	mov	fp, r0
 8011e44:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8011e46:	f7ee ffb1 	bl	8000dac <__aeabi_fmul>
 8011e4a:	4643      	mov	r3, r8
 8011e4c:	1c07      	adds	r7, r0, #0
 8011e4e:	1c01      	adds	r1, r0, #0
 8011e50:	4640      	mov	r0, r8
 8011e52:	930b      	str	r3, [sp, #44]	; 0x2c
 8011e54:	f7ee ffaa 	bl	8000dac <__aeabi_fmul>
 8011e58:	4659      	mov	r1, fp
 8011e5a:	4680      	mov	r8, r0
 8011e5c:	1c30      	adds	r0, r6, #0
 8011e5e:	f7ee ffa5 	bl	8000dac <__aeabi_fmul>
 8011e62:	1c01      	adds	r1, r0, #0
 8011e64:	4640      	mov	r0, r8
 8011e66:	f7ef f8c7 	bl	8000ff8 <__aeabi_fsub>
 8011e6a:	1c21      	adds	r1, r4, #0
 8011e6c:	f7ee ff9e 	bl	8000dac <__aeabi_fmul>
 8011e70:	1c39      	adds	r1, r7, #0
 8011e72:	4680      	mov	r8, r0
 8011e74:	980d      	ldr	r0, [sp, #52]	; 0x34
 8011e76:	f7ee ff99 	bl	8000dac <__aeabi_fmul>
 8011e7a:	1c31      	adds	r1, r6, #0
 8011e7c:	1c07      	adds	r7, r0, #0
 8011e7e:	1c30      	adds	r0, r6, #0
 8011e80:	f7ee ff94 	bl	8000dac <__aeabi_fmul>
 8011e84:	1c01      	adds	r1, r0, #0
 8011e86:	1c38      	adds	r0, r7, #0
 8011e88:	f7ef f8b6 	bl	8000ff8 <__aeabi_fsub>
 8011e8c:	9907      	ldr	r1, [sp, #28]
 8011e8e:	f7ee ff8d 	bl	8000dac <__aeabi_fmul>
 8011e92:	1c01      	adds	r1, r0, #0
 8011e94:	4640      	mov	r0, r8
 8011e96:	f7ee fc23 	bl	80006e0 <__aeabi_fadd>
 8011e9a:	4659      	mov	r1, fp
 8011e9c:	1c07      	adds	r7, r0, #0
 8011e9e:	980d      	ldr	r0, [sp, #52]	; 0x34
 8011ea0:	f7ee ff84 	bl	8000dac <__aeabi_fmul>
 8011ea4:	1c31      	adds	r1, r6, #0
 8011ea6:	4680      	mov	r8, r0
 8011ea8:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8011eaa:	f7ee ff7f 	bl	8000dac <__aeabi_fmul>
 8011eae:	1c01      	adds	r1, r0, #0
 8011eb0:	4640      	mov	r0, r8
 8011eb2:	f7ef f8a1 	bl	8000ff8 <__aeabi_fsub>
 8011eb6:	4651      	mov	r1, sl
 8011eb8:	f7ee ff78 	bl	8000dac <__aeabi_fmul>
 8011ebc:	1c01      	adds	r1, r0, #0
 8011ebe:	1c38      	adds	r0, r7, #0
 8011ec0:	f7ee fc0e 	bl	80006e0 <__aeabi_fadd>
 8011ec4:	1c29      	adds	r1, r5, #0
 8011ec6:	f7ee ff71 	bl	8000dac <__aeabi_fmul>
 8011eca:	21c0      	movs	r1, #192	; 0xc0
 8011ecc:	0609      	lsls	r1, r1, #24
 8011ece:	1c05      	adds	r5, r0, #0
 8011ed0:	f7ee fab6 	bl	8000440 <__aeabi_fcmple>
 8011ed4:	2800      	cmp	r0, #0
 8011ed6:	d11a      	bne.n	8011f0e <calibrate+0x160e>
 8011ed8:	2180      	movs	r1, #128	; 0x80
 8011eda:	1c28      	adds	r0, r5, #0
 8011edc:	05c9      	lsls	r1, r1, #23
 8011ede:	f7ee fac3 	bl	8000468 <__aeabi_fcmpge>
 8011ee2:	2800      	cmp	r0, #0
 8011ee4:	d046      	beq.n	8011f74 <calibrate+0x1674>
 8011ee6:	25fe      	movs	r5, #254	; 0xfe
 8011ee8:	4e36      	ldr	r6, [pc, #216]	; (8011fc4 <calibrate+0x16c4>)
 8011eea:	05ad      	lsls	r5, r5, #22
 8011eec:	e011      	b.n	8011f12 <calibrate+0x1612>
 8011eee:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8011ef0:	2224      	movs	r2, #36	; 0x24
 8011ef2:	6858      	ldr	r0, [r3, #4]
 8011ef4:	23cd      	movs	r3, #205	; 0xcd
 8011ef6:	00db      	lsls	r3, r3, #3
 8011ef8:	469c      	mov	ip, r3
 8011efa:	a939      	add	r1, sp, #228	; 0xe4
 8011efc:	4460      	add	r0, ip
 8011efe:	f001 fda9 	bl	8013a54 <memcpy>
 8011f02:	2000      	movs	r0, #0
 8011f04:	f7fe ff78 	bl	8010df8 <calibrate+0x4f8>
 8011f08:	2300      	movs	r3, #0
 8011f0a:	930f      	str	r3, [sp, #60]	; 0x3c
 8011f0c:	e523      	b.n	8011956 <calibrate+0x1056>
 8011f0e:	4e2e      	ldr	r6, [pc, #184]	; (8011fc8 <calibrate+0x16c8>)
 8011f10:	4d2e      	ldr	r5, [pc, #184]	; (8011fcc <calibrate+0x16cc>)
 8011f12:	990e      	ldr	r1, [sp, #56]	; 0x38
 8011f14:	1c08      	adds	r0, r1, #0
 8011f16:	f7ee fbe3 	bl	80006e0 <__aeabi_fadd>
 8011f1a:	1c01      	adds	r1, r0, #0
 8011f1c:	1c07      	adds	r7, r0, #0
 8011f1e:	1c28      	adds	r0, r5, #0
 8011f20:	f7ee ff44 	bl	8000dac <__aeabi_fmul>
 8011f24:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8011f26:	1c29      	adds	r1, r5, #0
 8011f28:	f7ee fbda 	bl	80006e0 <__aeabi_fadd>
 8011f2c:	1c39      	adds	r1, r7, #0
 8011f2e:	4680      	mov	r8, r0
 8011f30:	900b      	str	r0, [sp, #44]	; 0x2c
 8011f32:	901f      	str	r0, [sp, #124]	; 0x7c
 8011f34:	1c30      	adds	r0, r6, #0
 8011f36:	f7ee ff39 	bl	8000dac <__aeabi_fmul>
 8011f3a:	1c29      	adds	r1, r5, #0
 8011f3c:	f7ee fbd0 	bl	80006e0 <__aeabi_fadd>
 8011f40:	4923      	ldr	r1, [pc, #140]	; (8011fd0 <calibrate+0x16d0>)
 8011f42:	4683      	mov	fp, r0
 8011f44:	9020      	str	r0, [sp, #128]	; 0x80
 8011f46:	1c28      	adds	r0, r5, #0
 8011f48:	f7ee ff30 	bl	8000dac <__aeabi_fmul>
 8011f4c:	4659      	mov	r1, fp
 8011f4e:	1c05      	adds	r5, r0, #0
 8011f50:	4640      	mov	r0, r8
 8011f52:	f7ee fbc5 	bl	80006e0 <__aeabi_fadd>
 8011f56:	1c01      	adds	r1, r0, #0
 8011f58:	1c28      	adds	r0, r5, #0
 8011f5a:	f7ef f84d 	bl	8000ff8 <__aeabi_fsub>
 8011f5e:	9007      	str	r0, [sp, #28]
 8011f60:	901e      	str	r0, [sp, #120]	; 0x78
 8011f62:	f7ff fa83 	bl	801146c <calibrate+0xb6c>
 8011f66:	9b02      	ldr	r3, [sp, #8]
 8011f68:	939d      	str	r3, [sp, #628]	; 0x274
 8011f6a:	9b03      	ldr	r3, [sp, #12]
 8011f6c:	939e      	str	r3, [sp, #632]	; 0x278
 8011f6e:	4643      	mov	r3, r8
 8011f70:	93a1      	str	r3, [sp, #644]	; 0x284
 8011f72:	e592      	b.n	8011a9a <calibrate+0x119a>
 8011f74:	21fc      	movs	r1, #252	; 0xfc
 8011f76:	1c28      	adds	r0, r5, #0
 8011f78:	0589      	lsls	r1, r1, #22
 8011f7a:	f7ee ff17 	bl	8000dac <__aeabi_fmul>
 8011f7e:	f002 fab3 	bl	80144e8 <acosf>
 8011f82:	490e      	ldr	r1, [pc, #56]	; (8011fbc <calibrate+0x16bc>)
 8011f84:	f7ee ff12 	bl	8000dac <__aeabi_fmul>
 8011f88:	1c06      	adds	r6, r0, #0
 8011f8a:	f002 fa27 	bl	80143dc <cosf>
 8011f8e:	4911      	ldr	r1, [pc, #68]	; (8011fd4 <calibrate+0x16d4>)
 8011f90:	1c05      	adds	r5, r0, #0
 8011f92:	1c30      	adds	r0, r6, #0
 8011f94:	f7ee fba4 	bl	80006e0 <__aeabi_fadd>
 8011f98:	f002 fa20 	bl	80143dc <cosf>
 8011f9c:	1c06      	adds	r6, r0, #0
 8011f9e:	e7b8      	b.n	8011f12 <calibrate+0x1612>
 8011fa0:	0000066c 	.word	0x0000066c
 8011fa4:	00000674 	.word	0x00000674
 8011fa8:	0000067c 	.word	0x0000067c
 8011fac:	00000684 	.word	0x00000684
 8011fb0:	0000068c 	.word	0x0000068c
 8011fb4:	0000065c 	.word	0x0000065c
 8011fb8:	00000664 	.word	0x00000664
 8011fbc:	3eaaaaab 	.word	0x3eaaaaab
 8011fc0:	3e2aaaab 	.word	0x3e2aaaab
 8011fc4:	bf000001 	.word	0xbf000001
 8011fc8:	bf800000 	.word	0xbf800000
 8011fcc:	3effffff 	.word	0x3effffff
 8011fd0:	40400000 	.word	0x40400000
 8011fd4:	40060a92 	.word	0x40060a92

08011fd8 <update_gyro>:
 8011fd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011fda:	46de      	mov	lr, fp
 8011fdc:	464e      	mov	r6, r9
 8011fde:	4645      	mov	r5, r8
 8011fe0:	4657      	mov	r7, sl
 8011fe2:	680b      	ldr	r3, [r1, #0]
 8011fe4:	b5e0      	push	{r5, r6, r7, lr}
 8011fe6:	469b      	mov	fp, r3
 8011fe8:	684b      	ldr	r3, [r1, #4]
 8011fea:	b089      	sub	sp, #36	; 0x24
 8011fec:	688f      	ldr	r7, [r1, #8]
 8011fee:	0004      	movs	r4, r0
 8011ff0:	000d      	movs	r5, r1
 8011ff2:	4658      	mov	r0, fp
 8011ff4:	4659      	mov	r1, fp
 8011ff6:	4698      	mov	r8, r3
 8011ff8:	4691      	mov	r9, r2
 8011ffa:	f7ee fed7 	bl	8000dac <__aeabi_fmul>
 8011ffe:	4641      	mov	r1, r8
 8012000:	1c06      	adds	r6, r0, #0
 8012002:	4640      	mov	r0, r8
 8012004:	f7ee fed2 	bl	8000dac <__aeabi_fmul>
 8012008:	1c01      	adds	r1, r0, #0
 801200a:	1c30      	adds	r0, r6, #0
 801200c:	f7ee fb68 	bl	80006e0 <__aeabi_fadd>
 8012010:	1c39      	adds	r1, r7, #0
 8012012:	1c06      	adds	r6, r0, #0
 8012014:	1c38      	adds	r0, r7, #0
 8012016:	f7ee fec9 	bl	8000dac <__aeabi_fmul>
 801201a:	1c01      	adds	r1, r0, #0
 801201c:	1c30      	adds	r0, r6, #0
 801201e:	f7ee fb5f 	bl	80006e0 <__aeabi_fadd>
 8012022:	f002 faa5 	bl	8014570 <sqrtf>
 8012026:	4fe1      	ldr	r7, [pc, #900]	; (80123ac <update_gyro+0x3d4>)
 8012028:	1c06      	adds	r6, r0, #0
 801202a:	6939      	ldr	r1, [r7, #16]
 801202c:	4648      	mov	r0, r9
 801202e:	f7ee febd 	bl	8000dac <__aeabi_fmul>
 8012032:	49df      	ldr	r1, [pc, #892]	; (80123b0 <update_gyro+0x3d8>)
 8012034:	4680      	mov	r8, r0
 8012036:	f7ee fa0d 	bl	8000454 <__aeabi_fcmpgt>
 801203a:	2800      	cmp	r0, #0
 801203c:	d000      	beq.n	8012040 <update_gyro+0x68>
 801203e:	e0c8      	b.n	80121d2 <update_gyro+0x1fa>
 8012040:	4640      	mov	r0, r8
 8012042:	49dc      	ldr	r1, [pc, #880]	; (80123b4 <update_gyro+0x3dc>)
 8012044:	f7ee feb2 	bl	8000dac <__aeabi_fmul>
 8012048:	1c01      	adds	r1, r0, #0
 801204a:	4680      	mov	r8, r0
 801204c:	20fe      	movs	r0, #254	; 0xfe
 801204e:	0580      	lsls	r0, r0, #22
 8012050:	f7ee ffd2 	bl	8000ff8 <__aeabi_fsub>
 8012054:	4682      	mov	sl, r0
 8012056:	2385      	movs	r3, #133	; 0x85
 8012058:	5ce3      	ldrb	r3, [r4, r3]
 801205a:	2b00      	cmp	r3, #0
 801205c:	d005      	beq.n	801206a <update_gyro+0x92>
 801205e:	465b      	mov	r3, fp
 8012060:	6163      	str	r3, [r4, #20]
 8012062:	686b      	ldr	r3, [r5, #4]
 8012064:	61a3      	str	r3, [r4, #24]
 8012066:	68ab      	ldr	r3, [r5, #8]
 8012068:	61e3      	str	r3, [r4, #28]
 801206a:	6963      	ldr	r3, [r4, #20]
 801206c:	6828      	ldr	r0, [r5, #0]
 801206e:	1c19      	adds	r1, r3, #0
 8012070:	469b      	mov	fp, r3
 8012072:	f7ee ffc1 	bl	8000ff8 <__aeabi_fsub>
 8012076:	1c01      	adds	r1, r0, #0
 8012078:	9001      	str	r0, [sp, #4]
 801207a:	4640      	mov	r0, r8
 801207c:	f7ee fe96 	bl	8000dac <__aeabi_fmul>
 8012080:	4659      	mov	r1, fp
 8012082:	4683      	mov	fp, r0
 8012084:	f7ee fb2c 	bl	80006e0 <__aeabi_fadd>
 8012088:	9901      	ldr	r1, [sp, #4]
 801208a:	6160      	str	r0, [r4, #20]
 801208c:	4658      	mov	r0, fp
 801208e:	f7ee fe8d 	bl	8000dac <__aeabi_fmul>
 8012092:	6a21      	ldr	r1, [r4, #32]
 8012094:	f7ee fb24 	bl	80006e0 <__aeabi_fadd>
 8012098:	4651      	mov	r1, sl
 801209a:	f7ee fe87 	bl	8000dac <__aeabi_fmul>
 801209e:	69a3      	ldr	r3, [r4, #24]
 80120a0:	6220      	str	r0, [r4, #32]
 80120a2:	1c19      	adds	r1, r3, #0
 80120a4:	9002      	str	r0, [sp, #8]
 80120a6:	6868      	ldr	r0, [r5, #4]
 80120a8:	469b      	mov	fp, r3
 80120aa:	f7ee ffa5 	bl	8000ff8 <__aeabi_fsub>
 80120ae:	1c01      	adds	r1, r0, #0
 80120b0:	9001      	str	r0, [sp, #4]
 80120b2:	4640      	mov	r0, r8
 80120b4:	f7ee fe7a 	bl	8000dac <__aeabi_fmul>
 80120b8:	4659      	mov	r1, fp
 80120ba:	4683      	mov	fp, r0
 80120bc:	f7ee fb10 	bl	80006e0 <__aeabi_fadd>
 80120c0:	9901      	ldr	r1, [sp, #4]
 80120c2:	61a0      	str	r0, [r4, #24]
 80120c4:	4658      	mov	r0, fp
 80120c6:	f7ee fe71 	bl	8000dac <__aeabi_fmul>
 80120ca:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80120cc:	f7ee fb08 	bl	80006e0 <__aeabi_fadd>
 80120d0:	4651      	mov	r1, sl
 80120d2:	f7ee fe6b 	bl	8000dac <__aeabi_fmul>
 80120d6:	69e3      	ldr	r3, [r4, #28]
 80120d8:	6260      	str	r0, [r4, #36]	; 0x24
 80120da:	1c19      	adds	r1, r3, #0
 80120dc:	9003      	str	r0, [sp, #12]
 80120de:	68a8      	ldr	r0, [r5, #8]
 80120e0:	469b      	mov	fp, r3
 80120e2:	f7ee ff89 	bl	8000ff8 <__aeabi_fsub>
 80120e6:	1c01      	adds	r1, r0, #0
 80120e8:	9001      	str	r0, [sp, #4]
 80120ea:	4640      	mov	r0, r8
 80120ec:	f7ee fe5e 	bl	8000dac <__aeabi_fmul>
 80120f0:	1c01      	adds	r1, r0, #0
 80120f2:	4680      	mov	r8, r0
 80120f4:	4658      	mov	r0, fp
 80120f6:	f7ee faf3 	bl	80006e0 <__aeabi_fadd>
 80120fa:	4641      	mov	r1, r8
 80120fc:	61e0      	str	r0, [r4, #28]
 80120fe:	9801      	ldr	r0, [sp, #4]
 8012100:	f7ee fe54 	bl	8000dac <__aeabi_fmul>
 8012104:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8012106:	f7ee faeb 	bl	80006e0 <__aeabi_fadd>
 801210a:	4651      	mov	r1, sl
 801210c:	f7ee fe4e 	bl	8000dac <__aeabi_fmul>
 8012110:	68e3      	ldr	r3, [r4, #12]
 8012112:	62a0      	str	r0, [r4, #40]	; 0x28
 8012114:	0058      	lsls	r0, r3, #1
 8012116:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8012118:	0840      	lsrs	r0, r0, #1
 801211a:	f7ee f987 	bl	800042c <__aeabi_fcmplt>
 801211e:	2800      	cmp	r0, #0
 8012120:	d006      	beq.n	8012130 <update_gyro+0x158>
 8012122:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8012124:	6920      	ldr	r0, [r4, #16]
 8012126:	f7ee f981 	bl	800042c <__aeabi_fcmplt>
 801212a:	2800      	cmp	r0, #0
 801212c:	d000      	beq.n	8012130 <update_gyro+0x158>
 801212e:	e08c      	b.n	801224a <update_gyro+0x272>
 8012130:	2387      	movs	r3, #135	; 0x87
 8012132:	2200      	movs	r2, #0
 8012134:	2000      	movs	r0, #0
 8012136:	54e2      	strb	r2, [r4, r3]
 8012138:	3301      	adds	r3, #1
 801213a:	50e0      	str	r0, [r4, r3]
 801213c:	2320      	movs	r3, #32
 801213e:	5cfb      	ldrb	r3, [r7, r3]
 8012140:	2b01      	cmp	r3, #1
 8012142:	d050      	beq.n	80121e6 <update_gyro+0x20e>
 8012144:	2100      	movs	r1, #0
 8012146:	1c30      	adds	r0, r6, #0
 8012148:	f7ee f96a 	bl	8000420 <__aeabi_fcmpeq>
 801214c:	2800      	cmp	r0, #0
 801214e:	d146      	bne.n	80121de <update_gyro+0x206>
 8012150:	20fe      	movs	r0, #254	; 0xfe
 8012152:	1c31      	adds	r1, r6, #0
 8012154:	0580      	lsls	r0, r0, #22
 8012156:	f7ee fc61 	bl	8000a1c <__aeabi_fdiv>
 801215a:	6829      	ldr	r1, [r5, #0]
 801215c:	4682      	mov	sl, r0
 801215e:	f7ee fe25 	bl	8000dac <__aeabi_fmul>
 8012162:	6869      	ldr	r1, [r5, #4]
 8012164:	4680      	mov	r8, r0
 8012166:	4650      	mov	r0, sl
 8012168:	f7ee fe20 	bl	8000dac <__aeabi_fmul>
 801216c:	68a9      	ldr	r1, [r5, #8]
 801216e:	1c07      	adds	r7, r0, #0
 8012170:	4650      	mov	r0, sl
 8012172:	f7ee fe1b 	bl	8000dac <__aeabi_fmul>
 8012176:	4682      	mov	sl, r0
 8012178:	4648      	mov	r0, r9
 801217a:	498f      	ldr	r1, [pc, #572]	; (80123b8 <update_gyro+0x3e0>)
 801217c:	f7ee fe16 	bl	8000dac <__aeabi_fmul>
 8012180:	1c31      	adds	r1, r6, #0
 8012182:	f7ee fe13 	bl	8000dac <__aeabi_fmul>
 8012186:	1c05      	adds	r5, r0, #0
 8012188:	f002 f928 	bl	80143dc <cosf>
 801218c:	1c06      	adds	r6, r0, #0
 801218e:	1c28      	adds	r0, r5, #0
 8012190:	f002 f958 	bl	8014444 <sinf>
 8012194:	1c05      	adds	r5, r0, #0
 8012196:	1c01      	adds	r1, r0, #0
 8012198:	4640      	mov	r0, r8
 801219a:	f7ee fe07 	bl	8000dac <__aeabi_fmul>
 801219e:	1c29      	adds	r1, r5, #0
 80121a0:	9004      	str	r0, [sp, #16]
 80121a2:	1c38      	adds	r0, r7, #0
 80121a4:	f7ee fe02 	bl	8000dac <__aeabi_fmul>
 80121a8:	1c29      	adds	r1, r5, #0
 80121aa:	9005      	str	r0, [sp, #20]
 80121ac:	4650      	mov	r0, sl
 80121ae:	f7ee fdfd 	bl	8000dac <__aeabi_fmul>
 80121b2:	0021      	movs	r1, r4
 80121b4:	9006      	str	r0, [sp, #24]
 80121b6:	0020      	movs	r0, r4
 80121b8:	315c      	adds	r1, #92	; 0x5c
 80121ba:	304c      	adds	r0, #76	; 0x4c
 80121bc:	aa04      	add	r2, sp, #16
 80121be:	9607      	str	r6, [sp, #28]
 80121c0:	f7fe f934 	bl	801042c <quat_mult>
 80121c4:	b009      	add	sp, #36	; 0x24
 80121c6:	bcf0      	pop	{r4, r5, r6, r7}
 80121c8:	46bb      	mov	fp, r7
 80121ca:	46b2      	mov	sl, r6
 80121cc:	46a9      	mov	r9, r5
 80121ce:	46a0      	mov	r8, r4
 80121d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80121d2:	2300      	movs	r3, #0
 80121d4:	469a      	mov	sl, r3
 80121d6:	23fe      	movs	r3, #254	; 0xfe
 80121d8:	059b      	lsls	r3, r3, #22
 80121da:	4698      	mov	r8, r3
 80121dc:	e73b      	b.n	8012056 <update_gyro+0x7e>
 80121de:	46b2      	mov	sl, r6
 80121e0:	46b0      	mov	r8, r6
 80121e2:	1c37      	adds	r7, r6, #0
 80121e4:	e7c8      	b.n	8012178 <update_gyro+0x1a0>
 80121e6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80121e8:	f7ee f93e 	bl	8000468 <__aeabi_fcmpge>
 80121ec:	2800      	cmp	r0, #0
 80121ee:	d000      	beq.n	80121f2 <update_gyro+0x21a>
 80121f0:	e098      	b.n	8012324 <update_gyro+0x34c>
 80121f2:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80121f4:	6828      	ldr	r0, [r5, #0]
 80121f6:	f7ee feff 	bl	8000ff8 <__aeabi_fsub>
 80121fa:	6028      	str	r0, [r5, #0]
 80121fc:	4680      	mov	r8, r0
 80121fe:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8012200:	6868      	ldr	r0, [r5, #4]
 8012202:	f7ee fef9 	bl	8000ff8 <__aeabi_fsub>
 8012206:	6068      	str	r0, [r5, #4]
 8012208:	1c07      	adds	r7, r0, #0
 801220a:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 801220c:	68a8      	ldr	r0, [r5, #8]
 801220e:	f7ee fef3 	bl	8000ff8 <__aeabi_fsub>
 8012212:	4641      	mov	r1, r8
 8012214:	1c06      	adds	r6, r0, #0
 8012216:	60a8      	str	r0, [r5, #8]
 8012218:	4640      	mov	r0, r8
 801221a:	f7ee fdc7 	bl	8000dac <__aeabi_fmul>
 801221e:	1c39      	adds	r1, r7, #0
 8012220:	4680      	mov	r8, r0
 8012222:	1c38      	adds	r0, r7, #0
 8012224:	f7ee fdc2 	bl	8000dac <__aeabi_fmul>
 8012228:	1c01      	adds	r1, r0, #0
 801222a:	4640      	mov	r0, r8
 801222c:	f7ee fa58 	bl	80006e0 <__aeabi_fadd>
 8012230:	1c31      	adds	r1, r6, #0
 8012232:	1c07      	adds	r7, r0, #0
 8012234:	1c30      	adds	r0, r6, #0
 8012236:	f7ee fdb9 	bl	8000dac <__aeabi_fmul>
 801223a:	1c01      	adds	r1, r0, #0
 801223c:	1c38      	adds	r0, r7, #0
 801223e:	f7ee fa4f 	bl	80006e0 <__aeabi_fadd>
 8012242:	f002 f995 	bl	8014570 <sqrtf>
 8012246:	1c06      	adds	r6, r0, #0
 8012248:	e77c      	b.n	8012144 <update_gyro+0x16c>
 801224a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801224c:	4698      	mov	r8, r3
 801224e:	682b      	ldr	r3, [r5, #0]
 8012250:	4641      	mov	r1, r8
 8012252:	0058      	lsls	r0, r3, #1
 8012254:	0840      	lsrs	r0, r0, #1
 8012256:	f7ee f8e9 	bl	800042c <__aeabi_fcmplt>
 801225a:	2800      	cmp	r0, #0
 801225c:	d100      	bne.n	8012260 <update_gyro+0x288>
 801225e:	e767      	b.n	8012130 <update_gyro+0x158>
 8012260:	686b      	ldr	r3, [r5, #4]
 8012262:	4640      	mov	r0, r8
 8012264:	0059      	lsls	r1, r3, #1
 8012266:	0849      	lsrs	r1, r1, #1
 8012268:	f7ee f8f4 	bl	8000454 <__aeabi_fcmpgt>
 801226c:	2800      	cmp	r0, #0
 801226e:	d100      	bne.n	8012272 <update_gyro+0x29a>
 8012270:	e75e      	b.n	8012130 <update_gyro+0x158>
 8012272:	68ab      	ldr	r3, [r5, #8]
 8012274:	4640      	mov	r0, r8
 8012276:	0059      	lsls	r1, r3, #1
 8012278:	0849      	lsrs	r1, r1, #1
 801227a:	f7ee f8eb 	bl	8000454 <__aeabi_fcmpgt>
 801227e:	2800      	cmp	r0, #0
 8012280:	d100      	bne.n	8012284 <update_gyro+0x2ac>
 8012282:	e755      	b.n	8012130 <update_gyro+0x158>
 8012284:	6963      	ldr	r3, [r4, #20]
 8012286:	4640      	mov	r0, r8
 8012288:	0059      	lsls	r1, r3, #1
 801228a:	0849      	lsrs	r1, r1, #1
 801228c:	f7ee f8e2 	bl	8000454 <__aeabi_fcmpgt>
 8012290:	2800      	cmp	r0, #0
 8012292:	d100      	bne.n	8012296 <update_gyro+0x2be>
 8012294:	e74c      	b.n	8012130 <update_gyro+0x158>
 8012296:	69a3      	ldr	r3, [r4, #24]
 8012298:	4640      	mov	r0, r8
 801229a:	0059      	lsls	r1, r3, #1
 801229c:	0849      	lsrs	r1, r1, #1
 801229e:	f7ee f8d9 	bl	8000454 <__aeabi_fcmpgt>
 80122a2:	2800      	cmp	r0, #0
 80122a4:	d100      	bne.n	80122a8 <update_gyro+0x2d0>
 80122a6:	e743      	b.n	8012130 <update_gyro+0x158>
 80122a8:	69e3      	ldr	r3, [r4, #28]
 80122aa:	4640      	mov	r0, r8
 80122ac:	0059      	lsls	r1, r3, #1
 80122ae:	0849      	lsrs	r1, r1, #1
 80122b0:	f7ee f8d0 	bl	8000454 <__aeabi_fcmpgt>
 80122b4:	2800      	cmp	r0, #0
 80122b6:	d100      	bne.n	80122ba <update_gyro+0x2e2>
 80122b8:	e73a      	b.n	8012130 <update_gyro+0x158>
 80122ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80122bc:	9802      	ldr	r0, [sp, #8]
 80122be:	1c19      	adds	r1, r3, #0
 80122c0:	4698      	mov	r8, r3
 80122c2:	f7ee f8b3 	bl	800042c <__aeabi_fcmplt>
 80122c6:	2800      	cmp	r0, #0
 80122c8:	d100      	bne.n	80122cc <update_gyro+0x2f4>
 80122ca:	e731      	b.n	8012130 <update_gyro+0x158>
 80122cc:	4640      	mov	r0, r8
 80122ce:	9903      	ldr	r1, [sp, #12]
 80122d0:	f7ee f8c0 	bl	8000454 <__aeabi_fcmpgt>
 80122d4:	2800      	cmp	r0, #0
 80122d6:	d100      	bne.n	80122da <update_gyro+0x302>
 80122d8:	e72a      	b.n	8012130 <update_gyro+0x158>
 80122da:	4640      	mov	r0, r8
 80122dc:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80122de:	f7ee f8b9 	bl	8000454 <__aeabi_fcmpgt>
 80122e2:	2800      	cmp	r0, #0
 80122e4:	d100      	bne.n	80122e8 <update_gyro+0x310>
 80122e6:	e723      	b.n	8012130 <update_gyro+0x158>
 80122e8:	2387      	movs	r3, #135	; 0x87
 80122ea:	4698      	mov	r8, r3
 80122ec:	4642      	mov	r2, r8
 80122ee:	3b86      	subs	r3, #134	; 0x86
 80122f0:	54a3      	strb	r3, [r4, r2]
 80122f2:	3387      	adds	r3, #135	; 0x87
 80122f4:	469a      	mov	sl, r3
 80122f6:	58e3      	ldr	r3, [r4, r3]
 80122f8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80122fa:	1c18      	adds	r0, r3, #0
 80122fc:	469b      	mov	fp, r3
 80122fe:	f7ee f895 	bl	800042c <__aeabi_fcmplt>
 8012302:	2800      	cmp	r0, #0
 8012304:	d009      	beq.n	801231a <update_gyro+0x342>
 8012306:	4649      	mov	r1, r9
 8012308:	4658      	mov	r0, fp
 801230a:	f7ee f9e9 	bl	80006e0 <__aeabi_fadd>
 801230e:	4653      	mov	r3, sl
 8012310:	4642      	mov	r2, r8
 8012312:	50e0      	str	r0, [r4, r3]
 8012314:	2300      	movs	r3, #0
 8012316:	54a3      	strb	r3, [r4, r2]
 8012318:	e710      	b.n	801213c <update_gyro+0x164>
 801231a:	2320      	movs	r3, #32
 801231c:	5cfb      	ldrb	r3, [r7, r3]
 801231e:	2b01      	cmp	r3, #1
 8012320:	d000      	beq.n	8012324 <update_gyro+0x34c>
 8012322:	e70f      	b.n	8012144 <update_gyro+0x16c>
 8012324:	2386      	movs	r3, #134	; 0x86
 8012326:	5ce2      	ldrb	r2, [r4, r3]
 8012328:	2a00      	cmp	r2, #0
 801232a:	d047      	beq.n	80123bc <update_gyro+0x3e4>
 801232c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801232e:	4648      	mov	r0, r9
 8012330:	f7ee fd3c 	bl	8000dac <__aeabi_fmul>
 8012334:	491e      	ldr	r1, [pc, #120]	; (80123b0 <update_gyro+0x3d8>)
 8012336:	1c06      	adds	r6, r0, #0
 8012338:	f7ee f88c 	bl	8000454 <__aeabi_fcmpgt>
 801233c:	2800      	cmp	r0, #0
 801233e:	d146      	bne.n	80123ce <update_gyro+0x3f6>
 8012340:	491c      	ldr	r1, [pc, #112]	; (80123b4 <update_gyro+0x3dc>)
 8012342:	1c30      	adds	r0, r6, #0
 8012344:	f7ee fd32 	bl	8000dac <__aeabi_fmul>
 8012348:	1c01      	adds	r1, r0, #0
 801234a:	1c06      	adds	r6, r0, #0
 801234c:	20fe      	movs	r0, #254	; 0xfe
 801234e:	0580      	lsls	r0, r0, #22
 8012350:	f7ee fe52 	bl	8000ff8 <__aeabi_fsub>
 8012354:	1c07      	adds	r7, r0, #0
 8012356:	6829      	ldr	r1, [r5, #0]
 8012358:	1c30      	adds	r0, r6, #0
 801235a:	f7ee fd27 	bl	8000dac <__aeabi_fmul>
 801235e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8012360:	4680      	mov	r8, r0
 8012362:	1c38      	adds	r0, r7, #0
 8012364:	f7ee fd22 	bl	8000dac <__aeabi_fmul>
 8012368:	1c01      	adds	r1, r0, #0
 801236a:	4640      	mov	r0, r8
 801236c:	f7ee f9b8 	bl	80006e0 <__aeabi_fadd>
 8012370:	6420      	str	r0, [r4, #64]	; 0x40
 8012372:	6869      	ldr	r1, [r5, #4]
 8012374:	1c30      	adds	r0, r6, #0
 8012376:	f7ee fd19 	bl	8000dac <__aeabi_fmul>
 801237a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 801237c:	4680      	mov	r8, r0
 801237e:	1c38      	adds	r0, r7, #0
 8012380:	f7ee fd14 	bl	8000dac <__aeabi_fmul>
 8012384:	1c01      	adds	r1, r0, #0
 8012386:	4640      	mov	r0, r8
 8012388:	f7ee f9aa 	bl	80006e0 <__aeabi_fadd>
 801238c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 801238e:	6460      	str	r0, [r4, #68]	; 0x44
 8012390:	1c38      	adds	r0, r7, #0
 8012392:	f7ee fd0b 	bl	8000dac <__aeabi_fmul>
 8012396:	68a9      	ldr	r1, [r5, #8]
 8012398:	1c07      	adds	r7, r0, #0
 801239a:	1c30      	adds	r0, r6, #0
 801239c:	f7ee fd06 	bl	8000dac <__aeabi_fmul>
 80123a0:	1c01      	adds	r1, r0, #0
 80123a2:	1c38      	adds	r0, r7, #0
 80123a4:	f7ee f99c 	bl	80006e0 <__aeabi_fadd>
 80123a8:	64a0      	str	r0, [r4, #72]	; 0x48
 80123aa:	e722      	b.n	80121f2 <update_gyro+0x21a>
 80123ac:	20000000 	.word	0x20000000
 80123b0:	3c23d70a 	.word	0x3c23d70a
 80123b4:	42c80000 	.word	0x42c80000
 80123b8:	3c0efa36 	.word	0x3c0efa36
 80123bc:	2201      	movs	r2, #1
 80123be:	54e2      	strb	r2, [r4, r3]
 80123c0:	6963      	ldr	r3, [r4, #20]
 80123c2:	6423      	str	r3, [r4, #64]	; 0x40
 80123c4:	69a3      	ldr	r3, [r4, #24]
 80123c6:	6463      	str	r3, [r4, #68]	; 0x44
 80123c8:	69e3      	ldr	r3, [r4, #28]
 80123ca:	64a3      	str	r3, [r4, #72]	; 0x48
 80123cc:	e711      	b.n	80121f2 <update_gyro+0x21a>
 80123ce:	26fe      	movs	r6, #254	; 0xfe
 80123d0:	2700      	movs	r7, #0
 80123d2:	05b6      	lsls	r6, r6, #22
 80123d4:	e7bf      	b.n	8012356 <update_gyro+0x37e>
 80123d6:	46c0      	nop			; (mov r8, r8)

080123d8 <update_fusion>:
 80123d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80123da:	46de      	mov	lr, fp
 80123dc:	4657      	mov	r7, sl
 80123de:	464e      	mov	r6, r9
 80123e0:	4645      	mov	r5, r8
 80123e2:	b5e0      	push	{r5, r6, r7, lr}
 80123e4:	0004      	movs	r4, r0
 80123e6:	b095      	sub	sp, #84	; 0x54
 80123e8:	1c08      	adds	r0, r1, #0
 80123ea:	49b7      	ldr	r1, [pc, #732]	; (80126c8 <update_fusion+0x2f0>)
 80123ec:	f7ee fcde 	bl	8000dac <__aeabi_fmul>
 80123f0:	4fb6      	ldr	r7, [pc, #728]	; (80126cc <update_fusion+0x2f4>)
 80123f2:	1c05      	adds	r5, r0, #0
 80123f4:	69b9      	ldr	r1, [r7, #24]
 80123f6:	f7ee fcd9 	bl	8000dac <__aeabi_fmul>
 80123fa:	69f9      	ldr	r1, [r7, #28]
 80123fc:	1c06      	adds	r6, r0, #0
 80123fe:	1c28      	adds	r0, r5, #0
 8012400:	f7ee fcd4 	bl	8000dac <__aeabi_fmul>
 8012404:	2387      	movs	r3, #135	; 0x87
 8012406:	5ce3      	ldrb	r3, [r4, r3]
 8012408:	1c05      	adds	r5, r0, #0
 801240a:	2b00      	cmp	r3, #0
 801240c:	d009      	beq.n	8012422 <update_fusion+0x4a>
 801240e:	1c31      	adds	r1, r6, #0
 8012410:	1c30      	adds	r0, r6, #0
 8012412:	f7ee f965 	bl	80006e0 <__aeabi_fadd>
 8012416:	1c29      	adds	r1, r5, #0
 8012418:	1c06      	adds	r6, r0, #0
 801241a:	1c28      	adds	r0, r5, #0
 801241c:	f7ee f960 	bl	80006e0 <__aeabi_fadd>
 8012420:	1c05      	adds	r5, r0, #0
 8012422:	238c      	movs	r3, #140	; 0x8c
 8012424:	5ce3      	ldrb	r3, [r4, r3]
 8012426:	2b00      	cmp	r3, #0
 8012428:	d100      	bne.n	801242c <update_fusion+0x54>
 801242a:	2600      	movs	r6, #0
 801242c:	238d      	movs	r3, #141	; 0x8d
 801242e:	5ce3      	ldrb	r3, [r4, r3]
 8012430:	2b00      	cmp	r3, #0
 8012432:	d100      	bne.n	8012436 <update_fusion+0x5e>
 8012434:	2500      	movs	r5, #0
 8012436:	2385      	movs	r3, #133	; 0x85
 8012438:	5ce3      	ldrb	r3, [r4, r3]
 801243a:	2b00      	cmp	r3, #0
 801243c:	d000      	beq.n	8012440 <update_fusion+0x68>
 801243e:	e0e6      	b.n	801260e <update_fusion+0x236>
 8012440:	21fc      	movs	r1, #252	; 0xfc
 8012442:	1c30      	adds	r0, r6, #0
 8012444:	0589      	lsls	r1, r1, #22
 8012446:	f7ee fcb1 	bl	8000dac <__aeabi_fmul>
 801244a:	9000      	str	r0, [sp, #0]
 801244c:	234c      	movs	r3, #76	; 0x4c
 801244e:	469a      	mov	sl, r3
 8012450:	44a2      	add	sl, r4
 8012452:	0022      	movs	r2, r4
 8012454:	4651      	mov	r1, sl
 8012456:	a802      	add	r0, sp, #8
 8012458:	f7fe f872 	bl	8010540 <quat_rot>
 801245c:	9b03      	ldr	r3, [sp, #12]
 801245e:	4699      	mov	r9, r3
 8012460:	9b04      	ldr	r3, [sp, #16]
 8012462:	4649      	mov	r1, r9
 8012464:	469b      	mov	fp, r3
 8012466:	9b02      	ldr	r3, [sp, #8]
 8012468:	4648      	mov	r0, r9
 801246a:	4698      	mov	r8, r3
 801246c:	f7ee fc9e 	bl	8000dac <__aeabi_fmul>
 8012470:	4641      	mov	r1, r8
 8012472:	1c06      	adds	r6, r0, #0
 8012474:	4640      	mov	r0, r8
 8012476:	f7ee fc99 	bl	8000dac <__aeabi_fmul>
 801247a:	1c01      	adds	r1, r0, #0
 801247c:	1c30      	adds	r0, r6, #0
 801247e:	f7ee f92f 	bl	80006e0 <__aeabi_fadd>
 8012482:	4993      	ldr	r1, [pc, #588]	; (80126d0 <update_fusion+0x2f8>)
 8012484:	1c06      	adds	r6, r0, #0
 8012486:	f7ed ffe5 	bl	8000454 <__aeabi_fcmpgt>
 801248a:	2800      	cmp	r0, #0
 801248c:	d100      	bne.n	8012490 <update_fusion+0xb8>
 801248e:	e0ba      	b.n	8012606 <update_fusion+0x22e>
 8012490:	1c30      	adds	r0, r6, #0
 8012492:	f002 f86d 	bl	8014570 <sqrtf>
 8012496:	1c01      	adds	r1, r0, #0
 8012498:	20fe      	movs	r0, #254	; 0xfe
 801249a:	0580      	lsls	r0, r0, #22
 801249c:	f7ee fabe 	bl	8000a1c <__aeabi_fdiv>
 80124a0:	4649      	mov	r1, r9
 80124a2:	9001      	str	r0, [sp, #4]
 80124a4:	f7ee fc82 	bl	8000dac <__aeabi_fmul>
 80124a8:	4641      	mov	r1, r8
 80124aa:	4681      	mov	r9, r0
 80124ac:	9801      	ldr	r0, [sp, #4]
 80124ae:	f7ee fc7d 	bl	8000dac <__aeabi_fmul>
 80124b2:	2380      	movs	r3, #128	; 0x80
 80124b4:	061b      	lsls	r3, r3, #24
 80124b6:	469c      	mov	ip, r3
 80124b8:	4484      	add	ip, r0
 80124ba:	46e0      	mov	r8, ip
 80124bc:	4658      	mov	r0, fp
 80124be:	f002 f813 	bl	80144e8 <acosf>
 80124c2:	9900      	ldr	r1, [sp, #0]
 80124c4:	f7ee fc72 	bl	8000dac <__aeabi_fmul>
 80124c8:	4683      	mov	fp, r0
 80124ca:	f001 ff87 	bl	80143dc <cosf>
 80124ce:	9000      	str	r0, [sp, #0]
 80124d0:	4658      	mov	r0, fp
 80124d2:	f001 ffb7 	bl	8014444 <sinf>
 80124d6:	1c01      	adds	r1, r0, #0
 80124d8:	4683      	mov	fp, r0
 80124da:	4648      	mov	r0, r9
 80124dc:	f7ee fc66 	bl	8000dac <__aeabi_fmul>
 80124e0:	4641      	mov	r1, r8
 80124e2:	9008      	str	r0, [sp, #32]
 80124e4:	4658      	mov	r0, fp
 80124e6:	f7ee fc61 	bl	8000dac <__aeabi_fmul>
 80124ea:	2300      	movs	r3, #0
 80124ec:	930a      	str	r3, [sp, #40]	; 0x28
 80124ee:	9b00      	ldr	r3, [sp, #0]
 80124f0:	4652      	mov	r2, sl
 80124f2:	930b      	str	r3, [sp, #44]	; 0x2c
 80124f4:	235c      	movs	r3, #92	; 0x5c
 80124f6:	4698      	mov	r8, r3
 80124f8:	44a0      	add	r8, r4
 80124fa:	9009      	str	r0, [sp, #36]	; 0x24
 80124fc:	a908      	add	r1, sp, #32
 80124fe:	4640      	mov	r0, r8
 8012500:	f7fd ff94 	bl	801042c <quat_mult>
 8012504:	2384      	movs	r3, #132	; 0x84
 8012506:	5ce3      	ldrb	r3, [r4, r3]
 8012508:	aa10      	add	r2, sp, #64	; 0x40
 801250a:	4691      	mov	r9, r2
 801250c:	2b00      	cmp	r3, #0
 801250e:	d143      	bne.n	8012598 <update_fusion+0x1c0>
 8012510:	3385      	adds	r3, #133	; 0x85
 8012512:	5ce3      	ldrb	r3, [r4, r3]
 8012514:	2b00      	cmp	r3, #0
 8012516:	d001      	beq.n	801251c <update_fusion+0x144>
 8012518:	25fe      	movs	r5, #254	; 0xfe
 801251a:	05ad      	lsls	r5, r5, #22
 801251c:	0022      	movs	r2, r4
 801251e:	4641      	mov	r1, r8
 8012520:	a805      	add	r0, sp, #20
 8012522:	3234      	adds	r2, #52	; 0x34
 8012524:	f7fe f80c 	bl	8010540 <quat_rot>
 8012528:	9b05      	ldr	r3, [sp, #20]
 801252a:	4969      	ldr	r1, [pc, #420]	; (80126d0 <update_fusion+0x2f8>)
 801252c:	4699      	mov	r9, r3
 801252e:	9b06      	ldr	r3, [sp, #24]
 8012530:	1c30      	adds	r0, r6, #0
 8012532:	469a      	mov	sl, r3
 8012534:	f7ed ff8e 	bl	8000454 <__aeabi_fcmpgt>
 8012538:	2800      	cmp	r0, #0
 801253a:	d16c      	bne.n	8012616 <update_fusion+0x23e>
 801253c:	2600      	movs	r6, #0
 801253e:	4b65      	ldr	r3, [pc, #404]	; (80126d4 <update_fusion+0x2fc>)
 8012540:	2100      	movs	r1, #0
 8012542:	469b      	mov	fp, r3
 8012544:	4b64      	ldr	r3, [pc, #400]	; (80126d8 <update_fusion+0x300>)
 8012546:	4648      	mov	r0, r9
 8012548:	469a      	mov	sl, r3
 801254a:	9606      	str	r6, [sp, #24]
 801254c:	f7ed ff6e 	bl	800042c <__aeabi_fcmplt>
 8012550:	2800      	cmp	r0, #0
 8012552:	d000      	beq.n	8012556 <update_fusion+0x17e>
 8012554:	e088      	b.n	8012668 <update_fusion+0x290>
 8012556:	26fe      	movs	r6, #254	; 0xfe
 8012558:	78fb      	ldrb	r3, [r7, #3]
 801255a:	05b6      	lsls	r6, r6, #22
 801255c:	4699      	mov	r9, r3
 801255e:	2b01      	cmp	r3, #1
 8012560:	d100      	bne.n	8012564 <update_fusion+0x18c>
 8012562:	e087      	b.n	8012674 <update_fusion+0x29c>
 8012564:	238e      	movs	r3, #142	; 0x8e
 8012566:	5ce3      	ldrb	r3, [r4, r3]
 8012568:	2b00      	cmp	r3, #0
 801256a:	d100      	bne.n	801256e <update_fusion+0x196>
 801256c:	e095      	b.n	801269a <update_fusion+0x2c2>
 801256e:	25fe      	movs	r5, #254	; 0xfe
 8012570:	2000      	movs	r0, #0
 8012572:	05ad      	lsls	r5, r5, #22
 8012574:	2300      	movs	r3, #0
 8012576:	930c      	str	r3, [sp, #48]	; 0x30
 8012578:	930d      	str	r3, [sp, #52]	; 0x34
 801257a:	ab10      	add	r3, sp, #64	; 0x40
 801257c:	4699      	mov	r9, r3
 801257e:	4642      	mov	r2, r8
 8012580:	900e      	str	r0, [sp, #56]	; 0x38
 8012582:	a90c      	add	r1, sp, #48	; 0x30
 8012584:	0018      	movs	r0, r3
 8012586:	950f      	str	r5, [sp, #60]	; 0x3c
 8012588:	f7fd ff50 	bl	801042c <quat_mult>
 801258c:	4643      	mov	r3, r8
 801258e:	464a      	mov	r2, r9
 8012590:	ca23      	ldmia	r2!, {r0, r1, r5}
 8012592:	c323      	stmia	r3!, {r0, r1, r5}
 8012594:	6812      	ldr	r2, [r2, #0]
 8012596:	601a      	str	r2, [r3, #0]
 8012598:	2280      	movs	r2, #128	; 0x80
 801259a:	0612      	lsls	r2, r2, #24
 801259c:	4694      	mov	ip, r2
 801259e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80125a0:	0020      	movs	r0, r4
 80125a2:	4463      	add	r3, ip
 80125a4:	9310      	str	r3, [sp, #64]	; 0x40
 80125a6:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80125a8:	306c      	adds	r0, #108	; 0x6c
 80125aa:	4463      	add	r3, ip
 80125ac:	9311      	str	r3, [sp, #68]	; 0x44
 80125ae:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80125b0:	0002      	movs	r2, r0
 80125b2:	4463      	add	r3, ip
 80125b4:	9312      	str	r3, [sp, #72]	; 0x48
 80125b6:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 80125b8:	4649      	mov	r1, r9
 80125ba:	9313      	str	r3, [sp, #76]	; 0x4c
 80125bc:	2300      	movs	r3, #0
 80125be:	66e3      	str	r3, [r4, #108]	; 0x6c
 80125c0:	6723      	str	r3, [r4, #112]	; 0x70
 80125c2:	23fe      	movs	r3, #254	; 0xfe
 80125c4:	059b      	lsls	r3, r3, #22
 80125c6:	6763      	str	r3, [r4, #116]	; 0x74
 80125c8:	f7fd ffba 	bl	8010540 <quat_rot>
 80125cc:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 80125ce:	6820      	ldr	r0, [r4, #0]
 80125d0:	f7ee fd12 	bl	8000ff8 <__aeabi_fsub>
 80125d4:	6f21      	ldr	r1, [r4, #112]	; 0x70
 80125d6:	67a0      	str	r0, [r4, #120]	; 0x78
 80125d8:	6860      	ldr	r0, [r4, #4]
 80125da:	f7ee fd0d 	bl	8000ff8 <__aeabi_fsub>
 80125de:	6f61      	ldr	r1, [r4, #116]	; 0x74
 80125e0:	67e0      	str	r0, [r4, #124]	; 0x7c
 80125e2:	68a0      	ldr	r0, [r4, #8]
 80125e4:	f7ee fd08 	bl	8000ff8 <__aeabi_fsub>
 80125e8:	2380      	movs	r3, #128	; 0x80
 80125ea:	50e0      	str	r0, [r4, r3]
 80125ec:	3305      	adds	r3, #5
 80125ee:	5ce2      	ldrb	r2, [r4, r3]
 80125f0:	2a00      	cmp	r2, #0
 80125f2:	d001      	beq.n	80125f8 <update_fusion+0x220>
 80125f4:	2200      	movs	r2, #0
 80125f6:	54e2      	strb	r2, [r4, r3]
 80125f8:	b015      	add	sp, #84	; 0x54
 80125fa:	bcf0      	pop	{r4, r5, r6, r7}
 80125fc:	46bb      	mov	fp, r7
 80125fe:	46b2      	mov	sl, r6
 8012600:	46a9      	mov	r9, r5
 8012602:	46a0      	mov	r8, r4
 8012604:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012606:	2300      	movs	r3, #0
 8012608:	4698      	mov	r8, r3
 801260a:	4699      	mov	r9, r3
 801260c:	e756      	b.n	80124bc <update_fusion+0xe4>
 801260e:	23fc      	movs	r3, #252	; 0xfc
 8012610:	059b      	lsls	r3, r3, #22
 8012612:	9300      	str	r3, [sp, #0]
 8012614:	e71a      	b.n	801244c <update_fusion+0x74>
 8012616:	4649      	mov	r1, r9
 8012618:	4648      	mov	r0, r9
 801261a:	f7ee fbc7 	bl	8000dac <__aeabi_fmul>
 801261e:	4651      	mov	r1, sl
 8012620:	1c06      	adds	r6, r0, #0
 8012622:	4650      	mov	r0, sl
 8012624:	f7ee fbc2 	bl	8000dac <__aeabi_fmul>
 8012628:	1c01      	adds	r1, r0, #0
 801262a:	1c30      	adds	r0, r6, #0
 801262c:	f7ee f858 	bl	80006e0 <__aeabi_fadd>
 8012630:	f001 ff9e 	bl	8014570 <sqrtf>
 8012634:	1c01      	adds	r1, r0, #0
 8012636:	4650      	mov	r0, sl
 8012638:	f7ee f9f0 	bl	8000a1c <__aeabi_fdiv>
 801263c:	1c06      	adds	r6, r0, #0
 801263e:	f001 ff53 	bl	80144e8 <acosf>
 8012642:	4926      	ldr	r1, [pc, #152]	; (80126dc <update_fusion+0x304>)
 8012644:	4683      	mov	fp, r0
 8012646:	f7ee fbb1 	bl	8000dac <__aeabi_fmul>
 801264a:	21fc      	movs	r1, #252	; 0xfc
 801264c:	4682      	mov	sl, r0
 801264e:	0589      	lsls	r1, r1, #22
 8012650:	4658      	mov	r0, fp
 8012652:	f7ee fbab 	bl	8000dac <__aeabi_fmul>
 8012656:	2100      	movs	r1, #0
 8012658:	4683      	mov	fp, r0
 801265a:	4648      	mov	r0, r9
 801265c:	9606      	str	r6, [sp, #24]
 801265e:	f7ed fee5 	bl	800042c <__aeabi_fcmplt>
 8012662:	2800      	cmp	r0, #0
 8012664:	d100      	bne.n	8012668 <update_fusion+0x290>
 8012666:	e776      	b.n	8012556 <update_fusion+0x17e>
 8012668:	78fb      	ldrb	r3, [r7, #3]
 801266a:	4e1d      	ldr	r6, [pc, #116]	; (80126e0 <update_fusion+0x308>)
 801266c:	4699      	mov	r9, r3
 801266e:	2b01      	cmp	r3, #1
 8012670:	d000      	beq.n	8012674 <update_fusion+0x29c>
 8012672:	e777      	b.n	8012564 <update_fusion+0x18c>
 8012674:	4651      	mov	r1, sl
 8012676:	6878      	ldr	r0, [r7, #4]
 8012678:	f7ed feec 	bl	8000454 <__aeabi_fcmpgt>
 801267c:	2800      	cmp	r0, #0
 801267e:	d01c      	beq.n	80126ba <update_fusion+0x2e2>
 8012680:	238e      	movs	r3, #142	; 0x8e
 8012682:	464a      	mov	r2, r9
 8012684:	4650      	mov	r0, sl
 8012686:	68b9      	ldr	r1, [r7, #8]
 8012688:	54e2      	strb	r2, [r4, r3]
 801268a:	f7ed fee3 	bl	8000454 <__aeabi_fcmpgt>
 801268e:	2800      	cmp	r0, #0
 8012690:	d100      	bne.n	8012694 <update_fusion+0x2bc>
 8012692:	e76c      	b.n	801256e <update_fusion+0x196>
 8012694:	238e      	movs	r3, #142	; 0x8e
 8012696:	2200      	movs	r2, #0
 8012698:	54e2      	strb	r2, [r4, r3]
 801269a:	4659      	mov	r1, fp
 801269c:	1c28      	adds	r0, r5, #0
 801269e:	f7ee fb85 	bl	8000dac <__aeabi_fmul>
 80126a2:	1c07      	adds	r7, r0, #0
 80126a4:	f001 fe9a 	bl	80143dc <cosf>
 80126a8:	1c05      	adds	r5, r0, #0
 80126aa:	1c38      	adds	r0, r7, #0
 80126ac:	f001 feca 	bl	8014444 <sinf>
 80126b0:	1c01      	adds	r1, r0, #0
 80126b2:	1c30      	adds	r0, r6, #0
 80126b4:	f7ee fb7a 	bl	8000dac <__aeabi_fmul>
 80126b8:	e75c      	b.n	8012574 <update_fusion+0x19c>
 80126ba:	4651      	mov	r1, sl
 80126bc:	68b8      	ldr	r0, [r7, #8]
 80126be:	f7ed feb5 	bl	800042c <__aeabi_fcmplt>
 80126c2:	2800      	cmp	r0, #0
 80126c4:	d1e6      	bne.n	8012694 <update_fusion+0x2bc>
 80126c6:	e74d      	b.n	8012564 <update_fusion+0x18c>
 80126c8:	42c80000 	.word	0x42c80000
 80126cc:	20000000 	.word	0x20000000
 80126d0:	28800001 	.word	0x28800001
 80126d4:	3f490fdb 	.word	0x3f490fdb
 80126d8:	42b40000 	.word	0x42b40000
 80126dc:	42652ee0 	.word	0x42652ee0
 80126e0:	bf800000 	.word	0xbf800000

080126e4 <MotionFX_CM0P_initialize>:
 80126e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80126e6:	46de      	mov	lr, fp
 80126e8:	4657      	mov	r7, sl
 80126ea:	464e      	mov	r6, r9
 80126ec:	4645      	mov	r5, r8
 80126ee:	b5e0      	push	{r5, r6, r7, lr}
 80126f0:	2802      	cmp	r0, #2
 80126f2:	d81d      	bhi.n	8012730 <MotionFX_CM0P_initialize+0x4c>
 80126f4:	2800      	cmp	r0, #0
 80126f6:	d127      	bne.n	8012748 <MotionFX_CM0P_initialize+0x64>
 80126f8:	4b6c      	ldr	r3, [pc, #432]	; (80128ac <MotionFX_CM0P_initialize+0x1c8>)
 80126fa:	496d      	ldr	r1, [pc, #436]	; (80128b0 <MotionFX_CM0P_initialize+0x1cc>)
 80126fc:	681a      	ldr	r2, [r3, #0]
 80126fe:	486d      	ldr	r0, [pc, #436]	; (80128b4 <MotionFX_CM0P_initialize+0x1d0>)
 8012700:	400a      	ands	r2, r1
 8012702:	4282      	cmp	r2, r0
 8012704:	d100      	bne.n	8012708 <MotionFX_CM0P_initialize+0x24>
 8012706:	e0ae      	b.n	8012866 <MotionFX_CM0P_initialize+0x182>
 8012708:	681b      	ldr	r3, [r3, #0]
 801270a:	4a6b      	ldr	r2, [pc, #428]	; (80128b8 <MotionFX_CM0P_initialize+0x1d4>)
 801270c:	400b      	ands	r3, r1
 801270e:	4293      	cmp	r3, r2
 8012710:	d100      	bne.n	8012714 <MotionFX_CM0P_initialize+0x30>
 8012712:	e0a8      	b.n	8012866 <MotionFX_CM0P_initialize+0x182>
 8012714:	2201      	movs	r2, #1
 8012716:	4b69      	ldr	r3, [pc, #420]	; (80128bc <MotionFX_CM0P_initialize+0x1d8>)
 8012718:	601a      	str	r2, [r3, #0]
 801271a:	681a      	ldr	r2, [r3, #0]
 801271c:	2a00      	cmp	r2, #0
 801271e:	d1fc      	bne.n	801271a <MotionFX_CM0P_initialize+0x36>
 8012720:	4b67      	ldr	r3, [pc, #412]	; (80128c0 <MotionFX_CM0P_initialize+0x1dc>)
 8012722:	4a68      	ldr	r2, [pc, #416]	; (80128c4 <MotionFX_CM0P_initialize+0x1e0>)
 8012724:	601a      	str	r2, [r3, #0]
 8012726:	681a      	ldr	r2, [r3, #0]
 8012728:	4b67      	ldr	r3, [pc, #412]	; (80128c8 <MotionFX_CM0P_initialize+0x1e4>)
 801272a:	429a      	cmp	r2, r3
 801272c:	d014      	beq.n	8012758 <MotionFX_CM0P_initialize+0x74>
 801272e:	e7fe      	b.n	801272e <MotionFX_CM0P_initialize+0x4a>
 8012730:	2803      	cmp	r0, #3
 8012732:	d1e1      	bne.n	80126f8 <MotionFX_CM0P_initialize+0x14>
 8012734:	4b65      	ldr	r3, [pc, #404]	; (80128cc <MotionFX_CM0P_initialize+0x1e8>)
 8012736:	4a66      	ldr	r2, [pc, #408]	; (80128d0 <MotionFX_CM0P_initialize+0x1ec>)
 8012738:	6819      	ldr	r1, [r3, #0]
 801273a:	4291      	cmp	r1, r2
 801273c:	d00c      	beq.n	8012758 <MotionFX_CM0P_initialize+0x74>
 801273e:	681a      	ldr	r2, [r3, #0]
 8012740:	4b64      	ldr	r3, [pc, #400]	; (80128d4 <MotionFX_CM0P_initialize+0x1f0>)
 8012742:	429a      	cmp	r2, r3
 8012744:	d008      	beq.n	8012758 <MotionFX_CM0P_initialize+0x74>
 8012746:	e7fe      	b.n	8012746 <MotionFX_CM0P_initialize+0x62>
 8012748:	4b63      	ldr	r3, [pc, #396]	; (80128d8 <MotionFX_CM0P_initialize+0x1f4>)
 801274a:	4a64      	ldr	r2, [pc, #400]	; (80128dc <MotionFX_CM0P_initialize+0x1f8>)
 801274c:	681b      	ldr	r3, [r3, #0]
 801274e:	0c1b      	lsrs	r3, r3, #16
 8012750:	041b      	lsls	r3, r3, #16
 8012752:	4293      	cmp	r3, r2
 8012754:	d000      	beq.n	8012758 <MotionFX_CM0P_initialize+0x74>
 8012756:	e085      	b.n	8012864 <MotionFX_CM0P_initialize+0x180>
 8012758:	4a61      	ldr	r2, [pc, #388]	; (80128e0 <MotionFX_CM0P_initialize+0x1fc>)
 801275a:	4862      	ldr	r0, [pc, #392]	; (80128e4 <MotionFX_CM0P_initialize+0x200>)
 801275c:	21fe      	movs	r1, #254	; 0xfe
 801275e:	4683      	mov	fp, r0
 8012760:	6390      	str	r0, [r2, #56]	; 0x38
 8012762:	4861      	ldr	r0, [pc, #388]	; (80128e8 <MotionFX_CM0P_initialize+0x204>)
 8012764:	2300      	movs	r3, #0
 8012766:	4682      	mov	sl, r0
 8012768:	2501      	movs	r5, #1
 801276a:	63d0      	str	r0, [r2, #60]	; 0x3c
 801276c:	2080      	movs	r0, #128	; 0x80
 801276e:	4c5f      	ldr	r4, [pc, #380]	; (80128ec <MotionFX_CM0P_initialize+0x208>)
 8012770:	0589      	lsls	r1, r1, #22
 8012772:	4681      	mov	r9, r0
 8012774:	7125      	strb	r5, [r4, #4]
 8012776:	6013      	str	r3, [r2, #0]
 8012778:	6053      	str	r3, [r2, #4]
 801277a:	6091      	str	r1, [r2, #8]
 801277c:	60d1      	str	r1, [r2, #12]
 801277e:	6113      	str	r3, [r2, #16]
 8012780:	6153      	str	r3, [r2, #20]
 8012782:	6193      	str	r3, [r2, #24]
 8012784:	61d3      	str	r3, [r2, #28]
 8012786:	6213      	str	r3, [r2, #32]
 8012788:	6253      	str	r3, [r2, #36]	; 0x24
 801278a:	6293      	str	r3, [r2, #40]	; 0x28
 801278c:	62d3      	str	r3, [r2, #44]	; 0x2c
 801278e:	6313      	str	r3, [r2, #48]	; 0x30
 8012790:	6353      	str	r3, [r2, #52]	; 0x34
 8012792:	6413      	str	r3, [r2, #64]	; 0x40
 8012794:	6453      	str	r3, [r2, #68]	; 0x44
 8012796:	6493      	str	r3, [r2, #72]	; 0x48
 8012798:	64d3      	str	r3, [r2, #76]	; 0x4c
 801279a:	6513      	str	r3, [r2, #80]	; 0x50
 801279c:	6553      	str	r3, [r2, #84]	; 0x54
 801279e:	6591      	str	r1, [r2, #88]	; 0x58
 80127a0:	65d3      	str	r3, [r2, #92]	; 0x5c
 80127a2:	6613      	str	r3, [r2, #96]	; 0x60
 80127a4:	6653      	str	r3, [r2, #100]	; 0x64
 80127a6:	6691      	str	r1, [r2, #104]	; 0x68
 80127a8:	66d3      	str	r3, [r2, #108]	; 0x6c
 80127aa:	6713      	str	r3, [r2, #112]	; 0x70
 80127ac:	6751      	str	r1, [r2, #116]	; 0x74
 80127ae:	5013      	str	r3, [r2, r0]
 80127b0:	3005      	adds	r0, #5
 80127b2:	5415      	strb	r5, [r2, r0]
 80127b4:	4680      	mov	r8, r0
 80127b6:	2786      	movs	r7, #134	; 0x86
 80127b8:	2000      	movs	r0, #0
 80127ba:	2502      	movs	r5, #2
 80127bc:	4684      	mov	ip, r0
 80127be:	67d3      	str	r3, [r2, #124]	; 0x7c
 80127c0:	35ff      	adds	r5, #255	; 0xff
 80127c2:	53d0      	strh	r0, [r2, r7]
 80127c4:	308c      	adds	r0, #140	; 0x8c
 80127c6:	5215      	strh	r5, [r2, r0]
 80127c8:	2500      	movs	r5, #0
 80127ca:	2688      	movs	r6, #136	; 0x88
 80127cc:	3002      	adds	r0, #2
 80127ce:	5415      	strb	r5, [r2, r0]
 80127d0:	465d      	mov	r5, fp
 80127d2:	5193      	str	r3, [r2, r6]
 80127d4:	6793      	str	r3, [r2, #120]	; 0x78
 80127d6:	4a46      	ldr	r2, [pc, #280]	; (80128f0 <MotionFX_CM0P_initialize+0x20c>)
 80127d8:	208c      	movs	r0, #140	; 0x8c
 80127da:	6395      	str	r5, [r2, #56]	; 0x38
 80127dc:	4655      	mov	r5, sl
 80127de:	6013      	str	r3, [r2, #0]
 80127e0:	6053      	str	r3, [r2, #4]
 80127e2:	6091      	str	r1, [r2, #8]
 80127e4:	60d1      	str	r1, [r2, #12]
 80127e6:	6113      	str	r3, [r2, #16]
 80127e8:	6153      	str	r3, [r2, #20]
 80127ea:	6193      	str	r3, [r2, #24]
 80127ec:	61d3      	str	r3, [r2, #28]
 80127ee:	6213      	str	r3, [r2, #32]
 80127f0:	6253      	str	r3, [r2, #36]	; 0x24
 80127f2:	6293      	str	r3, [r2, #40]	; 0x28
 80127f4:	62d3      	str	r3, [r2, #44]	; 0x2c
 80127f6:	6313      	str	r3, [r2, #48]	; 0x30
 80127f8:	6353      	str	r3, [r2, #52]	; 0x34
 80127fa:	63d5      	str	r5, [r2, #60]	; 0x3c
 80127fc:	6413      	str	r3, [r2, #64]	; 0x40
 80127fe:	6453      	str	r3, [r2, #68]	; 0x44
 8012800:	6493      	str	r3, [r2, #72]	; 0x48
 8012802:	64d3      	str	r3, [r2, #76]	; 0x4c
 8012804:	6513      	str	r3, [r2, #80]	; 0x50
 8012806:	6553      	str	r3, [r2, #84]	; 0x54
 8012808:	6591      	str	r1, [r2, #88]	; 0x58
 801280a:	65d3      	str	r3, [r2, #92]	; 0x5c
 801280c:	6691      	str	r1, [r2, #104]	; 0x68
 801280e:	6751      	str	r1, [r2, #116]	; 0x74
 8012810:	4649      	mov	r1, r9
 8012812:	2501      	movs	r5, #1
 8012814:	5053      	str	r3, [r2, r1]
 8012816:	4641      	mov	r1, r8
 8012818:	5193      	str	r3, [r2, r6]
 801281a:	67d3      	str	r3, [r2, #124]	; 0x7c
 801281c:	6613      	str	r3, [r2, #96]	; 0x60
 801281e:	6653      	str	r3, [r2, #100]	; 0x64
 8012820:	66d3      	str	r3, [r2, #108]	; 0x6c
 8012822:	6713      	str	r3, [r2, #112]	; 0x70
 8012824:	6793      	str	r3, [r2, #120]	; 0x78
 8012826:	2302      	movs	r3, #2
 8012828:	5455      	strb	r5, [r2, r1]
 801282a:	2500      	movs	r5, #0
 801282c:	33ff      	adds	r3, #255	; 0xff
 801282e:	4661      	mov	r1, ip
 8012830:	5213      	strh	r3, [r2, r0]
 8012832:	0020      	movs	r0, r4
 8012834:	3b73      	subs	r3, #115	; 0x73
 8012836:	54d5      	strb	r5, [r2, r3]
 8012838:	4d2e      	ldr	r5, [pc, #184]	; (80128f4 <MotionFX_CM0P_initialize+0x210>)
 801283a:	53d1      	strh	r1, [r2, r7]
 801283c:	3008      	adds	r0, #8
 801283e:	0029      	movs	r1, r5
 8012840:	f7fd fd7a 	bl	8010338 <inemo_set_orientation>
 8012844:	0020      	movs	r0, r4
 8012846:	0029      	movs	r1, r5
 8012848:	3014      	adds	r0, #20
 801284a:	f7fd fd75 	bl	8010338 <inemo_set_orientation>
 801284e:	0020      	movs	r0, r4
 8012850:	0029      	movs	r1, r5
 8012852:	3020      	adds	r0, #32
 8012854:	f7fd fd70 	bl	8010338 <inemo_set_orientation>
 8012858:	bcf0      	pop	{r4, r5, r6, r7}
 801285a:	46bb      	mov	fp, r7
 801285c:	46b2      	mov	sl, r6
 801285e:	46a9      	mov	r9, r5
 8012860:	46a0      	mov	r8, r4
 8012862:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012864:	e7fe      	b.n	8012864 <MotionFX_CM0P_initialize+0x180>
 8012866:	4b24      	ldr	r3, [pc, #144]	; (80128f8 <MotionFX_CM0P_initialize+0x214>)
 8012868:	681b      	ldr	r3, [r3, #0]
 801286a:	2b00      	cmp	r3, #0
 801286c:	d000      	beq.n	8012870 <MotionFX_CM0P_initialize+0x18c>
 801286e:	e751      	b.n	8012714 <MotionFX_CM0P_initialize+0x30>
 8012870:	218a      	movs	r1, #138	; 0x8a
 8012872:	4a22      	ldr	r2, [pc, #136]	; (80128fc <MotionFX_CM0P_initialize+0x218>)
 8012874:	00c9      	lsls	r1, r1, #3
 8012876:	6813      	ldr	r3, [r2, #0]
 8012878:	051b      	lsls	r3, r3, #20
 801287a:	0d1b      	lsrs	r3, r3, #20
 801287c:	428b      	cmp	r3, r1
 801287e:	d006      	beq.n	801288e <MotionFX_CM0P_initialize+0x1aa>
 8012880:	6813      	ldr	r3, [r2, #0]
 8012882:	4a1f      	ldr	r2, [pc, #124]	; (8012900 <MotionFX_CM0P_initialize+0x21c>)
 8012884:	051b      	lsls	r3, r3, #20
 8012886:	0d1b      	lsrs	r3, r3, #20
 8012888:	4293      	cmp	r3, r2
 801288a:	d000      	beq.n	801288e <MotionFX_CM0P_initialize+0x1aa>
 801288c:	e742      	b.n	8012714 <MotionFX_CM0P_initialize+0x30>
 801288e:	2201      	movs	r2, #1
 8012890:	4b1c      	ldr	r3, [pc, #112]	; (8012904 <MotionFX_CM0P_initialize+0x220>)
 8012892:	601a      	str	r2, [r3, #0]
 8012894:	681a      	ldr	r2, [r3, #0]
 8012896:	2a00      	cmp	r2, #0
 8012898:	d1fc      	bne.n	8012894 <MotionFX_CM0P_initialize+0x1b0>
 801289a:	4b1b      	ldr	r3, [pc, #108]	; (8012908 <MotionFX_CM0P_initialize+0x224>)
 801289c:	4a09      	ldr	r2, [pc, #36]	; (80128c4 <MotionFX_CM0P_initialize+0x1e0>)
 801289e:	601a      	str	r2, [r3, #0]
 80128a0:	681a      	ldr	r2, [r3, #0]
 80128a2:	4b09      	ldr	r3, [pc, #36]	; (80128c8 <MotionFX_CM0P_initialize+0x1e4>)
 80128a4:	429a      	cmp	r2, r3
 80128a6:	d100      	bne.n	80128aa <MotionFX_CM0P_initialize+0x1c6>
 80128a8:	e756      	b.n	8012758 <MotionFX_CM0P_initialize+0x74>
 80128aa:	e740      	b.n	801272e <MotionFX_CM0P_initialize+0x4a>
 80128ac:	e000ed00 	.word	0xe000ed00
 80128b0:	0000fff0 	.word	0x0000fff0
 80128b4:	0000c240 	.word	0x0000c240
 80128b8:	0000c270 	.word	0x0000c270
 80128bc:	40023008 	.word	0x40023008
 80128c0:	40023000 	.word	0x40023000
 80128c4:	f407a5c2 	.word	0xf407a5c2
 80128c8:	b5e8b5cd 	.word	0xb5e8b5cd
 80128cc:	40000004 	.word	0x40000004
 80128d0:	0201e041 	.word	0x0201e041
 80128d4:	02028041 	.word	0x02028041
 80128d8:	100007f8 	.word	0x100007f8
 80128dc:	aa550000 	.word	0xaa550000
 80128e0:	20000a28 	.word	0x20000a28
 80128e4:	3f34fdf4 	.word	0x3f34fdf4
 80128e8:	bf34fdf4 	.word	0xbf34fdf4
 80128ec:	200002f8 	.word	0x200002f8
 80128f0:	2000003c 	.word	0x2000003c
 80128f4:	08016354 	.word	0x08016354
 80128f8:	e0042000 	.word	0xe0042000
 80128fc:	5c001000 	.word	0x5c001000
 8012900:	00000483 	.word	0x00000483
 8012904:	58024c08 	.word	0x58024c08
 8012908:	58024c00 	.word	0x58024c00

0801290c <MotionFX_CM0P_setOrientation>:
 801290c:	b570      	push	{r4, r5, r6, lr}
 801290e:	4c0b      	ldr	r4, [pc, #44]	; (801293c <MotionFX_CM0P_setOrientation+0x30>)
 8012910:	000e      	movs	r6, r1
 8012912:	7923      	ldrb	r3, [r4, #4]
 8012914:	0015      	movs	r5, r2
 8012916:	2b00      	cmp	r3, #0
 8012918:	d00f      	beq.n	801293a <MotionFX_CM0P_setOrientation+0x2e>
 801291a:	0023      	movs	r3, r4
 801291c:	3308      	adds	r3, #8
 801291e:	0001      	movs	r1, r0
 8012920:	0018      	movs	r0, r3
 8012922:	f7fd fd09 	bl	8010338 <inemo_set_orientation>
 8012926:	0020      	movs	r0, r4
 8012928:	0031      	movs	r1, r6
 801292a:	3014      	adds	r0, #20
 801292c:	f7fd fd04 	bl	8010338 <inemo_set_orientation>
 8012930:	0020      	movs	r0, r4
 8012932:	0029      	movs	r1, r5
 8012934:	3020      	adds	r0, #32
 8012936:	f7fd fcff 	bl	8010338 <inemo_set_orientation>
 801293a:	bd70      	pop	{r4, r5, r6, pc}
 801293c:	200002f8 	.word	0x200002f8

08012940 <MotionFX_CM0P_enable_6X>:
 8012940:	4b03      	ldr	r3, [pc, #12]	; (8012950 <MotionFX_CM0P_enable_6X+0x10>)
 8012942:	791b      	ldrb	r3, [r3, #4]
 8012944:	2b00      	cmp	r3, #0
 8012946:	d001      	beq.n	801294c <MotionFX_CM0P_enable_6X+0xc>
 8012948:	4b02      	ldr	r3, [pc, #8]	; (8012954 <MotionFX_CM0P_enable_6X+0x14>)
 801294a:	7058      	strb	r0, [r3, #1]
 801294c:	4770      	bx	lr
 801294e:	46c0      	nop			; (mov r8, r8)
 8012950:	200002f8 	.word	0x200002f8
 8012954:	20000000 	.word	0x20000000

08012958 <MotionFX_CM0P_enable_9X>:
 8012958:	4b03      	ldr	r3, [pc, #12]	; (8012968 <MotionFX_CM0P_enable_9X+0x10>)
 801295a:	791b      	ldrb	r3, [r3, #4]
 801295c:	2b00      	cmp	r3, #0
 801295e:	d001      	beq.n	8012964 <MotionFX_CM0P_enable_9X+0xc>
 8012960:	4b02      	ldr	r3, [pc, #8]	; (801296c <MotionFX_CM0P_enable_9X+0x14>)
 8012962:	7018      	strb	r0, [r3, #0]
 8012964:	4770      	bx	lr
 8012966:	46c0      	nop			; (mov r8, r8)
 8012968:	200002f8 	.word	0x200002f8
 801296c:	20000000 	.word	0x20000000

08012970 <MotionFX_CM0P_enable_euler>:
 8012970:	4b03      	ldr	r3, [pc, #12]	; (8012980 <MotionFX_CM0P_enable_euler+0x10>)
 8012972:	791b      	ldrb	r3, [r3, #4]
 8012974:	2b00      	cmp	r3, #0
 8012976:	d001      	beq.n	801297c <MotionFX_CM0P_enable_euler+0xc>
 8012978:	4b02      	ldr	r3, [pc, #8]	; (8012984 <MotionFX_CM0P_enable_euler+0x14>)
 801297a:	7098      	strb	r0, [r3, #2]
 801297c:	4770      	bx	lr
 801297e:	46c0      	nop			; (mov r8, r8)
 8012980:	200002f8 	.word	0x200002f8
 8012984:	20000000 	.word	0x20000000

08012988 <MotionFX_CM0P_enable_gbias>:
 8012988:	4b03      	ldr	r3, [pc, #12]	; (8012998 <MotionFX_CM0P_enable_gbias+0x10>)
 801298a:	791b      	ldrb	r3, [r3, #4]
 801298c:	2b00      	cmp	r3, #0
 801298e:	d002      	beq.n	8012996 <MotionFX_CM0P_enable_gbias+0xe>
 8012990:	2320      	movs	r3, #32
 8012992:	4a02      	ldr	r2, [pc, #8]	; (801299c <MotionFX_CM0P_enable_gbias+0x14>)
 8012994:	54d0      	strb	r0, [r2, r3]
 8012996:	4770      	bx	lr
 8012998:	200002f8 	.word	0x200002f8
 801299c:	20000000 	.word	0x20000000

080129a0 <MotionFX_CM0P_update>:
 80129a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80129a2:	4645      	mov	r5, r8
 80129a4:	46de      	mov	lr, fp
 80129a6:	4657      	mov	r7, sl
 80129a8:	464e      	mov	r6, r9
 80129aa:	b5e0      	push	{r5, r6, r7, lr}
 80129ac:	4da7      	ldr	r5, [pc, #668]	; (8012c4c <MotionFX_CM0P_update+0x2ac>)
 80129ae:	0004      	movs	r4, r0
 80129b0:	792b      	ldrb	r3, [r5, #4]
 80129b2:	b099      	sub	sp, #100	; 0x64
 80129b4:	2b00      	cmp	r3, #0
 80129b6:	d106      	bne.n	80129c6 <MotionFX_CM0P_update+0x26>
 80129b8:	b019      	add	sp, #100	; 0x64
 80129ba:	bcf0      	pop	{r4, r5, r6, r7}
 80129bc:	46bb      	mov	fp, r7
 80129be:	46b2      	mov	sl, r6
 80129c0:	46a9      	mov	r9, r5
 80129c2:	46a0      	mov	r8, r4
 80129c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80129c6:	690b      	ldr	r3, [r1, #16]
 80129c8:	680f      	ldr	r7, [r1, #0]
 80129ca:	469a      	mov	sl, r3
 80129cc:	46b8      	mov	r8, r7
 80129ce:	694b      	ldr	r3, [r1, #20]
 80129d0:	684f      	ldr	r7, [r1, #4]
 80129d2:	698e      	ldr	r6, [r1, #24]
 80129d4:	46bc      	mov	ip, r7
 80129d6:	69c8      	ldr	r0, [r1, #28]
 80129d8:	688f      	ldr	r7, [r1, #8]
 80129da:	4699      	mov	r9, r3
 80129dc:	6a0b      	ldr	r3, [r1, #32]
 80129de:	68c9      	ldr	r1, [r1, #12]
 80129e0:	900b      	str	r0, [sp, #44]	; 0x2c
 80129e2:	9104      	str	r1, [sp, #16]
 80129e4:	4651      	mov	r1, sl
 80129e6:	9105      	str	r1, [sp, #20]
 80129e8:	4649      	mov	r1, r9
 80129ea:	9106      	str	r1, [sp, #24]
 80129ec:	4641      	mov	r1, r8
 80129ee:	9107      	str	r1, [sp, #28]
 80129f0:	4661      	mov	r1, ip
 80129f2:	9108      	str	r1, [sp, #32]
 80129f4:	0029      	movs	r1, r5
 80129f6:	920d      	str	r2, [sp, #52]	; 0x34
 80129f8:	3108      	adds	r1, #8
 80129fa:	aa04      	add	r2, sp, #16
 80129fc:	a80e      	add	r0, sp, #56	; 0x38
 80129fe:	930c      	str	r3, [sp, #48]	; 0x30
 8012a00:	9709      	str	r7, [sp, #36]	; 0x24
 8012a02:	960a      	str	r6, [sp, #40]	; 0x28
 8012a04:	f7fd fc32 	bl	801026c <rotate>
 8012a08:	0029      	movs	r1, r5
 8012a0a:	aa0a      	add	r2, sp, #40	; 0x28
 8012a0c:	3114      	adds	r1, #20
 8012a0e:	a814      	add	r0, sp, #80	; 0x50
 8012a10:	f7fd fc2c 	bl	801026c <rotate>
 8012a14:	0029      	movs	r1, r5
 8012a16:	af11      	add	r7, sp, #68	; 0x44
 8012a18:	0038      	movs	r0, r7
 8012a1a:	3120      	adds	r1, #32
 8012a1c:	aa07      	add	r2, sp, #28
 8012a1e:	f7fd fc25 	bl	801026c <rotate>
 8012a22:	4e8b      	ldr	r6, [pc, #556]	; (8012c50 <MotionFX_CM0P_update+0x2b0>)
 8012a24:	7833      	ldrb	r3, [r6, #0]
 8012a26:	2b00      	cmp	r3, #0
 8012a28:	d134      	bne.n	8012a94 <MotionFX_CM0P_update+0xf4>
 8012a2a:	7873      	ldrb	r3, [r6, #1]
 8012a2c:	2b00      	cmp	r3, #0
 8012a2e:	d0c3      	beq.n	80129b8 <MotionFX_CM0P_update+0x18>
 8012a30:	4d88      	ldr	r5, [pc, #544]	; (8012c54 <MotionFX_CM0P_update+0x2b4>)
 8012a32:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012a34:	0028      	movs	r0, r5
 8012a36:	1c1a      	adds	r2, r3, #0
 8012a38:	a90e      	add	r1, sp, #56	; 0x38
 8012a3a:	9301      	str	r3, [sp, #4]
 8012a3c:	f7fd fe90 	bl	8010760 <update_accel>
 8012a40:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012a42:	0028      	movs	r0, r5
 8012a44:	1c1a      	adds	r2, r3, #0
 8012a46:	a914      	add	r1, sp, #80	; 0x50
 8012a48:	9301      	str	r3, [sp, #4]
 8012a4a:	0027      	movs	r7, r4
 8012a4c:	f7ff fac4 	bl	8011fd8 <update_gyro>
 8012a50:	0028      	movs	r0, r5
 8012a52:	990d      	ldr	r1, [sp, #52]	; 0x34
 8012a54:	f7ff fcc0 	bl	80123d8 <update_fusion>
 8012a58:	0029      	movs	r1, r5
 8012a5a:	3734      	adds	r7, #52	; 0x34
 8012a5c:	2210      	movs	r2, #16
 8012a5e:	315c      	adds	r1, #92	; 0x5c
 8012a60:	0038      	movs	r0, r7
 8012a62:	f000 fff7 	bl	8013a54 <memcpy>
 8012a66:	0029      	movs	r1, r5
 8012a68:	0020      	movs	r0, r4
 8012a6a:	220c      	movs	r2, #12
 8012a6c:	316c      	adds	r1, #108	; 0x6c
 8012a6e:	3044      	adds	r0, #68	; 0x44
 8012a70:	f000 fff0 	bl	8013a54 <memcpy>
 8012a74:	0029      	movs	r1, r5
 8012a76:	0020      	movs	r0, r4
 8012a78:	220c      	movs	r2, #12
 8012a7a:	3178      	adds	r1, #120	; 0x78
 8012a7c:	3050      	adds	r0, #80	; 0x50
 8012a7e:	f000 ffe9 	bl	8013a54 <memcpy>
 8012a82:	78b3      	ldrb	r3, [r6, #2]
 8012a84:	2b00      	cmp	r3, #0
 8012a86:	d097      	beq.n	80129b8 <MotionFX_CM0P_update+0x18>
 8012a88:	0020      	movs	r0, r4
 8012a8a:	0039      	movs	r1, r7
 8012a8c:	305c      	adds	r0, #92	; 0x5c
 8012a8e:	f7fd fdbd 	bl	801060c <quat_2_euler>
 8012a92:	e791      	b.n	80129b8 <MotionFX_CM0P_update+0x18>
 8012a94:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012a96:	4d70      	ldr	r5, [pc, #448]	; (8012c58 <MotionFX_CM0P_update+0x2b8>)
 8012a98:	1c1a      	adds	r2, r3, #0
 8012a9a:	0028      	movs	r0, r5
 8012a9c:	a90e      	add	r1, sp, #56	; 0x38
 8012a9e:	9301      	str	r3, [sp, #4]
 8012aa0:	f7fd fe5e 	bl	8010760 <update_accel>
 8012aa4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012aa6:	6971      	ldr	r1, [r6, #20]
 8012aa8:	1c18      	adds	r0, r3, #0
 8012aaa:	9301      	str	r3, [sp, #4]
 8012aac:	f7ee f97e 	bl	8000dac <__aeabi_fmul>
 8012ab0:	496a      	ldr	r1, [pc, #424]	; (8012c5c <MotionFX_CM0P_update+0x2bc>)
 8012ab2:	4680      	mov	r8, r0
 8012ab4:	f7ed fcce 	bl	8000454 <__aeabi_fcmpgt>
 8012ab8:	2800      	cmp	r0, #0
 8012aba:	d000      	beq.n	8012abe <MotionFX_CM0P_update+0x11e>
 8012abc:	e0ad      	b.n	8012c1a <MotionFX_CM0P_update+0x27a>
 8012abe:	4640      	mov	r0, r8
 8012ac0:	4967      	ldr	r1, [pc, #412]	; (8012c60 <MotionFX_CM0P_update+0x2c0>)
 8012ac2:	f7ee f973 	bl	8000dac <__aeabi_fmul>
 8012ac6:	4681      	mov	r9, r0
 8012ac8:	21d0      	movs	r1, #208	; 0xd0
 8012aca:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8012acc:	0589      	lsls	r1, r1, #22
 8012ace:	0058      	lsls	r0, r3, #1
 8012ad0:	0840      	lsrs	r0, r0, #1
 8012ad2:	4698      	mov	r8, r3
 8012ad4:	f7ed fcaa 	bl	800042c <__aeabi_fcmplt>
 8012ad8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8012ada:	469a      	mov	sl, r3
 8012adc:	2800      	cmp	r0, #0
 8012ade:	d000      	beq.n	8012ae2 <MotionFX_CM0P_update+0x142>
 8012ae0:	e083      	b.n	8012bea <MotionFX_CM0P_update+0x24a>
 8012ae2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8012ae4:	469b      	mov	fp, r3
 8012ae6:	4651      	mov	r1, sl
 8012ae8:	4650      	mov	r0, sl
 8012aea:	f7ee f95f 	bl	8000dac <__aeabi_fmul>
 8012aee:	4659      	mov	r1, fp
 8012af0:	4682      	mov	sl, r0
 8012af2:	4658      	mov	r0, fp
 8012af4:	f7ee f95a 	bl	8000dac <__aeabi_fmul>
 8012af8:	1c01      	adds	r1, r0, #0
 8012afa:	4650      	mov	r0, sl
 8012afc:	f7ed fdf0 	bl	80006e0 <__aeabi_fadd>
 8012b00:	4641      	mov	r1, r8
 8012b02:	4682      	mov	sl, r0
 8012b04:	4640      	mov	r0, r8
 8012b06:	f7ee f951 	bl	8000dac <__aeabi_fmul>
 8012b0a:	1c01      	adds	r1, r0, #0
 8012b0c:	4650      	mov	r0, sl
 8012b0e:	f7ed fde7 	bl	80006e0 <__aeabi_fadd>
 8012b12:	4682      	mov	sl, r0
 8012b14:	f001 fd2c 	bl	8014570 <sqrtf>
 8012b18:	2385      	movs	r3, #133	; 0x85
 8012b1a:	5ceb      	ldrb	r3, [r5, r3]
 8012b1c:	4680      	mov	r8, r0
 8012b1e:	2000      	movs	r0, #0
 8012b20:	2b00      	cmp	r3, #0
 8012b22:	d113      	bne.n	8012b4c <MotionFX_CM0P_update+0x1ac>
 8012b24:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8012b26:	4640      	mov	r0, r8
 8012b28:	1c19      	adds	r1, r3, #0
 8012b2a:	9302      	str	r3, [sp, #8]
 8012b2c:	f7ee fa64 	bl	8000ff8 <__aeabi_fsub>
 8012b30:	4649      	mov	r1, r9
 8012b32:	4683      	mov	fp, r0
 8012b34:	f7ee f93a 	bl	8000dac <__aeabi_fmul>
 8012b38:	1c01      	adds	r1, r0, #0
 8012b3a:	9003      	str	r0, [sp, #12]
 8012b3c:	9802      	ldr	r0, [sp, #8]
 8012b3e:	f7ed fdcf 	bl	80006e0 <__aeabi_fadd>
 8012b42:	9903      	ldr	r1, [sp, #12]
 8012b44:	4680      	mov	r8, r0
 8012b46:	4658      	mov	r0, fp
 8012b48:	f7ee f930 	bl	8000dac <__aeabi_fmul>
 8012b4c:	4643      	mov	r3, r8
 8012b4e:	6b29      	ldr	r1, [r5, #48]	; 0x30
 8012b50:	62eb      	str	r3, [r5, #44]	; 0x2c
 8012b52:	f7ed fdc5 	bl	80006e0 <__aeabi_fadd>
 8012b56:	4683      	mov	fp, r0
 8012b58:	20fe      	movs	r0, #254	; 0xfe
 8012b5a:	4649      	mov	r1, r9
 8012b5c:	0580      	lsls	r0, r0, #22
 8012b5e:	f7ee fa4b 	bl	8000ff8 <__aeabi_fsub>
 8012b62:	1c01      	adds	r1, r0, #0
 8012b64:	4658      	mov	r0, fp
 8012b66:	f7ee f921 	bl	8000dac <__aeabi_fmul>
 8012b6a:	493e      	ldr	r1, [pc, #248]	; (8012c64 <MotionFX_CM0P_update+0x2c4>)
 8012b6c:	6328      	str	r0, [r5, #48]	; 0x30
 8012b6e:	4681      	mov	r9, r0
 8012b70:	4650      	mov	r0, sl
 8012b72:	f7ed fc5b 	bl	800042c <__aeabi_fcmplt>
 8012b76:	2300      	movs	r3, #0
 8012b78:	469b      	mov	fp, r3
 8012b7a:	2800      	cmp	r0, #0
 8012b7c:	d105      	bne.n	8012b8a <MotionFX_CM0P_update+0x1ea>
 8012b7e:	4650      	mov	r0, sl
 8012b80:	4939      	ldr	r1, [pc, #228]	; (8012c68 <MotionFX_CM0P_update+0x2c8>)
 8012b82:	f7ed fc67 	bl	8000454 <__aeabi_fcmpgt>
 8012b86:	2800      	cmp	r0, #0
 8012b88:	d04b      	beq.n	8012c22 <MotionFX_CM0P_update+0x282>
 8012b8a:	238d      	movs	r3, #141	; 0x8d
 8012b8c:	465a      	mov	r2, fp
 8012b8e:	54ea      	strb	r2, [r5, r3]
 8012b90:	002b      	movs	r3, r5
 8012b92:	3334      	adds	r3, #52	; 0x34
 8012b94:	cf07      	ldmia	r7!, {r0, r1, r2}
 8012b96:	c307      	stmia	r3!, {r0, r1, r2}
 8012b98:	9a01      	ldr	r2, [sp, #4]
 8012b9a:	0028      	movs	r0, r5
 8012b9c:	a914      	add	r1, sp, #80	; 0x50
 8012b9e:	f7ff fa1b 	bl	8011fd8 <update_gyro>
 8012ba2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012ba4:	0028      	movs	r0, r5
 8012ba6:	1c19      	adds	r1, r3, #0
 8012ba8:	9301      	str	r3, [sp, #4]
 8012baa:	f7ff fc15 	bl	80123d8 <update_fusion>
 8012bae:	0029      	movs	r1, r5
 8012bb0:	2210      	movs	r2, #16
 8012bb2:	315c      	adds	r1, #92	; 0x5c
 8012bb4:	0020      	movs	r0, r4
 8012bb6:	f000 ff4d 	bl	8013a54 <memcpy>
 8012bba:	0029      	movs	r1, r5
 8012bbc:	0020      	movs	r0, r4
 8012bbe:	220c      	movs	r2, #12
 8012bc0:	316c      	adds	r1, #108	; 0x6c
 8012bc2:	3010      	adds	r0, #16
 8012bc4:	f000 ff46 	bl	8013a54 <memcpy>
 8012bc8:	0029      	movs	r1, r5
 8012bca:	0020      	movs	r0, r4
 8012bcc:	220c      	movs	r2, #12
 8012bce:	3178      	adds	r1, #120	; 0x78
 8012bd0:	301c      	adds	r0, #28
 8012bd2:	f000 ff3f 	bl	8013a54 <memcpy>
 8012bd6:	78b3      	ldrb	r3, [r6, #2]
 8012bd8:	2b00      	cmp	r3, #0
 8012bda:	d100      	bne.n	8012bde <MotionFX_CM0P_update+0x23e>
 8012bdc:	e725      	b.n	8012a2a <MotionFX_CM0P_update+0x8a>
 8012bde:	0020      	movs	r0, r4
 8012be0:	0021      	movs	r1, r4
 8012be2:	3028      	adds	r0, #40	; 0x28
 8012be4:	f7fd fd12 	bl	801060c <quat_2_euler>
 8012be8:	e71f      	b.n	8012a2a <MotionFX_CM0P_update+0x8a>
 8012bea:	21d0      	movs	r1, #208	; 0xd0
 8012bec:	0058      	lsls	r0, r3, #1
 8012bee:	0840      	lsrs	r0, r0, #1
 8012bf0:	0589      	lsls	r1, r1, #22
 8012bf2:	f7ed fc1b 	bl	800042c <__aeabi_fcmplt>
 8012bf6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8012bf8:	469b      	mov	fp, r3
 8012bfa:	2800      	cmp	r0, #0
 8012bfc:	d100      	bne.n	8012c00 <MotionFX_CM0P_update+0x260>
 8012bfe:	e772      	b.n	8012ae6 <MotionFX_CM0P_update+0x146>
 8012c00:	21d0      	movs	r1, #208	; 0xd0
 8012c02:	0058      	lsls	r0, r3, #1
 8012c04:	0840      	lsrs	r0, r0, #1
 8012c06:	0589      	lsls	r1, r1, #22
 8012c08:	f7ed fc10 	bl	800042c <__aeabi_fcmplt>
 8012c0c:	2800      	cmp	r0, #0
 8012c0e:	d100      	bne.n	8012c12 <MotionFX_CM0P_update+0x272>
 8012c10:	e769      	b.n	8012ae6 <MotionFX_CM0P_update+0x146>
 8012c12:	238d      	movs	r3, #141	; 0x8d
 8012c14:	2200      	movs	r2, #0
 8012c16:	54ea      	strb	r2, [r5, r3]
 8012c18:	e7be      	b.n	8012b98 <MotionFX_CM0P_update+0x1f8>
 8012c1a:	23fe      	movs	r3, #254	; 0xfe
 8012c1c:	059b      	lsls	r3, r3, #22
 8012c1e:	4699      	mov	r9, r3
 8012c20:	e752      	b.n	8012ac8 <MotionFX_CM0P_update+0x128>
 8012c22:	4640      	mov	r0, r8
 8012c24:	4911      	ldr	r1, [pc, #68]	; (8012c6c <MotionFX_CM0P_update+0x2cc>)
 8012c26:	f7ed fc01 	bl	800042c <__aeabi_fcmplt>
 8012c2a:	2800      	cmp	r0, #0
 8012c2c:	d1ad      	bne.n	8012b8a <MotionFX_CM0P_update+0x1ea>
 8012c2e:	4640      	mov	r0, r8
 8012c30:	490f      	ldr	r1, [pc, #60]	; (8012c70 <MotionFX_CM0P_update+0x2d0>)
 8012c32:	f7ed fc0f 	bl	8000454 <__aeabi_fcmpgt>
 8012c36:	2800      	cmp	r0, #0
 8012c38:	d1a7      	bne.n	8012b8a <MotionFX_CM0P_update+0x1ea>
 8012c3a:	4648      	mov	r0, r9
 8012c3c:	490d      	ldr	r1, [pc, #52]	; (8012c74 <MotionFX_CM0P_update+0x2d4>)
 8012c3e:	f7ed fbff 	bl	8000440 <__aeabi_fcmple>
 8012c42:	0003      	movs	r3, r0
 8012c44:	1e58      	subs	r0, r3, #1
 8012c46:	4183      	sbcs	r3, r0
 8012c48:	469b      	mov	fp, r3
 8012c4a:	e79e      	b.n	8012b8a <MotionFX_CM0P_update+0x1ea>
 8012c4c:	200002f8 	.word	0x200002f8
 8012c50:	20000000 	.word	0x20000000
 8012c54:	2000003c 	.word	0x2000003c
 8012c58:	20000a28 	.word	0x20000a28
 8012c5c:	3c23d70a 	.word	0x3c23d70a
 8012c60:	42c80000 	.word	0x42c80000
 8012c64:	3eb851ec 	.word	0x3eb851ec
 8012c68:	3fb851ed 	.word	0x3fb851ed
 8012c6c:	3f19999a 	.word	0x3f19999a
 8012c70:	3f99999a 	.word	0x3f99999a
 8012c74:	3a83126f 	.word	0x3a83126f

08012c78 <MotionFX_CM0P_MagCal_init>:
 8012c78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012c7a:	4c42      	ldr	r4, [pc, #264]	; (8012d84 <MotionFX_CM0P_MagCal_init+0x10c>)
 8012c7c:	7923      	ldrb	r3, [r4, #4]
 8012c7e:	2b00      	cmp	r3, #0
 8012c80:	d001      	beq.n	8012c86 <MotionFX_CM0P_MagCal_init+0xe>
 8012c82:	2900      	cmp	r1, #0
 8012c84:	d100      	bne.n	8012c88 <MotionFX_CM0P_MagCal_init+0x10>
 8012c86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012c88:	f7ee fb9a 	bl	80013c0 <__aeabi_i2f>
 8012c8c:	1c01      	adds	r1, r0, #0
 8012c8e:	1c06      	adds	r6, r0, #0
 8012c90:	483d      	ldr	r0, [pc, #244]	; (8012d88 <MotionFX_CM0P_MagCal_init+0x110>)
 8012c92:	f7ed fec3 	bl	8000a1c <__aeabi_fdiv>
 8012c96:	0023      	movs	r3, r4
 8012c98:	332c      	adds	r3, #44	; 0x2c
 8012c9a:	6023      	str	r3, [r4, #0]
 8012c9c:	0023      	movs	r3, r4
 8012c9e:	3334      	adds	r3, #52	; 0x34
 8012ca0:	2200      	movs	r2, #0
 8012ca2:	62e3      	str	r3, [r4, #44]	; 0x2c
 8012ca4:	2334      	movs	r3, #52	; 0x34
 8012ca6:	4d39      	ldr	r5, [pc, #228]	; (8012d8c <MotionFX_CM0P_MagCal_init+0x114>)
 8012ca8:	1c07      	adds	r7, r0, #0
 8012caa:	4939      	ldr	r1, [pc, #228]	; (8012d90 <MotionFX_CM0P_MagCal_init+0x118>)
 8012cac:	6325      	str	r5, [r4, #48]	; 0x30
 8012cae:	54e2      	strb	r2, [r4, r3]
 8012cb0:	1c30      	adds	r0, r6, #0
 8012cb2:	f7ed fbcf 	bl	8000454 <__aeabi_fcmpgt>
 8012cb6:	2800      	cmp	r0, #0
 8012cb8:	d05e      	beq.n	8012d78 <MotionFX_CM0P_MagCal_init+0x100>
 8012cba:	23fe      	movs	r3, #254	; 0xfe
 8012cbc:	059b      	lsls	r3, r3, #22
 8012cbe:	63a3      	str	r3, [r4, #56]	; 0x38
 8012cc0:	4b34      	ldr	r3, [pc, #208]	; (8012d94 <MotionFX_CM0P_MagCal_init+0x11c>)
 8012cc2:	26fe      	movs	r6, #254	; 0xfe
 8012cc4:	63e3      	str	r3, [r4, #60]	; 0x3c
 8012cc6:	4b34      	ldr	r3, [pc, #208]	; (8012d98 <MotionFX_CM0P_MagCal_init+0x120>)
 8012cc8:	4a34      	ldr	r2, [pc, #208]	; (8012d9c <MotionFX_CM0P_MagCal_init+0x124>)
 8012cca:	6423      	str	r3, [r4, #64]	; 0x40
 8012ccc:	4b34      	ldr	r3, [pc, #208]	; (8012da0 <MotionFX_CM0P_MagCal_init+0x128>)
 8012cce:	05b6      	lsls	r6, r6, #22
 8012cd0:	6463      	str	r3, [r4, #68]	; 0x44
 8012cd2:	4b34      	ldr	r3, [pc, #208]	; (8012da4 <MotionFX_CM0P_MagCal_init+0x12c>)
 8012cd4:	2100      	movs	r1, #0
 8012cd6:	64a3      	str	r3, [r4, #72]	; 0x48
 8012cd8:	4b33      	ldr	r3, [pc, #204]	; (8012da8 <MotionFX_CM0P_MagCal_init+0x130>)
 8012cda:	6526      	str	r6, [r4, #80]	; 0x50
 8012cdc:	64e3      	str	r3, [r4, #76]	; 0x4c
 8012cde:	4b33      	ldr	r3, [pc, #204]	; (8012dac <MotionFX_CM0P_MagCal_init+0x134>)
 8012ce0:	6563      	str	r3, [r4, #84]	; 0x54
 8012ce2:	4b33      	ldr	r3, [pc, #204]	; (8012db0 <MotionFX_CM0P_MagCal_init+0x138>)
 8012ce4:	65a3      	str	r3, [r4, #88]	; 0x58
 8012ce6:	4b33      	ldr	r3, [pc, #204]	; (8012db4 <MotionFX_CM0P_MagCal_init+0x13c>)
 8012ce8:	6623      	str	r3, [r4, #96]	; 0x60
 8012cea:	2364      	movs	r3, #100	; 0x64
 8012cec:	52e3      	strh	r3, [r4, r3]
 8012cee:	4b32      	ldr	r3, [pc, #200]	; (8012db8 <MotionFX_CM0P_MagCal_init+0x140>)
 8012cf0:	65e3      	str	r3, [r4, #92]	; 0x5c
 8012cf2:	2301      	movs	r3, #1
 8012cf4:	702b      	strb	r3, [r5, #0]
 8012cf6:	4b31      	ldr	r3, [pc, #196]	; (8012dbc <MotionFX_CM0P_MagCal_init+0x144>)
 8012cf8:	2400      	movs	r4, #0
 8012cfa:	50ea      	str	r2, [r5, r3]
 8012cfc:	3304      	adds	r3, #4
 8012cfe:	220c      	movs	r2, #12
 8012d00:	18e8      	adds	r0, r5, r3
 8012d02:	f000 feb0 	bl	8013a66 <memset>
 8012d06:	492e      	ldr	r1, [pc, #184]	; (8012dc0 <MotionFX_CM0P_MagCal_init+0x148>)
 8012d08:	1c38      	adds	r0, r7, #0
 8012d0a:	f7ee f84f 	bl	8000dac <__aeabi_fmul>
 8012d0e:	f001 fb27 	bl	8014360 <ceilf>
 8012d12:	f7ed fc01 	bl	8000518 <__aeabi_f2uiz>
 8012d16:	4b2b      	ldr	r3, [pc, #172]	; (8012dc4 <MotionFX_CM0P_MagCal_init+0x14c>)
 8012d18:	492b      	ldr	r1, [pc, #172]	; (8012dc8 <MotionFX_CM0P_MagCal_init+0x150>)
 8012d1a:	52e8      	strh	r0, [r5, r3]
 8012d1c:	4b2b      	ldr	r3, [pc, #172]	; (8012dcc <MotionFX_CM0P_MagCal_init+0x154>)
 8012d1e:	1c38      	adds	r0, r7, #0
 8012d20:	52ec      	strh	r4, [r5, r3]
 8012d22:	f7ee f843 	bl	8000dac <__aeabi_fmul>
 8012d26:	f001 fb1b 	bl	8014360 <ceilf>
 8012d2a:	f7ed fbf5 	bl	8000518 <__aeabi_f2uiz>
 8012d2e:	239c      	movs	r3, #156	; 0x9c
 8012d30:	22b4      	movs	r2, #180	; 0xb4
 8012d32:	00db      	lsls	r3, r3, #3
 8012d34:	52e8      	strh	r0, [r5, r3]
 8012d36:	4b26      	ldr	r3, [pc, #152]	; (8012dd0 <MotionFX_CM0P_MagCal_init+0x158>)
 8012d38:	2100      	movs	r1, #0
 8012d3a:	52ec      	strh	r4, [r5, r3]
 8012d3c:	330e      	adds	r3, #14
 8012d3e:	18e8      	adds	r0, r5, r3
 8012d40:	0052      	lsls	r2, r2, #1
 8012d42:	f000 fe90 	bl	8013a66 <memset>
 8012d46:	4b23      	ldr	r3, [pc, #140]	; (8012dd4 <MotionFX_CM0P_MagCal_init+0x15c>)
 8012d48:	220c      	movs	r2, #12
 8012d4a:	2100      	movs	r1, #0
 8012d4c:	18e8      	adds	r0, r5, r3
 8012d4e:	f000 fe8a 	bl	8013a66 <memset>
 8012d52:	4b21      	ldr	r3, [pc, #132]	; (8012dd8 <MotionFX_CM0P_MagCal_init+0x160>)
 8012d54:	221c      	movs	r2, #28
 8012d56:	18e8      	adds	r0, r5, r3
 8012d58:	2100      	movs	r1, #0
 8012d5a:	f000 fe84 	bl	8013a66 <memset>
 8012d5e:	23d1      	movs	r3, #209	; 0xd1
 8012d60:	2200      	movs	r2, #0
 8012d62:	00db      	lsls	r3, r3, #3
 8012d64:	50ee      	str	r6, [r5, r3]
 8012d66:	3b10      	subs	r3, #16
 8012d68:	50ee      	str	r6, [r5, r3]
 8012d6a:	3b10      	subs	r3, #16
 8012d6c:	50ee      	str	r6, [r5, r3]
 8012d6e:	4b1b      	ldr	r3, [pc, #108]	; (8012ddc <MotionFX_CM0P_MagCal_init+0x164>)
 8012d70:	50ee      	str	r6, [r5, r3]
 8012d72:	3b34      	subs	r3, #52	; 0x34
 8012d74:	54ea      	strb	r2, [r5, r3]
 8012d76:	e786      	b.n	8012c86 <MotionFX_CM0P_MagCal_init+0xe>
 8012d78:	4919      	ldr	r1, [pc, #100]	; (8012de0 <MotionFX_CM0P_MagCal_init+0x168>)
 8012d7a:	1c30      	adds	r0, r6, #0
 8012d7c:	f7ee f816 	bl	8000dac <__aeabi_fmul>
 8012d80:	63a0      	str	r0, [r4, #56]	; 0x38
 8012d82:	e79d      	b.n	8012cc0 <MotionFX_CM0P_MagCal_init+0x48>
 8012d84:	200002f8 	.word	0x200002f8
 8012d88:	447a0000 	.word	0x447a0000
 8012d8c:	20000398 	.word	0x20000398
 8012d90:	43f9ffff 	.word	0x43f9ffff
 8012d94:	3c23d70a 	.word	0x3c23d70a
 8012d98:	38d1b717 	.word	0x38d1b717
 8012d9c:	ffff0000 	.word	0xffff0000
 8012da0:	3db851ec 	.word	0x3db851ec
 8012da4:	42440000 	.word	0x42440000
 8012da8:	43610000 	.word	0x43610000
 8012dac:	3efae148 	.word	0x3efae148
 8012db0:	00140032 	.word	0x00140032
 8012db4:	3e99999a 	.word	0x3e99999a
 8012db8:	40a00000 	.word	0x40a00000
 8012dbc:	000004cc 	.word	0x000004cc
 8012dc0:	3dcccccd 	.word	0x3dcccccd
 8012dc4:	000004dc 	.word	0x000004dc
 8012dc8:	3d4ccccd 	.word	0x3d4ccccd
 8012dcc:	000004de 	.word	0x000004de
 8012dd0:	000004e2 	.word	0x000004e2
 8012dd4:	0000065c 	.word	0x0000065c
 8012dd8:	0000066c 	.word	0x0000066c
 8012ddc:	0000068c 	.word	0x0000068c
 8012de0:	3b03126f 	.word	0x3b03126f

08012de4 <MotionFX_CM0P_MagCal_run>:
 8012de4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012de6:	46de      	mov	lr, fp
 8012de8:	4657      	mov	r7, sl
 8012dea:	464e      	mov	r6, r9
 8012dec:	4645      	mov	r5, r8
 8012dee:	b5e0      	push	{r5, r6, r7, lr}
 8012df0:	4b77      	ldr	r3, [pc, #476]	; (8012fd0 <MotionFX_CM0P_MagCal_run+0x1ec>)
 8012df2:	b0a9      	sub	sp, #164	; 0xa4
 8012df4:	791b      	ldrb	r3, [r3, #4]
 8012df6:	2b00      	cmp	r3, #0
 8012df8:	d106      	bne.n	8012e08 <MotionFX_CM0P_MagCal_run+0x24>
 8012dfa:	b029      	add	sp, #164	; 0xa4
 8012dfc:	bcf0      	pop	{r4, r5, r6, r7}
 8012dfe:	46bb      	mov	fp, r7
 8012e00:	46b2      	mov	sl, r6
 8012e02:	46a9      	mov	r9, r5
 8012e04:	46a0      	mov	r8, r4
 8012e06:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012e08:	6843      	ldr	r3, [r0, #4]
 8012e0a:	6882      	ldr	r2, [r0, #8]
 8012e0c:	6806      	ldr	r6, [r0, #0]
 8012e0e:	9300      	str	r3, [sp, #0]
 8012e10:	9201      	str	r2, [sp, #4]
 8012e12:	931a      	str	r3, [sp, #104]	; 0x68
 8012e14:	921b      	str	r2, [sp, #108]	; 0x6c
 8012e16:	9619      	str	r6, [sp, #100]	; 0x64
 8012e18:	ab1f      	add	r3, sp, #124	; 0x7c
 8012e1a:	aa19      	add	r2, sp, #100	; 0x64
 8012e1c:	ca13      	ldmia	r2!, {r0, r1, r4}
 8012e1e:	c313      	stmia	r3!, {r0, r1, r4}
 8012e20:	4b6b      	ldr	r3, [pc, #428]	; (8012fd0 <MotionFX_CM0P_MagCal_run+0x1ec>)
 8012e22:	681b      	ldr	r3, [r3, #0]
 8012e24:	685c      	ldr	r4, [r3, #4]
 8012e26:	469b      	mov	fp, r3
 8012e28:	681d      	ldr	r5, [r3, #0]
 8012e2a:	7823      	ldrb	r3, [r4, #0]
 8012e2c:	2b00      	cmp	r3, #0
 8012e2e:	d000      	beq.n	8012e32 <MotionFX_CM0P_MagCal_run+0x4e>
 8012e30:	e0b4      	b.n	8012f9c <MotionFX_CM0P_MagCal_run+0x1b8>
 8012e32:	6867      	ldr	r7, [r4, #4]
 8012e34:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8012e36:	1c39      	adds	r1, r7, #0
 8012e38:	f7ee f8de 	bl	8000ff8 <__aeabi_fsub>
 8012e3c:	686b      	ldr	r3, [r5, #4]
 8012e3e:	4681      	mov	r9, r0
 8012e40:	1c19      	adds	r1, r3, #0
 8012e42:	4698      	mov	r8, r3
 8012e44:	f7ed ffb2 	bl	8000dac <__aeabi_fmul>
 8012e48:	4682      	mov	sl, r0
 8012e4a:	1c01      	adds	r1, r0, #0
 8012e4c:	1c38      	adds	r0, r7, #0
 8012e4e:	f7ed fc47 	bl	80006e0 <__aeabi_fadd>
 8012e52:	6060      	str	r0, [r4, #4]
 8012e54:	20fe      	movs	r0, #254	; 0xfe
 8012e56:	4641      	mov	r1, r8
 8012e58:	0580      	lsls	r0, r0, #22
 8012e5a:	f7ee f8cd 	bl	8000ff8 <__aeabi_fsub>
 8012e5e:	4651      	mov	r1, sl
 8012e60:	1c07      	adds	r7, r0, #0
 8012e62:	4648      	mov	r0, r9
 8012e64:	f7ed ffa2 	bl	8000dac <__aeabi_fmul>
 8012e68:	6921      	ldr	r1, [r4, #16]
 8012e6a:	f7ed fc39 	bl	80006e0 <__aeabi_fadd>
 8012e6e:	1c39      	adds	r1, r7, #0
 8012e70:	f7ed ff9c 	bl	8000dac <__aeabi_fmul>
 8012e74:	68a3      	ldr	r3, [r4, #8]
 8012e76:	6120      	str	r0, [r4, #16]
 8012e78:	1c19      	adds	r1, r3, #0
 8012e7a:	9820      	ldr	r0, [sp, #128]	; 0x80
 8012e7c:	9302      	str	r3, [sp, #8]
 8012e7e:	f7ee f8bb 	bl	8000ff8 <__aeabi_fsub>
 8012e82:	4681      	mov	r9, r0
 8012e84:	1c01      	adds	r1, r0, #0
 8012e86:	4640      	mov	r0, r8
 8012e88:	f7ed ff90 	bl	8000dac <__aeabi_fmul>
 8012e8c:	4682      	mov	sl, r0
 8012e8e:	1c01      	adds	r1, r0, #0
 8012e90:	9802      	ldr	r0, [sp, #8]
 8012e92:	f7ed fc25 	bl	80006e0 <__aeabi_fadd>
 8012e96:	4651      	mov	r1, sl
 8012e98:	60a0      	str	r0, [r4, #8]
 8012e9a:	4648      	mov	r0, r9
 8012e9c:	f7ed ff86 	bl	8000dac <__aeabi_fmul>
 8012ea0:	6961      	ldr	r1, [r4, #20]
 8012ea2:	f7ed fc1d 	bl	80006e0 <__aeabi_fadd>
 8012ea6:	1c39      	adds	r1, r7, #0
 8012ea8:	f7ed ff80 	bl	8000dac <__aeabi_fmul>
 8012eac:	68e3      	ldr	r3, [r4, #12]
 8012eae:	6160      	str	r0, [r4, #20]
 8012eb0:	1c19      	adds	r1, r3, #0
 8012eb2:	9821      	ldr	r0, [sp, #132]	; 0x84
 8012eb4:	469a      	mov	sl, r3
 8012eb6:	f7ee f89f 	bl	8000ff8 <__aeabi_fsub>
 8012eba:	4641      	mov	r1, r8
 8012ebc:	4681      	mov	r9, r0
 8012ebe:	f7ed ff75 	bl	8000dac <__aeabi_fmul>
 8012ec2:	4651      	mov	r1, sl
 8012ec4:	4680      	mov	r8, r0
 8012ec6:	f7ed fc0b 	bl	80006e0 <__aeabi_fadd>
 8012eca:	4649      	mov	r1, r9
 8012ecc:	60e0      	str	r0, [r4, #12]
 8012ece:	4640      	mov	r0, r8
 8012ed0:	f7ed ff6c 	bl	8000dac <__aeabi_fmul>
 8012ed4:	69a1      	ldr	r1, [r4, #24]
 8012ed6:	f7ed fc03 	bl	80006e0 <__aeabi_fadd>
 8012eda:	1c39      	adds	r1, r7, #0
 8012edc:	f7ed ff66 	bl	8000dac <__aeabi_fmul>
 8012ee0:	61a0      	str	r0, [r4, #24]
 8012ee2:	6921      	ldr	r1, [r4, #16]
 8012ee4:	69a0      	ldr	r0, [r4, #24]
 8012ee6:	f7ed fbfb 	bl	80006e0 <__aeabi_fadd>
 8012eea:	6961      	ldr	r1, [r4, #20]
 8012eec:	f7ed fbf8 	bl	80006e0 <__aeabi_fadd>
 8012ef0:	239a      	movs	r3, #154	; 0x9a
 8012ef2:	00db      	lsls	r3, r3, #3
 8012ef4:	58e1      	ldr	r1, [r4, r3]
 8012ef6:	4682      	mov	sl, r0
 8012ef8:	1c30      	adds	r0, r6, #0
 8012efa:	f7ee f87d 	bl	8000ff8 <__aeabi_fsub>
 8012efe:	4b35      	ldr	r3, [pc, #212]	; (8012fd4 <MotionFX_CM0P_MagCal_run+0x1f0>)
 8012f00:	4681      	mov	r9, r0
 8012f02:	58e1      	ldr	r1, [r4, r3]
 8012f04:	9800      	ldr	r0, [sp, #0]
 8012f06:	f7ee f877 	bl	8000ff8 <__aeabi_fsub>
 8012f0a:	239b      	movs	r3, #155	; 0x9b
 8012f0c:	00db      	lsls	r3, r3, #3
 8012f0e:	58e1      	ldr	r1, [r4, r3]
 8012f10:	4680      	mov	r8, r0
 8012f12:	9801      	ldr	r0, [sp, #4]
 8012f14:	f7ee f870 	bl	8000ff8 <__aeabi_fsub>
 8012f18:	4649      	mov	r1, r9
 8012f1a:	1c07      	adds	r7, r0, #0
 8012f1c:	4648      	mov	r0, r9
 8012f1e:	f7ed ff45 	bl	8000dac <__aeabi_fmul>
 8012f22:	4641      	mov	r1, r8
 8012f24:	4681      	mov	r9, r0
 8012f26:	4640      	mov	r0, r8
 8012f28:	f7ed ff40 	bl	8000dac <__aeabi_fmul>
 8012f2c:	1c01      	adds	r1, r0, #0
 8012f2e:	4648      	mov	r0, r9
 8012f30:	f7ed fbd6 	bl	80006e0 <__aeabi_fadd>
 8012f34:	1c39      	adds	r1, r7, #0
 8012f36:	4680      	mov	r8, r0
 8012f38:	1c38      	adds	r0, r7, #0
 8012f3a:	f7ed ff37 	bl	8000dac <__aeabi_fmul>
 8012f3e:	1c01      	adds	r1, r0, #0
 8012f40:	4640      	mov	r0, r8
 8012f42:	f7ed fbcd 	bl	80006e0 <__aeabi_fadd>
 8012f46:	69e9      	ldr	r1, [r5, #28]
 8012f48:	1c07      	adds	r7, r0, #0
 8012f4a:	4650      	mov	r0, sl
 8012f4c:	f7ed fa82 	bl	8000454 <__aeabi_fcmpgt>
 8012f50:	2800      	cmp	r0, #0
 8012f52:	d105      	bne.n	8012f60 <MotionFX_CM0P_MagCal_run+0x17c>
 8012f54:	6a29      	ldr	r1, [r5, #32]
 8012f56:	1c38      	adds	r0, r7, #0
 8012f58:	f7ed fa7c 	bl	8000454 <__aeabi_fcmpgt>
 8012f5c:	2800      	cmp	r0, #0
 8012f5e:	d02b      	beq.n	8012fb8 <MotionFX_CM0P_MagCal_run+0x1d4>
 8012f60:	2200      	movs	r2, #0
 8012f62:	4b1d      	ldr	r3, [pc, #116]	; (8012fd8 <MotionFX_CM0P_MagCal_run+0x1f4>)
 8012f64:	52e2      	strh	r2, [r4, r3]
 8012f66:	3b02      	subs	r3, #2
 8012f68:	5ae2      	ldrh	r2, [r4, r3]
 8012f6a:	2300      	movs	r3, #0
 8012f6c:	429a      	cmp	r2, r3
 8012f6e:	d039      	beq.n	8012fe4 <MotionFX_CM0P_MagCal_run+0x200>
 8012f70:	239a      	movs	r3, #154	; 0x9a
 8012f72:	00db      	lsls	r3, r3, #3
 8012f74:	18e0      	adds	r0, r4, r3
 8012f76:	220c      	movs	r2, #12
 8012f78:	a919      	add	r1, sp, #100	; 0x64
 8012f7a:	f000 fd6b 	bl	8013a54 <memcpy>
 8012f7e:	465b      	mov	r3, fp
 8012f80:	4813      	ldr	r0, [pc, #76]	; (8012fd0 <MotionFX_CM0P_MagCal_run+0x1ec>)
 8012f82:	685c      	ldr	r4, [r3, #4]
 8012f84:	4b15      	ldr	r3, [pc, #84]	; (8012fdc <MotionFX_CM0P_MagCal_run+0x1f8>)
 8012f86:	2234      	movs	r2, #52	; 0x34
 8012f88:	18e1      	adds	r1, r4, r3
 8012f8a:	3068      	adds	r0, #104	; 0x68
 8012f8c:	f000 fd62 	bl	8013a54 <memcpy>
 8012f90:	23cb      	movs	r3, #203	; 0xcb
 8012f92:	00db      	lsls	r3, r3, #3
 8012f94:	5ce2      	ldrb	r2, [r4, r3]
 8012f96:	4b12      	ldr	r3, [pc, #72]	; (8012fe0 <MotionFX_CM0P_MagCal_run+0x1fc>)
 8012f98:	771a      	strb	r2, [r3, #28]
 8012f9a:	e72e      	b.n	8012dfa <MotionFX_CM0P_MagCal_run+0x16>
 8012f9c:	220c      	movs	r2, #12
 8012f9e:	a91f      	add	r1, sp, #124	; 0x7c
 8012fa0:	1d20      	adds	r0, r4, #4
 8012fa2:	f000 fd57 	bl	8013a54 <memcpy>
 8012fa6:	0020      	movs	r0, r4
 8012fa8:	220c      	movs	r2, #12
 8012faa:	2100      	movs	r1, #0
 8012fac:	3010      	adds	r0, #16
 8012fae:	f000 fd5a 	bl	8013a66 <memset>
 8012fb2:	2300      	movs	r3, #0
 8012fb4:	7023      	strb	r3, [r4, #0]
 8012fb6:	e794      	b.n	8012ee2 <MotionFX_CM0P_MagCal_run+0xfe>
 8012fb8:	229c      	movs	r2, #156	; 0x9c
 8012fba:	4907      	ldr	r1, [pc, #28]	; (8012fd8 <MotionFX_CM0P_MagCal_run+0x1f4>)
 8012fbc:	00d2      	lsls	r2, r2, #3
 8012fbe:	5a63      	ldrh	r3, [r4, r1]
 8012fc0:	5aa2      	ldrh	r2, [r4, r2]
 8012fc2:	4293      	cmp	r3, r2
 8012fc4:	d2d2      	bcs.n	8012f6c <MotionFX_CM0P_MagCal_run+0x188>
 8012fc6:	3301      	adds	r3, #1
 8012fc8:	b29b      	uxth	r3, r3
 8012fca:	5263      	strh	r3, [r4, r1]
 8012fcc:	e7ce      	b.n	8012f6c <MotionFX_CM0P_MagCal_run+0x188>
 8012fce:	46c0      	nop			; (mov r8, r8)
 8012fd0:	200002f8 	.word	0x200002f8
 8012fd4:	000004d4 	.word	0x000004d4
 8012fd8:	000004e2 	.word	0x000004e2
 8012fdc:	0000065c 	.word	0x0000065c
 8012fe0:	20000378 	.word	0x20000378
 8012fe4:	23cb      	movs	r3, #203	; 0xcb
 8012fe6:	00db      	lsls	r3, r3, #3
 8012fe8:	5ce3      	ldrb	r3, [r4, r3]
 8012fea:	2b01      	cmp	r3, #1
 8012fec:	d900      	bls.n	8012ff0 <MotionFX_CM0P_MagCal_run+0x20c>
 8012fee:	e167      	b.n	80132c0 <MotionFX_CM0P_MagCal_run+0x4dc>
 8012ff0:	4650      	mov	r0, sl
 8012ff2:	68a9      	ldr	r1, [r5, #8]
 8012ff4:	f7ed fa2e 	bl	8000454 <__aeabi_fcmpgt>
 8012ff8:	2800      	cmp	r0, #0
 8012ffa:	d0b9      	beq.n	8012f70 <MotionFX_CM0P_MagCal_run+0x18c>
 8012ffc:	68e9      	ldr	r1, [r5, #12]
 8012ffe:	1c38      	adds	r0, r7, #0
 8013000:	f7ed fa28 	bl	8000454 <__aeabi_fcmpgt>
 8013004:	2800      	cmp	r0, #0
 8013006:	d0b3      	beq.n	8012f70 <MotionFX_CM0P_MagCal_run+0x18c>
 8013008:	4be5      	ldr	r3, [pc, #916]	; (80133a0 <MotionFX_CM0P_MagCal_run+0x5bc>)
 801300a:	469a      	mov	sl, r3
 801300c:	5ae3      	ldrh	r3, [r4, r3]
 801300e:	9302      	str	r3, [sp, #8]
 8013010:	2b00      	cmp	r3, #0
 8013012:	d100      	bne.n	8013016 <MotionFX_CM0P_MagCal_run+0x232>
 8013014:	e1b1      	b.n	801337a <MotionFX_CM0P_MagCal_run+0x596>
 8013016:	4be3      	ldr	r3, [pc, #908]	; (80133a4 <MotionFX_CM0P_MagCal_run+0x5c0>)
 8013018:	1c30      	adds	r0, r6, #0
 801301a:	5ee3      	ldrsh	r3, [r4, r3]
 801301c:	005f      	lsls	r7, r3, #1
 801301e:	18ff      	adds	r7, r7, r3
 8013020:	00bf      	lsls	r7, r7, #2
 8013022:	371c      	adds	r7, #28
 8013024:	19e7      	adds	r7, r4, r7
 8013026:	6839      	ldr	r1, [r7, #0]
 8013028:	f7ed ffe6 	bl	8000ff8 <__aeabi_fsub>
 801302c:	6879      	ldr	r1, [r7, #4]
 801302e:	4681      	mov	r9, r0
 8013030:	9800      	ldr	r0, [sp, #0]
 8013032:	f7ed ffe1 	bl	8000ff8 <__aeabi_fsub>
 8013036:	68b9      	ldr	r1, [r7, #8]
 8013038:	4680      	mov	r8, r0
 801303a:	9801      	ldr	r0, [sp, #4]
 801303c:	f7ed ffdc 	bl	8000ff8 <__aeabi_fsub>
 8013040:	4649      	mov	r1, r9
 8013042:	1c07      	adds	r7, r0, #0
 8013044:	4648      	mov	r0, r9
 8013046:	f7ed feb1 	bl	8000dac <__aeabi_fmul>
 801304a:	4641      	mov	r1, r8
 801304c:	4681      	mov	r9, r0
 801304e:	4640      	mov	r0, r8
 8013050:	f7ed feac 	bl	8000dac <__aeabi_fmul>
 8013054:	1c01      	adds	r1, r0, #0
 8013056:	4648      	mov	r0, r9
 8013058:	f7ed fb42 	bl	80006e0 <__aeabi_fadd>
 801305c:	1c39      	adds	r1, r7, #0
 801305e:	4680      	mov	r8, r0
 8013060:	1c38      	adds	r0, r7, #0
 8013062:	f7ed fea3 	bl	8000dac <__aeabi_fmul>
 8013066:	1c01      	adds	r1, r0, #0
 8013068:	4640      	mov	r0, r8
 801306a:	f7ed fb39 	bl	80006e0 <__aeabi_fadd>
 801306e:	6969      	ldr	r1, [r5, #20]
 8013070:	1c07      	adds	r7, r0, #0
 8013072:	f7ed f9ef 	bl	8000454 <__aeabi_fcmpgt>
 8013076:	2800      	cmp	r0, #0
 8013078:	d01b      	beq.n	80130b2 <MotionFX_CM0P_MagCal_run+0x2ce>
 801307a:	69a9      	ldr	r1, [r5, #24]
 801307c:	1c38      	adds	r0, r7, #0
 801307e:	f7ed f9d5 	bl	800042c <__aeabi_fcmplt>
 8013082:	2800      	cmp	r0, #0
 8013084:	d100      	bne.n	8013088 <MotionFX_CM0P_MagCal_run+0x2a4>
 8013086:	e773      	b.n	8012f70 <MotionFX_CM0P_MagCal_run+0x18c>
 8013088:	4652      	mov	r2, sl
 801308a:	4bc7      	ldr	r3, [pc, #796]	; (80133a8 <MotionFX_CM0P_MagCal_run+0x5c4>)
 801308c:	2100      	movs	r1, #0
 801308e:	50a3      	str	r3, [r4, r2]
 8013090:	239e      	movs	r3, #158	; 0x9e
 8013092:	22b4      	movs	r2, #180	; 0xb4
 8013094:	00db      	lsls	r3, r3, #3
 8013096:	18e0      	adds	r0, r4, r3
 8013098:	0052      	lsls	r2, r2, #1
 801309a:	f000 fce4 	bl	8013a66 <memset>
 801309e:	465b      	mov	r3, fp
 80130a0:	685c      	ldr	r4, [r3, #4]
 80130a2:	4653      	mov	r3, sl
 80130a4:	5ae3      	ldrh	r3, [r4, r3]
 80130a6:	9302      	str	r3, [sp, #8]
 80130a8:	2b00      	cmp	r3, #0
 80130aa:	d100      	bne.n	80130ae <MotionFX_CM0P_MagCal_run+0x2ca>
 80130ac:	e163      	b.n	8013376 <MotionFX_CM0P_MagCal_run+0x592>
 80130ae:	465b      	mov	r3, fp
 80130b0:	681d      	ldr	r5, [r3, #0]
 80130b2:	6929      	ldr	r1, [r5, #16]
 80130b4:	1c38      	adds	r0, r7, #0
 80130b6:	f7ed f9cd 	bl	8000454 <__aeabi_fcmpgt>
 80130ba:	2800      	cmp	r0, #0
 80130bc:	d100      	bne.n	80130c0 <MotionFX_CM0P_MagCal_run+0x2dc>
 80130be:	e757      	b.n	8012f70 <MotionFX_CM0P_MagCal_run+0x18c>
 80130c0:	69a9      	ldr	r1, [r5, #24]
 80130c2:	1c38      	adds	r0, r7, #0
 80130c4:	f7ed f9b2 	bl	800042c <__aeabi_fcmplt>
 80130c8:	2800      	cmp	r0, #0
 80130ca:	d100      	bne.n	80130ce <MotionFX_CM0P_MagCal_run+0x2ea>
 80130cc:	e750      	b.n	8012f70 <MotionFX_CM0P_MagCal_run+0x18c>
 80130ce:	4fb5      	ldr	r7, [pc, #724]	; (80133a4 <MotionFX_CM0P_MagCal_run+0x5c0>)
 80130d0:	2164      	movs	r1, #100	; 0x64
 80130d2:	5fe0      	ldrsh	r0, [r4, r7]
 80130d4:	3001      	adds	r0, #1
 80130d6:	f7ed f991 	bl	80003fc <__aeabi_idivmod>
 80130da:	4bb4      	ldr	r3, [pc, #720]	; (80133ac <MotionFX_CM0P_MagCal_run+0x5c8>)
 80130dc:	9103      	str	r1, [sp, #12]
 80130de:	58e3      	ldr	r3, [r4, r3]
 80130e0:	53e1      	strh	r1, [r4, r7]
 80130e2:	1c30      	adds	r0, r6, #0
 80130e4:	1c19      	adds	r1, r3, #0
 80130e6:	9304      	str	r3, [sp, #16]
 80130e8:	f7ed ff86 	bl	8000ff8 <__aeabi_fsub>
 80130ec:	239d      	movs	r3, #157	; 0x9d
 80130ee:	00db      	lsls	r3, r3, #3
 80130f0:	58e3      	ldr	r3, [r4, r3]
 80130f2:	1c06      	adds	r6, r0, #0
 80130f4:	1c19      	adds	r1, r3, #0
 80130f6:	9800      	ldr	r0, [sp, #0]
 80130f8:	9305      	str	r3, [sp, #20]
 80130fa:	f7ed ff7d 	bl	8000ff8 <__aeabi_fsub>
 80130fe:	4bac      	ldr	r3, [pc, #688]	; (80133b0 <MotionFX_CM0P_MagCal_run+0x5cc>)
 8013100:	4680      	mov	r8, r0
 8013102:	58e3      	ldr	r3, [r4, r3]
 8013104:	9801      	ldr	r0, [sp, #4]
 8013106:	1c19      	adds	r1, r3, #0
 8013108:	9300      	str	r3, [sp, #0]
 801310a:	f7ed ff75 	bl	8000ff8 <__aeabi_fsub>
 801310e:	782b      	ldrb	r3, [r5, #0]
 8013110:	4681      	mov	r9, r0
 8013112:	2b00      	cmp	r3, #0
 8013114:	d000      	beq.n	8013118 <MotionFX_CM0P_MagCal_run+0x334>
 8013116:	e163      	b.n	80133e0 <MotionFX_CM0P_MagCal_run+0x5fc>
 8013118:	4643      	mov	r3, r8
 801311a:	9320      	str	r3, [sp, #128]	; 0x80
 801311c:	23fe      	movs	r3, #254	; 0xfe
 801311e:	9021      	str	r0, [sp, #132]	; 0x84
 8013120:	059b      	lsls	r3, r3, #22
 8013122:	1c31      	adds	r1, r6, #0
 8013124:	1c30      	adds	r0, r6, #0
 8013126:	9322      	str	r3, [sp, #136]	; 0x88
 8013128:	f7ed fe40 	bl	8000dac <__aeabi_fmul>
 801312c:	4641      	mov	r1, r8
 801312e:	1c05      	adds	r5, r0, #0
 8013130:	4640      	mov	r0, r8
 8013132:	f7ed fe3b 	bl	8000dac <__aeabi_fmul>
 8013136:	4649      	mov	r1, r9
 8013138:	4682      	mov	sl, r0
 801313a:	4648      	mov	r0, r9
 801313c:	f7ed fe36 	bl	8000dac <__aeabi_fmul>
 8013140:	4651      	mov	r1, sl
 8013142:	1c07      	adds	r7, r0, #0
 8013144:	1c28      	adds	r0, r5, #0
 8013146:	f7ed facb 	bl	80006e0 <__aeabi_fadd>
 801314a:	1c39      	adds	r1, r7, #0
 801314c:	9701      	str	r7, [sp, #4]
 801314e:	f7ed fac7 	bl	80006e0 <__aeabi_fadd>
 8013152:	1c29      	adds	r1, r5, #0
 8013154:	259e      	movs	r5, #158	; 0x9e
 8013156:	00ed      	lsls	r5, r5, #3
 8013158:	1c07      	adds	r7, r0, #0
 801315a:	5960      	ldr	r0, [r4, r5]
 801315c:	f7ed fac0 	bl	80006e0 <__aeabi_fadd>
 8013160:	4641      	mov	r1, r8
 8013162:	5160      	str	r0, [r4, r5]
 8013164:	9006      	str	r0, [sp, #24]
 8013166:	1c30      	adds	r0, r6, #0
 8013168:	f7ed fe20 	bl	8000dac <__aeabi_fmul>
 801316c:	4d91      	ldr	r5, [pc, #580]	; (80133b4 <MotionFX_CM0P_MagCal_run+0x5d0>)
 801316e:	1c01      	adds	r1, r0, #0
 8013170:	5960      	ldr	r0, [r4, r5]
 8013172:	f7ed fab5 	bl	80006e0 <__aeabi_fadd>
 8013176:	4649      	mov	r1, r9
 8013178:	5160      	str	r0, [r4, r5]
 801317a:	9007      	str	r0, [sp, #28]
 801317c:	1c30      	adds	r0, r6, #0
 801317e:	f7ed fe15 	bl	8000dac <__aeabi_fmul>
 8013182:	3504      	adds	r5, #4
 8013184:	1c01      	adds	r1, r0, #0
 8013186:	5960      	ldr	r0, [r4, r5]
 8013188:	f7ed faaa 	bl	80006e0 <__aeabi_fadd>
 801318c:	5160      	str	r0, [r4, r5]
 801318e:	4d8a      	ldr	r5, [pc, #552]	; (80133b8 <MotionFX_CM0P_MagCal_run+0x5d4>)
 8013190:	9008      	str	r0, [sp, #32]
 8013192:	1c31      	adds	r1, r6, #0
 8013194:	5960      	ldr	r0, [r4, r5]
 8013196:	f7ed faa3 	bl	80006e0 <__aeabi_fadd>
 801319a:	1c39      	adds	r1, r7, #0
 801319c:	5160      	str	r0, [r4, r5]
 801319e:	9009      	str	r0, [sp, #36]	; 0x24
 80131a0:	1c30      	adds	r0, r6, #0
 80131a2:	f7ed fe03 	bl	8000dac <__aeabi_fmul>
 80131a6:	3504      	adds	r5, #4
 80131a8:	1c01      	adds	r1, r0, #0
 80131aa:	5960      	ldr	r0, [r4, r5]
 80131ac:	f7ed fa98 	bl	80006e0 <__aeabi_fadd>
 80131b0:	5160      	str	r0, [r4, r5]
 80131b2:	4d82      	ldr	r5, [pc, #520]	; (80133bc <MotionFX_CM0P_MagCal_run+0x5d8>)
 80131b4:	4651      	mov	r1, sl
 80131b6:	900a      	str	r0, [sp, #40]	; 0x28
 80131b8:	5960      	ldr	r0, [r4, r5]
 80131ba:	f7ed fa91 	bl	80006e0 <__aeabi_fadd>
 80131be:	4649      	mov	r1, r9
 80131c0:	5160      	str	r0, [r4, r5]
 80131c2:	900b      	str	r0, [sp, #44]	; 0x2c
 80131c4:	4640      	mov	r0, r8
 80131c6:	f7ed fdf1 	bl	8000dac <__aeabi_fmul>
 80131ca:	3504      	adds	r5, #4
 80131cc:	1c01      	adds	r1, r0, #0
 80131ce:	5960      	ldr	r0, [r4, r5]
 80131d0:	f7ed fa86 	bl	80006e0 <__aeabi_fadd>
 80131d4:	5160      	str	r0, [r4, r5]
 80131d6:	4d7a      	ldr	r5, [pc, #488]	; (80133c0 <MotionFX_CM0P_MagCal_run+0x5dc>)
 80131d8:	4641      	mov	r1, r8
 80131da:	900c      	str	r0, [sp, #48]	; 0x30
 80131dc:	5960      	ldr	r0, [r4, r5]
 80131de:	f7ed fa7f 	bl	80006e0 <__aeabi_fadd>
 80131e2:	1c39      	adds	r1, r7, #0
 80131e4:	5160      	str	r0, [r4, r5]
 80131e6:	900d      	str	r0, [sp, #52]	; 0x34
 80131e8:	4640      	mov	r0, r8
 80131ea:	f7ed fddf 	bl	8000dac <__aeabi_fmul>
 80131ee:	3504      	adds	r5, #4
 80131f0:	1c01      	adds	r1, r0, #0
 80131f2:	5960      	ldr	r0, [r4, r5]
 80131f4:	f7ed fa74 	bl	80006e0 <__aeabi_fadd>
 80131f8:	5160      	str	r0, [r4, r5]
 80131fa:	3520      	adds	r5, #32
 80131fc:	9901      	ldr	r1, [sp, #4]
 80131fe:	900e      	str	r0, [sp, #56]	; 0x38
 8013200:	5960      	ldr	r0, [r4, r5]
 8013202:	f7ed fa6d 	bl	80006e0 <__aeabi_fadd>
 8013206:	5160      	str	r0, [r4, r5]
 8013208:	4d6e      	ldr	r5, [pc, #440]	; (80133c4 <MotionFX_CM0P_MagCal_run+0x5e0>)
 801320a:	4649      	mov	r1, r9
 801320c:	9001      	str	r0, [sp, #4]
 801320e:	5960      	ldr	r0, [r4, r5]
 8013210:	f7ed fa66 	bl	80006e0 <__aeabi_fadd>
 8013214:	1c39      	adds	r1, r7, #0
 8013216:	5160      	str	r0, [r4, r5]
 8013218:	900f      	str	r0, [sp, #60]	; 0x3c
 801321a:	4648      	mov	r0, r9
 801321c:	f7ed fdc6 	bl	8000dac <__aeabi_fmul>
 8013220:	3504      	adds	r5, #4
 8013222:	1c01      	adds	r1, r0, #0
 8013224:	5960      	ldr	r0, [r4, r5]
 8013226:	f7ed fa5b 	bl	80006e0 <__aeabi_fadd>
 801322a:	21fe      	movs	r1, #254	; 0xfe
 801322c:	5160      	str	r0, [r4, r5]
 801322e:	4d66      	ldr	r5, [pc, #408]	; (80133c8 <MotionFX_CM0P_MagCal_run+0x5e4>)
 8013230:	9010      	str	r0, [sp, #64]	; 0x40
 8013232:	0589      	lsls	r1, r1, #22
 8013234:	5960      	ldr	r0, [r4, r5]
 8013236:	f7ed fa53 	bl	80006e0 <__aeabi_fadd>
 801323a:	5160      	str	r0, [r4, r5]
 801323c:	3504      	adds	r5, #4
 801323e:	9011      	str	r0, [sp, #68]	; 0x44
 8013240:	1c39      	adds	r1, r7, #0
 8013242:	5960      	ldr	r0, [r4, r5]
 8013244:	f7ed fa4c 	bl	80006e0 <__aeabi_fadd>
 8013248:	9b02      	ldr	r3, [sp, #8]
 801324a:	9012      	str	r0, [sp, #72]	; 0x48
 801324c:	5160      	str	r0, [r4, r5]
 801324e:	2b64      	cmp	r3, #100	; 0x64
 8013250:	d100      	bne.n	8013254 <MotionFX_CM0P_MagCal_run+0x470>
 8013252:	e2d5      	b.n	8013800 <MotionFX_CM0P_MagCal_run+0xa1c>
 8013254:	9b02      	ldr	r3, [sp, #8]
 8013256:	2b63      	cmp	r3, #99	; 0x63
 8013258:	d803      	bhi.n	8013262 <MotionFX_CM0P_MagCal_run+0x47e>
 801325a:	001a      	movs	r2, r3
 801325c:	4b50      	ldr	r3, [pc, #320]	; (80133a0 <MotionFX_CM0P_MagCal_run+0x5bc>)
 801325e:	3201      	adds	r2, #1
 8013260:	52e2      	strh	r2, [r4, r3]
 8013262:	9b03      	ldr	r3, [sp, #12]
 8013264:	005b      	lsls	r3, r3, #1
 8013266:	469a      	mov	sl, r3
 8013268:	9b03      	ldr	r3, [sp, #12]
 801326a:	220c      	movs	r2, #12
 801326c:	4453      	add	r3, sl
 801326e:	0098      	lsls	r0, r3, #2
 8013270:	301c      	adds	r0, #28
 8013272:	1820      	adds	r0, r4, r0
 8013274:	a919      	add	r1, sp, #100	; 0x64
 8013276:	f000 fbed 	bl	8013a54 <memcpy>
 801327a:	465b      	mov	r3, fp
 801327c:	4d48      	ldr	r5, [pc, #288]	; (80133a0 <MotionFX_CM0P_MagCal_run+0x5bc>)
 801327e:	685c      	ldr	r4, [r3, #4]
 8013280:	681b      	ldr	r3, [r3, #0]
 8013282:	5b62      	ldrh	r2, [r4, r5]
 8013284:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8013286:	429a      	cmp	r2, r3
 8013288:	d200      	bcs.n	801328c <MotionFX_CM0P_MagCal_run+0x4a8>
 801328a:	e671      	b.n	8012f70 <MotionFX_CM0P_MagCal_run+0x18c>
 801328c:	26cb      	movs	r6, #203	; 0xcb
 801328e:	00f6      	lsls	r6, r6, #3
 8013290:	5da3      	ldrb	r3, [r4, r6]
 8013292:	2b02      	cmp	r3, #2
 8013294:	d900      	bls.n	8013298 <MotionFX_CM0P_MagCal_run+0x4b4>
 8013296:	e66b      	b.n	8012f70 <MotionFX_CM0P_MagCal_run+0x18c>
 8013298:	9819      	ldr	r0, [sp, #100]	; 0x64
 801329a:	991a      	ldr	r1, [sp, #104]	; 0x68
 801329c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 801329e:	f7fd fb2f 	bl	8010900 <calibrate>
 80132a2:	465b      	mov	r3, fp
 80132a4:	685c      	ldr	r4, [r3, #4]
 80132a6:	2800      	cmp	r0, #0
 80132a8:	d100      	bne.n	80132ac <MotionFX_CM0P_MagCal_run+0x4c8>
 80132aa:	e661      	b.n	8012f70 <MotionFX_CM0P_MagCal_run+0x18c>
 80132ac:	5b63      	ldrh	r3, [r4, r5]
 80132ae:	3b64      	subs	r3, #100	; 0x64
 80132b0:	425a      	negs	r2, r3
 80132b2:	4153      	adcs	r3, r2
 80132b4:	2200      	movs	r2, #0
 80132b6:	3302      	adds	r3, #2
 80132b8:	55a3      	strb	r3, [r4, r6]
 80132ba:	4b44      	ldr	r3, [pc, #272]	; (80133cc <MotionFX_CM0P_MagCal_run+0x5e8>)
 80132bc:	52e2      	strh	r2, [r4, r3]
 80132be:	e657      	b.n	8012f70 <MotionFX_CM0P_MagCal_run+0x18c>
 80132c0:	220c      	movs	r2, #12
 80132c2:	2100      	movs	r1, #0
 80132c4:	a81c      	add	r0, sp, #112	; 0x70
 80132c6:	f000 fbce 	bl	8013a66 <memset>
 80132ca:	782b      	ldrb	r3, [r5, #0]
 80132cc:	2b01      	cmp	r3, #1
 80132ce:	d100      	bne.n	80132d2 <MotionFX_CM0P_MagCal_run+0x4ee>
 80132d0:	e219      	b.n	8013706 <MotionFX_CM0P_MagCal_run+0x922>
 80132d2:	4b3f      	ldr	r3, [pc, #252]	; (80133d0 <MotionFX_CM0P_MagCal_run+0x5ec>)
 80132d4:	1c30      	adds	r0, r6, #0
 80132d6:	58e1      	ldr	r1, [r4, r3]
 80132d8:	f7ed fe8e 	bl	8000ff8 <__aeabi_fsub>
 80132dc:	23cc      	movs	r3, #204	; 0xcc
 80132de:	00db      	lsls	r3, r3, #3
 80132e0:	58e1      	ldr	r1, [r4, r3]
 80132e2:	901c      	str	r0, [sp, #112]	; 0x70
 80132e4:	9800      	ldr	r0, [sp, #0]
 80132e6:	f7ed fe87 	bl	8000ff8 <__aeabi_fsub>
 80132ea:	4b3a      	ldr	r3, [pc, #232]	; (80133d4 <MotionFX_CM0P_MagCal_run+0x5f0>)
 80132ec:	901d      	str	r0, [sp, #116]	; 0x74
 80132ee:	58e1      	ldr	r1, [r4, r3]
 80132f0:	9801      	ldr	r0, [sp, #4]
 80132f2:	f7ed fe81 	bl	8000ff8 <__aeabi_fsub>
 80132f6:	901e      	str	r0, [sp, #120]	; 0x78
 80132f8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80132fa:	991c      	ldr	r1, [sp, #112]	; 0x70
 80132fc:	4699      	mov	r9, r3
 80132fe:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8013300:	1c08      	adds	r0, r1, #0
 8013302:	4698      	mov	r8, r3
 8013304:	f7ed fd52 	bl	8000dac <__aeabi_fmul>
 8013308:	4649      	mov	r1, r9
 801330a:	9002      	str	r0, [sp, #8]
 801330c:	4648      	mov	r0, r9
 801330e:	f7ed fd4d 	bl	8000dac <__aeabi_fmul>
 8013312:	1c01      	adds	r1, r0, #0
 8013314:	9802      	ldr	r0, [sp, #8]
 8013316:	f7ed f9e3 	bl	80006e0 <__aeabi_fadd>
 801331a:	4641      	mov	r1, r8
 801331c:	4681      	mov	r9, r0
 801331e:	4640      	mov	r0, r8
 8013320:	f7ed fd44 	bl	8000dac <__aeabi_fmul>
 8013324:	1c01      	adds	r1, r0, #0
 8013326:	4648      	mov	r0, r9
 8013328:	f7ed f9da 	bl	80006e0 <__aeabi_fadd>
 801332c:	f001 f920 	bl	8014570 <sqrtf>
 8013330:	4b29      	ldr	r3, [pc, #164]	; (80133d8 <MotionFX_CM0P_MagCal_run+0x5f4>)
 8013332:	58e1      	ldr	r1, [r4, r3]
 8013334:	f7ed fe60 	bl	8000ff8 <__aeabi_fsub>
 8013338:	0040      	lsls	r0, r0, #1
 801333a:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 801333c:	0840      	lsrs	r0, r0, #1
 801333e:	f7ed f875 	bl	800042c <__aeabi_fcmplt>
 8013342:	2800      	cmp	r0, #0
 8013344:	d00d      	beq.n	8013362 <MotionFX_CM0P_MagCal_run+0x57e>
 8013346:	2200      	movs	r2, #0
 8013348:	4b20      	ldr	r3, [pc, #128]	; (80133cc <MotionFX_CM0P_MagCal_run+0x5e8>)
 801334a:	52e2      	strh	r2, [r4, r3]
 801334c:	4b23      	ldr	r3, [pc, #140]	; (80133dc <MotionFX_CM0P_MagCal_run+0x5f8>)
 801334e:	5ae2      	ldrh	r2, [r4, r3]
 8013350:	2300      	movs	r3, #0
 8013352:	429a      	cmp	r2, r3
 8013354:	d000      	beq.n	8013358 <MotionFX_CM0P_MagCal_run+0x574>
 8013356:	e64b      	b.n	8012ff0 <MotionFX_CM0P_MagCal_run+0x20c>
 8013358:	23cb      	movs	r3, #203	; 0xcb
 801335a:	2201      	movs	r2, #1
 801335c:	00db      	lsls	r3, r3, #3
 801335e:	54e2      	strb	r2, [r4, r3]
 8013360:	e646      	b.n	8012ff0 <MotionFX_CM0P_MagCal_run+0x20c>
 8013362:	491a      	ldr	r1, [pc, #104]	; (80133cc <MotionFX_CM0P_MagCal_run+0x5e8>)
 8013364:	4a1d      	ldr	r2, [pc, #116]	; (80133dc <MotionFX_CM0P_MagCal_run+0x5f8>)
 8013366:	5a63      	ldrh	r3, [r4, r1]
 8013368:	5aa2      	ldrh	r2, [r4, r2]
 801336a:	4293      	cmp	r3, r2
 801336c:	d2f1      	bcs.n	8013352 <MotionFX_CM0P_MagCal_run+0x56e>
 801336e:	3301      	adds	r3, #1
 8013370:	b29b      	uxth	r3, r3
 8013372:	5263      	strh	r3, [r4, r1]
 8013374:	e7ed      	b.n	8013352 <MotionFX_CM0P_MagCal_run+0x56e>
 8013376:	465b      	mov	r3, fp
 8013378:	681d      	ldr	r5, [r3, #0]
 801337a:	1c30      	adds	r0, r6, #0
 801337c:	f001 f89a 	bl	80144b4 <truncf>
 8013380:	4b0a      	ldr	r3, [pc, #40]	; (80133ac <MotionFX_CM0P_MagCal_run+0x5c8>)
 8013382:	50e0      	str	r0, [r4, r3]
 8013384:	9800      	ldr	r0, [sp, #0]
 8013386:	f001 f895 	bl	80144b4 <truncf>
 801338a:	239d      	movs	r3, #157	; 0x9d
 801338c:	00db      	lsls	r3, r3, #3
 801338e:	50e0      	str	r0, [r4, r3]
 8013390:	9801      	ldr	r0, [sp, #4]
 8013392:	f001 f88f 	bl	80144b4 <truncf>
 8013396:	4b06      	ldr	r3, [pc, #24]	; (80133b0 <MotionFX_CM0P_MagCal_run+0x5cc>)
 8013398:	50e0      	str	r0, [r4, r3]
 801339a:	2300      	movs	r3, #0
 801339c:	9302      	str	r3, [sp, #8]
 801339e:	e696      	b.n	80130ce <MotionFX_CM0P_MagCal_run+0x2ea>
 80133a0:	000004cc 	.word	0x000004cc
 80133a4:	000004ce 	.word	0x000004ce
 80133a8:	ffff0000 	.word	0xffff0000
 80133ac:	000004e4 	.word	0x000004e4
 80133b0:	000004ec 	.word	0x000004ec
 80133b4:	000004f4 	.word	0x000004f4
 80133b8:	000004fc 	.word	0x000004fc
 80133bc:	0000051c 	.word	0x0000051c
 80133c0:	00000524 	.word	0x00000524
 80133c4:	0000054c 	.word	0x0000054c
 80133c8:	00000574 	.word	0x00000574
 80133cc:	000004de 	.word	0x000004de
 80133d0:	0000065c 	.word	0x0000065c
 80133d4:	00000664 	.word	0x00000664
 80133d8:	0000068c 	.word	0x0000068c
 80133dc:	000004dc 	.word	0x000004dc
 80133e0:	1c31      	adds	r1, r6, #0
 80133e2:	1c30      	adds	r0, r6, #0
 80133e4:	f7ed fce2 	bl	8000dac <__aeabi_fmul>
 80133e8:	4641      	mov	r1, r8
 80133ea:	901f      	str	r0, [sp, #124]	; 0x7c
 80133ec:	1c07      	adds	r7, r0, #0
 80133ee:	4640      	mov	r0, r8
 80133f0:	f7ed fcdc 	bl	8000dac <__aeabi_fmul>
 80133f4:	4649      	mov	r1, r9
 80133f6:	9020      	str	r0, [sp, #128]	; 0x80
 80133f8:	4648      	mov	r0, r9
 80133fa:	f7ed fcd7 	bl	8000dac <__aeabi_fmul>
 80133fe:	1c31      	adds	r1, r6, #0
 8013400:	9021      	str	r0, [sp, #132]	; 0x84
 8013402:	1c30      	adds	r0, r6, #0
 8013404:	f7ed f96c 	bl	80006e0 <__aeabi_fadd>
 8013408:	4641      	mov	r1, r8
 801340a:	1c05      	adds	r5, r0, #0
 801340c:	9025      	str	r0, [sp, #148]	; 0x94
 801340e:	4640      	mov	r0, r8
 8013410:	f7ed f966 	bl	80006e0 <__aeabi_fadd>
 8013414:	4649      	mov	r1, r9
 8013416:	1c06      	adds	r6, r0, #0
 8013418:	9026      	str	r0, [sp, #152]	; 0x98
 801341a:	4648      	mov	r0, r9
 801341c:	f7ed f960 	bl	80006e0 <__aeabi_fadd>
 8013420:	1c29      	adds	r1, r5, #0
 8013422:	9027      	str	r0, [sp, #156]	; 0x9c
 8013424:	4640      	mov	r0, r8
 8013426:	f7ed fcc1 	bl	8000dac <__aeabi_fmul>
 801342a:	1c29      	adds	r1, r5, #0
 801342c:	9022      	str	r0, [sp, #136]	; 0x88
 801342e:	4648      	mov	r0, r9
 8013430:	f7ed fcbc 	bl	8000dac <__aeabi_fmul>
 8013434:	1c31      	adds	r1, r6, #0
 8013436:	9023      	str	r0, [sp, #140]	; 0x8c
 8013438:	4648      	mov	r0, r9
 801343a:	f7ed fcb7 	bl	8000dac <__aeabi_fmul>
 801343e:	239e      	movs	r3, #158	; 0x9e
 8013440:	00db      	lsls	r3, r3, #3
 8013442:	4699      	mov	r9, r3
 8013444:	ab1f      	add	r3, sp, #124	; 0x7c
 8013446:	4698      	mov	r8, r3
 8013448:	4be6      	ldr	r3, [pc, #920]	; (80137e4 <MotionFX_CM0P_MagCal_run+0xa00>)
 801344a:	465a      	mov	r2, fp
 801344c:	469c      	mov	ip, r3
 801344e:	44a4      	add	ip, r4
 8013450:	4663      	mov	r3, ip
 8013452:	9307      	str	r3, [sp, #28]
 8013454:	2300      	movs	r3, #0
 8013456:	44a1      	add	r9, r4
 8013458:	9406      	str	r4, [sp, #24]
 801345a:	46e2      	mov	sl, ip
 801345c:	4646      	mov	r6, r8
 801345e:	464d      	mov	r5, r9
 8013460:	001c      	movs	r4, r3
 8013462:	9024      	str	r0, [sp, #144]	; 0x90
 8013464:	9201      	str	r2, [sp, #4]
 8013466:	e064      	b.n	8013532 <MotionFX_CM0P_MagCal_run+0x74e>
 8013468:	6871      	ldr	r1, [r6, #4]
 801346a:	1c38      	adds	r0, r7, #0
 801346c:	f7ed fc9e 	bl	8000dac <__aeabi_fmul>
 8013470:	1c01      	adds	r1, r0, #0
 8013472:	6868      	ldr	r0, [r5, #4]
 8013474:	f7ed f934 	bl	80006e0 <__aeabi_fadd>
 8013478:	6068      	str	r0, [r5, #4]
 801347a:	2c07      	cmp	r4, #7
 801347c:	d04b      	beq.n	8013516 <MotionFX_CM0P_MagCal_run+0x732>
 801347e:	68b1      	ldr	r1, [r6, #8]
 8013480:	1c38      	adds	r0, r7, #0
 8013482:	f7ed fc93 	bl	8000dac <__aeabi_fmul>
 8013486:	1c01      	adds	r1, r0, #0
 8013488:	68a8      	ldr	r0, [r5, #8]
 801348a:	f7ed f929 	bl	80006e0 <__aeabi_fadd>
 801348e:	60a8      	str	r0, [r5, #8]
 8013490:	2c06      	cmp	r4, #6
 8013492:	d040      	beq.n	8013516 <MotionFX_CM0P_MagCal_run+0x732>
 8013494:	68f1      	ldr	r1, [r6, #12]
 8013496:	1c38      	adds	r0, r7, #0
 8013498:	f7ed fc88 	bl	8000dac <__aeabi_fmul>
 801349c:	1c01      	adds	r1, r0, #0
 801349e:	68e8      	ldr	r0, [r5, #12]
 80134a0:	f7ed f91e 	bl	80006e0 <__aeabi_fadd>
 80134a4:	60e8      	str	r0, [r5, #12]
 80134a6:	2c05      	cmp	r4, #5
 80134a8:	d035      	beq.n	8013516 <MotionFX_CM0P_MagCal_run+0x732>
 80134aa:	6931      	ldr	r1, [r6, #16]
 80134ac:	1c38      	adds	r0, r7, #0
 80134ae:	f7ed fc7d 	bl	8000dac <__aeabi_fmul>
 80134b2:	1c01      	adds	r1, r0, #0
 80134b4:	6928      	ldr	r0, [r5, #16]
 80134b6:	f7ed f913 	bl	80006e0 <__aeabi_fadd>
 80134ba:	6128      	str	r0, [r5, #16]
 80134bc:	2c04      	cmp	r4, #4
 80134be:	d02a      	beq.n	8013516 <MotionFX_CM0P_MagCal_run+0x732>
 80134c0:	6971      	ldr	r1, [r6, #20]
 80134c2:	1c38      	adds	r0, r7, #0
 80134c4:	f7ed fc72 	bl	8000dac <__aeabi_fmul>
 80134c8:	1c01      	adds	r1, r0, #0
 80134ca:	6968      	ldr	r0, [r5, #20]
 80134cc:	f7ed f908 	bl	80006e0 <__aeabi_fadd>
 80134d0:	6168      	str	r0, [r5, #20]
 80134d2:	2c03      	cmp	r4, #3
 80134d4:	d01f      	beq.n	8013516 <MotionFX_CM0P_MagCal_run+0x732>
 80134d6:	69b1      	ldr	r1, [r6, #24]
 80134d8:	1c38      	adds	r0, r7, #0
 80134da:	f7ed fc67 	bl	8000dac <__aeabi_fmul>
 80134de:	1c01      	adds	r1, r0, #0
 80134e0:	69a8      	ldr	r0, [r5, #24]
 80134e2:	f7ed f8fd 	bl	80006e0 <__aeabi_fadd>
 80134e6:	61a8      	str	r0, [r5, #24]
 80134e8:	2c02      	cmp	r4, #2
 80134ea:	d014      	beq.n	8013516 <MotionFX_CM0P_MagCal_run+0x732>
 80134ec:	69f1      	ldr	r1, [r6, #28]
 80134ee:	1c38      	adds	r0, r7, #0
 80134f0:	f7ed fc5c 	bl	8000dac <__aeabi_fmul>
 80134f4:	1c01      	adds	r1, r0, #0
 80134f6:	69e8      	ldr	r0, [r5, #28]
 80134f8:	f7ed f8f2 	bl	80006e0 <__aeabi_fadd>
 80134fc:	465b      	mov	r3, fp
 80134fe:	61e8      	str	r0, [r5, #28]
 8013500:	2b01      	cmp	r3, #1
 8013502:	d108      	bne.n	8013516 <MotionFX_CM0P_MagCal_run+0x732>
 8013504:	6a31      	ldr	r1, [r6, #32]
 8013506:	1c38      	adds	r0, r7, #0
 8013508:	f7ed fc50 	bl	8000dac <__aeabi_fmul>
 801350c:	1c01      	adds	r1, r0, #0
 801350e:	6a28      	ldr	r0, [r5, #32]
 8013510:	f7ed f8e6 	bl	80006e0 <__aeabi_fadd>
 8013514:	6228      	str	r0, [r5, #32]
 8013516:	4653      	mov	r3, sl
 8013518:	1c39      	adds	r1, r7, #0
 801351a:	6818      	ldr	r0, [r3, #0]
 801351c:	f7ed f8e0 	bl	80006e0 <__aeabi_fadd>
 8013520:	4653      	mov	r3, sl
 8013522:	6018      	str	r0, [r3, #0]
 8013524:	2328      	movs	r3, #40	; 0x28
 8013526:	469c      	mov	ip, r3
 8013528:	465c      	mov	r4, fp
 801352a:	6877      	ldr	r7, [r6, #4]
 801352c:	3604      	adds	r6, #4
 801352e:	352c      	adds	r5, #44	; 0x2c
 8013530:	44e2      	add	sl, ip
 8013532:	6831      	ldr	r1, [r6, #0]
 8013534:	1c38      	adds	r0, r7, #0
 8013536:	f7ed fc39 	bl	8000dac <__aeabi_fmul>
 801353a:	1c01      	adds	r1, r0, #0
 801353c:	6828      	ldr	r0, [r5, #0]
 801353e:	f7ed f8cf 	bl	80006e0 <__aeabi_fadd>
 8013542:	1c63      	adds	r3, r4, #1
 8013544:	b2db      	uxtb	r3, r3
 8013546:	469b      	mov	fp, r3
 8013548:	6028      	str	r0, [r5, #0]
 801354a:	2b09      	cmp	r3, #9
 801354c:	d18c      	bne.n	8013468 <MotionFX_CM0P_MagCal_run+0x684>
 801354e:	9b01      	ldr	r3, [sp, #4]
 8013550:	1c39      	adds	r1, r7, #0
 8013552:	469b      	mov	fp, r3
 8013554:	4653      	mov	r3, sl
 8013556:	6818      	ldr	r0, [r3, #0]
 8013558:	f7ed f8c2 	bl	80006e0 <__aeabi_fadd>
 801355c:	4653      	mov	r3, sl
 801355e:	6018      	str	r0, [r3, #0]
 8013560:	9b02      	ldr	r3, [sp, #8]
 8013562:	9c06      	ldr	r4, [sp, #24]
 8013564:	2b64      	cmp	r3, #100	; 0x64
 8013566:	d000      	beq.n	801356a <MotionFX_CM0P_MagCal_run+0x786>
 8013568:	e674      	b.n	8013254 <MotionFX_CM0P_MagCal_run+0x470>
 801356a:	9b03      	ldr	r3, [sp, #12]
 801356c:	9904      	ldr	r1, [sp, #16]
 801356e:	005a      	lsls	r2, r3, #1
 8013570:	4692      	mov	sl, r2
 8013572:	4453      	add	r3, sl
 8013574:	009d      	lsls	r5, r3, #2
 8013576:	1965      	adds	r5, r4, r5
 8013578:	69e8      	ldr	r0, [r5, #28]
 801357a:	f7ed fd3d 	bl	8000ff8 <__aeabi_fsub>
 801357e:	9905      	ldr	r1, [sp, #20]
 8013580:	9001      	str	r0, [sp, #4]
 8013582:	6a28      	ldr	r0, [r5, #32]
 8013584:	f7ed fd38 	bl	8000ff8 <__aeabi_fsub>
 8013588:	9900      	ldr	r1, [sp, #0]
 801358a:	1c07      	adds	r7, r0, #0
 801358c:	6a68      	ldr	r0, [r5, #36]	; 0x24
 801358e:	f7ed fd33 	bl	8000ff8 <__aeabi_fsub>
 8013592:	9901      	ldr	r1, [sp, #4]
 8013594:	1c06      	adds	r6, r0, #0
 8013596:	1c08      	adds	r0, r1, #0
 8013598:	f7ed fc08 	bl	8000dac <__aeabi_fmul>
 801359c:	1c39      	adds	r1, r7, #0
 801359e:	901f      	str	r0, [sp, #124]	; 0x7c
 80135a0:	1c05      	adds	r5, r0, #0
 80135a2:	1c38      	adds	r0, r7, #0
 80135a4:	f7ed fc02 	bl	8000dac <__aeabi_fmul>
 80135a8:	1c31      	adds	r1, r6, #0
 80135aa:	9020      	str	r0, [sp, #128]	; 0x80
 80135ac:	1c30      	adds	r0, r6, #0
 80135ae:	f7ed fbfd 	bl	8000dac <__aeabi_fmul>
 80135b2:	9901      	ldr	r1, [sp, #4]
 80135b4:	9021      	str	r0, [sp, #132]	; 0x84
 80135b6:	1c08      	adds	r0, r1, #0
 80135b8:	f7ed f892 	bl	80006e0 <__aeabi_fadd>
 80135bc:	1c39      	adds	r1, r7, #0
 80135be:	9000      	str	r0, [sp, #0]
 80135c0:	9025      	str	r0, [sp, #148]	; 0x94
 80135c2:	1c38      	adds	r0, r7, #0
 80135c4:	f7ed f88c 	bl	80006e0 <__aeabi_fadd>
 80135c8:	1c31      	adds	r1, r6, #0
 80135ca:	9001      	str	r0, [sp, #4]
 80135cc:	9026      	str	r0, [sp, #152]	; 0x98
 80135ce:	1c30      	adds	r0, r6, #0
 80135d0:	f7ed f886 	bl	80006e0 <__aeabi_fadd>
 80135d4:	1c39      	adds	r1, r7, #0
 80135d6:	9f00      	ldr	r7, [sp, #0]
 80135d8:	9027      	str	r0, [sp, #156]	; 0x9c
 80135da:	1c38      	adds	r0, r7, #0
 80135dc:	f7ed fbe6 	bl	8000dac <__aeabi_fmul>
 80135e0:	1c31      	adds	r1, r6, #0
 80135e2:	9022      	str	r0, [sp, #136]	; 0x88
 80135e4:	1c38      	adds	r0, r7, #0
 80135e6:	f7ed fbe1 	bl	8000dac <__aeabi_fmul>
 80135ea:	1c31      	adds	r1, r6, #0
 80135ec:	9023      	str	r0, [sp, #140]	; 0x8c
 80135ee:	9801      	ldr	r0, [sp, #4]
 80135f0:	f7ed fbdc 	bl	8000dac <__aeabi_fmul>
 80135f4:	465b      	mov	r3, fp
 80135f6:	2600      	movs	r6, #0
 80135f8:	9300      	str	r3, [sp, #0]
 80135fa:	9b07      	ldr	r3, [sp, #28]
 80135fc:	46a3      	mov	fp, r4
 80135fe:	464f      	mov	r7, r9
 8013600:	0034      	movs	r4, r6
 8013602:	4699      	mov	r9, r3
 8013604:	4646      	mov	r6, r8
 8013606:	9024      	str	r0, [sp, #144]	; 0x90
 8013608:	e064      	b.n	80136d4 <MotionFX_CM0P_MagCal_run+0x8f0>
 801360a:	6871      	ldr	r1, [r6, #4]
 801360c:	1c28      	adds	r0, r5, #0
 801360e:	f7ed fbcd 	bl	8000dac <__aeabi_fmul>
 8013612:	1c01      	adds	r1, r0, #0
 8013614:	6878      	ldr	r0, [r7, #4]
 8013616:	f7ed fcef 	bl	8000ff8 <__aeabi_fsub>
 801361a:	6078      	str	r0, [r7, #4]
 801361c:	2c07      	cmp	r4, #7
 801361e:	d04b      	beq.n	80136b8 <MotionFX_CM0P_MagCal_run+0x8d4>
 8013620:	68b1      	ldr	r1, [r6, #8]
 8013622:	1c28      	adds	r0, r5, #0
 8013624:	f7ed fbc2 	bl	8000dac <__aeabi_fmul>
 8013628:	1c01      	adds	r1, r0, #0
 801362a:	68b8      	ldr	r0, [r7, #8]
 801362c:	f7ed fce4 	bl	8000ff8 <__aeabi_fsub>
 8013630:	60b8      	str	r0, [r7, #8]
 8013632:	2c06      	cmp	r4, #6
 8013634:	d040      	beq.n	80136b8 <MotionFX_CM0P_MagCal_run+0x8d4>
 8013636:	68f1      	ldr	r1, [r6, #12]
 8013638:	1c28      	adds	r0, r5, #0
 801363a:	f7ed fbb7 	bl	8000dac <__aeabi_fmul>
 801363e:	1c01      	adds	r1, r0, #0
 8013640:	68f8      	ldr	r0, [r7, #12]
 8013642:	f7ed fcd9 	bl	8000ff8 <__aeabi_fsub>
 8013646:	60f8      	str	r0, [r7, #12]
 8013648:	2c05      	cmp	r4, #5
 801364a:	d035      	beq.n	80136b8 <MotionFX_CM0P_MagCal_run+0x8d4>
 801364c:	6931      	ldr	r1, [r6, #16]
 801364e:	1c28      	adds	r0, r5, #0
 8013650:	f7ed fbac 	bl	8000dac <__aeabi_fmul>
 8013654:	1c01      	adds	r1, r0, #0
 8013656:	6938      	ldr	r0, [r7, #16]
 8013658:	f7ed fcce 	bl	8000ff8 <__aeabi_fsub>
 801365c:	6138      	str	r0, [r7, #16]
 801365e:	2c04      	cmp	r4, #4
 8013660:	d02a      	beq.n	80136b8 <MotionFX_CM0P_MagCal_run+0x8d4>
 8013662:	6971      	ldr	r1, [r6, #20]
 8013664:	1c28      	adds	r0, r5, #0
 8013666:	f7ed fba1 	bl	8000dac <__aeabi_fmul>
 801366a:	1c01      	adds	r1, r0, #0
 801366c:	6978      	ldr	r0, [r7, #20]
 801366e:	f7ed fcc3 	bl	8000ff8 <__aeabi_fsub>
 8013672:	6178      	str	r0, [r7, #20]
 8013674:	2c03      	cmp	r4, #3
 8013676:	d01f      	beq.n	80136b8 <MotionFX_CM0P_MagCal_run+0x8d4>
 8013678:	69b1      	ldr	r1, [r6, #24]
 801367a:	1c28      	adds	r0, r5, #0
 801367c:	f7ed fb96 	bl	8000dac <__aeabi_fmul>
 8013680:	1c01      	adds	r1, r0, #0
 8013682:	69b8      	ldr	r0, [r7, #24]
 8013684:	f7ed fcb8 	bl	8000ff8 <__aeabi_fsub>
 8013688:	61b8      	str	r0, [r7, #24]
 801368a:	2c02      	cmp	r4, #2
 801368c:	d014      	beq.n	80136b8 <MotionFX_CM0P_MagCal_run+0x8d4>
 801368e:	69f1      	ldr	r1, [r6, #28]
 8013690:	1c28      	adds	r0, r5, #0
 8013692:	f7ed fb8b 	bl	8000dac <__aeabi_fmul>
 8013696:	1c01      	adds	r1, r0, #0
 8013698:	69f8      	ldr	r0, [r7, #28]
 801369a:	f7ed fcad 	bl	8000ff8 <__aeabi_fsub>
 801369e:	4643      	mov	r3, r8
 80136a0:	61f8      	str	r0, [r7, #28]
 80136a2:	2b01      	cmp	r3, #1
 80136a4:	d108      	bne.n	80136b8 <MotionFX_CM0P_MagCal_run+0x8d4>
 80136a6:	6a31      	ldr	r1, [r6, #32]
 80136a8:	1c28      	adds	r0, r5, #0
 80136aa:	f7ed fb7f 	bl	8000dac <__aeabi_fmul>
 80136ae:	1c01      	adds	r1, r0, #0
 80136b0:	6a38      	ldr	r0, [r7, #32]
 80136b2:	f7ed fca1 	bl	8000ff8 <__aeabi_fsub>
 80136b6:	6238      	str	r0, [r7, #32]
 80136b8:	464b      	mov	r3, r9
 80136ba:	1c29      	adds	r1, r5, #0
 80136bc:	6818      	ldr	r0, [r3, #0]
 80136be:	f7ed fc9b 	bl	8000ff8 <__aeabi_fsub>
 80136c2:	464b      	mov	r3, r9
 80136c4:	6018      	str	r0, [r3, #0]
 80136c6:	2328      	movs	r3, #40	; 0x28
 80136c8:	469c      	mov	ip, r3
 80136ca:	4644      	mov	r4, r8
 80136cc:	6875      	ldr	r5, [r6, #4]
 80136ce:	3604      	adds	r6, #4
 80136d0:	372c      	adds	r7, #44	; 0x2c
 80136d2:	44e1      	add	r9, ip
 80136d4:	6831      	ldr	r1, [r6, #0]
 80136d6:	1c28      	adds	r0, r5, #0
 80136d8:	f7ed fb68 	bl	8000dac <__aeabi_fmul>
 80136dc:	1c01      	adds	r1, r0, #0
 80136de:	6838      	ldr	r0, [r7, #0]
 80136e0:	f7ed fc8a 	bl	8000ff8 <__aeabi_fsub>
 80136e4:	1c63      	adds	r3, r4, #1
 80136e6:	b2db      	uxtb	r3, r3
 80136e8:	4698      	mov	r8, r3
 80136ea:	6038      	str	r0, [r7, #0]
 80136ec:	2b09      	cmp	r3, #9
 80136ee:	d18c      	bne.n	801360a <MotionFX_CM0P_MagCal_run+0x826>
 80136f0:	9b00      	ldr	r3, [sp, #0]
 80136f2:	465c      	mov	r4, fp
 80136f4:	469b      	mov	fp, r3
 80136f6:	464b      	mov	r3, r9
 80136f8:	1c29      	adds	r1, r5, #0
 80136fa:	6818      	ldr	r0, [r3, #0]
 80136fc:	464d      	mov	r5, r9
 80136fe:	f7ed fc7b 	bl	8000ff8 <__aeabi_fsub>
 8013702:	6028      	str	r0, [r5, #0]
 8013704:	e5b0      	b.n	8013268 <MotionFX_CM0P_MagCal_run+0x484>
 8013706:	4b38      	ldr	r3, [pc, #224]	; (80137e8 <MotionFX_CM0P_MagCal_run+0xa04>)
 8013708:	1c30      	adds	r0, r6, #0
 801370a:	58e1      	ldr	r1, [r4, r3]
 801370c:	f7ed fc74 	bl	8000ff8 <__aeabi_fsub>
 8013710:	23cc      	movs	r3, #204	; 0xcc
 8013712:	00db      	lsls	r3, r3, #3
 8013714:	4681      	mov	r9, r0
 8013716:	58e1      	ldr	r1, [r4, r3]
 8013718:	9800      	ldr	r0, [sp, #0]
 801371a:	f7ed fc6d 	bl	8000ff8 <__aeabi_fsub>
 801371e:	4b33      	ldr	r3, [pc, #204]	; (80137ec <MotionFX_CM0P_MagCal_run+0xa08>)
 8013720:	9002      	str	r0, [sp, #8]
 8013722:	58e1      	ldr	r1, [r4, r3]
 8013724:	4648      	mov	r0, r9
 8013726:	f7ed fb41 	bl	8000dac <__aeabi_fmul>
 801372a:	991d      	ldr	r1, [sp, #116]	; 0x74
 801372c:	f7ec ffd8 	bl	80006e0 <__aeabi_fadd>
 8013730:	23cf      	movs	r3, #207	; 0xcf
 8013732:	00db      	lsls	r3, r3, #3
 8013734:	58e1      	ldr	r1, [r4, r3]
 8013736:	4680      	mov	r8, r0
 8013738:	9802      	ldr	r0, [sp, #8]
 801373a:	f7ed fb37 	bl	8000dac <__aeabi_fmul>
 801373e:	1c01      	adds	r1, r0, #0
 8013740:	4640      	mov	r0, r8
 8013742:	f7ec ffcd 	bl	80006e0 <__aeabi_fadd>
 8013746:	23ce      	movs	r3, #206	; 0xce
 8013748:	00db      	lsls	r3, r3, #3
 801374a:	58e1      	ldr	r1, [r4, r3]
 801374c:	9003      	str	r0, [sp, #12]
 801374e:	4648      	mov	r0, r9
 8013750:	f7ed fb2c 	bl	8000dac <__aeabi_fmul>
 8013754:	991e      	ldr	r1, [sp, #120]	; 0x78
 8013756:	f7ec ffc3 	bl	80006e0 <__aeabi_fadd>
 801375a:	4b25      	ldr	r3, [pc, #148]	; (80137f0 <MotionFX_CM0P_MagCal_run+0xa0c>)
 801375c:	4680      	mov	r8, r0
 801375e:	58e1      	ldr	r1, [r4, r3]
 8013760:	9802      	ldr	r0, [sp, #8]
 8013762:	f7ed fb23 	bl	8000dac <__aeabi_fmul>
 8013766:	1c01      	adds	r1, r0, #0
 8013768:	4640      	mov	r0, r8
 801376a:	f7ec ffb9 	bl	80006e0 <__aeabi_fadd>
 801376e:	4b21      	ldr	r3, [pc, #132]	; (80137f4 <MotionFX_CM0P_MagCal_run+0xa10>)
 8013770:	9004      	str	r0, [sp, #16]
 8013772:	58e1      	ldr	r1, [r4, r3]
 8013774:	9801      	ldr	r0, [sp, #4]
 8013776:	f7ed fc3f 	bl	8000ff8 <__aeabi_fsub>
 801377a:	23cd      	movs	r3, #205	; 0xcd
 801377c:	00db      	lsls	r3, r3, #3
 801377e:	58e1      	ldr	r1, [r4, r3]
 8013780:	4680      	mov	r8, r0
 8013782:	4648      	mov	r0, r9
 8013784:	f7ed fb12 	bl	8000dac <__aeabi_fmul>
 8013788:	991c      	ldr	r1, [sp, #112]	; 0x70
 801378a:	f7ec ffa9 	bl	80006e0 <__aeabi_fadd>
 801378e:	4b1a      	ldr	r3, [pc, #104]	; (80137f8 <MotionFX_CM0P_MagCal_run+0xa14>)
 8013790:	4681      	mov	r9, r0
 8013792:	58e1      	ldr	r1, [r4, r3]
 8013794:	9802      	ldr	r0, [sp, #8]
 8013796:	f7ed fb09 	bl	8000dac <__aeabi_fmul>
 801379a:	1c01      	adds	r1, r0, #0
 801379c:	4648      	mov	r0, r9
 801379e:	f7ec ff9f 	bl	80006e0 <__aeabi_fadd>
 80137a2:	23d0      	movs	r3, #208	; 0xd0
 80137a4:	00db      	lsls	r3, r3, #3
 80137a6:	58e1      	ldr	r1, [r4, r3]
 80137a8:	4681      	mov	r9, r0
 80137aa:	4640      	mov	r0, r8
 80137ac:	f7ed fafe 	bl	8000dac <__aeabi_fmul>
 80137b0:	1c01      	adds	r1, r0, #0
 80137b2:	4648      	mov	r0, r9
 80137b4:	f7ec ff94 	bl	80006e0 <__aeabi_fadd>
 80137b8:	4b10      	ldr	r3, [pc, #64]	; (80137fc <MotionFX_CM0P_MagCal_run+0xa18>)
 80137ba:	901c      	str	r0, [sp, #112]	; 0x70
 80137bc:	58e1      	ldr	r1, [r4, r3]
 80137be:	4640      	mov	r0, r8
 80137c0:	f7ed faf4 	bl	8000dac <__aeabi_fmul>
 80137c4:	9903      	ldr	r1, [sp, #12]
 80137c6:	f7ec ff8b 	bl	80006e0 <__aeabi_fadd>
 80137ca:	23d1      	movs	r3, #209	; 0xd1
 80137cc:	00db      	lsls	r3, r3, #3
 80137ce:	58e1      	ldr	r1, [r4, r3]
 80137d0:	901d      	str	r0, [sp, #116]	; 0x74
 80137d2:	4640      	mov	r0, r8
 80137d4:	f7ed faea 	bl	8000dac <__aeabi_fmul>
 80137d8:	9904      	ldr	r1, [sp, #16]
 80137da:	f7ec ff81 	bl	80006e0 <__aeabi_fadd>
 80137de:	901e      	str	r0, [sp, #120]	; 0x78
 80137e0:	e58a      	b.n	80132f8 <MotionFX_CM0P_MagCal_run+0x514>
 80137e2:	46c0      	nop			; (mov r8, r8)
 80137e4:	00000514 	.word	0x00000514
 80137e8:	0000065c 	.word	0x0000065c
 80137ec:	0000066c 	.word	0x0000066c
 80137f0:	0000067c 	.word	0x0000067c
 80137f4:	00000664 	.word	0x00000664
 80137f8:	00000674 	.word	0x00000674
 80137fc:	00000684 	.word	0x00000684
 8013800:	9b03      	ldr	r3, [sp, #12]
 8013802:	9904      	ldr	r1, [sp, #16]
 8013804:	005a      	lsls	r2, r3, #1
 8013806:	4692      	mov	sl, r2
 8013808:	4453      	add	r3, sl
 801380a:	009e      	lsls	r6, r3, #2
 801380c:	19a6      	adds	r6, r4, r6
 801380e:	69f3      	ldr	r3, [r6, #28]
 8013810:	1c18      	adds	r0, r3, #0
 8013812:	9314      	str	r3, [sp, #80]	; 0x50
 8013814:	f7ed fbf0 	bl	8000ff8 <__aeabi_fsub>
 8013818:	6a33      	ldr	r3, [r6, #32]
 801381a:	4681      	mov	r9, r0
 801381c:	9905      	ldr	r1, [sp, #20]
 801381e:	1c18      	adds	r0, r3, #0
 8013820:	9315      	str	r3, [sp, #84]	; 0x54
 8013822:	f7ed fbe9 	bl	8000ff8 <__aeabi_fsub>
 8013826:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8013828:	4680      	mov	r8, r0
 801382a:	9900      	ldr	r1, [sp, #0]
 801382c:	1c18      	adds	r0, r3, #0
 801382e:	9316      	str	r3, [sp, #88]	; 0x58
 8013830:	f7ed fbe2 	bl	8000ff8 <__aeabi_fsub>
 8013834:	4649      	mov	r1, r9
 8013836:	1c07      	adds	r7, r0, #0
 8013838:	4648      	mov	r0, r9
 801383a:	f7ed fab7 	bl	8000dac <__aeabi_fmul>
 801383e:	4641      	mov	r1, r8
 8013840:	9002      	str	r0, [sp, #8]
 8013842:	4640      	mov	r0, r8
 8013844:	f7ed fab2 	bl	8000dac <__aeabi_fmul>
 8013848:	1c39      	adds	r1, r7, #0
 801384a:	9013      	str	r0, [sp, #76]	; 0x4c
 801384c:	1c38      	adds	r0, r7, #0
 801384e:	f7ed faad 	bl	8000dac <__aeabi_fmul>
 8013852:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8013854:	1c06      	adds	r6, r0, #0
 8013856:	9802      	ldr	r0, [sp, #8]
 8013858:	f7ec ff42 	bl	80006e0 <__aeabi_fadd>
 801385c:	1c31      	adds	r1, r6, #0
 801385e:	9617      	str	r6, [sp, #92]	; 0x5c
 8013860:	f7ec ff3e 	bl	80006e0 <__aeabi_fadd>
 8013864:	9902      	ldr	r1, [sp, #8]
 8013866:	1c06      	adds	r6, r0, #0
 8013868:	9806      	ldr	r0, [sp, #24]
 801386a:	f7ed fbc5 	bl	8000ff8 <__aeabi_fsub>
 801386e:	239e      	movs	r3, #158	; 0x9e
 8013870:	00db      	lsls	r3, r3, #3
 8013872:	50e0      	str	r0, [r4, r3]
 8013874:	4641      	mov	r1, r8
 8013876:	4648      	mov	r0, r9
 8013878:	f7ed fa98 	bl	8000dac <__aeabi_fmul>
 801387c:	1c01      	adds	r1, r0, #0
 801387e:	9807      	ldr	r0, [sp, #28]
 8013880:	f7ed fbba 	bl	8000ff8 <__aeabi_fsub>
 8013884:	4b37      	ldr	r3, [pc, #220]	; (8013964 <MotionFX_CM0P_MagCal_run+0xb80>)
 8013886:	1c39      	adds	r1, r7, #0
 8013888:	50e0      	str	r0, [r4, r3]
 801388a:	4648      	mov	r0, r9
 801388c:	f7ed fa8e 	bl	8000dac <__aeabi_fmul>
 8013890:	1c01      	adds	r1, r0, #0
 8013892:	9808      	ldr	r0, [sp, #32]
 8013894:	f7ed fbb0 	bl	8000ff8 <__aeabi_fsub>
 8013898:	239f      	movs	r3, #159	; 0x9f
 801389a:	00db      	lsls	r3, r3, #3
 801389c:	50e0      	str	r0, [r4, r3]
 801389e:	9914      	ldr	r1, [sp, #80]	; 0x50
 80138a0:	9804      	ldr	r0, [sp, #16]
 80138a2:	f7ed fba9 	bl	8000ff8 <__aeabi_fsub>
 80138a6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80138a8:	f7ec ff1a 	bl	80006e0 <__aeabi_fadd>
 80138ac:	4b2e      	ldr	r3, [pc, #184]	; (8013968 <MotionFX_CM0P_MagCal_run+0xb84>)
 80138ae:	4649      	mov	r1, r9
 80138b0:	50e0      	str	r0, [r4, r3]
 80138b2:	1c30      	adds	r0, r6, #0
 80138b4:	f7ed fa7a 	bl	8000dac <__aeabi_fmul>
 80138b8:	1c01      	adds	r1, r0, #0
 80138ba:	980a      	ldr	r0, [sp, #40]	; 0x28
 80138bc:	f7ed fb9c 	bl	8000ff8 <__aeabi_fsub>
 80138c0:	23a0      	movs	r3, #160	; 0xa0
 80138c2:	00db      	lsls	r3, r3, #3
 80138c4:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80138c6:	50e0      	str	r0, [r4, r3]
 80138c8:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80138ca:	f7ed fb95 	bl	8000ff8 <__aeabi_fsub>
 80138ce:	4b27      	ldr	r3, [pc, #156]	; (801396c <MotionFX_CM0P_MagCal_run+0xb88>)
 80138d0:	1c39      	adds	r1, r7, #0
 80138d2:	50e0      	str	r0, [r4, r3]
 80138d4:	4640      	mov	r0, r8
 80138d6:	f7ed fa69 	bl	8000dac <__aeabi_fmul>
 80138da:	1c01      	adds	r1, r0, #0
 80138dc:	980c      	ldr	r0, [sp, #48]	; 0x30
 80138de:	f7ed fb8b 	bl	8000ff8 <__aeabi_fsub>
 80138e2:	23a4      	movs	r3, #164	; 0xa4
 80138e4:	00db      	lsls	r3, r3, #3
 80138e6:	50e0      	str	r0, [r4, r3]
 80138e8:	9915      	ldr	r1, [sp, #84]	; 0x54
 80138ea:	9805      	ldr	r0, [sp, #20]
 80138ec:	f7ed fb84 	bl	8000ff8 <__aeabi_fsub>
 80138f0:	990d      	ldr	r1, [sp, #52]	; 0x34
 80138f2:	f7ec fef5 	bl	80006e0 <__aeabi_fadd>
 80138f6:	4b1e      	ldr	r3, [pc, #120]	; (8013970 <MotionFX_CM0P_MagCal_run+0xb8c>)
 80138f8:	4641      	mov	r1, r8
 80138fa:	50e0      	str	r0, [r4, r3]
 80138fc:	1c30      	adds	r0, r6, #0
 80138fe:	f7ed fa55 	bl	8000dac <__aeabi_fmul>
 8013902:	1c01      	adds	r1, r0, #0
 8013904:	980e      	ldr	r0, [sp, #56]	; 0x38
 8013906:	f7ed fb77 	bl	8000ff8 <__aeabi_fsub>
 801390a:	23a5      	movs	r3, #165	; 0xa5
 801390c:	00db      	lsls	r3, r3, #3
 801390e:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8013910:	50e0      	str	r0, [r4, r3]
 8013912:	9801      	ldr	r0, [sp, #4]
 8013914:	f7ed fb70 	bl	8000ff8 <__aeabi_fsub>
 8013918:	23a9      	movs	r3, #169	; 0xa9
 801391a:	00db      	lsls	r3, r3, #3
 801391c:	50e0      	str	r0, [r4, r3]
 801391e:	9916      	ldr	r1, [sp, #88]	; 0x58
 8013920:	9800      	ldr	r0, [sp, #0]
 8013922:	f7ed fb69 	bl	8000ff8 <__aeabi_fsub>
 8013926:	1c01      	adds	r1, r0, #0
 8013928:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801392a:	f7ec fed9 	bl	80006e0 <__aeabi_fadd>
 801392e:	4b11      	ldr	r3, [pc, #68]	; (8013974 <MotionFX_CM0P_MagCal_run+0xb90>)
 8013930:	1c39      	adds	r1, r7, #0
 8013932:	50e0      	str	r0, [r4, r3]
 8013934:	1c30      	adds	r0, r6, #0
 8013936:	f7ed fa39 	bl	8000dac <__aeabi_fmul>
 801393a:	1c01      	adds	r1, r0, #0
 801393c:	9810      	ldr	r0, [sp, #64]	; 0x40
 801393e:	f7ed fb5b 	bl	8000ff8 <__aeabi_fsub>
 8013942:	23aa      	movs	r3, #170	; 0xaa
 8013944:	21fe      	movs	r1, #254	; 0xfe
 8013946:	00db      	lsls	r3, r3, #3
 8013948:	50e0      	str	r0, [r4, r3]
 801394a:	0589      	lsls	r1, r1, #22
 801394c:	9811      	ldr	r0, [sp, #68]	; 0x44
 801394e:	f7ed fb53 	bl	8000ff8 <__aeabi_fsub>
 8013952:	4b09      	ldr	r3, [pc, #36]	; (8013978 <MotionFX_CM0P_MagCal_run+0xb94>)
 8013954:	1c31      	adds	r1, r6, #0
 8013956:	50e0      	str	r0, [r4, r3]
 8013958:	9812      	ldr	r0, [sp, #72]	; 0x48
 801395a:	f7ed fb4d 	bl	8000ff8 <__aeabi_fsub>
 801395e:	5160      	str	r0, [r4, r5]
 8013960:	e482      	b.n	8013268 <MotionFX_CM0P_MagCal_run+0x484>
 8013962:	46c0      	nop			; (mov r8, r8)
 8013964:	000004f4 	.word	0x000004f4
 8013968:	000004fc 	.word	0x000004fc
 801396c:	0000051c 	.word	0x0000051c
 8013970:	00000524 	.word	0x00000524
 8013974:	0000054c 	.word	0x0000054c
 8013978:	00000574 	.word	0x00000574

0801397c <MotionFX_CM0P_MagCal_getParams>:
 801397c:	4b0c      	ldr	r3, [pc, #48]	; (80139b0 <MotionFX_CM0P_MagCal_getParams+0x34>)
 801397e:	791a      	ldrb	r2, [r3, #4]
 8013980:	2a00      	cmp	r2, #0
 8013982:	d011      	beq.n	80139a8 <MotionFX_CM0P_MagCal_getParams+0x2c>
 8013984:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8013986:	6002      	str	r2, [r0, #0]
 8013988:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 801398a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801398c:	6042      	str	r2, [r0, #4]
 801398e:	6083      	str	r3, [r0, #8]
 8013990:	4b08      	ldr	r3, [pc, #32]	; (80139b4 <MotionFX_CM0P_MagCal_getParams+0x38>)
 8013992:	7f1b      	ldrb	r3, [r3, #28]
 8013994:	2b00      	cmp	r3, #0
 8013996:	d005      	beq.n	80139a4 <MotionFX_CM0P_MagCal_getParams+0x28>
 8013998:	2b01      	cmp	r3, #1
 801399a:	d006      	beq.n	80139aa <MotionFX_CM0P_MagCal_getParams+0x2e>
 801399c:	2b02      	cmp	r3, #2
 801399e:	d004      	beq.n	80139aa <MotionFX_CM0P_MagCal_getParams+0x2e>
 80139a0:	2b03      	cmp	r3, #3
 80139a2:	d002      	beq.n	80139aa <MotionFX_CM0P_MagCal_getParams+0x2e>
 80139a4:	2300      	movs	r3, #0
 80139a6:	7303      	strb	r3, [r0, #12]
 80139a8:	4770      	bx	lr
 80139aa:	7303      	strb	r3, [r0, #12]
 80139ac:	e7fc      	b.n	80139a8 <MotionFX_CM0P_MagCal_getParams+0x2c>
 80139ae:	46c0      	nop			; (mov r8, r8)
 80139b0:	200002f8 	.word	0x200002f8
 80139b4:	20000378 	.word	0x20000378

080139b8 <MotionFX_CM0P_GetLibVersion>:
 80139b8:	b570      	push	{r4, r5, r6, lr}
 80139ba:	4b0f      	ldr	r3, [pc, #60]	; (80139f8 <MotionFX_CM0P_GetLibVersion+0x40>)
 80139bc:	0005      	movs	r5, r0
 80139be:	7918      	ldrb	r0, [r3, #4]
 80139c0:	b08a      	sub	sp, #40	; 0x28
 80139c2:	2800      	cmp	r0, #0
 80139c4:	d016      	beq.n	80139f4 <MotionFX_CM0P_GetLibVersion+0x3c>
 80139c6:	ac01      	add	r4, sp, #4
 80139c8:	0022      	movs	r2, r4
 80139ca:	4b0c      	ldr	r3, [pc, #48]	; (80139fc <MotionFX_CM0P_GetLibVersion+0x44>)
 80139cc:	cb43      	ldmia	r3!, {r0, r1, r6}
 80139ce:	c243      	stmia	r2!, {r0, r1, r6}
 80139d0:	2017      	movs	r0, #23
 80139d2:	6819      	ldr	r1, [r3, #0]
 80139d4:	4468      	add	r0, sp
 80139d6:	6011      	str	r1, [r2, #0]
 80139d8:	8899      	ldrh	r1, [r3, #4]
 80139da:	8091      	strh	r1, [r2, #4]
 80139dc:	799b      	ldrb	r3, [r3, #6]
 80139de:	2100      	movs	r1, #0
 80139e0:	7193      	strb	r3, [r2, #6]
 80139e2:	2210      	movs	r2, #16
 80139e4:	f000 f83f 	bl	8013a66 <memset>
 80139e8:	2213      	movs	r2, #19
 80139ea:	0021      	movs	r1, r4
 80139ec:	0028      	movs	r0, r5
 80139ee:	f000 f831 	bl	8013a54 <memcpy>
 80139f2:	2012      	movs	r0, #18
 80139f4:	b00a      	add	sp, #40	; 0x28
 80139f6:	bd70      	pop	{r4, r5, r6, pc}
 80139f8:	200002f8 	.word	0x200002f8
 80139fc:	08015b28 	.word	0x08015b28

08013a00 <__errno>:
 8013a00:	4b01      	ldr	r3, [pc, #4]	; (8013a08 <__errno+0x8>)
 8013a02:	6818      	ldr	r0, [r3, #0]
 8013a04:	4770      	bx	lr
 8013a06:	46c0      	nop			; (mov r8, r8)
 8013a08:	20000278 	.word	0x20000278

08013a0c <__libc_init_array>:
 8013a0c:	b570      	push	{r4, r5, r6, lr}
 8013a0e:	2600      	movs	r6, #0
 8013a10:	4d0c      	ldr	r5, [pc, #48]	; (8013a44 <__libc_init_array+0x38>)
 8013a12:	4c0d      	ldr	r4, [pc, #52]	; (8013a48 <__libc_init_array+0x3c>)
 8013a14:	1b64      	subs	r4, r4, r5
 8013a16:	10a4      	asrs	r4, r4, #2
 8013a18:	42a6      	cmp	r6, r4
 8013a1a:	d109      	bne.n	8013a30 <__libc_init_array+0x24>
 8013a1c:	2600      	movs	r6, #0
 8013a1e:	f001 ffe9 	bl	80159f4 <_init>
 8013a22:	4d0a      	ldr	r5, [pc, #40]	; (8013a4c <__libc_init_array+0x40>)
 8013a24:	4c0a      	ldr	r4, [pc, #40]	; (8013a50 <__libc_init_array+0x44>)
 8013a26:	1b64      	subs	r4, r4, r5
 8013a28:	10a4      	asrs	r4, r4, #2
 8013a2a:	42a6      	cmp	r6, r4
 8013a2c:	d105      	bne.n	8013a3a <__libc_init_array+0x2e>
 8013a2e:	bd70      	pop	{r4, r5, r6, pc}
 8013a30:	00b3      	lsls	r3, r6, #2
 8013a32:	58eb      	ldr	r3, [r5, r3]
 8013a34:	4798      	blx	r3
 8013a36:	3601      	adds	r6, #1
 8013a38:	e7ee      	b.n	8013a18 <__libc_init_array+0xc>
 8013a3a:	00b3      	lsls	r3, r6, #2
 8013a3c:	58eb      	ldr	r3, [r5, r3]
 8013a3e:	4798      	blx	r3
 8013a40:	3601      	adds	r6, #1
 8013a42:	e7f2      	b.n	8013a2a <__libc_init_array+0x1e>
 8013a44:	0801679c 	.word	0x0801679c
 8013a48:	0801679c 	.word	0x0801679c
 8013a4c:	0801679c 	.word	0x0801679c
 8013a50:	080167a0 	.word	0x080167a0

08013a54 <memcpy>:
 8013a54:	2300      	movs	r3, #0
 8013a56:	b510      	push	{r4, lr}
 8013a58:	429a      	cmp	r2, r3
 8013a5a:	d100      	bne.n	8013a5e <memcpy+0xa>
 8013a5c:	bd10      	pop	{r4, pc}
 8013a5e:	5ccc      	ldrb	r4, [r1, r3]
 8013a60:	54c4      	strb	r4, [r0, r3]
 8013a62:	3301      	adds	r3, #1
 8013a64:	e7f8      	b.n	8013a58 <memcpy+0x4>

08013a66 <memset>:
 8013a66:	0003      	movs	r3, r0
 8013a68:	1882      	adds	r2, r0, r2
 8013a6a:	4293      	cmp	r3, r2
 8013a6c:	d100      	bne.n	8013a70 <memset+0xa>
 8013a6e:	4770      	bx	lr
 8013a70:	7019      	strb	r1, [r3, #0]
 8013a72:	3301      	adds	r3, #1
 8013a74:	e7f9      	b.n	8013a6a <memset+0x4>
	...

08013a78 <sniprintf>:
 8013a78:	b40c      	push	{r2, r3}
 8013a7a:	b530      	push	{r4, r5, lr}
 8013a7c:	4b17      	ldr	r3, [pc, #92]	; (8013adc <sniprintf+0x64>)
 8013a7e:	000c      	movs	r4, r1
 8013a80:	681d      	ldr	r5, [r3, #0]
 8013a82:	b09d      	sub	sp, #116	; 0x74
 8013a84:	2900      	cmp	r1, #0
 8013a86:	da08      	bge.n	8013a9a <sniprintf+0x22>
 8013a88:	238b      	movs	r3, #139	; 0x8b
 8013a8a:	2001      	movs	r0, #1
 8013a8c:	602b      	str	r3, [r5, #0]
 8013a8e:	4240      	negs	r0, r0
 8013a90:	b01d      	add	sp, #116	; 0x74
 8013a92:	bc30      	pop	{r4, r5}
 8013a94:	bc08      	pop	{r3}
 8013a96:	b002      	add	sp, #8
 8013a98:	4718      	bx	r3
 8013a9a:	2382      	movs	r3, #130	; 0x82
 8013a9c:	466a      	mov	r2, sp
 8013a9e:	009b      	lsls	r3, r3, #2
 8013aa0:	8293      	strh	r3, [r2, #20]
 8013aa2:	2300      	movs	r3, #0
 8013aa4:	9002      	str	r0, [sp, #8]
 8013aa6:	9006      	str	r0, [sp, #24]
 8013aa8:	4299      	cmp	r1, r3
 8013aaa:	d000      	beq.n	8013aae <sniprintf+0x36>
 8013aac:	1e4b      	subs	r3, r1, #1
 8013aae:	9304      	str	r3, [sp, #16]
 8013ab0:	9307      	str	r3, [sp, #28]
 8013ab2:	2301      	movs	r3, #1
 8013ab4:	466a      	mov	r2, sp
 8013ab6:	425b      	negs	r3, r3
 8013ab8:	82d3      	strh	r3, [r2, #22]
 8013aba:	0028      	movs	r0, r5
 8013abc:	ab21      	add	r3, sp, #132	; 0x84
 8013abe:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8013ac0:	a902      	add	r1, sp, #8
 8013ac2:	9301      	str	r3, [sp, #4]
 8013ac4:	f000 f86e 	bl	8013ba4 <_svfiprintf_r>
 8013ac8:	1c43      	adds	r3, r0, #1
 8013aca:	da01      	bge.n	8013ad0 <sniprintf+0x58>
 8013acc:	238b      	movs	r3, #139	; 0x8b
 8013ace:	602b      	str	r3, [r5, #0]
 8013ad0:	2c00      	cmp	r4, #0
 8013ad2:	d0dd      	beq.n	8013a90 <sniprintf+0x18>
 8013ad4:	2300      	movs	r3, #0
 8013ad6:	9a02      	ldr	r2, [sp, #8]
 8013ad8:	7013      	strb	r3, [r2, #0]
 8013ada:	e7d9      	b.n	8013a90 <sniprintf+0x18>
 8013adc:	20000278 	.word	0x20000278

08013ae0 <__ssputs_r>:
 8013ae0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013ae2:	688e      	ldr	r6, [r1, #8]
 8013ae4:	b085      	sub	sp, #20
 8013ae6:	0007      	movs	r7, r0
 8013ae8:	000c      	movs	r4, r1
 8013aea:	9203      	str	r2, [sp, #12]
 8013aec:	9301      	str	r3, [sp, #4]
 8013aee:	429e      	cmp	r6, r3
 8013af0:	d83c      	bhi.n	8013b6c <__ssputs_r+0x8c>
 8013af2:	2390      	movs	r3, #144	; 0x90
 8013af4:	898a      	ldrh	r2, [r1, #12]
 8013af6:	00db      	lsls	r3, r3, #3
 8013af8:	421a      	tst	r2, r3
 8013afa:	d034      	beq.n	8013b66 <__ssputs_r+0x86>
 8013afc:	6909      	ldr	r1, [r1, #16]
 8013afe:	6823      	ldr	r3, [r4, #0]
 8013b00:	6960      	ldr	r0, [r4, #20]
 8013b02:	1a5b      	subs	r3, r3, r1
 8013b04:	9302      	str	r3, [sp, #8]
 8013b06:	2303      	movs	r3, #3
 8013b08:	4343      	muls	r3, r0
 8013b0a:	0fdd      	lsrs	r5, r3, #31
 8013b0c:	18ed      	adds	r5, r5, r3
 8013b0e:	9b01      	ldr	r3, [sp, #4]
 8013b10:	9802      	ldr	r0, [sp, #8]
 8013b12:	3301      	adds	r3, #1
 8013b14:	181b      	adds	r3, r3, r0
 8013b16:	106d      	asrs	r5, r5, #1
 8013b18:	42ab      	cmp	r3, r5
 8013b1a:	d900      	bls.n	8013b1e <__ssputs_r+0x3e>
 8013b1c:	001d      	movs	r5, r3
 8013b1e:	0553      	lsls	r3, r2, #21
 8013b20:	d532      	bpl.n	8013b88 <__ssputs_r+0xa8>
 8013b22:	0029      	movs	r1, r5
 8013b24:	0038      	movs	r0, r7
 8013b26:	f000 fb49 	bl	80141bc <_malloc_r>
 8013b2a:	1e06      	subs	r6, r0, #0
 8013b2c:	d109      	bne.n	8013b42 <__ssputs_r+0x62>
 8013b2e:	230c      	movs	r3, #12
 8013b30:	603b      	str	r3, [r7, #0]
 8013b32:	2340      	movs	r3, #64	; 0x40
 8013b34:	2001      	movs	r0, #1
 8013b36:	89a2      	ldrh	r2, [r4, #12]
 8013b38:	4240      	negs	r0, r0
 8013b3a:	4313      	orrs	r3, r2
 8013b3c:	81a3      	strh	r3, [r4, #12]
 8013b3e:	b005      	add	sp, #20
 8013b40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013b42:	9a02      	ldr	r2, [sp, #8]
 8013b44:	6921      	ldr	r1, [r4, #16]
 8013b46:	f7ff ff85 	bl	8013a54 <memcpy>
 8013b4a:	89a3      	ldrh	r3, [r4, #12]
 8013b4c:	4a14      	ldr	r2, [pc, #80]	; (8013ba0 <__ssputs_r+0xc0>)
 8013b4e:	401a      	ands	r2, r3
 8013b50:	2380      	movs	r3, #128	; 0x80
 8013b52:	4313      	orrs	r3, r2
 8013b54:	81a3      	strh	r3, [r4, #12]
 8013b56:	9b02      	ldr	r3, [sp, #8]
 8013b58:	6126      	str	r6, [r4, #16]
 8013b5a:	18f6      	adds	r6, r6, r3
 8013b5c:	6026      	str	r6, [r4, #0]
 8013b5e:	6165      	str	r5, [r4, #20]
 8013b60:	9e01      	ldr	r6, [sp, #4]
 8013b62:	1aed      	subs	r5, r5, r3
 8013b64:	60a5      	str	r5, [r4, #8]
 8013b66:	9b01      	ldr	r3, [sp, #4]
 8013b68:	429e      	cmp	r6, r3
 8013b6a:	d900      	bls.n	8013b6e <__ssputs_r+0x8e>
 8013b6c:	9e01      	ldr	r6, [sp, #4]
 8013b6e:	0032      	movs	r2, r6
 8013b70:	9903      	ldr	r1, [sp, #12]
 8013b72:	6820      	ldr	r0, [r4, #0]
 8013b74:	f000 faa3 	bl	80140be <memmove>
 8013b78:	68a3      	ldr	r3, [r4, #8]
 8013b7a:	2000      	movs	r0, #0
 8013b7c:	1b9b      	subs	r3, r3, r6
 8013b7e:	60a3      	str	r3, [r4, #8]
 8013b80:	6823      	ldr	r3, [r4, #0]
 8013b82:	199e      	adds	r6, r3, r6
 8013b84:	6026      	str	r6, [r4, #0]
 8013b86:	e7da      	b.n	8013b3e <__ssputs_r+0x5e>
 8013b88:	002a      	movs	r2, r5
 8013b8a:	0038      	movs	r0, r7
 8013b8c:	f000 fb8c 	bl	80142a8 <_realloc_r>
 8013b90:	1e06      	subs	r6, r0, #0
 8013b92:	d1e0      	bne.n	8013b56 <__ssputs_r+0x76>
 8013b94:	0038      	movs	r0, r7
 8013b96:	6921      	ldr	r1, [r4, #16]
 8013b98:	f000 faa4 	bl	80140e4 <_free_r>
 8013b9c:	e7c7      	b.n	8013b2e <__ssputs_r+0x4e>
 8013b9e:	46c0      	nop			; (mov r8, r8)
 8013ba0:	fffffb7f 	.word	0xfffffb7f

08013ba4 <_svfiprintf_r>:
 8013ba4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013ba6:	b0a1      	sub	sp, #132	; 0x84
 8013ba8:	9003      	str	r0, [sp, #12]
 8013baa:	001d      	movs	r5, r3
 8013bac:	898b      	ldrh	r3, [r1, #12]
 8013bae:	000f      	movs	r7, r1
 8013bb0:	0016      	movs	r6, r2
 8013bb2:	061b      	lsls	r3, r3, #24
 8013bb4:	d511      	bpl.n	8013bda <_svfiprintf_r+0x36>
 8013bb6:	690b      	ldr	r3, [r1, #16]
 8013bb8:	2b00      	cmp	r3, #0
 8013bba:	d10e      	bne.n	8013bda <_svfiprintf_r+0x36>
 8013bbc:	2140      	movs	r1, #64	; 0x40
 8013bbe:	f000 fafd 	bl	80141bc <_malloc_r>
 8013bc2:	6038      	str	r0, [r7, #0]
 8013bc4:	6138      	str	r0, [r7, #16]
 8013bc6:	2800      	cmp	r0, #0
 8013bc8:	d105      	bne.n	8013bd6 <_svfiprintf_r+0x32>
 8013bca:	230c      	movs	r3, #12
 8013bcc:	9a03      	ldr	r2, [sp, #12]
 8013bce:	3801      	subs	r0, #1
 8013bd0:	6013      	str	r3, [r2, #0]
 8013bd2:	b021      	add	sp, #132	; 0x84
 8013bd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013bd6:	2340      	movs	r3, #64	; 0x40
 8013bd8:	617b      	str	r3, [r7, #20]
 8013bda:	2300      	movs	r3, #0
 8013bdc:	ac08      	add	r4, sp, #32
 8013bde:	6163      	str	r3, [r4, #20]
 8013be0:	3320      	adds	r3, #32
 8013be2:	7663      	strb	r3, [r4, #25]
 8013be4:	3310      	adds	r3, #16
 8013be6:	76a3      	strb	r3, [r4, #26]
 8013be8:	9507      	str	r5, [sp, #28]
 8013bea:	0035      	movs	r5, r6
 8013bec:	782b      	ldrb	r3, [r5, #0]
 8013bee:	2b00      	cmp	r3, #0
 8013bf0:	d001      	beq.n	8013bf6 <_svfiprintf_r+0x52>
 8013bf2:	2b25      	cmp	r3, #37	; 0x25
 8013bf4:	d147      	bne.n	8013c86 <_svfiprintf_r+0xe2>
 8013bf6:	1bab      	subs	r3, r5, r6
 8013bf8:	9305      	str	r3, [sp, #20]
 8013bfa:	42b5      	cmp	r5, r6
 8013bfc:	d00c      	beq.n	8013c18 <_svfiprintf_r+0x74>
 8013bfe:	0032      	movs	r2, r6
 8013c00:	0039      	movs	r1, r7
 8013c02:	9803      	ldr	r0, [sp, #12]
 8013c04:	f7ff ff6c 	bl	8013ae0 <__ssputs_r>
 8013c08:	1c43      	adds	r3, r0, #1
 8013c0a:	d100      	bne.n	8013c0e <_svfiprintf_r+0x6a>
 8013c0c:	e0ae      	b.n	8013d6c <_svfiprintf_r+0x1c8>
 8013c0e:	6962      	ldr	r2, [r4, #20]
 8013c10:	9b05      	ldr	r3, [sp, #20]
 8013c12:	4694      	mov	ip, r2
 8013c14:	4463      	add	r3, ip
 8013c16:	6163      	str	r3, [r4, #20]
 8013c18:	782b      	ldrb	r3, [r5, #0]
 8013c1a:	2b00      	cmp	r3, #0
 8013c1c:	d100      	bne.n	8013c20 <_svfiprintf_r+0x7c>
 8013c1e:	e0a5      	b.n	8013d6c <_svfiprintf_r+0x1c8>
 8013c20:	2201      	movs	r2, #1
 8013c22:	2300      	movs	r3, #0
 8013c24:	4252      	negs	r2, r2
 8013c26:	6062      	str	r2, [r4, #4]
 8013c28:	a904      	add	r1, sp, #16
 8013c2a:	3254      	adds	r2, #84	; 0x54
 8013c2c:	1852      	adds	r2, r2, r1
 8013c2e:	1c6e      	adds	r6, r5, #1
 8013c30:	6023      	str	r3, [r4, #0]
 8013c32:	60e3      	str	r3, [r4, #12]
 8013c34:	60a3      	str	r3, [r4, #8]
 8013c36:	7013      	strb	r3, [r2, #0]
 8013c38:	65a3      	str	r3, [r4, #88]	; 0x58
 8013c3a:	2205      	movs	r2, #5
 8013c3c:	7831      	ldrb	r1, [r6, #0]
 8013c3e:	4854      	ldr	r0, [pc, #336]	; (8013d90 <_svfiprintf_r+0x1ec>)
 8013c40:	f000 fa32 	bl	80140a8 <memchr>
 8013c44:	1c75      	adds	r5, r6, #1
 8013c46:	2800      	cmp	r0, #0
 8013c48:	d11f      	bne.n	8013c8a <_svfiprintf_r+0xe6>
 8013c4a:	6822      	ldr	r2, [r4, #0]
 8013c4c:	06d3      	lsls	r3, r2, #27
 8013c4e:	d504      	bpl.n	8013c5a <_svfiprintf_r+0xb6>
 8013c50:	2353      	movs	r3, #83	; 0x53
 8013c52:	a904      	add	r1, sp, #16
 8013c54:	185b      	adds	r3, r3, r1
 8013c56:	2120      	movs	r1, #32
 8013c58:	7019      	strb	r1, [r3, #0]
 8013c5a:	0713      	lsls	r3, r2, #28
 8013c5c:	d504      	bpl.n	8013c68 <_svfiprintf_r+0xc4>
 8013c5e:	2353      	movs	r3, #83	; 0x53
 8013c60:	a904      	add	r1, sp, #16
 8013c62:	185b      	adds	r3, r3, r1
 8013c64:	212b      	movs	r1, #43	; 0x2b
 8013c66:	7019      	strb	r1, [r3, #0]
 8013c68:	7833      	ldrb	r3, [r6, #0]
 8013c6a:	2b2a      	cmp	r3, #42	; 0x2a
 8013c6c:	d016      	beq.n	8013c9c <_svfiprintf_r+0xf8>
 8013c6e:	0035      	movs	r5, r6
 8013c70:	2100      	movs	r1, #0
 8013c72:	200a      	movs	r0, #10
 8013c74:	68e3      	ldr	r3, [r4, #12]
 8013c76:	782a      	ldrb	r2, [r5, #0]
 8013c78:	1c6e      	adds	r6, r5, #1
 8013c7a:	3a30      	subs	r2, #48	; 0x30
 8013c7c:	2a09      	cmp	r2, #9
 8013c7e:	d94e      	bls.n	8013d1e <_svfiprintf_r+0x17a>
 8013c80:	2900      	cmp	r1, #0
 8013c82:	d111      	bne.n	8013ca8 <_svfiprintf_r+0x104>
 8013c84:	e017      	b.n	8013cb6 <_svfiprintf_r+0x112>
 8013c86:	3501      	adds	r5, #1
 8013c88:	e7b0      	b.n	8013bec <_svfiprintf_r+0x48>
 8013c8a:	4b41      	ldr	r3, [pc, #260]	; (8013d90 <_svfiprintf_r+0x1ec>)
 8013c8c:	6822      	ldr	r2, [r4, #0]
 8013c8e:	1ac0      	subs	r0, r0, r3
 8013c90:	2301      	movs	r3, #1
 8013c92:	4083      	lsls	r3, r0
 8013c94:	4313      	orrs	r3, r2
 8013c96:	002e      	movs	r6, r5
 8013c98:	6023      	str	r3, [r4, #0]
 8013c9a:	e7ce      	b.n	8013c3a <_svfiprintf_r+0x96>
 8013c9c:	9b07      	ldr	r3, [sp, #28]
 8013c9e:	1d19      	adds	r1, r3, #4
 8013ca0:	681b      	ldr	r3, [r3, #0]
 8013ca2:	9107      	str	r1, [sp, #28]
 8013ca4:	2b00      	cmp	r3, #0
 8013ca6:	db01      	blt.n	8013cac <_svfiprintf_r+0x108>
 8013ca8:	930b      	str	r3, [sp, #44]	; 0x2c
 8013caa:	e004      	b.n	8013cb6 <_svfiprintf_r+0x112>
 8013cac:	425b      	negs	r3, r3
 8013cae:	60e3      	str	r3, [r4, #12]
 8013cb0:	2302      	movs	r3, #2
 8013cb2:	4313      	orrs	r3, r2
 8013cb4:	6023      	str	r3, [r4, #0]
 8013cb6:	782b      	ldrb	r3, [r5, #0]
 8013cb8:	2b2e      	cmp	r3, #46	; 0x2e
 8013cba:	d10a      	bne.n	8013cd2 <_svfiprintf_r+0x12e>
 8013cbc:	786b      	ldrb	r3, [r5, #1]
 8013cbe:	2b2a      	cmp	r3, #42	; 0x2a
 8013cc0:	d135      	bne.n	8013d2e <_svfiprintf_r+0x18a>
 8013cc2:	9b07      	ldr	r3, [sp, #28]
 8013cc4:	3502      	adds	r5, #2
 8013cc6:	1d1a      	adds	r2, r3, #4
 8013cc8:	681b      	ldr	r3, [r3, #0]
 8013cca:	9207      	str	r2, [sp, #28]
 8013ccc:	2b00      	cmp	r3, #0
 8013cce:	db2b      	blt.n	8013d28 <_svfiprintf_r+0x184>
 8013cd0:	9309      	str	r3, [sp, #36]	; 0x24
 8013cd2:	4e30      	ldr	r6, [pc, #192]	; (8013d94 <_svfiprintf_r+0x1f0>)
 8013cd4:	2203      	movs	r2, #3
 8013cd6:	0030      	movs	r0, r6
 8013cd8:	7829      	ldrb	r1, [r5, #0]
 8013cda:	f000 f9e5 	bl	80140a8 <memchr>
 8013cde:	2800      	cmp	r0, #0
 8013ce0:	d006      	beq.n	8013cf0 <_svfiprintf_r+0x14c>
 8013ce2:	2340      	movs	r3, #64	; 0x40
 8013ce4:	1b80      	subs	r0, r0, r6
 8013ce6:	4083      	lsls	r3, r0
 8013ce8:	6822      	ldr	r2, [r4, #0]
 8013cea:	3501      	adds	r5, #1
 8013cec:	4313      	orrs	r3, r2
 8013cee:	6023      	str	r3, [r4, #0]
 8013cf0:	7829      	ldrb	r1, [r5, #0]
 8013cf2:	2206      	movs	r2, #6
 8013cf4:	4828      	ldr	r0, [pc, #160]	; (8013d98 <_svfiprintf_r+0x1f4>)
 8013cf6:	1c6e      	adds	r6, r5, #1
 8013cf8:	7621      	strb	r1, [r4, #24]
 8013cfa:	f000 f9d5 	bl	80140a8 <memchr>
 8013cfe:	2800      	cmp	r0, #0
 8013d00:	d03c      	beq.n	8013d7c <_svfiprintf_r+0x1d8>
 8013d02:	4b26      	ldr	r3, [pc, #152]	; (8013d9c <_svfiprintf_r+0x1f8>)
 8013d04:	2b00      	cmp	r3, #0
 8013d06:	d125      	bne.n	8013d54 <_svfiprintf_r+0x1b0>
 8013d08:	2207      	movs	r2, #7
 8013d0a:	9b07      	ldr	r3, [sp, #28]
 8013d0c:	3307      	adds	r3, #7
 8013d0e:	4393      	bics	r3, r2
 8013d10:	3308      	adds	r3, #8
 8013d12:	9307      	str	r3, [sp, #28]
 8013d14:	6963      	ldr	r3, [r4, #20]
 8013d16:	9a04      	ldr	r2, [sp, #16]
 8013d18:	189b      	adds	r3, r3, r2
 8013d1a:	6163      	str	r3, [r4, #20]
 8013d1c:	e765      	b.n	8013bea <_svfiprintf_r+0x46>
 8013d1e:	4343      	muls	r3, r0
 8013d20:	0035      	movs	r5, r6
 8013d22:	2101      	movs	r1, #1
 8013d24:	189b      	adds	r3, r3, r2
 8013d26:	e7a6      	b.n	8013c76 <_svfiprintf_r+0xd2>
 8013d28:	2301      	movs	r3, #1
 8013d2a:	425b      	negs	r3, r3
 8013d2c:	e7d0      	b.n	8013cd0 <_svfiprintf_r+0x12c>
 8013d2e:	2300      	movs	r3, #0
 8013d30:	200a      	movs	r0, #10
 8013d32:	001a      	movs	r2, r3
 8013d34:	3501      	adds	r5, #1
 8013d36:	6063      	str	r3, [r4, #4]
 8013d38:	7829      	ldrb	r1, [r5, #0]
 8013d3a:	1c6e      	adds	r6, r5, #1
 8013d3c:	3930      	subs	r1, #48	; 0x30
 8013d3e:	2909      	cmp	r1, #9
 8013d40:	d903      	bls.n	8013d4a <_svfiprintf_r+0x1a6>
 8013d42:	2b00      	cmp	r3, #0
 8013d44:	d0c5      	beq.n	8013cd2 <_svfiprintf_r+0x12e>
 8013d46:	9209      	str	r2, [sp, #36]	; 0x24
 8013d48:	e7c3      	b.n	8013cd2 <_svfiprintf_r+0x12e>
 8013d4a:	4342      	muls	r2, r0
 8013d4c:	0035      	movs	r5, r6
 8013d4e:	2301      	movs	r3, #1
 8013d50:	1852      	adds	r2, r2, r1
 8013d52:	e7f1      	b.n	8013d38 <_svfiprintf_r+0x194>
 8013d54:	ab07      	add	r3, sp, #28
 8013d56:	9300      	str	r3, [sp, #0]
 8013d58:	003a      	movs	r2, r7
 8013d5a:	0021      	movs	r1, r4
 8013d5c:	4b10      	ldr	r3, [pc, #64]	; (8013da0 <_svfiprintf_r+0x1fc>)
 8013d5e:	9803      	ldr	r0, [sp, #12]
 8013d60:	e000      	b.n	8013d64 <_svfiprintf_r+0x1c0>
 8013d62:	bf00      	nop
 8013d64:	9004      	str	r0, [sp, #16]
 8013d66:	9b04      	ldr	r3, [sp, #16]
 8013d68:	3301      	adds	r3, #1
 8013d6a:	d1d3      	bne.n	8013d14 <_svfiprintf_r+0x170>
 8013d6c:	89bb      	ldrh	r3, [r7, #12]
 8013d6e:	980d      	ldr	r0, [sp, #52]	; 0x34
 8013d70:	065b      	lsls	r3, r3, #25
 8013d72:	d400      	bmi.n	8013d76 <_svfiprintf_r+0x1d2>
 8013d74:	e72d      	b.n	8013bd2 <_svfiprintf_r+0x2e>
 8013d76:	2001      	movs	r0, #1
 8013d78:	4240      	negs	r0, r0
 8013d7a:	e72a      	b.n	8013bd2 <_svfiprintf_r+0x2e>
 8013d7c:	ab07      	add	r3, sp, #28
 8013d7e:	9300      	str	r3, [sp, #0]
 8013d80:	003a      	movs	r2, r7
 8013d82:	0021      	movs	r1, r4
 8013d84:	4b06      	ldr	r3, [pc, #24]	; (8013da0 <_svfiprintf_r+0x1fc>)
 8013d86:	9803      	ldr	r0, [sp, #12]
 8013d88:	f000 f87c 	bl	8013e84 <_printf_i>
 8013d8c:	e7ea      	b.n	8013d64 <_svfiprintf_r+0x1c0>
 8013d8e:	46c0      	nop			; (mov r8, r8)
 8013d90:	08016358 	.word	0x08016358
 8013d94:	0801635e 	.word	0x0801635e
 8013d98:	08016362 	.word	0x08016362
 8013d9c:	00000000 	.word	0x00000000
 8013da0:	08013ae1 	.word	0x08013ae1

08013da4 <_printf_common>:
 8013da4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8013da6:	0015      	movs	r5, r2
 8013da8:	9301      	str	r3, [sp, #4]
 8013daa:	688a      	ldr	r2, [r1, #8]
 8013dac:	690b      	ldr	r3, [r1, #16]
 8013dae:	000c      	movs	r4, r1
 8013db0:	9000      	str	r0, [sp, #0]
 8013db2:	4293      	cmp	r3, r2
 8013db4:	da00      	bge.n	8013db8 <_printf_common+0x14>
 8013db6:	0013      	movs	r3, r2
 8013db8:	0022      	movs	r2, r4
 8013dba:	602b      	str	r3, [r5, #0]
 8013dbc:	3243      	adds	r2, #67	; 0x43
 8013dbe:	7812      	ldrb	r2, [r2, #0]
 8013dc0:	2a00      	cmp	r2, #0
 8013dc2:	d001      	beq.n	8013dc8 <_printf_common+0x24>
 8013dc4:	3301      	adds	r3, #1
 8013dc6:	602b      	str	r3, [r5, #0]
 8013dc8:	6823      	ldr	r3, [r4, #0]
 8013dca:	069b      	lsls	r3, r3, #26
 8013dcc:	d502      	bpl.n	8013dd4 <_printf_common+0x30>
 8013dce:	682b      	ldr	r3, [r5, #0]
 8013dd0:	3302      	adds	r3, #2
 8013dd2:	602b      	str	r3, [r5, #0]
 8013dd4:	6822      	ldr	r2, [r4, #0]
 8013dd6:	2306      	movs	r3, #6
 8013dd8:	0017      	movs	r7, r2
 8013dda:	401f      	ands	r7, r3
 8013ddc:	421a      	tst	r2, r3
 8013dde:	d027      	beq.n	8013e30 <_printf_common+0x8c>
 8013de0:	0023      	movs	r3, r4
 8013de2:	3343      	adds	r3, #67	; 0x43
 8013de4:	781b      	ldrb	r3, [r3, #0]
 8013de6:	1e5a      	subs	r2, r3, #1
 8013de8:	4193      	sbcs	r3, r2
 8013dea:	6822      	ldr	r2, [r4, #0]
 8013dec:	0692      	lsls	r2, r2, #26
 8013dee:	d430      	bmi.n	8013e52 <_printf_common+0xae>
 8013df0:	0022      	movs	r2, r4
 8013df2:	9901      	ldr	r1, [sp, #4]
 8013df4:	9800      	ldr	r0, [sp, #0]
 8013df6:	9e08      	ldr	r6, [sp, #32]
 8013df8:	3243      	adds	r2, #67	; 0x43
 8013dfa:	47b0      	blx	r6
 8013dfc:	1c43      	adds	r3, r0, #1
 8013dfe:	d025      	beq.n	8013e4c <_printf_common+0xa8>
 8013e00:	2306      	movs	r3, #6
 8013e02:	6820      	ldr	r0, [r4, #0]
 8013e04:	682a      	ldr	r2, [r5, #0]
 8013e06:	68e1      	ldr	r1, [r4, #12]
 8013e08:	2500      	movs	r5, #0
 8013e0a:	4003      	ands	r3, r0
 8013e0c:	2b04      	cmp	r3, #4
 8013e0e:	d103      	bne.n	8013e18 <_printf_common+0x74>
 8013e10:	1a8d      	subs	r5, r1, r2
 8013e12:	43eb      	mvns	r3, r5
 8013e14:	17db      	asrs	r3, r3, #31
 8013e16:	401d      	ands	r5, r3
 8013e18:	68a3      	ldr	r3, [r4, #8]
 8013e1a:	6922      	ldr	r2, [r4, #16]
 8013e1c:	4293      	cmp	r3, r2
 8013e1e:	dd01      	ble.n	8013e24 <_printf_common+0x80>
 8013e20:	1a9b      	subs	r3, r3, r2
 8013e22:	18ed      	adds	r5, r5, r3
 8013e24:	2700      	movs	r7, #0
 8013e26:	42bd      	cmp	r5, r7
 8013e28:	d120      	bne.n	8013e6c <_printf_common+0xc8>
 8013e2a:	2000      	movs	r0, #0
 8013e2c:	e010      	b.n	8013e50 <_printf_common+0xac>
 8013e2e:	3701      	adds	r7, #1
 8013e30:	68e3      	ldr	r3, [r4, #12]
 8013e32:	682a      	ldr	r2, [r5, #0]
 8013e34:	1a9b      	subs	r3, r3, r2
 8013e36:	42bb      	cmp	r3, r7
 8013e38:	ddd2      	ble.n	8013de0 <_printf_common+0x3c>
 8013e3a:	0022      	movs	r2, r4
 8013e3c:	2301      	movs	r3, #1
 8013e3e:	9901      	ldr	r1, [sp, #4]
 8013e40:	9800      	ldr	r0, [sp, #0]
 8013e42:	9e08      	ldr	r6, [sp, #32]
 8013e44:	3219      	adds	r2, #25
 8013e46:	47b0      	blx	r6
 8013e48:	1c43      	adds	r3, r0, #1
 8013e4a:	d1f0      	bne.n	8013e2e <_printf_common+0x8a>
 8013e4c:	2001      	movs	r0, #1
 8013e4e:	4240      	negs	r0, r0
 8013e50:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8013e52:	2030      	movs	r0, #48	; 0x30
 8013e54:	18e1      	adds	r1, r4, r3
 8013e56:	3143      	adds	r1, #67	; 0x43
 8013e58:	7008      	strb	r0, [r1, #0]
 8013e5a:	0021      	movs	r1, r4
 8013e5c:	1c5a      	adds	r2, r3, #1
 8013e5e:	3145      	adds	r1, #69	; 0x45
 8013e60:	7809      	ldrb	r1, [r1, #0]
 8013e62:	18a2      	adds	r2, r4, r2
 8013e64:	3243      	adds	r2, #67	; 0x43
 8013e66:	3302      	adds	r3, #2
 8013e68:	7011      	strb	r1, [r2, #0]
 8013e6a:	e7c1      	b.n	8013df0 <_printf_common+0x4c>
 8013e6c:	0022      	movs	r2, r4
 8013e6e:	2301      	movs	r3, #1
 8013e70:	9901      	ldr	r1, [sp, #4]
 8013e72:	9800      	ldr	r0, [sp, #0]
 8013e74:	9e08      	ldr	r6, [sp, #32]
 8013e76:	321a      	adds	r2, #26
 8013e78:	47b0      	blx	r6
 8013e7a:	1c43      	adds	r3, r0, #1
 8013e7c:	d0e6      	beq.n	8013e4c <_printf_common+0xa8>
 8013e7e:	3701      	adds	r7, #1
 8013e80:	e7d1      	b.n	8013e26 <_printf_common+0x82>
	...

08013e84 <_printf_i>:
 8013e84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013e86:	b08b      	sub	sp, #44	; 0x2c
 8013e88:	9206      	str	r2, [sp, #24]
 8013e8a:	000a      	movs	r2, r1
 8013e8c:	3243      	adds	r2, #67	; 0x43
 8013e8e:	9307      	str	r3, [sp, #28]
 8013e90:	9005      	str	r0, [sp, #20]
 8013e92:	9204      	str	r2, [sp, #16]
 8013e94:	7e0a      	ldrb	r2, [r1, #24]
 8013e96:	000c      	movs	r4, r1
 8013e98:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8013e9a:	2a78      	cmp	r2, #120	; 0x78
 8013e9c:	d807      	bhi.n	8013eae <_printf_i+0x2a>
 8013e9e:	2a62      	cmp	r2, #98	; 0x62
 8013ea0:	d809      	bhi.n	8013eb6 <_printf_i+0x32>
 8013ea2:	2a00      	cmp	r2, #0
 8013ea4:	d100      	bne.n	8013ea8 <_printf_i+0x24>
 8013ea6:	e0c1      	b.n	801402c <_printf_i+0x1a8>
 8013ea8:	2a58      	cmp	r2, #88	; 0x58
 8013eaa:	d100      	bne.n	8013eae <_printf_i+0x2a>
 8013eac:	e08c      	b.n	8013fc8 <_printf_i+0x144>
 8013eae:	0026      	movs	r6, r4
 8013eb0:	3642      	adds	r6, #66	; 0x42
 8013eb2:	7032      	strb	r2, [r6, #0]
 8013eb4:	e022      	b.n	8013efc <_printf_i+0x78>
 8013eb6:	0010      	movs	r0, r2
 8013eb8:	3863      	subs	r0, #99	; 0x63
 8013eba:	2815      	cmp	r0, #21
 8013ebc:	d8f7      	bhi.n	8013eae <_printf_i+0x2a>
 8013ebe:	f7ec f923 	bl	8000108 <__gnu_thumb1_case_shi>
 8013ec2:	0016      	.short	0x0016
 8013ec4:	fff6001f 	.word	0xfff6001f
 8013ec8:	fff6fff6 	.word	0xfff6fff6
 8013ecc:	001ffff6 	.word	0x001ffff6
 8013ed0:	fff6fff6 	.word	0xfff6fff6
 8013ed4:	fff6fff6 	.word	0xfff6fff6
 8013ed8:	003600a8 	.word	0x003600a8
 8013edc:	fff6009a 	.word	0xfff6009a
 8013ee0:	00b9fff6 	.word	0x00b9fff6
 8013ee4:	0036fff6 	.word	0x0036fff6
 8013ee8:	fff6fff6 	.word	0xfff6fff6
 8013eec:	009e      	.short	0x009e
 8013eee:	0026      	movs	r6, r4
 8013ef0:	681a      	ldr	r2, [r3, #0]
 8013ef2:	3642      	adds	r6, #66	; 0x42
 8013ef4:	1d11      	adds	r1, r2, #4
 8013ef6:	6019      	str	r1, [r3, #0]
 8013ef8:	6813      	ldr	r3, [r2, #0]
 8013efa:	7033      	strb	r3, [r6, #0]
 8013efc:	2301      	movs	r3, #1
 8013efe:	e0a7      	b.n	8014050 <_printf_i+0x1cc>
 8013f00:	6808      	ldr	r0, [r1, #0]
 8013f02:	6819      	ldr	r1, [r3, #0]
 8013f04:	1d0a      	adds	r2, r1, #4
 8013f06:	0605      	lsls	r5, r0, #24
 8013f08:	d50b      	bpl.n	8013f22 <_printf_i+0x9e>
 8013f0a:	680d      	ldr	r5, [r1, #0]
 8013f0c:	601a      	str	r2, [r3, #0]
 8013f0e:	2d00      	cmp	r5, #0
 8013f10:	da03      	bge.n	8013f1a <_printf_i+0x96>
 8013f12:	232d      	movs	r3, #45	; 0x2d
 8013f14:	9a04      	ldr	r2, [sp, #16]
 8013f16:	426d      	negs	r5, r5
 8013f18:	7013      	strb	r3, [r2, #0]
 8013f1a:	4b61      	ldr	r3, [pc, #388]	; (80140a0 <_printf_i+0x21c>)
 8013f1c:	270a      	movs	r7, #10
 8013f1e:	9303      	str	r3, [sp, #12]
 8013f20:	e01b      	b.n	8013f5a <_printf_i+0xd6>
 8013f22:	680d      	ldr	r5, [r1, #0]
 8013f24:	601a      	str	r2, [r3, #0]
 8013f26:	0641      	lsls	r1, r0, #25
 8013f28:	d5f1      	bpl.n	8013f0e <_printf_i+0x8a>
 8013f2a:	b22d      	sxth	r5, r5
 8013f2c:	e7ef      	b.n	8013f0e <_printf_i+0x8a>
 8013f2e:	680d      	ldr	r5, [r1, #0]
 8013f30:	6819      	ldr	r1, [r3, #0]
 8013f32:	1d08      	adds	r0, r1, #4
 8013f34:	6018      	str	r0, [r3, #0]
 8013f36:	062e      	lsls	r6, r5, #24
 8013f38:	d501      	bpl.n	8013f3e <_printf_i+0xba>
 8013f3a:	680d      	ldr	r5, [r1, #0]
 8013f3c:	e003      	b.n	8013f46 <_printf_i+0xc2>
 8013f3e:	066d      	lsls	r5, r5, #25
 8013f40:	d5fb      	bpl.n	8013f3a <_printf_i+0xb6>
 8013f42:	680d      	ldr	r5, [r1, #0]
 8013f44:	b2ad      	uxth	r5, r5
 8013f46:	4b56      	ldr	r3, [pc, #344]	; (80140a0 <_printf_i+0x21c>)
 8013f48:	2708      	movs	r7, #8
 8013f4a:	9303      	str	r3, [sp, #12]
 8013f4c:	2a6f      	cmp	r2, #111	; 0x6f
 8013f4e:	d000      	beq.n	8013f52 <_printf_i+0xce>
 8013f50:	3702      	adds	r7, #2
 8013f52:	0023      	movs	r3, r4
 8013f54:	2200      	movs	r2, #0
 8013f56:	3343      	adds	r3, #67	; 0x43
 8013f58:	701a      	strb	r2, [r3, #0]
 8013f5a:	6863      	ldr	r3, [r4, #4]
 8013f5c:	60a3      	str	r3, [r4, #8]
 8013f5e:	2b00      	cmp	r3, #0
 8013f60:	db03      	blt.n	8013f6a <_printf_i+0xe6>
 8013f62:	2204      	movs	r2, #4
 8013f64:	6821      	ldr	r1, [r4, #0]
 8013f66:	4391      	bics	r1, r2
 8013f68:	6021      	str	r1, [r4, #0]
 8013f6a:	2d00      	cmp	r5, #0
 8013f6c:	d102      	bne.n	8013f74 <_printf_i+0xf0>
 8013f6e:	9e04      	ldr	r6, [sp, #16]
 8013f70:	2b00      	cmp	r3, #0
 8013f72:	d00c      	beq.n	8013f8e <_printf_i+0x10a>
 8013f74:	9e04      	ldr	r6, [sp, #16]
 8013f76:	0028      	movs	r0, r5
 8013f78:	0039      	movs	r1, r7
 8013f7a:	f7ec f955 	bl	8000228 <__aeabi_uidivmod>
 8013f7e:	9b03      	ldr	r3, [sp, #12]
 8013f80:	3e01      	subs	r6, #1
 8013f82:	5c5b      	ldrb	r3, [r3, r1]
 8013f84:	7033      	strb	r3, [r6, #0]
 8013f86:	002b      	movs	r3, r5
 8013f88:	0005      	movs	r5, r0
 8013f8a:	429f      	cmp	r7, r3
 8013f8c:	d9f3      	bls.n	8013f76 <_printf_i+0xf2>
 8013f8e:	2f08      	cmp	r7, #8
 8013f90:	d109      	bne.n	8013fa6 <_printf_i+0x122>
 8013f92:	6823      	ldr	r3, [r4, #0]
 8013f94:	07db      	lsls	r3, r3, #31
 8013f96:	d506      	bpl.n	8013fa6 <_printf_i+0x122>
 8013f98:	6863      	ldr	r3, [r4, #4]
 8013f9a:	6922      	ldr	r2, [r4, #16]
 8013f9c:	4293      	cmp	r3, r2
 8013f9e:	dc02      	bgt.n	8013fa6 <_printf_i+0x122>
 8013fa0:	2330      	movs	r3, #48	; 0x30
 8013fa2:	3e01      	subs	r6, #1
 8013fa4:	7033      	strb	r3, [r6, #0]
 8013fa6:	9b04      	ldr	r3, [sp, #16]
 8013fa8:	1b9b      	subs	r3, r3, r6
 8013faa:	6123      	str	r3, [r4, #16]
 8013fac:	9b07      	ldr	r3, [sp, #28]
 8013fae:	0021      	movs	r1, r4
 8013fb0:	9300      	str	r3, [sp, #0]
 8013fb2:	9805      	ldr	r0, [sp, #20]
 8013fb4:	9b06      	ldr	r3, [sp, #24]
 8013fb6:	aa09      	add	r2, sp, #36	; 0x24
 8013fb8:	f7ff fef4 	bl	8013da4 <_printf_common>
 8013fbc:	1c43      	adds	r3, r0, #1
 8013fbe:	d14c      	bne.n	801405a <_printf_i+0x1d6>
 8013fc0:	2001      	movs	r0, #1
 8013fc2:	4240      	negs	r0, r0
 8013fc4:	b00b      	add	sp, #44	; 0x2c
 8013fc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013fc8:	3145      	adds	r1, #69	; 0x45
 8013fca:	700a      	strb	r2, [r1, #0]
 8013fcc:	4a34      	ldr	r2, [pc, #208]	; (80140a0 <_printf_i+0x21c>)
 8013fce:	9203      	str	r2, [sp, #12]
 8013fd0:	681a      	ldr	r2, [r3, #0]
 8013fd2:	6821      	ldr	r1, [r4, #0]
 8013fd4:	ca20      	ldmia	r2!, {r5}
 8013fd6:	601a      	str	r2, [r3, #0]
 8013fd8:	0608      	lsls	r0, r1, #24
 8013fda:	d516      	bpl.n	801400a <_printf_i+0x186>
 8013fdc:	07cb      	lsls	r3, r1, #31
 8013fde:	d502      	bpl.n	8013fe6 <_printf_i+0x162>
 8013fe0:	2320      	movs	r3, #32
 8013fe2:	4319      	orrs	r1, r3
 8013fe4:	6021      	str	r1, [r4, #0]
 8013fe6:	2710      	movs	r7, #16
 8013fe8:	2d00      	cmp	r5, #0
 8013fea:	d1b2      	bne.n	8013f52 <_printf_i+0xce>
 8013fec:	2320      	movs	r3, #32
 8013fee:	6822      	ldr	r2, [r4, #0]
 8013ff0:	439a      	bics	r2, r3
 8013ff2:	6022      	str	r2, [r4, #0]
 8013ff4:	e7ad      	b.n	8013f52 <_printf_i+0xce>
 8013ff6:	2220      	movs	r2, #32
 8013ff8:	6809      	ldr	r1, [r1, #0]
 8013ffa:	430a      	orrs	r2, r1
 8013ffc:	6022      	str	r2, [r4, #0]
 8013ffe:	0022      	movs	r2, r4
 8014000:	2178      	movs	r1, #120	; 0x78
 8014002:	3245      	adds	r2, #69	; 0x45
 8014004:	7011      	strb	r1, [r2, #0]
 8014006:	4a27      	ldr	r2, [pc, #156]	; (80140a4 <_printf_i+0x220>)
 8014008:	e7e1      	b.n	8013fce <_printf_i+0x14a>
 801400a:	0648      	lsls	r0, r1, #25
 801400c:	d5e6      	bpl.n	8013fdc <_printf_i+0x158>
 801400e:	b2ad      	uxth	r5, r5
 8014010:	e7e4      	b.n	8013fdc <_printf_i+0x158>
 8014012:	681a      	ldr	r2, [r3, #0]
 8014014:	680d      	ldr	r5, [r1, #0]
 8014016:	1d10      	adds	r0, r2, #4
 8014018:	6949      	ldr	r1, [r1, #20]
 801401a:	6018      	str	r0, [r3, #0]
 801401c:	6813      	ldr	r3, [r2, #0]
 801401e:	062e      	lsls	r6, r5, #24
 8014020:	d501      	bpl.n	8014026 <_printf_i+0x1a2>
 8014022:	6019      	str	r1, [r3, #0]
 8014024:	e002      	b.n	801402c <_printf_i+0x1a8>
 8014026:	066d      	lsls	r5, r5, #25
 8014028:	d5fb      	bpl.n	8014022 <_printf_i+0x19e>
 801402a:	8019      	strh	r1, [r3, #0]
 801402c:	2300      	movs	r3, #0
 801402e:	9e04      	ldr	r6, [sp, #16]
 8014030:	6123      	str	r3, [r4, #16]
 8014032:	e7bb      	b.n	8013fac <_printf_i+0x128>
 8014034:	681a      	ldr	r2, [r3, #0]
 8014036:	1d11      	adds	r1, r2, #4
 8014038:	6019      	str	r1, [r3, #0]
 801403a:	6816      	ldr	r6, [r2, #0]
 801403c:	2100      	movs	r1, #0
 801403e:	0030      	movs	r0, r6
 8014040:	6862      	ldr	r2, [r4, #4]
 8014042:	f000 f831 	bl	80140a8 <memchr>
 8014046:	2800      	cmp	r0, #0
 8014048:	d001      	beq.n	801404e <_printf_i+0x1ca>
 801404a:	1b80      	subs	r0, r0, r6
 801404c:	6060      	str	r0, [r4, #4]
 801404e:	6863      	ldr	r3, [r4, #4]
 8014050:	6123      	str	r3, [r4, #16]
 8014052:	2300      	movs	r3, #0
 8014054:	9a04      	ldr	r2, [sp, #16]
 8014056:	7013      	strb	r3, [r2, #0]
 8014058:	e7a8      	b.n	8013fac <_printf_i+0x128>
 801405a:	6923      	ldr	r3, [r4, #16]
 801405c:	0032      	movs	r2, r6
 801405e:	9906      	ldr	r1, [sp, #24]
 8014060:	9805      	ldr	r0, [sp, #20]
 8014062:	9d07      	ldr	r5, [sp, #28]
 8014064:	47a8      	blx	r5
 8014066:	1c43      	adds	r3, r0, #1
 8014068:	d0aa      	beq.n	8013fc0 <_printf_i+0x13c>
 801406a:	6823      	ldr	r3, [r4, #0]
 801406c:	079b      	lsls	r3, r3, #30
 801406e:	d415      	bmi.n	801409c <_printf_i+0x218>
 8014070:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014072:	68e0      	ldr	r0, [r4, #12]
 8014074:	4298      	cmp	r0, r3
 8014076:	daa5      	bge.n	8013fc4 <_printf_i+0x140>
 8014078:	0018      	movs	r0, r3
 801407a:	e7a3      	b.n	8013fc4 <_printf_i+0x140>
 801407c:	0022      	movs	r2, r4
 801407e:	2301      	movs	r3, #1
 8014080:	9906      	ldr	r1, [sp, #24]
 8014082:	9805      	ldr	r0, [sp, #20]
 8014084:	9e07      	ldr	r6, [sp, #28]
 8014086:	3219      	adds	r2, #25
 8014088:	47b0      	blx	r6
 801408a:	1c43      	adds	r3, r0, #1
 801408c:	d098      	beq.n	8013fc0 <_printf_i+0x13c>
 801408e:	3501      	adds	r5, #1
 8014090:	68e3      	ldr	r3, [r4, #12]
 8014092:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014094:	1a9b      	subs	r3, r3, r2
 8014096:	42ab      	cmp	r3, r5
 8014098:	dcf0      	bgt.n	801407c <_printf_i+0x1f8>
 801409a:	e7e9      	b.n	8014070 <_printf_i+0x1ec>
 801409c:	2500      	movs	r5, #0
 801409e:	e7f7      	b.n	8014090 <_printf_i+0x20c>
 80140a0:	08016369 	.word	0x08016369
 80140a4:	0801637a 	.word	0x0801637a

080140a8 <memchr>:
 80140a8:	b2c9      	uxtb	r1, r1
 80140aa:	1882      	adds	r2, r0, r2
 80140ac:	4290      	cmp	r0, r2
 80140ae:	d101      	bne.n	80140b4 <memchr+0xc>
 80140b0:	2000      	movs	r0, #0
 80140b2:	4770      	bx	lr
 80140b4:	7803      	ldrb	r3, [r0, #0]
 80140b6:	428b      	cmp	r3, r1
 80140b8:	d0fb      	beq.n	80140b2 <memchr+0xa>
 80140ba:	3001      	adds	r0, #1
 80140bc:	e7f6      	b.n	80140ac <memchr+0x4>

080140be <memmove>:
 80140be:	b510      	push	{r4, lr}
 80140c0:	4288      	cmp	r0, r1
 80140c2:	d902      	bls.n	80140ca <memmove+0xc>
 80140c4:	188b      	adds	r3, r1, r2
 80140c6:	4298      	cmp	r0, r3
 80140c8:	d303      	bcc.n	80140d2 <memmove+0x14>
 80140ca:	2300      	movs	r3, #0
 80140cc:	e007      	b.n	80140de <memmove+0x20>
 80140ce:	5c8b      	ldrb	r3, [r1, r2]
 80140d0:	5483      	strb	r3, [r0, r2]
 80140d2:	3a01      	subs	r2, #1
 80140d4:	d2fb      	bcs.n	80140ce <memmove+0x10>
 80140d6:	bd10      	pop	{r4, pc}
 80140d8:	5ccc      	ldrb	r4, [r1, r3]
 80140da:	54c4      	strb	r4, [r0, r3]
 80140dc:	3301      	adds	r3, #1
 80140de:	429a      	cmp	r2, r3
 80140e0:	d1fa      	bne.n	80140d8 <memmove+0x1a>
 80140e2:	e7f8      	b.n	80140d6 <memmove+0x18>

080140e4 <_free_r>:
 80140e4:	b570      	push	{r4, r5, r6, lr}
 80140e6:	0005      	movs	r5, r0
 80140e8:	2900      	cmp	r1, #0
 80140ea:	d010      	beq.n	801410e <_free_r+0x2a>
 80140ec:	1f0c      	subs	r4, r1, #4
 80140ee:	6823      	ldr	r3, [r4, #0]
 80140f0:	2b00      	cmp	r3, #0
 80140f2:	da00      	bge.n	80140f6 <_free_r+0x12>
 80140f4:	18e4      	adds	r4, r4, r3
 80140f6:	0028      	movs	r0, r5
 80140f8:	f000 f918 	bl	801432c <__malloc_lock>
 80140fc:	4a1d      	ldr	r2, [pc, #116]	; (8014174 <_free_r+0x90>)
 80140fe:	6813      	ldr	r3, [r2, #0]
 8014100:	2b00      	cmp	r3, #0
 8014102:	d105      	bne.n	8014110 <_free_r+0x2c>
 8014104:	6063      	str	r3, [r4, #4]
 8014106:	6014      	str	r4, [r2, #0]
 8014108:	0028      	movs	r0, r5
 801410a:	f000 f917 	bl	801433c <__malloc_unlock>
 801410e:	bd70      	pop	{r4, r5, r6, pc}
 8014110:	42a3      	cmp	r3, r4
 8014112:	d908      	bls.n	8014126 <_free_r+0x42>
 8014114:	6821      	ldr	r1, [r4, #0]
 8014116:	1860      	adds	r0, r4, r1
 8014118:	4283      	cmp	r3, r0
 801411a:	d1f3      	bne.n	8014104 <_free_r+0x20>
 801411c:	6818      	ldr	r0, [r3, #0]
 801411e:	685b      	ldr	r3, [r3, #4]
 8014120:	1841      	adds	r1, r0, r1
 8014122:	6021      	str	r1, [r4, #0]
 8014124:	e7ee      	b.n	8014104 <_free_r+0x20>
 8014126:	001a      	movs	r2, r3
 8014128:	685b      	ldr	r3, [r3, #4]
 801412a:	2b00      	cmp	r3, #0
 801412c:	d001      	beq.n	8014132 <_free_r+0x4e>
 801412e:	42a3      	cmp	r3, r4
 8014130:	d9f9      	bls.n	8014126 <_free_r+0x42>
 8014132:	6811      	ldr	r1, [r2, #0]
 8014134:	1850      	adds	r0, r2, r1
 8014136:	42a0      	cmp	r0, r4
 8014138:	d10b      	bne.n	8014152 <_free_r+0x6e>
 801413a:	6820      	ldr	r0, [r4, #0]
 801413c:	1809      	adds	r1, r1, r0
 801413e:	1850      	adds	r0, r2, r1
 8014140:	6011      	str	r1, [r2, #0]
 8014142:	4283      	cmp	r3, r0
 8014144:	d1e0      	bne.n	8014108 <_free_r+0x24>
 8014146:	6818      	ldr	r0, [r3, #0]
 8014148:	685b      	ldr	r3, [r3, #4]
 801414a:	1841      	adds	r1, r0, r1
 801414c:	6011      	str	r1, [r2, #0]
 801414e:	6053      	str	r3, [r2, #4]
 8014150:	e7da      	b.n	8014108 <_free_r+0x24>
 8014152:	42a0      	cmp	r0, r4
 8014154:	d902      	bls.n	801415c <_free_r+0x78>
 8014156:	230c      	movs	r3, #12
 8014158:	602b      	str	r3, [r5, #0]
 801415a:	e7d5      	b.n	8014108 <_free_r+0x24>
 801415c:	6821      	ldr	r1, [r4, #0]
 801415e:	1860      	adds	r0, r4, r1
 8014160:	4283      	cmp	r3, r0
 8014162:	d103      	bne.n	801416c <_free_r+0x88>
 8014164:	6818      	ldr	r0, [r3, #0]
 8014166:	685b      	ldr	r3, [r3, #4]
 8014168:	1841      	adds	r1, r0, r1
 801416a:	6021      	str	r1, [r4, #0]
 801416c:	6063      	str	r3, [r4, #4]
 801416e:	6054      	str	r4, [r2, #4]
 8014170:	e7ca      	b.n	8014108 <_free_r+0x24>
 8014172:	46c0      	nop			; (mov r8, r8)
 8014174:	20001654 	.word	0x20001654

08014178 <sbrk_aligned>:
 8014178:	b570      	push	{r4, r5, r6, lr}
 801417a:	4e0f      	ldr	r6, [pc, #60]	; (80141b8 <sbrk_aligned+0x40>)
 801417c:	000d      	movs	r5, r1
 801417e:	6831      	ldr	r1, [r6, #0]
 8014180:	0004      	movs	r4, r0
 8014182:	2900      	cmp	r1, #0
 8014184:	d102      	bne.n	801418c <sbrk_aligned+0x14>
 8014186:	f000 f8bf 	bl	8014308 <_sbrk_r>
 801418a:	6030      	str	r0, [r6, #0]
 801418c:	0029      	movs	r1, r5
 801418e:	0020      	movs	r0, r4
 8014190:	f000 f8ba 	bl	8014308 <_sbrk_r>
 8014194:	1c43      	adds	r3, r0, #1
 8014196:	d00a      	beq.n	80141ae <sbrk_aligned+0x36>
 8014198:	2303      	movs	r3, #3
 801419a:	1cc5      	adds	r5, r0, #3
 801419c:	439d      	bics	r5, r3
 801419e:	42a8      	cmp	r0, r5
 80141a0:	d007      	beq.n	80141b2 <sbrk_aligned+0x3a>
 80141a2:	1a29      	subs	r1, r5, r0
 80141a4:	0020      	movs	r0, r4
 80141a6:	f000 f8af 	bl	8014308 <_sbrk_r>
 80141aa:	1c43      	adds	r3, r0, #1
 80141ac:	d101      	bne.n	80141b2 <sbrk_aligned+0x3a>
 80141ae:	2501      	movs	r5, #1
 80141b0:	426d      	negs	r5, r5
 80141b2:	0028      	movs	r0, r5
 80141b4:	bd70      	pop	{r4, r5, r6, pc}
 80141b6:	46c0      	nop			; (mov r8, r8)
 80141b8:	20001658 	.word	0x20001658

080141bc <_malloc_r>:
 80141bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80141be:	2203      	movs	r2, #3
 80141c0:	1ccb      	adds	r3, r1, #3
 80141c2:	4393      	bics	r3, r2
 80141c4:	3308      	adds	r3, #8
 80141c6:	0006      	movs	r6, r0
 80141c8:	001f      	movs	r7, r3
 80141ca:	2b0c      	cmp	r3, #12
 80141cc:	d232      	bcs.n	8014234 <_malloc_r+0x78>
 80141ce:	270c      	movs	r7, #12
 80141d0:	42b9      	cmp	r1, r7
 80141d2:	d831      	bhi.n	8014238 <_malloc_r+0x7c>
 80141d4:	0030      	movs	r0, r6
 80141d6:	f000 f8a9 	bl	801432c <__malloc_lock>
 80141da:	4d32      	ldr	r5, [pc, #200]	; (80142a4 <_malloc_r+0xe8>)
 80141dc:	682b      	ldr	r3, [r5, #0]
 80141de:	001c      	movs	r4, r3
 80141e0:	2c00      	cmp	r4, #0
 80141e2:	d12e      	bne.n	8014242 <_malloc_r+0x86>
 80141e4:	0039      	movs	r1, r7
 80141e6:	0030      	movs	r0, r6
 80141e8:	f7ff ffc6 	bl	8014178 <sbrk_aligned>
 80141ec:	0004      	movs	r4, r0
 80141ee:	1c43      	adds	r3, r0, #1
 80141f0:	d11e      	bne.n	8014230 <_malloc_r+0x74>
 80141f2:	682c      	ldr	r4, [r5, #0]
 80141f4:	0025      	movs	r5, r4
 80141f6:	2d00      	cmp	r5, #0
 80141f8:	d14a      	bne.n	8014290 <_malloc_r+0xd4>
 80141fa:	6823      	ldr	r3, [r4, #0]
 80141fc:	0029      	movs	r1, r5
 80141fe:	18e3      	adds	r3, r4, r3
 8014200:	0030      	movs	r0, r6
 8014202:	9301      	str	r3, [sp, #4]
 8014204:	f000 f880 	bl	8014308 <_sbrk_r>
 8014208:	9b01      	ldr	r3, [sp, #4]
 801420a:	4283      	cmp	r3, r0
 801420c:	d143      	bne.n	8014296 <_malloc_r+0xda>
 801420e:	6823      	ldr	r3, [r4, #0]
 8014210:	3703      	adds	r7, #3
 8014212:	1aff      	subs	r7, r7, r3
 8014214:	2303      	movs	r3, #3
 8014216:	439f      	bics	r7, r3
 8014218:	3708      	adds	r7, #8
 801421a:	2f0c      	cmp	r7, #12
 801421c:	d200      	bcs.n	8014220 <_malloc_r+0x64>
 801421e:	270c      	movs	r7, #12
 8014220:	0039      	movs	r1, r7
 8014222:	0030      	movs	r0, r6
 8014224:	f7ff ffa8 	bl	8014178 <sbrk_aligned>
 8014228:	1c43      	adds	r3, r0, #1
 801422a:	d034      	beq.n	8014296 <_malloc_r+0xda>
 801422c:	6823      	ldr	r3, [r4, #0]
 801422e:	19df      	adds	r7, r3, r7
 8014230:	6027      	str	r7, [r4, #0]
 8014232:	e013      	b.n	801425c <_malloc_r+0xa0>
 8014234:	2b00      	cmp	r3, #0
 8014236:	dacb      	bge.n	80141d0 <_malloc_r+0x14>
 8014238:	230c      	movs	r3, #12
 801423a:	2500      	movs	r5, #0
 801423c:	6033      	str	r3, [r6, #0]
 801423e:	0028      	movs	r0, r5
 8014240:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8014242:	6822      	ldr	r2, [r4, #0]
 8014244:	1bd1      	subs	r1, r2, r7
 8014246:	d420      	bmi.n	801428a <_malloc_r+0xce>
 8014248:	290b      	cmp	r1, #11
 801424a:	d917      	bls.n	801427c <_malloc_r+0xc0>
 801424c:	19e2      	adds	r2, r4, r7
 801424e:	6027      	str	r7, [r4, #0]
 8014250:	42a3      	cmp	r3, r4
 8014252:	d111      	bne.n	8014278 <_malloc_r+0xbc>
 8014254:	602a      	str	r2, [r5, #0]
 8014256:	6863      	ldr	r3, [r4, #4]
 8014258:	6011      	str	r1, [r2, #0]
 801425a:	6053      	str	r3, [r2, #4]
 801425c:	0030      	movs	r0, r6
 801425e:	0025      	movs	r5, r4
 8014260:	f000 f86c 	bl	801433c <__malloc_unlock>
 8014264:	2207      	movs	r2, #7
 8014266:	350b      	adds	r5, #11
 8014268:	1d23      	adds	r3, r4, #4
 801426a:	4395      	bics	r5, r2
 801426c:	1aea      	subs	r2, r5, r3
 801426e:	429d      	cmp	r5, r3
 8014270:	d0e5      	beq.n	801423e <_malloc_r+0x82>
 8014272:	1b5b      	subs	r3, r3, r5
 8014274:	50a3      	str	r3, [r4, r2]
 8014276:	e7e2      	b.n	801423e <_malloc_r+0x82>
 8014278:	605a      	str	r2, [r3, #4]
 801427a:	e7ec      	b.n	8014256 <_malloc_r+0x9a>
 801427c:	6862      	ldr	r2, [r4, #4]
 801427e:	42a3      	cmp	r3, r4
 8014280:	d101      	bne.n	8014286 <_malloc_r+0xca>
 8014282:	602a      	str	r2, [r5, #0]
 8014284:	e7ea      	b.n	801425c <_malloc_r+0xa0>
 8014286:	605a      	str	r2, [r3, #4]
 8014288:	e7e8      	b.n	801425c <_malloc_r+0xa0>
 801428a:	0023      	movs	r3, r4
 801428c:	6864      	ldr	r4, [r4, #4]
 801428e:	e7a7      	b.n	80141e0 <_malloc_r+0x24>
 8014290:	002c      	movs	r4, r5
 8014292:	686d      	ldr	r5, [r5, #4]
 8014294:	e7af      	b.n	80141f6 <_malloc_r+0x3a>
 8014296:	230c      	movs	r3, #12
 8014298:	0030      	movs	r0, r6
 801429a:	6033      	str	r3, [r6, #0]
 801429c:	f000 f84e 	bl	801433c <__malloc_unlock>
 80142a0:	e7cd      	b.n	801423e <_malloc_r+0x82>
 80142a2:	46c0      	nop			; (mov r8, r8)
 80142a4:	20001654 	.word	0x20001654

080142a8 <_realloc_r>:
 80142a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80142aa:	0007      	movs	r7, r0
 80142ac:	000e      	movs	r6, r1
 80142ae:	0014      	movs	r4, r2
 80142b0:	2900      	cmp	r1, #0
 80142b2:	d105      	bne.n	80142c0 <_realloc_r+0x18>
 80142b4:	0011      	movs	r1, r2
 80142b6:	f7ff ff81 	bl	80141bc <_malloc_r>
 80142ba:	0005      	movs	r5, r0
 80142bc:	0028      	movs	r0, r5
 80142be:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80142c0:	2a00      	cmp	r2, #0
 80142c2:	d103      	bne.n	80142cc <_realloc_r+0x24>
 80142c4:	f7ff ff0e 	bl	80140e4 <_free_r>
 80142c8:	0025      	movs	r5, r4
 80142ca:	e7f7      	b.n	80142bc <_realloc_r+0x14>
 80142cc:	f000 f83e 	bl	801434c <_malloc_usable_size_r>
 80142d0:	9001      	str	r0, [sp, #4]
 80142d2:	4284      	cmp	r4, r0
 80142d4:	d803      	bhi.n	80142de <_realloc_r+0x36>
 80142d6:	0035      	movs	r5, r6
 80142d8:	0843      	lsrs	r3, r0, #1
 80142da:	42a3      	cmp	r3, r4
 80142dc:	d3ee      	bcc.n	80142bc <_realloc_r+0x14>
 80142de:	0021      	movs	r1, r4
 80142e0:	0038      	movs	r0, r7
 80142e2:	f7ff ff6b 	bl	80141bc <_malloc_r>
 80142e6:	1e05      	subs	r5, r0, #0
 80142e8:	d0e8      	beq.n	80142bc <_realloc_r+0x14>
 80142ea:	9b01      	ldr	r3, [sp, #4]
 80142ec:	0022      	movs	r2, r4
 80142ee:	429c      	cmp	r4, r3
 80142f0:	d900      	bls.n	80142f4 <_realloc_r+0x4c>
 80142f2:	001a      	movs	r2, r3
 80142f4:	0031      	movs	r1, r6
 80142f6:	0028      	movs	r0, r5
 80142f8:	f7ff fbac 	bl	8013a54 <memcpy>
 80142fc:	0031      	movs	r1, r6
 80142fe:	0038      	movs	r0, r7
 8014300:	f7ff fef0 	bl	80140e4 <_free_r>
 8014304:	e7da      	b.n	80142bc <_realloc_r+0x14>
	...

08014308 <_sbrk_r>:
 8014308:	2300      	movs	r3, #0
 801430a:	b570      	push	{r4, r5, r6, lr}
 801430c:	4d06      	ldr	r5, [pc, #24]	; (8014328 <_sbrk_r+0x20>)
 801430e:	0004      	movs	r4, r0
 8014310:	0008      	movs	r0, r1
 8014312:	602b      	str	r3, [r5, #0]
 8014314:	f7ed fd38 	bl	8001d88 <_sbrk>
 8014318:	1c43      	adds	r3, r0, #1
 801431a:	d103      	bne.n	8014324 <_sbrk_r+0x1c>
 801431c:	682b      	ldr	r3, [r5, #0]
 801431e:	2b00      	cmp	r3, #0
 8014320:	d000      	beq.n	8014324 <_sbrk_r+0x1c>
 8014322:	6023      	str	r3, [r4, #0]
 8014324:	bd70      	pop	{r4, r5, r6, pc}
 8014326:	46c0      	nop			; (mov r8, r8)
 8014328:	2000165c 	.word	0x2000165c

0801432c <__malloc_lock>:
 801432c:	b510      	push	{r4, lr}
 801432e:	4802      	ldr	r0, [pc, #8]	; (8014338 <__malloc_lock+0xc>)
 8014330:	f000 f814 	bl	801435c <__retarget_lock_acquire_recursive>
 8014334:	bd10      	pop	{r4, pc}
 8014336:	46c0      	nop			; (mov r8, r8)
 8014338:	20001660 	.word	0x20001660

0801433c <__malloc_unlock>:
 801433c:	b510      	push	{r4, lr}
 801433e:	4802      	ldr	r0, [pc, #8]	; (8014348 <__malloc_unlock+0xc>)
 8014340:	f000 f80d 	bl	801435e <__retarget_lock_release_recursive>
 8014344:	bd10      	pop	{r4, pc}
 8014346:	46c0      	nop			; (mov r8, r8)
 8014348:	20001660 	.word	0x20001660

0801434c <_malloc_usable_size_r>:
 801434c:	1f0b      	subs	r3, r1, #4
 801434e:	681b      	ldr	r3, [r3, #0]
 8014350:	1f18      	subs	r0, r3, #4
 8014352:	2b00      	cmp	r3, #0
 8014354:	da01      	bge.n	801435a <_malloc_usable_size_r+0xe>
 8014356:	580b      	ldr	r3, [r1, r0]
 8014358:	18c0      	adds	r0, r0, r3
 801435a:	4770      	bx	lr

0801435c <__retarget_lock_acquire_recursive>:
 801435c:	4770      	bx	lr

0801435e <__retarget_lock_release_recursive>:
 801435e:	4770      	bx	lr

08014360 <ceilf>:
 8014360:	b570      	push	{r4, r5, r6, lr}
 8014362:	0045      	lsls	r5, r0, #1
 8014364:	086e      	lsrs	r6, r5, #1
 8014366:	0e2d      	lsrs	r5, r5, #24
 8014368:	3d7f      	subs	r5, #127	; 0x7f
 801436a:	0004      	movs	r4, r0
 801436c:	2d16      	cmp	r5, #22
 801436e:	dc25      	bgt.n	80143bc <ceilf+0x5c>
 8014370:	2d00      	cmp	r5, #0
 8014372:	da0f      	bge.n	8014394 <ceilf+0x34>
 8014374:	4917      	ldr	r1, [pc, #92]	; (80143d4 <ceilf+0x74>)
 8014376:	f7ec f9b3 	bl	80006e0 <__aeabi_fadd>
 801437a:	2100      	movs	r1, #0
 801437c:	f7ec f86a 	bl	8000454 <__aeabi_fcmpgt>
 8014380:	2800      	cmp	r0, #0
 8014382:	d005      	beq.n	8014390 <ceilf+0x30>
 8014384:	2c00      	cmp	r4, #0
 8014386:	db21      	blt.n	80143cc <ceilf+0x6c>
 8014388:	2e00      	cmp	r6, #0
 801438a:	d001      	beq.n	8014390 <ceilf+0x30>
 801438c:	24fe      	movs	r4, #254	; 0xfe
 801438e:	05a4      	lsls	r4, r4, #22
 8014390:	1c20      	adds	r0, r4, #0
 8014392:	e01a      	b.n	80143ca <ceilf+0x6a>
 8014394:	4e10      	ldr	r6, [pc, #64]	; (80143d8 <ceilf+0x78>)
 8014396:	412e      	asrs	r6, r5
 8014398:	4206      	tst	r6, r0
 801439a:	d016      	beq.n	80143ca <ceilf+0x6a>
 801439c:	490d      	ldr	r1, [pc, #52]	; (80143d4 <ceilf+0x74>)
 801439e:	f7ec f99f 	bl	80006e0 <__aeabi_fadd>
 80143a2:	2100      	movs	r1, #0
 80143a4:	f7ec f856 	bl	8000454 <__aeabi_fcmpgt>
 80143a8:	2800      	cmp	r0, #0
 80143aa:	d0f1      	beq.n	8014390 <ceilf+0x30>
 80143ac:	2c00      	cmp	r4, #0
 80143ae:	dd03      	ble.n	80143b8 <ceilf+0x58>
 80143b0:	2380      	movs	r3, #128	; 0x80
 80143b2:	041b      	lsls	r3, r3, #16
 80143b4:	412b      	asrs	r3, r5
 80143b6:	18e4      	adds	r4, r4, r3
 80143b8:	43b4      	bics	r4, r6
 80143ba:	e7e9      	b.n	8014390 <ceilf+0x30>
 80143bc:	23ff      	movs	r3, #255	; 0xff
 80143be:	05db      	lsls	r3, r3, #23
 80143c0:	429e      	cmp	r6, r3
 80143c2:	d302      	bcc.n	80143ca <ceilf+0x6a>
 80143c4:	1c01      	adds	r1, r0, #0
 80143c6:	f7ec f98b 	bl	80006e0 <__aeabi_fadd>
 80143ca:	bd70      	pop	{r4, r5, r6, pc}
 80143cc:	2480      	movs	r4, #128	; 0x80
 80143ce:	0624      	lsls	r4, r4, #24
 80143d0:	e7de      	b.n	8014390 <ceilf+0x30>
 80143d2:	46c0      	nop			; (mov r8, r8)
 80143d4:	7149f2ca 	.word	0x7149f2ca
 80143d8:	007fffff 	.word	0x007fffff

080143dc <cosf>:
 80143dc:	b507      	push	{r0, r1, r2, lr}
 80143de:	4a18      	ldr	r2, [pc, #96]	; (8014440 <cosf+0x64>)
 80143e0:	0043      	lsls	r3, r0, #1
 80143e2:	2100      	movs	r1, #0
 80143e4:	085b      	lsrs	r3, r3, #1
 80143e6:	4293      	cmp	r3, r2
 80143e8:	dd14      	ble.n	8014414 <cosf+0x38>
 80143ea:	22ff      	movs	r2, #255	; 0xff
 80143ec:	05d2      	lsls	r2, r2, #23
 80143ee:	4293      	cmp	r3, r2
 80143f0:	db03      	blt.n	80143fa <cosf+0x1e>
 80143f2:	1c01      	adds	r1, r0, #0
 80143f4:	f7ec fe00 	bl	8000ff8 <__aeabi_fsub>
 80143f8:	bd0e      	pop	{r1, r2, r3, pc}
 80143fa:	4669      	mov	r1, sp
 80143fc:	f000 fbfa 	bl	8014bf4 <__ieee754_rem_pio2f>
 8014400:	2203      	movs	r2, #3
 8014402:	4002      	ands	r2, r0
 8014404:	2a01      	cmp	r2, #1
 8014406:	d008      	beq.n	801441a <cosf+0x3e>
 8014408:	2a02      	cmp	r2, #2
 801440a:	d00e      	beq.n	801442a <cosf+0x4e>
 801440c:	2a00      	cmp	r2, #0
 801440e:	d111      	bne.n	8014434 <cosf+0x58>
 8014410:	9901      	ldr	r1, [sp, #4]
 8014412:	9800      	ldr	r0, [sp, #0]
 8014414:	f000 fda2 	bl	8014f5c <__kernel_cosf>
 8014418:	e7ee      	b.n	80143f8 <cosf+0x1c>
 801441a:	9901      	ldr	r1, [sp, #4]
 801441c:	9800      	ldr	r0, [sp, #0]
 801441e:	f001 f8c5 	bl	80155ac <__kernel_sinf>
 8014422:	2380      	movs	r3, #128	; 0x80
 8014424:	061b      	lsls	r3, r3, #24
 8014426:	18c0      	adds	r0, r0, r3
 8014428:	e7e6      	b.n	80143f8 <cosf+0x1c>
 801442a:	9901      	ldr	r1, [sp, #4]
 801442c:	9800      	ldr	r0, [sp, #0]
 801442e:	f000 fd95 	bl	8014f5c <__kernel_cosf>
 8014432:	e7f6      	b.n	8014422 <cosf+0x46>
 8014434:	2201      	movs	r2, #1
 8014436:	9901      	ldr	r1, [sp, #4]
 8014438:	9800      	ldr	r0, [sp, #0]
 801443a:	f001 f8b7 	bl	80155ac <__kernel_sinf>
 801443e:	e7db      	b.n	80143f8 <cosf+0x1c>
 8014440:	3f490fd8 	.word	0x3f490fd8

08014444 <sinf>:
 8014444:	b507      	push	{r0, r1, r2, lr}
 8014446:	4a1a      	ldr	r2, [pc, #104]	; (80144b0 <sinf+0x6c>)
 8014448:	0043      	lsls	r3, r0, #1
 801444a:	085b      	lsrs	r3, r3, #1
 801444c:	4293      	cmp	r3, r2
 801444e:	dc04      	bgt.n	801445a <sinf+0x16>
 8014450:	2200      	movs	r2, #0
 8014452:	2100      	movs	r1, #0
 8014454:	f001 f8aa 	bl	80155ac <__kernel_sinf>
 8014458:	e006      	b.n	8014468 <sinf+0x24>
 801445a:	22ff      	movs	r2, #255	; 0xff
 801445c:	05d2      	lsls	r2, r2, #23
 801445e:	4293      	cmp	r3, r2
 8014460:	db03      	blt.n	801446a <sinf+0x26>
 8014462:	1c01      	adds	r1, r0, #0
 8014464:	f7ec fdc8 	bl	8000ff8 <__aeabi_fsub>
 8014468:	bd0e      	pop	{r1, r2, r3, pc}
 801446a:	4669      	mov	r1, sp
 801446c:	f000 fbc2 	bl	8014bf4 <__ieee754_rem_pio2f>
 8014470:	2303      	movs	r3, #3
 8014472:	4018      	ands	r0, r3
 8014474:	2801      	cmp	r0, #1
 8014476:	d007      	beq.n	8014488 <sinf+0x44>
 8014478:	2802      	cmp	r0, #2
 801447a:	d00a      	beq.n	8014492 <sinf+0x4e>
 801447c:	2800      	cmp	r0, #0
 801447e:	d111      	bne.n	80144a4 <sinf+0x60>
 8014480:	2201      	movs	r2, #1
 8014482:	9901      	ldr	r1, [sp, #4]
 8014484:	9800      	ldr	r0, [sp, #0]
 8014486:	e7e5      	b.n	8014454 <sinf+0x10>
 8014488:	9901      	ldr	r1, [sp, #4]
 801448a:	9800      	ldr	r0, [sp, #0]
 801448c:	f000 fd66 	bl	8014f5c <__kernel_cosf>
 8014490:	e7ea      	b.n	8014468 <sinf+0x24>
 8014492:	2201      	movs	r2, #1
 8014494:	9901      	ldr	r1, [sp, #4]
 8014496:	9800      	ldr	r0, [sp, #0]
 8014498:	f001 f888 	bl	80155ac <__kernel_sinf>
 801449c:	2380      	movs	r3, #128	; 0x80
 801449e:	061b      	lsls	r3, r3, #24
 80144a0:	18c0      	adds	r0, r0, r3
 80144a2:	e7e1      	b.n	8014468 <sinf+0x24>
 80144a4:	9901      	ldr	r1, [sp, #4]
 80144a6:	9800      	ldr	r0, [sp, #0]
 80144a8:	f000 fd58 	bl	8014f5c <__kernel_cosf>
 80144ac:	e7f6      	b.n	801449c <sinf+0x58>
 80144ae:	46c0      	nop			; (mov r8, r8)
 80144b0:	3f490fd8 	.word	0x3f490fd8

080144b4 <truncf>:
 80144b4:	15c3      	asrs	r3, r0, #23
 80144b6:	b2db      	uxtb	r3, r3
 80144b8:	3b7f      	subs	r3, #127	; 0x7f
 80144ba:	0002      	movs	r2, r0
 80144bc:	b510      	push	{r4, lr}
 80144be:	2b16      	cmp	r3, #22
 80144c0:	dc09      	bgt.n	80144d6 <truncf+0x22>
 80144c2:	2b00      	cmp	r3, #0
 80144c4:	da02      	bge.n	80144cc <truncf+0x18>
 80144c6:	0fc0      	lsrs	r0, r0, #31
 80144c8:	07c0      	lsls	r0, r0, #31
 80144ca:	bd10      	pop	{r4, pc}
 80144cc:	4905      	ldr	r1, [pc, #20]	; (80144e4 <truncf+0x30>)
 80144ce:	4119      	asrs	r1, r3
 80144d0:	438a      	bics	r2, r1
 80144d2:	0010      	movs	r0, r2
 80144d4:	e7f9      	b.n	80144ca <truncf+0x16>
 80144d6:	2b80      	cmp	r3, #128	; 0x80
 80144d8:	d1f7      	bne.n	80144ca <truncf+0x16>
 80144da:	1c01      	adds	r1, r0, #0
 80144dc:	f7ec f900 	bl	80006e0 <__aeabi_fadd>
 80144e0:	e7f3      	b.n	80144ca <truncf+0x16>
 80144e2:	46c0      	nop			; (mov r8, r8)
 80144e4:	007fffff 	.word	0x007fffff

080144e8 <acosf>:
 80144e8:	b570      	push	{r4, r5, r6, lr}
 80144ea:	1c05      	adds	r5, r0, #0
 80144ec:	f000 f85c 	bl	80145a8 <__ieee754_acosf>
 80144f0:	1c29      	adds	r1, r5, #0
 80144f2:	1c04      	adds	r4, r0, #0
 80144f4:	1c28      	adds	r0, r5, #0
 80144f6:	f7ec ff2d 	bl	8001354 <__aeabi_fcmpun>
 80144fa:	2800      	cmp	r0, #0
 80144fc:	d110      	bne.n	8014520 <acosf+0x38>
 80144fe:	1c28      	adds	r0, r5, #0
 8014500:	f001 f9d8 	bl	80158b4 <fabsf>
 8014504:	21fe      	movs	r1, #254	; 0xfe
 8014506:	0589      	lsls	r1, r1, #22
 8014508:	f7eb ffa4 	bl	8000454 <__aeabi_fcmpgt>
 801450c:	2800      	cmp	r0, #0
 801450e:	d007      	beq.n	8014520 <acosf+0x38>
 8014510:	f7ff fa76 	bl	8013a00 <__errno>
 8014514:	2321      	movs	r3, #33	; 0x21
 8014516:	6003      	str	r3, [r0, #0]
 8014518:	4802      	ldr	r0, [pc, #8]	; (8014524 <acosf+0x3c>)
 801451a:	f001 fa0d 	bl	8015938 <nanf>
 801451e:	1c04      	adds	r4, r0, #0
 8014520:	1c20      	adds	r0, r4, #0
 8014522:	bd70      	pop	{r4, r5, r6, pc}
 8014524:	0801635d 	.word	0x0801635d

08014528 <asinf>:
 8014528:	b570      	push	{r4, r5, r6, lr}
 801452a:	1c05      	adds	r5, r0, #0
 801452c:	f000 f99e 	bl	801486c <__ieee754_asinf>
 8014530:	1c29      	adds	r1, r5, #0
 8014532:	1c04      	adds	r4, r0, #0
 8014534:	1c28      	adds	r0, r5, #0
 8014536:	f7ec ff0d 	bl	8001354 <__aeabi_fcmpun>
 801453a:	2800      	cmp	r0, #0
 801453c:	d110      	bne.n	8014560 <asinf+0x38>
 801453e:	1c28      	adds	r0, r5, #0
 8014540:	f001 f9b8 	bl	80158b4 <fabsf>
 8014544:	21fe      	movs	r1, #254	; 0xfe
 8014546:	0589      	lsls	r1, r1, #22
 8014548:	f7eb ff84 	bl	8000454 <__aeabi_fcmpgt>
 801454c:	2800      	cmp	r0, #0
 801454e:	d007      	beq.n	8014560 <asinf+0x38>
 8014550:	f7ff fa56 	bl	8013a00 <__errno>
 8014554:	2321      	movs	r3, #33	; 0x21
 8014556:	6003      	str	r3, [r0, #0]
 8014558:	4802      	ldr	r0, [pc, #8]	; (8014564 <asinf+0x3c>)
 801455a:	f001 f9ed 	bl	8015938 <nanf>
 801455e:	1c04      	adds	r4, r0, #0
 8014560:	1c20      	adds	r0, r4, #0
 8014562:	bd70      	pop	{r4, r5, r6, pc}
 8014564:	0801635d 	.word	0x0801635d

08014568 <atan2f>:
 8014568:	b510      	push	{r4, lr}
 801456a:	f000 fac7 	bl	8014afc <__ieee754_atan2f>
 801456e:	bd10      	pop	{r4, pc}

08014570 <sqrtf>:
 8014570:	b570      	push	{r4, r5, r6, lr}
 8014572:	1c05      	adds	r5, r0, #0
 8014574:	f000 fc9a 	bl	8014eac <__ieee754_sqrtf>
 8014578:	1c29      	adds	r1, r5, #0
 801457a:	1c04      	adds	r4, r0, #0
 801457c:	1c28      	adds	r0, r5, #0
 801457e:	f7ec fee9 	bl	8001354 <__aeabi_fcmpun>
 8014582:	2800      	cmp	r0, #0
 8014584:	d10e      	bne.n	80145a4 <sqrtf+0x34>
 8014586:	2100      	movs	r1, #0
 8014588:	1c28      	adds	r0, r5, #0
 801458a:	f7eb ff4f 	bl	800042c <__aeabi_fcmplt>
 801458e:	2800      	cmp	r0, #0
 8014590:	d008      	beq.n	80145a4 <sqrtf+0x34>
 8014592:	f7ff fa35 	bl	8013a00 <__errno>
 8014596:	2321      	movs	r3, #33	; 0x21
 8014598:	2100      	movs	r1, #0
 801459a:	6003      	str	r3, [r0, #0]
 801459c:	1c08      	adds	r0, r1, #0
 801459e:	f7ec fa3d 	bl	8000a1c <__aeabi_fdiv>
 80145a2:	1c04      	adds	r4, r0, #0
 80145a4:	1c20      	adds	r0, r4, #0
 80145a6:	bd70      	pop	{r4, r5, r6, pc}

080145a8 <__ieee754_acosf>:
 80145a8:	21fe      	movs	r1, #254	; 0xfe
 80145aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80145ac:	0043      	lsls	r3, r0, #1
 80145ae:	1c04      	adds	r4, r0, #0
 80145b0:	085b      	lsrs	r3, r3, #1
 80145b2:	0589      	lsls	r1, r1, #22
 80145b4:	428b      	cmp	r3, r1
 80145b6:	d104      	bne.n	80145c2 <__ieee754_acosf+0x1a>
 80145b8:	2000      	movs	r0, #0
 80145ba:	2c00      	cmp	r4, #0
 80145bc:	dc00      	bgt.n	80145c0 <__ieee754_acosf+0x18>
 80145be:	489c      	ldr	r0, [pc, #624]	; (8014830 <__ieee754_acosf+0x288>)
 80145c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80145c2:	428b      	cmp	r3, r1
 80145c4:	dd06      	ble.n	80145d4 <__ieee754_acosf+0x2c>
 80145c6:	1c01      	adds	r1, r0, #0
 80145c8:	f7ec fd16 	bl	8000ff8 <__aeabi_fsub>
 80145cc:	1c01      	adds	r1, r0, #0
 80145ce:	f7ec fa25 	bl	8000a1c <__aeabi_fdiv>
 80145d2:	e7f5      	b.n	80145c0 <__ieee754_acosf+0x18>
 80145d4:	21fc      	movs	r1, #252	; 0xfc
 80145d6:	0589      	lsls	r1, r1, #22
 80145d8:	428b      	cmp	r3, r1
 80145da:	da58      	bge.n	801468e <__ieee754_acosf+0xe6>
 80145dc:	228c      	movs	r2, #140	; 0x8c
 80145de:	0592      	lsls	r2, r2, #22
 80145e0:	4293      	cmp	r3, r2
 80145e2:	dc00      	bgt.n	80145e6 <__ieee754_acosf+0x3e>
 80145e4:	e121      	b.n	801482a <__ieee754_acosf+0x282>
 80145e6:	1c01      	adds	r1, r0, #0
 80145e8:	f7ec fbe0 	bl	8000dac <__aeabi_fmul>
 80145ec:	4991      	ldr	r1, [pc, #580]	; (8014834 <__ieee754_acosf+0x28c>)
 80145ee:	1c05      	adds	r5, r0, #0
 80145f0:	f7ec fbdc 	bl	8000dac <__aeabi_fmul>
 80145f4:	4990      	ldr	r1, [pc, #576]	; (8014838 <__ieee754_acosf+0x290>)
 80145f6:	f7ec f873 	bl	80006e0 <__aeabi_fadd>
 80145fa:	1c29      	adds	r1, r5, #0
 80145fc:	f7ec fbd6 	bl	8000dac <__aeabi_fmul>
 8014600:	498e      	ldr	r1, [pc, #568]	; (801483c <__ieee754_acosf+0x294>)
 8014602:	f7ec fcf9 	bl	8000ff8 <__aeabi_fsub>
 8014606:	1c29      	adds	r1, r5, #0
 8014608:	f7ec fbd0 	bl	8000dac <__aeabi_fmul>
 801460c:	498c      	ldr	r1, [pc, #560]	; (8014840 <__ieee754_acosf+0x298>)
 801460e:	f7ec f867 	bl	80006e0 <__aeabi_fadd>
 8014612:	1c29      	adds	r1, r5, #0
 8014614:	f7ec fbca 	bl	8000dac <__aeabi_fmul>
 8014618:	498a      	ldr	r1, [pc, #552]	; (8014844 <__ieee754_acosf+0x29c>)
 801461a:	f7ec fced 	bl	8000ff8 <__aeabi_fsub>
 801461e:	1c29      	adds	r1, r5, #0
 8014620:	f7ec fbc4 	bl	8000dac <__aeabi_fmul>
 8014624:	4988      	ldr	r1, [pc, #544]	; (8014848 <__ieee754_acosf+0x2a0>)
 8014626:	f7ec f85b 	bl	80006e0 <__aeabi_fadd>
 801462a:	1c29      	adds	r1, r5, #0
 801462c:	f7ec fbbe 	bl	8000dac <__aeabi_fmul>
 8014630:	4986      	ldr	r1, [pc, #536]	; (801484c <__ieee754_acosf+0x2a4>)
 8014632:	1c06      	adds	r6, r0, #0
 8014634:	1c28      	adds	r0, r5, #0
 8014636:	f7ec fbb9 	bl	8000dac <__aeabi_fmul>
 801463a:	4985      	ldr	r1, [pc, #532]	; (8014850 <__ieee754_acosf+0x2a8>)
 801463c:	f7ec fcdc 	bl	8000ff8 <__aeabi_fsub>
 8014640:	1c29      	adds	r1, r5, #0
 8014642:	f7ec fbb3 	bl	8000dac <__aeabi_fmul>
 8014646:	4983      	ldr	r1, [pc, #524]	; (8014854 <__ieee754_acosf+0x2ac>)
 8014648:	f7ec f84a 	bl	80006e0 <__aeabi_fadd>
 801464c:	1c29      	adds	r1, r5, #0
 801464e:	f7ec fbad 	bl	8000dac <__aeabi_fmul>
 8014652:	4981      	ldr	r1, [pc, #516]	; (8014858 <__ieee754_acosf+0x2b0>)
 8014654:	f7ec fcd0 	bl	8000ff8 <__aeabi_fsub>
 8014658:	1c29      	adds	r1, r5, #0
 801465a:	f7ec fba7 	bl	8000dac <__aeabi_fmul>
 801465e:	21fe      	movs	r1, #254	; 0xfe
 8014660:	0589      	lsls	r1, r1, #22
 8014662:	f7ec f83d 	bl	80006e0 <__aeabi_fadd>
 8014666:	1c01      	adds	r1, r0, #0
 8014668:	1c30      	adds	r0, r6, #0
 801466a:	f7ec f9d7 	bl	8000a1c <__aeabi_fdiv>
 801466e:	1c21      	adds	r1, r4, #0
 8014670:	f7ec fb9c 	bl	8000dac <__aeabi_fmul>
 8014674:	1c01      	adds	r1, r0, #0
 8014676:	4879      	ldr	r0, [pc, #484]	; (801485c <__ieee754_acosf+0x2b4>)
 8014678:	f7ec fcbe 	bl	8000ff8 <__aeabi_fsub>
 801467c:	1c01      	adds	r1, r0, #0
 801467e:	1c20      	adds	r0, r4, #0
 8014680:	f7ec fcba 	bl	8000ff8 <__aeabi_fsub>
 8014684:	1c01      	adds	r1, r0, #0
 8014686:	4876      	ldr	r0, [pc, #472]	; (8014860 <__ieee754_acosf+0x2b8>)
 8014688:	f7ec fcb6 	bl	8000ff8 <__aeabi_fsub>
 801468c:	e798      	b.n	80145c0 <__ieee754_acosf+0x18>
 801468e:	2800      	cmp	r0, #0
 8014690:	da5b      	bge.n	801474a <__ieee754_acosf+0x1a2>
 8014692:	21fe      	movs	r1, #254	; 0xfe
 8014694:	0589      	lsls	r1, r1, #22
 8014696:	f7ec f823 	bl	80006e0 <__aeabi_fadd>
 801469a:	21fc      	movs	r1, #252	; 0xfc
 801469c:	0589      	lsls	r1, r1, #22
 801469e:	f7ec fb85 	bl	8000dac <__aeabi_fmul>
 80146a2:	4964      	ldr	r1, [pc, #400]	; (8014834 <__ieee754_acosf+0x28c>)
 80146a4:	1c04      	adds	r4, r0, #0
 80146a6:	f7ec fb81 	bl	8000dac <__aeabi_fmul>
 80146aa:	4963      	ldr	r1, [pc, #396]	; (8014838 <__ieee754_acosf+0x290>)
 80146ac:	f7ec f818 	bl	80006e0 <__aeabi_fadd>
 80146b0:	1c21      	adds	r1, r4, #0
 80146b2:	f7ec fb7b 	bl	8000dac <__aeabi_fmul>
 80146b6:	4961      	ldr	r1, [pc, #388]	; (801483c <__ieee754_acosf+0x294>)
 80146b8:	f7ec fc9e 	bl	8000ff8 <__aeabi_fsub>
 80146bc:	1c21      	adds	r1, r4, #0
 80146be:	f7ec fb75 	bl	8000dac <__aeabi_fmul>
 80146c2:	495f      	ldr	r1, [pc, #380]	; (8014840 <__ieee754_acosf+0x298>)
 80146c4:	f7ec f80c 	bl	80006e0 <__aeabi_fadd>
 80146c8:	1c21      	adds	r1, r4, #0
 80146ca:	f7ec fb6f 	bl	8000dac <__aeabi_fmul>
 80146ce:	495d      	ldr	r1, [pc, #372]	; (8014844 <__ieee754_acosf+0x29c>)
 80146d0:	f7ec fc92 	bl	8000ff8 <__aeabi_fsub>
 80146d4:	1c21      	adds	r1, r4, #0
 80146d6:	f7ec fb69 	bl	8000dac <__aeabi_fmul>
 80146da:	495b      	ldr	r1, [pc, #364]	; (8014848 <__ieee754_acosf+0x2a0>)
 80146dc:	f7ec f800 	bl	80006e0 <__aeabi_fadd>
 80146e0:	1c21      	adds	r1, r4, #0
 80146e2:	f7ec fb63 	bl	8000dac <__aeabi_fmul>
 80146e6:	1c06      	adds	r6, r0, #0
 80146e8:	1c20      	adds	r0, r4, #0
 80146ea:	f000 fbdf 	bl	8014eac <__ieee754_sqrtf>
 80146ee:	4957      	ldr	r1, [pc, #348]	; (801484c <__ieee754_acosf+0x2a4>)
 80146f0:	1c05      	adds	r5, r0, #0
 80146f2:	1c20      	adds	r0, r4, #0
 80146f4:	f7ec fb5a 	bl	8000dac <__aeabi_fmul>
 80146f8:	4955      	ldr	r1, [pc, #340]	; (8014850 <__ieee754_acosf+0x2a8>)
 80146fa:	f7ec fc7d 	bl	8000ff8 <__aeabi_fsub>
 80146fe:	1c21      	adds	r1, r4, #0
 8014700:	f7ec fb54 	bl	8000dac <__aeabi_fmul>
 8014704:	4953      	ldr	r1, [pc, #332]	; (8014854 <__ieee754_acosf+0x2ac>)
 8014706:	f7eb ffeb 	bl	80006e0 <__aeabi_fadd>
 801470a:	1c21      	adds	r1, r4, #0
 801470c:	f7ec fb4e 	bl	8000dac <__aeabi_fmul>
 8014710:	4951      	ldr	r1, [pc, #324]	; (8014858 <__ieee754_acosf+0x2b0>)
 8014712:	f7ec fc71 	bl	8000ff8 <__aeabi_fsub>
 8014716:	1c21      	adds	r1, r4, #0
 8014718:	f7ec fb48 	bl	8000dac <__aeabi_fmul>
 801471c:	21fe      	movs	r1, #254	; 0xfe
 801471e:	0589      	lsls	r1, r1, #22
 8014720:	f7eb ffde 	bl	80006e0 <__aeabi_fadd>
 8014724:	1c01      	adds	r1, r0, #0
 8014726:	1c30      	adds	r0, r6, #0
 8014728:	f7ec f978 	bl	8000a1c <__aeabi_fdiv>
 801472c:	1c29      	adds	r1, r5, #0
 801472e:	f7ec fb3d 	bl	8000dac <__aeabi_fmul>
 8014732:	494a      	ldr	r1, [pc, #296]	; (801485c <__ieee754_acosf+0x2b4>)
 8014734:	f7ec fc60 	bl	8000ff8 <__aeabi_fsub>
 8014738:	1c29      	adds	r1, r5, #0
 801473a:	f7eb ffd1 	bl	80006e0 <__aeabi_fadd>
 801473e:	1c01      	adds	r1, r0, #0
 8014740:	f7eb ffce 	bl	80006e0 <__aeabi_fadd>
 8014744:	1c01      	adds	r1, r0, #0
 8014746:	4847      	ldr	r0, [pc, #284]	; (8014864 <__ieee754_acosf+0x2bc>)
 8014748:	e79e      	b.n	8014688 <__ieee754_acosf+0xe0>
 801474a:	1c01      	adds	r1, r0, #0
 801474c:	20fe      	movs	r0, #254	; 0xfe
 801474e:	0580      	lsls	r0, r0, #22
 8014750:	f7ec fc52 	bl	8000ff8 <__aeabi_fsub>
 8014754:	21fc      	movs	r1, #252	; 0xfc
 8014756:	0589      	lsls	r1, r1, #22
 8014758:	f7ec fb28 	bl	8000dac <__aeabi_fmul>
 801475c:	1c04      	adds	r4, r0, #0
 801475e:	f000 fba5 	bl	8014eac <__ieee754_sqrtf>
 8014762:	4934      	ldr	r1, [pc, #208]	; (8014834 <__ieee754_acosf+0x28c>)
 8014764:	1c06      	adds	r6, r0, #0
 8014766:	0b05      	lsrs	r5, r0, #12
 8014768:	1c20      	adds	r0, r4, #0
 801476a:	f7ec fb1f 	bl	8000dac <__aeabi_fmul>
 801476e:	4932      	ldr	r1, [pc, #200]	; (8014838 <__ieee754_acosf+0x290>)
 8014770:	f7eb ffb6 	bl	80006e0 <__aeabi_fadd>
 8014774:	1c21      	adds	r1, r4, #0
 8014776:	f7ec fb19 	bl	8000dac <__aeabi_fmul>
 801477a:	4930      	ldr	r1, [pc, #192]	; (801483c <__ieee754_acosf+0x294>)
 801477c:	f7ec fc3c 	bl	8000ff8 <__aeabi_fsub>
 8014780:	1c21      	adds	r1, r4, #0
 8014782:	f7ec fb13 	bl	8000dac <__aeabi_fmul>
 8014786:	492e      	ldr	r1, [pc, #184]	; (8014840 <__ieee754_acosf+0x298>)
 8014788:	f7eb ffaa 	bl	80006e0 <__aeabi_fadd>
 801478c:	1c21      	adds	r1, r4, #0
 801478e:	f7ec fb0d 	bl	8000dac <__aeabi_fmul>
 8014792:	492c      	ldr	r1, [pc, #176]	; (8014844 <__ieee754_acosf+0x29c>)
 8014794:	f7ec fc30 	bl	8000ff8 <__aeabi_fsub>
 8014798:	1c21      	adds	r1, r4, #0
 801479a:	f7ec fb07 	bl	8000dac <__aeabi_fmul>
 801479e:	492a      	ldr	r1, [pc, #168]	; (8014848 <__ieee754_acosf+0x2a0>)
 80147a0:	f7eb ff9e 	bl	80006e0 <__aeabi_fadd>
 80147a4:	1c21      	adds	r1, r4, #0
 80147a6:	f7ec fb01 	bl	8000dac <__aeabi_fmul>
 80147aa:	4928      	ldr	r1, [pc, #160]	; (801484c <__ieee754_acosf+0x2a4>)
 80147ac:	1c07      	adds	r7, r0, #0
 80147ae:	1c20      	adds	r0, r4, #0
 80147b0:	f7ec fafc 	bl	8000dac <__aeabi_fmul>
 80147b4:	4926      	ldr	r1, [pc, #152]	; (8014850 <__ieee754_acosf+0x2a8>)
 80147b6:	f7ec fc1f 	bl	8000ff8 <__aeabi_fsub>
 80147ba:	1c21      	adds	r1, r4, #0
 80147bc:	f7ec faf6 	bl	8000dac <__aeabi_fmul>
 80147c0:	4924      	ldr	r1, [pc, #144]	; (8014854 <__ieee754_acosf+0x2ac>)
 80147c2:	f7eb ff8d 	bl	80006e0 <__aeabi_fadd>
 80147c6:	1c21      	adds	r1, r4, #0
 80147c8:	f7ec faf0 	bl	8000dac <__aeabi_fmul>
 80147cc:	4922      	ldr	r1, [pc, #136]	; (8014858 <__ieee754_acosf+0x2b0>)
 80147ce:	f7ec fc13 	bl	8000ff8 <__aeabi_fsub>
 80147d2:	1c21      	adds	r1, r4, #0
 80147d4:	f7ec faea 	bl	8000dac <__aeabi_fmul>
 80147d8:	21fe      	movs	r1, #254	; 0xfe
 80147da:	0589      	lsls	r1, r1, #22
 80147dc:	f7eb ff80 	bl	80006e0 <__aeabi_fadd>
 80147e0:	1c01      	adds	r1, r0, #0
 80147e2:	1c38      	adds	r0, r7, #0
 80147e4:	f7ec f91a 	bl	8000a1c <__aeabi_fdiv>
 80147e8:	1c31      	adds	r1, r6, #0
 80147ea:	f7ec fadf 	bl	8000dac <__aeabi_fmul>
 80147ee:	032d      	lsls	r5, r5, #12
 80147f0:	1c07      	adds	r7, r0, #0
 80147f2:	1c29      	adds	r1, r5, #0
 80147f4:	1c28      	adds	r0, r5, #0
 80147f6:	f7ec fad9 	bl	8000dac <__aeabi_fmul>
 80147fa:	1c01      	adds	r1, r0, #0
 80147fc:	1c20      	adds	r0, r4, #0
 80147fe:	f7ec fbfb 	bl	8000ff8 <__aeabi_fsub>
 8014802:	1c29      	adds	r1, r5, #0
 8014804:	1c04      	adds	r4, r0, #0
 8014806:	1c30      	adds	r0, r6, #0
 8014808:	f7eb ff6a 	bl	80006e0 <__aeabi_fadd>
 801480c:	1c01      	adds	r1, r0, #0
 801480e:	1c20      	adds	r0, r4, #0
 8014810:	f7ec f904 	bl	8000a1c <__aeabi_fdiv>
 8014814:	1c01      	adds	r1, r0, #0
 8014816:	1c38      	adds	r0, r7, #0
 8014818:	f7eb ff62 	bl	80006e0 <__aeabi_fadd>
 801481c:	1c29      	adds	r1, r5, #0
 801481e:	f7eb ff5f 	bl	80006e0 <__aeabi_fadd>
 8014822:	1c01      	adds	r1, r0, #0
 8014824:	f7eb ff5c 	bl	80006e0 <__aeabi_fadd>
 8014828:	e6ca      	b.n	80145c0 <__ieee754_acosf+0x18>
 801482a:	480f      	ldr	r0, [pc, #60]	; (8014868 <__ieee754_acosf+0x2c0>)
 801482c:	e6c8      	b.n	80145c0 <__ieee754_acosf+0x18>
 801482e:	46c0      	nop			; (mov r8, r8)
 8014830:	40490fdb 	.word	0x40490fdb
 8014834:	3811ef08 	.word	0x3811ef08
 8014838:	3a4f7f04 	.word	0x3a4f7f04
 801483c:	3d241146 	.word	0x3d241146
 8014840:	3e4e0aa8 	.word	0x3e4e0aa8
 8014844:	3ea6b090 	.word	0x3ea6b090
 8014848:	3e2aaaab 	.word	0x3e2aaaab
 801484c:	3d9dc62e 	.word	0x3d9dc62e
 8014850:	3f303361 	.word	0x3f303361
 8014854:	4001572d 	.word	0x4001572d
 8014858:	4019d139 	.word	0x4019d139
 801485c:	33a22168 	.word	0x33a22168
 8014860:	3fc90fda 	.word	0x3fc90fda
 8014864:	40490fda 	.word	0x40490fda
 8014868:	3fc90fdb 	.word	0x3fc90fdb

0801486c <__ieee754_asinf>:
 801486c:	23fe      	movs	r3, #254	; 0xfe
 801486e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014870:	0046      	lsls	r6, r0, #1
 8014872:	b085      	sub	sp, #20
 8014874:	1c04      	adds	r4, r0, #0
 8014876:	9002      	str	r0, [sp, #8]
 8014878:	0876      	lsrs	r6, r6, #1
 801487a:	059b      	lsls	r3, r3, #22
 801487c:	429e      	cmp	r6, r3
 801487e:	d10c      	bne.n	801489a <__ieee754_asinf+0x2e>
 8014880:	498e      	ldr	r1, [pc, #568]	; (8014abc <__ieee754_asinf+0x250>)
 8014882:	f7ec fa93 	bl	8000dac <__aeabi_fmul>
 8014886:	498e      	ldr	r1, [pc, #568]	; (8014ac0 <__ieee754_asinf+0x254>)
 8014888:	1c05      	adds	r5, r0, #0
 801488a:	1c20      	adds	r0, r4, #0
 801488c:	f7ec fa8e 	bl	8000dac <__aeabi_fmul>
 8014890:	1c01      	adds	r1, r0, #0
 8014892:	1c28      	adds	r0, r5, #0
 8014894:	f7eb ff24 	bl	80006e0 <__aeabi_fadd>
 8014898:	e007      	b.n	80148aa <__ieee754_asinf+0x3e>
 801489a:	429e      	cmp	r6, r3
 801489c:	dd09      	ble.n	80148b2 <__ieee754_asinf+0x46>
 801489e:	1c01      	adds	r1, r0, #0
 80148a0:	f7ec fbaa 	bl	8000ff8 <__aeabi_fsub>
 80148a4:	1c01      	adds	r1, r0, #0
 80148a6:	f7ec f8b9 	bl	8000a1c <__aeabi_fdiv>
 80148aa:	1c04      	adds	r4, r0, #0
 80148ac:	1c20      	adds	r0, r4, #0
 80148ae:	b005      	add	sp, #20
 80148b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80148b2:	23fc      	movs	r3, #252	; 0xfc
 80148b4:	059b      	lsls	r3, r3, #22
 80148b6:	429e      	cmp	r6, r3
 80148b8:	da0c      	bge.n	80148d4 <__ieee754_asinf+0x68>
 80148ba:	23c8      	movs	r3, #200	; 0xc8
 80148bc:	059b      	lsls	r3, r3, #22
 80148be:	429e      	cmp	r6, r3
 80148c0:	da76      	bge.n	80149b0 <__ieee754_asinf+0x144>
 80148c2:	4980      	ldr	r1, [pc, #512]	; (8014ac4 <__ieee754_asinf+0x258>)
 80148c4:	f7eb ff0c 	bl	80006e0 <__aeabi_fadd>
 80148c8:	21fe      	movs	r1, #254	; 0xfe
 80148ca:	0589      	lsls	r1, r1, #22
 80148cc:	f7eb fdc2 	bl	8000454 <__aeabi_fcmpgt>
 80148d0:	2800      	cmp	r0, #0
 80148d2:	d1eb      	bne.n	80148ac <__ieee754_asinf+0x40>
 80148d4:	1c20      	adds	r0, r4, #0
 80148d6:	f000 ffed 	bl	80158b4 <fabsf>
 80148da:	1c01      	adds	r1, r0, #0
 80148dc:	20fe      	movs	r0, #254	; 0xfe
 80148de:	0580      	lsls	r0, r0, #22
 80148e0:	f7ec fb8a 	bl	8000ff8 <__aeabi_fsub>
 80148e4:	21fc      	movs	r1, #252	; 0xfc
 80148e6:	0589      	lsls	r1, r1, #22
 80148e8:	f7ec fa60 	bl	8000dac <__aeabi_fmul>
 80148ec:	4976      	ldr	r1, [pc, #472]	; (8014ac8 <__ieee754_asinf+0x25c>)
 80148ee:	1c04      	adds	r4, r0, #0
 80148f0:	f7ec fa5c 	bl	8000dac <__aeabi_fmul>
 80148f4:	4975      	ldr	r1, [pc, #468]	; (8014acc <__ieee754_asinf+0x260>)
 80148f6:	f7eb fef3 	bl	80006e0 <__aeabi_fadd>
 80148fa:	1c21      	adds	r1, r4, #0
 80148fc:	f7ec fa56 	bl	8000dac <__aeabi_fmul>
 8014900:	4973      	ldr	r1, [pc, #460]	; (8014ad0 <__ieee754_asinf+0x264>)
 8014902:	f7ec fb79 	bl	8000ff8 <__aeabi_fsub>
 8014906:	1c21      	adds	r1, r4, #0
 8014908:	f7ec fa50 	bl	8000dac <__aeabi_fmul>
 801490c:	4971      	ldr	r1, [pc, #452]	; (8014ad4 <__ieee754_asinf+0x268>)
 801490e:	f7eb fee7 	bl	80006e0 <__aeabi_fadd>
 8014912:	1c21      	adds	r1, r4, #0
 8014914:	f7ec fa4a 	bl	8000dac <__aeabi_fmul>
 8014918:	496f      	ldr	r1, [pc, #444]	; (8014ad8 <__ieee754_asinf+0x26c>)
 801491a:	f7ec fb6d 	bl	8000ff8 <__aeabi_fsub>
 801491e:	1c21      	adds	r1, r4, #0
 8014920:	f7ec fa44 	bl	8000dac <__aeabi_fmul>
 8014924:	496d      	ldr	r1, [pc, #436]	; (8014adc <__ieee754_asinf+0x270>)
 8014926:	f7eb fedb 	bl	80006e0 <__aeabi_fadd>
 801492a:	1c21      	adds	r1, r4, #0
 801492c:	f7ec fa3e 	bl	8000dac <__aeabi_fmul>
 8014930:	496b      	ldr	r1, [pc, #428]	; (8014ae0 <__ieee754_asinf+0x274>)
 8014932:	9001      	str	r0, [sp, #4]
 8014934:	1c20      	adds	r0, r4, #0
 8014936:	f7ec fa39 	bl	8000dac <__aeabi_fmul>
 801493a:	496a      	ldr	r1, [pc, #424]	; (8014ae4 <__ieee754_asinf+0x278>)
 801493c:	f7ec fb5c 	bl	8000ff8 <__aeabi_fsub>
 8014940:	1c21      	adds	r1, r4, #0
 8014942:	f7ec fa33 	bl	8000dac <__aeabi_fmul>
 8014946:	4968      	ldr	r1, [pc, #416]	; (8014ae8 <__ieee754_asinf+0x27c>)
 8014948:	f7eb feca 	bl	80006e0 <__aeabi_fadd>
 801494c:	1c21      	adds	r1, r4, #0
 801494e:	f7ec fa2d 	bl	8000dac <__aeabi_fmul>
 8014952:	4966      	ldr	r1, [pc, #408]	; (8014aec <__ieee754_asinf+0x280>)
 8014954:	f7ec fb50 	bl	8000ff8 <__aeabi_fsub>
 8014958:	1c21      	adds	r1, r4, #0
 801495a:	f7ec fa27 	bl	8000dac <__aeabi_fmul>
 801495e:	21fe      	movs	r1, #254	; 0xfe
 8014960:	0589      	lsls	r1, r1, #22
 8014962:	f7eb febd 	bl	80006e0 <__aeabi_fadd>
 8014966:	1c07      	adds	r7, r0, #0
 8014968:	1c20      	adds	r0, r4, #0
 801496a:	f000 fa9f 	bl	8014eac <__ieee754_sqrtf>
 801496e:	4b60      	ldr	r3, [pc, #384]	; (8014af0 <__ieee754_asinf+0x284>)
 8014970:	1c05      	adds	r5, r0, #0
 8014972:	429e      	cmp	r6, r3
 8014974:	dd66      	ble.n	8014a44 <__ieee754_asinf+0x1d8>
 8014976:	1c39      	adds	r1, r7, #0
 8014978:	9801      	ldr	r0, [sp, #4]
 801497a:	f7ec f84f 	bl	8000a1c <__aeabi_fdiv>
 801497e:	1c29      	adds	r1, r5, #0
 8014980:	f7ec fa14 	bl	8000dac <__aeabi_fmul>
 8014984:	1c29      	adds	r1, r5, #0
 8014986:	f7eb feab 	bl	80006e0 <__aeabi_fadd>
 801498a:	1c01      	adds	r1, r0, #0
 801498c:	f7eb fea8 	bl	80006e0 <__aeabi_fadd>
 8014990:	4958      	ldr	r1, [pc, #352]	; (8014af4 <__ieee754_asinf+0x288>)
 8014992:	f7eb fea5 	bl	80006e0 <__aeabi_fadd>
 8014996:	1c01      	adds	r1, r0, #0
 8014998:	4848      	ldr	r0, [pc, #288]	; (8014abc <__ieee754_asinf+0x250>)
 801499a:	f7ec fb2d 	bl	8000ff8 <__aeabi_fsub>
 801499e:	9b02      	ldr	r3, [sp, #8]
 80149a0:	1c04      	adds	r4, r0, #0
 80149a2:	2b00      	cmp	r3, #0
 80149a4:	dd00      	ble.n	80149a8 <__ieee754_asinf+0x13c>
 80149a6:	e781      	b.n	80148ac <__ieee754_asinf+0x40>
 80149a8:	2380      	movs	r3, #128	; 0x80
 80149aa:	061b      	lsls	r3, r3, #24
 80149ac:	18c4      	adds	r4, r0, r3
 80149ae:	e77d      	b.n	80148ac <__ieee754_asinf+0x40>
 80149b0:	1c01      	adds	r1, r0, #0
 80149b2:	f7ec f9fb 	bl	8000dac <__aeabi_fmul>
 80149b6:	4944      	ldr	r1, [pc, #272]	; (8014ac8 <__ieee754_asinf+0x25c>)
 80149b8:	1c05      	adds	r5, r0, #0
 80149ba:	f7ec f9f7 	bl	8000dac <__aeabi_fmul>
 80149be:	4943      	ldr	r1, [pc, #268]	; (8014acc <__ieee754_asinf+0x260>)
 80149c0:	f7eb fe8e 	bl	80006e0 <__aeabi_fadd>
 80149c4:	1c29      	adds	r1, r5, #0
 80149c6:	f7ec f9f1 	bl	8000dac <__aeabi_fmul>
 80149ca:	4941      	ldr	r1, [pc, #260]	; (8014ad0 <__ieee754_asinf+0x264>)
 80149cc:	f7ec fb14 	bl	8000ff8 <__aeabi_fsub>
 80149d0:	1c29      	adds	r1, r5, #0
 80149d2:	f7ec f9eb 	bl	8000dac <__aeabi_fmul>
 80149d6:	493f      	ldr	r1, [pc, #252]	; (8014ad4 <__ieee754_asinf+0x268>)
 80149d8:	f7eb fe82 	bl	80006e0 <__aeabi_fadd>
 80149dc:	1c29      	adds	r1, r5, #0
 80149de:	f7ec f9e5 	bl	8000dac <__aeabi_fmul>
 80149e2:	493d      	ldr	r1, [pc, #244]	; (8014ad8 <__ieee754_asinf+0x26c>)
 80149e4:	f7ec fb08 	bl	8000ff8 <__aeabi_fsub>
 80149e8:	1c29      	adds	r1, r5, #0
 80149ea:	f7ec f9df 	bl	8000dac <__aeabi_fmul>
 80149ee:	493b      	ldr	r1, [pc, #236]	; (8014adc <__ieee754_asinf+0x270>)
 80149f0:	f7eb fe76 	bl	80006e0 <__aeabi_fadd>
 80149f4:	1c29      	adds	r1, r5, #0
 80149f6:	f7ec f9d9 	bl	8000dac <__aeabi_fmul>
 80149fa:	4939      	ldr	r1, [pc, #228]	; (8014ae0 <__ieee754_asinf+0x274>)
 80149fc:	1c06      	adds	r6, r0, #0
 80149fe:	1c28      	adds	r0, r5, #0
 8014a00:	f7ec f9d4 	bl	8000dac <__aeabi_fmul>
 8014a04:	4937      	ldr	r1, [pc, #220]	; (8014ae4 <__ieee754_asinf+0x278>)
 8014a06:	f7ec faf7 	bl	8000ff8 <__aeabi_fsub>
 8014a0a:	1c29      	adds	r1, r5, #0
 8014a0c:	f7ec f9ce 	bl	8000dac <__aeabi_fmul>
 8014a10:	4935      	ldr	r1, [pc, #212]	; (8014ae8 <__ieee754_asinf+0x27c>)
 8014a12:	f7eb fe65 	bl	80006e0 <__aeabi_fadd>
 8014a16:	1c29      	adds	r1, r5, #0
 8014a18:	f7ec f9c8 	bl	8000dac <__aeabi_fmul>
 8014a1c:	4933      	ldr	r1, [pc, #204]	; (8014aec <__ieee754_asinf+0x280>)
 8014a1e:	f7ec faeb 	bl	8000ff8 <__aeabi_fsub>
 8014a22:	1c29      	adds	r1, r5, #0
 8014a24:	f7ec f9c2 	bl	8000dac <__aeabi_fmul>
 8014a28:	21fe      	movs	r1, #254	; 0xfe
 8014a2a:	0589      	lsls	r1, r1, #22
 8014a2c:	f7eb fe58 	bl	80006e0 <__aeabi_fadd>
 8014a30:	1c01      	adds	r1, r0, #0
 8014a32:	1c30      	adds	r0, r6, #0
 8014a34:	f7eb fff2 	bl	8000a1c <__aeabi_fdiv>
 8014a38:	1c21      	adds	r1, r4, #0
 8014a3a:	f7ec f9b7 	bl	8000dac <__aeabi_fmul>
 8014a3e:	1c01      	adds	r1, r0, #0
 8014a40:	1c20      	adds	r0, r4, #0
 8014a42:	e727      	b.n	8014894 <__ieee754_asinf+0x28>
 8014a44:	1c01      	adds	r1, r0, #0
 8014a46:	0b06      	lsrs	r6, r0, #12
 8014a48:	f7eb fe4a 	bl	80006e0 <__aeabi_fadd>
 8014a4c:	1c39      	adds	r1, r7, #0
 8014a4e:	9003      	str	r0, [sp, #12]
 8014a50:	9801      	ldr	r0, [sp, #4]
 8014a52:	f7eb ffe3 	bl	8000a1c <__aeabi_fdiv>
 8014a56:	1c01      	adds	r1, r0, #0
 8014a58:	9803      	ldr	r0, [sp, #12]
 8014a5a:	f7ec f9a7 	bl	8000dac <__aeabi_fmul>
 8014a5e:	0336      	lsls	r6, r6, #12
 8014a60:	1c07      	adds	r7, r0, #0
 8014a62:	1c31      	adds	r1, r6, #0
 8014a64:	1c30      	adds	r0, r6, #0
 8014a66:	f7ec f9a1 	bl	8000dac <__aeabi_fmul>
 8014a6a:	1c01      	adds	r1, r0, #0
 8014a6c:	1c20      	adds	r0, r4, #0
 8014a6e:	f7ec fac3 	bl	8000ff8 <__aeabi_fsub>
 8014a72:	1c31      	adds	r1, r6, #0
 8014a74:	1c04      	adds	r4, r0, #0
 8014a76:	1c28      	adds	r0, r5, #0
 8014a78:	f7eb fe32 	bl	80006e0 <__aeabi_fadd>
 8014a7c:	1c01      	adds	r1, r0, #0
 8014a7e:	1c20      	adds	r0, r4, #0
 8014a80:	f7eb ffcc 	bl	8000a1c <__aeabi_fdiv>
 8014a84:	1c01      	adds	r1, r0, #0
 8014a86:	f7eb fe2b 	bl	80006e0 <__aeabi_fadd>
 8014a8a:	1c01      	adds	r1, r0, #0
 8014a8c:	480c      	ldr	r0, [pc, #48]	; (8014ac0 <__ieee754_asinf+0x254>)
 8014a8e:	f7ec fab3 	bl	8000ff8 <__aeabi_fsub>
 8014a92:	1c01      	adds	r1, r0, #0
 8014a94:	1c38      	adds	r0, r7, #0
 8014a96:	f7ec faaf 	bl	8000ff8 <__aeabi_fsub>
 8014a9a:	1c31      	adds	r1, r6, #0
 8014a9c:	1c04      	adds	r4, r0, #0
 8014a9e:	1c30      	adds	r0, r6, #0
 8014aa0:	f7eb fe1e 	bl	80006e0 <__aeabi_fadd>
 8014aa4:	1c01      	adds	r1, r0, #0
 8014aa6:	4814      	ldr	r0, [pc, #80]	; (8014af8 <__ieee754_asinf+0x28c>)
 8014aa8:	f7ec faa6 	bl	8000ff8 <__aeabi_fsub>
 8014aac:	1c01      	adds	r1, r0, #0
 8014aae:	1c20      	adds	r0, r4, #0
 8014ab0:	f7ec faa2 	bl	8000ff8 <__aeabi_fsub>
 8014ab4:	1c01      	adds	r1, r0, #0
 8014ab6:	4810      	ldr	r0, [pc, #64]	; (8014af8 <__ieee754_asinf+0x28c>)
 8014ab8:	e76f      	b.n	801499a <__ieee754_asinf+0x12e>
 8014aba:	46c0      	nop			; (mov r8, r8)
 8014abc:	3fc90fdb 	.word	0x3fc90fdb
 8014ac0:	b33bbd2e 	.word	0xb33bbd2e
 8014ac4:	7149f2ca 	.word	0x7149f2ca
 8014ac8:	3811ef08 	.word	0x3811ef08
 8014acc:	3a4f7f04 	.word	0x3a4f7f04
 8014ad0:	3d241146 	.word	0x3d241146
 8014ad4:	3e4e0aa8 	.word	0x3e4e0aa8
 8014ad8:	3ea6b090 	.word	0x3ea6b090
 8014adc:	3e2aaaab 	.word	0x3e2aaaab
 8014ae0:	3d9dc62e 	.word	0x3d9dc62e
 8014ae4:	3f303361 	.word	0x3f303361
 8014ae8:	4001572d 	.word	0x4001572d
 8014aec:	4019d139 	.word	0x4019d139
 8014af0:	3f799999 	.word	0x3f799999
 8014af4:	333bbd2e 	.word	0x333bbd2e
 8014af8:	3f490fdb 	.word	0x3f490fdb

08014afc <__ieee754_atan2f>:
 8014afc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8014afe:	25ff      	movs	r5, #255	; 0xff
 8014b00:	004a      	lsls	r2, r1, #1
 8014b02:	9101      	str	r1, [sp, #4]
 8014b04:	0852      	lsrs	r2, r2, #1
 8014b06:	05ed      	lsls	r5, r5, #23
 8014b08:	42aa      	cmp	r2, r5
 8014b0a:	dc04      	bgt.n	8014b16 <__ieee754_atan2f+0x1a>
 8014b0c:	0043      	lsls	r3, r0, #1
 8014b0e:	0007      	movs	r7, r0
 8014b10:	085b      	lsrs	r3, r3, #1
 8014b12:	42ab      	cmp	r3, r5
 8014b14:	dd02      	ble.n	8014b1c <__ieee754_atan2f+0x20>
 8014b16:	f7eb fde3 	bl	80006e0 <__aeabi_fadd>
 8014b1a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8014b1c:	24fe      	movs	r4, #254	; 0xfe
 8014b1e:	05a4      	lsls	r4, r4, #22
 8014b20:	42a1      	cmp	r1, r4
 8014b22:	d102      	bne.n	8014b2a <__ieee754_atan2f+0x2e>
 8014b24:	f000 fdb6 	bl	8015694 <atanf>
 8014b28:	e7f7      	b.n	8014b1a <__ieee754_atan2f+0x1e>
 8014b2a:	2602      	movs	r6, #2
 8014b2c:	178c      	asrs	r4, r1, #30
 8014b2e:	4034      	ands	r4, r6
 8014b30:	0fc6      	lsrs	r6, r0, #31
 8014b32:	4334      	orrs	r4, r6
 8014b34:	2b00      	cmp	r3, #0
 8014b36:	d105      	bne.n	8014b44 <__ieee754_atan2f+0x48>
 8014b38:	2c02      	cmp	r4, #2
 8014b3a:	d045      	beq.n	8014bc8 <__ieee754_atan2f+0xcc>
 8014b3c:	2c03      	cmp	r4, #3
 8014b3e:	d1ec      	bne.n	8014b1a <__ieee754_atan2f+0x1e>
 8014b40:	4824      	ldr	r0, [pc, #144]	; (8014bd4 <__ieee754_atan2f+0xd8>)
 8014b42:	e7ea      	b.n	8014b1a <__ieee754_atan2f+0x1e>
 8014b44:	2a00      	cmp	r2, #0
 8014b46:	d103      	bne.n	8014b50 <__ieee754_atan2f+0x54>
 8014b48:	2f00      	cmp	r7, #0
 8014b4a:	da41      	bge.n	8014bd0 <__ieee754_atan2f+0xd4>
 8014b4c:	4822      	ldr	r0, [pc, #136]	; (8014bd8 <__ieee754_atan2f+0xdc>)
 8014b4e:	e7e4      	b.n	8014b1a <__ieee754_atan2f+0x1e>
 8014b50:	42aa      	cmp	r2, r5
 8014b52:	d10e      	bne.n	8014b72 <__ieee754_atan2f+0x76>
 8014b54:	3c01      	subs	r4, #1
 8014b56:	4293      	cmp	r3, r2
 8014b58:	d105      	bne.n	8014b66 <__ieee754_atan2f+0x6a>
 8014b5a:	2c02      	cmp	r4, #2
 8014b5c:	d836      	bhi.n	8014bcc <__ieee754_atan2f+0xd0>
 8014b5e:	4b1f      	ldr	r3, [pc, #124]	; (8014bdc <__ieee754_atan2f+0xe0>)
 8014b60:	00a4      	lsls	r4, r4, #2
 8014b62:	58e0      	ldr	r0, [r4, r3]
 8014b64:	e7d9      	b.n	8014b1a <__ieee754_atan2f+0x1e>
 8014b66:	2000      	movs	r0, #0
 8014b68:	2c02      	cmp	r4, #2
 8014b6a:	d8d6      	bhi.n	8014b1a <__ieee754_atan2f+0x1e>
 8014b6c:	4b1c      	ldr	r3, [pc, #112]	; (8014be0 <__ieee754_atan2f+0xe4>)
 8014b6e:	00a4      	lsls	r4, r4, #2
 8014b70:	e7f7      	b.n	8014b62 <__ieee754_atan2f+0x66>
 8014b72:	42ab      	cmp	r3, r5
 8014b74:	d0e8      	beq.n	8014b48 <__ieee754_atan2f+0x4c>
 8014b76:	1a9b      	subs	r3, r3, r2
 8014b78:	15db      	asrs	r3, r3, #23
 8014b7a:	2b3c      	cmp	r3, #60	; 0x3c
 8014b7c:	dc14      	bgt.n	8014ba8 <__ieee754_atan2f+0xac>
 8014b7e:	2900      	cmp	r1, #0
 8014b80:	da01      	bge.n	8014b86 <__ieee754_atan2f+0x8a>
 8014b82:	333c      	adds	r3, #60	; 0x3c
 8014b84:	db12      	blt.n	8014bac <__ieee754_atan2f+0xb0>
 8014b86:	f7eb ff49 	bl	8000a1c <__aeabi_fdiv>
 8014b8a:	f000 fe93 	bl	80158b4 <fabsf>
 8014b8e:	f000 fd81 	bl	8015694 <atanf>
 8014b92:	2c01      	cmp	r4, #1
 8014b94:	d00c      	beq.n	8014bb0 <__ieee754_atan2f+0xb4>
 8014b96:	2c02      	cmp	r4, #2
 8014b98:	d00e      	beq.n	8014bb8 <__ieee754_atan2f+0xbc>
 8014b9a:	2c00      	cmp	r4, #0
 8014b9c:	d0bd      	beq.n	8014b1a <__ieee754_atan2f+0x1e>
 8014b9e:	4911      	ldr	r1, [pc, #68]	; (8014be4 <__ieee754_atan2f+0xe8>)
 8014ba0:	f7eb fd9e 	bl	80006e0 <__aeabi_fadd>
 8014ba4:	4910      	ldr	r1, [pc, #64]	; (8014be8 <__ieee754_atan2f+0xec>)
 8014ba6:	e00c      	b.n	8014bc2 <__ieee754_atan2f+0xc6>
 8014ba8:	4810      	ldr	r0, [pc, #64]	; (8014bec <__ieee754_atan2f+0xf0>)
 8014baa:	e7f2      	b.n	8014b92 <__ieee754_atan2f+0x96>
 8014bac:	2000      	movs	r0, #0
 8014bae:	e7f0      	b.n	8014b92 <__ieee754_atan2f+0x96>
 8014bb0:	2380      	movs	r3, #128	; 0x80
 8014bb2:	061b      	lsls	r3, r3, #24
 8014bb4:	18c0      	adds	r0, r0, r3
 8014bb6:	e7b0      	b.n	8014b1a <__ieee754_atan2f+0x1e>
 8014bb8:	490a      	ldr	r1, [pc, #40]	; (8014be4 <__ieee754_atan2f+0xe8>)
 8014bba:	f7eb fd91 	bl	80006e0 <__aeabi_fadd>
 8014bbe:	1c01      	adds	r1, r0, #0
 8014bc0:	4809      	ldr	r0, [pc, #36]	; (8014be8 <__ieee754_atan2f+0xec>)
 8014bc2:	f7ec fa19 	bl	8000ff8 <__aeabi_fsub>
 8014bc6:	e7a8      	b.n	8014b1a <__ieee754_atan2f+0x1e>
 8014bc8:	4807      	ldr	r0, [pc, #28]	; (8014be8 <__ieee754_atan2f+0xec>)
 8014bca:	e7a6      	b.n	8014b1a <__ieee754_atan2f+0x1e>
 8014bcc:	4808      	ldr	r0, [pc, #32]	; (8014bf0 <__ieee754_atan2f+0xf4>)
 8014bce:	e7a4      	b.n	8014b1a <__ieee754_atan2f+0x1e>
 8014bd0:	4806      	ldr	r0, [pc, #24]	; (8014bec <__ieee754_atan2f+0xf0>)
 8014bd2:	e7a2      	b.n	8014b1a <__ieee754_atan2f+0x1e>
 8014bd4:	c0490fdb 	.word	0xc0490fdb
 8014bd8:	bfc90fdb 	.word	0xbfc90fdb
 8014bdc:	0801638c 	.word	0x0801638c
 8014be0:	08016398 	.word	0x08016398
 8014be4:	33bbbd2e 	.word	0x33bbbd2e
 8014be8:	40490fdb 	.word	0x40490fdb
 8014bec:	3fc90fdb 	.word	0x3fc90fdb
 8014bf0:	3f490fdb 	.word	0x3f490fdb

08014bf4 <__ieee754_rem_pio2f>:
 8014bf4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014bf6:	4ba0      	ldr	r3, [pc, #640]	; (8014e78 <__ieee754_rem_pio2f+0x284>)
 8014bf8:	b08b      	sub	sp, #44	; 0x2c
 8014bfa:	0045      	lsls	r5, r0, #1
 8014bfc:	000c      	movs	r4, r1
 8014bfe:	9005      	str	r0, [sp, #20]
 8014c00:	086d      	lsrs	r5, r5, #1
 8014c02:	429d      	cmp	r5, r3
 8014c04:	dc04      	bgt.n	8014c10 <__ieee754_rem_pio2f+0x1c>
 8014c06:	2300      	movs	r3, #0
 8014c08:	6008      	str	r0, [r1, #0]
 8014c0a:	604b      	str	r3, [r1, #4]
 8014c0c:	2700      	movs	r7, #0
 8014c0e:	e01a      	b.n	8014c46 <__ieee754_rem_pio2f+0x52>
 8014c10:	4b9a      	ldr	r3, [pc, #616]	; (8014e7c <__ieee754_rem_pio2f+0x288>)
 8014c12:	429d      	cmp	r5, r3
 8014c14:	dc4a      	bgt.n	8014cac <__ieee754_rem_pio2f+0xb8>
 8014c16:	230f      	movs	r3, #15
 8014c18:	4e99      	ldr	r6, [pc, #612]	; (8014e80 <__ieee754_rem_pio2f+0x28c>)
 8014c1a:	499a      	ldr	r1, [pc, #616]	; (8014e84 <__ieee754_rem_pio2f+0x290>)
 8014c1c:	439d      	bics	r5, r3
 8014c1e:	2800      	cmp	r0, #0
 8014c20:	dd22      	ble.n	8014c68 <__ieee754_rem_pio2f+0x74>
 8014c22:	f7ec f9e9 	bl	8000ff8 <__aeabi_fsub>
 8014c26:	1c07      	adds	r7, r0, #0
 8014c28:	42b5      	cmp	r5, r6
 8014c2a:	d00f      	beq.n	8014c4c <__ieee754_rem_pio2f+0x58>
 8014c2c:	4996      	ldr	r1, [pc, #600]	; (8014e88 <__ieee754_rem_pio2f+0x294>)
 8014c2e:	f7ec f9e3 	bl	8000ff8 <__aeabi_fsub>
 8014c32:	1c01      	adds	r1, r0, #0
 8014c34:	6020      	str	r0, [r4, #0]
 8014c36:	1c38      	adds	r0, r7, #0
 8014c38:	f7ec f9de 	bl	8000ff8 <__aeabi_fsub>
 8014c3c:	4992      	ldr	r1, [pc, #584]	; (8014e88 <__ieee754_rem_pio2f+0x294>)
 8014c3e:	f7ec f9db 	bl	8000ff8 <__aeabi_fsub>
 8014c42:	2701      	movs	r7, #1
 8014c44:	6060      	str	r0, [r4, #4]
 8014c46:	0038      	movs	r0, r7
 8014c48:	b00b      	add	sp, #44	; 0x2c
 8014c4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014c4c:	498f      	ldr	r1, [pc, #572]	; (8014e8c <__ieee754_rem_pio2f+0x298>)
 8014c4e:	f7ec f9d3 	bl	8000ff8 <__aeabi_fsub>
 8014c52:	498f      	ldr	r1, [pc, #572]	; (8014e90 <__ieee754_rem_pio2f+0x29c>)
 8014c54:	1c05      	adds	r5, r0, #0
 8014c56:	f7ec f9cf 	bl	8000ff8 <__aeabi_fsub>
 8014c5a:	1c01      	adds	r1, r0, #0
 8014c5c:	6020      	str	r0, [r4, #0]
 8014c5e:	1c28      	adds	r0, r5, #0
 8014c60:	f7ec f9ca 	bl	8000ff8 <__aeabi_fsub>
 8014c64:	498a      	ldr	r1, [pc, #552]	; (8014e90 <__ieee754_rem_pio2f+0x29c>)
 8014c66:	e7ea      	b.n	8014c3e <__ieee754_rem_pio2f+0x4a>
 8014c68:	f7eb fd3a 	bl	80006e0 <__aeabi_fadd>
 8014c6c:	1c07      	adds	r7, r0, #0
 8014c6e:	42b5      	cmp	r5, r6
 8014c70:	d00e      	beq.n	8014c90 <__ieee754_rem_pio2f+0x9c>
 8014c72:	4985      	ldr	r1, [pc, #532]	; (8014e88 <__ieee754_rem_pio2f+0x294>)
 8014c74:	f7eb fd34 	bl	80006e0 <__aeabi_fadd>
 8014c78:	1c01      	adds	r1, r0, #0
 8014c7a:	6020      	str	r0, [r4, #0]
 8014c7c:	1c38      	adds	r0, r7, #0
 8014c7e:	f7ec f9bb 	bl	8000ff8 <__aeabi_fsub>
 8014c82:	4981      	ldr	r1, [pc, #516]	; (8014e88 <__ieee754_rem_pio2f+0x294>)
 8014c84:	f7eb fd2c 	bl	80006e0 <__aeabi_fadd>
 8014c88:	2701      	movs	r7, #1
 8014c8a:	6060      	str	r0, [r4, #4]
 8014c8c:	427f      	negs	r7, r7
 8014c8e:	e7da      	b.n	8014c46 <__ieee754_rem_pio2f+0x52>
 8014c90:	497e      	ldr	r1, [pc, #504]	; (8014e8c <__ieee754_rem_pio2f+0x298>)
 8014c92:	f7eb fd25 	bl	80006e0 <__aeabi_fadd>
 8014c96:	497e      	ldr	r1, [pc, #504]	; (8014e90 <__ieee754_rem_pio2f+0x29c>)
 8014c98:	1c05      	adds	r5, r0, #0
 8014c9a:	f7eb fd21 	bl	80006e0 <__aeabi_fadd>
 8014c9e:	1c01      	adds	r1, r0, #0
 8014ca0:	6020      	str	r0, [r4, #0]
 8014ca2:	1c28      	adds	r0, r5, #0
 8014ca4:	f7ec f9a8 	bl	8000ff8 <__aeabi_fsub>
 8014ca8:	4979      	ldr	r1, [pc, #484]	; (8014e90 <__ieee754_rem_pio2f+0x29c>)
 8014caa:	e7eb      	b.n	8014c84 <__ieee754_rem_pio2f+0x90>
 8014cac:	4b79      	ldr	r3, [pc, #484]	; (8014e94 <__ieee754_rem_pio2f+0x2a0>)
 8014cae:	429d      	cmp	r5, r3
 8014cb0:	dd00      	ble.n	8014cb4 <__ieee754_rem_pio2f+0xc0>
 8014cb2:	e091      	b.n	8014dd8 <__ieee754_rem_pio2f+0x1e4>
 8014cb4:	f000 fdfe 	bl	80158b4 <fabsf>
 8014cb8:	4977      	ldr	r1, [pc, #476]	; (8014e98 <__ieee754_rem_pio2f+0x2a4>)
 8014cba:	1c06      	adds	r6, r0, #0
 8014cbc:	f7ec f876 	bl	8000dac <__aeabi_fmul>
 8014cc0:	21fc      	movs	r1, #252	; 0xfc
 8014cc2:	0589      	lsls	r1, r1, #22
 8014cc4:	f7eb fd0c 	bl	80006e0 <__aeabi_fadd>
 8014cc8:	f7ec fb5a 	bl	8001380 <__aeabi_f2iz>
 8014ccc:	0007      	movs	r7, r0
 8014cce:	f7ec fb77 	bl	80013c0 <__aeabi_i2f>
 8014cd2:	496c      	ldr	r1, [pc, #432]	; (8014e84 <__ieee754_rem_pio2f+0x290>)
 8014cd4:	9003      	str	r0, [sp, #12]
 8014cd6:	f7ec f869 	bl	8000dac <__aeabi_fmul>
 8014cda:	1c01      	adds	r1, r0, #0
 8014cdc:	1c30      	adds	r0, r6, #0
 8014cde:	f7ec f98b 	bl	8000ff8 <__aeabi_fsub>
 8014ce2:	4969      	ldr	r1, [pc, #420]	; (8014e88 <__ieee754_rem_pio2f+0x294>)
 8014ce4:	9002      	str	r0, [sp, #8]
 8014ce6:	9803      	ldr	r0, [sp, #12]
 8014ce8:	f7ec f860 	bl	8000dac <__aeabi_fmul>
 8014cec:	1c06      	adds	r6, r0, #0
 8014cee:	2f1f      	cmp	r7, #31
 8014cf0:	dc0d      	bgt.n	8014d0e <__ieee754_rem_pio2f+0x11a>
 8014cf2:	23ff      	movs	r3, #255	; 0xff
 8014cf4:	002a      	movs	r2, r5
 8014cf6:	4969      	ldr	r1, [pc, #420]	; (8014e9c <__ieee754_rem_pio2f+0x2a8>)
 8014cf8:	439a      	bics	r2, r3
 8014cfa:	1e7b      	subs	r3, r7, #1
 8014cfc:	009b      	lsls	r3, r3, #2
 8014cfe:	585b      	ldr	r3, [r3, r1]
 8014d00:	429a      	cmp	r2, r3
 8014d02:	d004      	beq.n	8014d0e <__ieee754_rem_pio2f+0x11a>
 8014d04:	9802      	ldr	r0, [sp, #8]
 8014d06:	1c31      	adds	r1, r6, #0
 8014d08:	f7ec f976 	bl	8000ff8 <__aeabi_fsub>
 8014d0c:	e00c      	b.n	8014d28 <__ieee754_rem_pio2f+0x134>
 8014d0e:	9802      	ldr	r0, [sp, #8]
 8014d10:	1c31      	adds	r1, r6, #0
 8014d12:	f7ec f971 	bl	8000ff8 <__aeabi_fsub>
 8014d16:	22ff      	movs	r2, #255	; 0xff
 8014d18:	15eb      	asrs	r3, r5, #23
 8014d1a:	9304      	str	r3, [sp, #16]
 8014d1c:	0dc3      	lsrs	r3, r0, #23
 8014d1e:	4013      	ands	r3, r2
 8014d20:	9a04      	ldr	r2, [sp, #16]
 8014d22:	1ad3      	subs	r3, r2, r3
 8014d24:	2b08      	cmp	r3, #8
 8014d26:	dc01      	bgt.n	8014d2c <__ieee754_rem_pio2f+0x138>
 8014d28:	6020      	str	r0, [r4, #0]
 8014d2a:	e026      	b.n	8014d7a <__ieee754_rem_pio2f+0x186>
 8014d2c:	4957      	ldr	r1, [pc, #348]	; (8014e8c <__ieee754_rem_pio2f+0x298>)
 8014d2e:	9803      	ldr	r0, [sp, #12]
 8014d30:	f7ec f83c 	bl	8000dac <__aeabi_fmul>
 8014d34:	1c06      	adds	r6, r0, #0
 8014d36:	1c01      	adds	r1, r0, #0
 8014d38:	9802      	ldr	r0, [sp, #8]
 8014d3a:	f7ec f95d 	bl	8000ff8 <__aeabi_fsub>
 8014d3e:	1c01      	adds	r1, r0, #0
 8014d40:	1c05      	adds	r5, r0, #0
 8014d42:	9802      	ldr	r0, [sp, #8]
 8014d44:	f7ec f958 	bl	8000ff8 <__aeabi_fsub>
 8014d48:	1c31      	adds	r1, r6, #0
 8014d4a:	f7ec f955 	bl	8000ff8 <__aeabi_fsub>
 8014d4e:	4950      	ldr	r1, [pc, #320]	; (8014e90 <__ieee754_rem_pio2f+0x29c>)
 8014d50:	1c06      	adds	r6, r0, #0
 8014d52:	9803      	ldr	r0, [sp, #12]
 8014d54:	f7ec f82a 	bl	8000dac <__aeabi_fmul>
 8014d58:	1c31      	adds	r1, r6, #0
 8014d5a:	f7ec f94d 	bl	8000ff8 <__aeabi_fsub>
 8014d5e:	1c01      	adds	r1, r0, #0
 8014d60:	1c06      	adds	r6, r0, #0
 8014d62:	1c28      	adds	r0, r5, #0
 8014d64:	f7ec f948 	bl	8000ff8 <__aeabi_fsub>
 8014d68:	22ff      	movs	r2, #255	; 0xff
 8014d6a:	0dc3      	lsrs	r3, r0, #23
 8014d6c:	4013      	ands	r3, r2
 8014d6e:	9a04      	ldr	r2, [sp, #16]
 8014d70:	1ad3      	subs	r3, r2, r3
 8014d72:	2b19      	cmp	r3, #25
 8014d74:	dc15      	bgt.n	8014da2 <__ieee754_rem_pio2f+0x1ae>
 8014d76:	6020      	str	r0, [r4, #0]
 8014d78:	9502      	str	r5, [sp, #8]
 8014d7a:	6825      	ldr	r5, [r4, #0]
 8014d7c:	9802      	ldr	r0, [sp, #8]
 8014d7e:	1c29      	adds	r1, r5, #0
 8014d80:	f7ec f93a 	bl	8000ff8 <__aeabi_fsub>
 8014d84:	1c31      	adds	r1, r6, #0
 8014d86:	f7ec f937 	bl	8000ff8 <__aeabi_fsub>
 8014d8a:	9b05      	ldr	r3, [sp, #20]
 8014d8c:	6060      	str	r0, [r4, #4]
 8014d8e:	2b00      	cmp	r3, #0
 8014d90:	db00      	blt.n	8014d94 <__ieee754_rem_pio2f+0x1a0>
 8014d92:	e758      	b.n	8014c46 <__ieee754_rem_pio2f+0x52>
 8014d94:	2380      	movs	r3, #128	; 0x80
 8014d96:	061b      	lsls	r3, r3, #24
 8014d98:	18ed      	adds	r5, r5, r3
 8014d9a:	18c0      	adds	r0, r0, r3
 8014d9c:	6025      	str	r5, [r4, #0]
 8014d9e:	6060      	str	r0, [r4, #4]
 8014da0:	e774      	b.n	8014c8c <__ieee754_rem_pio2f+0x98>
 8014da2:	493f      	ldr	r1, [pc, #252]	; (8014ea0 <__ieee754_rem_pio2f+0x2ac>)
 8014da4:	9803      	ldr	r0, [sp, #12]
 8014da6:	f7ec f801 	bl	8000dac <__aeabi_fmul>
 8014daa:	1c06      	adds	r6, r0, #0
 8014dac:	1c01      	adds	r1, r0, #0
 8014dae:	1c28      	adds	r0, r5, #0
 8014db0:	f7ec f922 	bl	8000ff8 <__aeabi_fsub>
 8014db4:	1c01      	adds	r1, r0, #0
 8014db6:	9002      	str	r0, [sp, #8]
 8014db8:	1c28      	adds	r0, r5, #0
 8014dba:	f7ec f91d 	bl	8000ff8 <__aeabi_fsub>
 8014dbe:	1c31      	adds	r1, r6, #0
 8014dc0:	f7ec f91a 	bl	8000ff8 <__aeabi_fsub>
 8014dc4:	4937      	ldr	r1, [pc, #220]	; (8014ea4 <__ieee754_rem_pio2f+0x2b0>)
 8014dc6:	1c05      	adds	r5, r0, #0
 8014dc8:	9803      	ldr	r0, [sp, #12]
 8014dca:	f7eb ffef 	bl	8000dac <__aeabi_fmul>
 8014dce:	1c29      	adds	r1, r5, #0
 8014dd0:	f7ec f912 	bl	8000ff8 <__aeabi_fsub>
 8014dd4:	1c06      	adds	r6, r0, #0
 8014dd6:	e795      	b.n	8014d04 <__ieee754_rem_pio2f+0x110>
 8014dd8:	23ff      	movs	r3, #255	; 0xff
 8014dda:	05db      	lsls	r3, r3, #23
 8014ddc:	429d      	cmp	r5, r3
 8014dde:	db05      	blt.n	8014dec <__ieee754_rem_pio2f+0x1f8>
 8014de0:	1c01      	adds	r1, r0, #0
 8014de2:	f7ec f909 	bl	8000ff8 <__aeabi_fsub>
 8014de6:	6060      	str	r0, [r4, #4]
 8014de8:	6020      	str	r0, [r4, #0]
 8014dea:	e70f      	b.n	8014c0c <__ieee754_rem_pio2f+0x18>
 8014dec:	15ee      	asrs	r6, r5, #23
 8014dee:	3e86      	subs	r6, #134	; 0x86
 8014df0:	05f3      	lsls	r3, r6, #23
 8014df2:	1aed      	subs	r5, r5, r3
 8014df4:	1c28      	adds	r0, r5, #0
 8014df6:	f7ec fac3 	bl	8001380 <__aeabi_f2iz>
 8014dfa:	f7ec fae1 	bl	80013c0 <__aeabi_i2f>
 8014dfe:	1c01      	adds	r1, r0, #0
 8014e00:	9007      	str	r0, [sp, #28]
 8014e02:	1c28      	adds	r0, r5, #0
 8014e04:	f7ec f8f8 	bl	8000ff8 <__aeabi_fsub>
 8014e08:	2187      	movs	r1, #135	; 0x87
 8014e0a:	05c9      	lsls	r1, r1, #23
 8014e0c:	f7eb ffce 	bl	8000dac <__aeabi_fmul>
 8014e10:	1c07      	adds	r7, r0, #0
 8014e12:	f7ec fab5 	bl	8001380 <__aeabi_f2iz>
 8014e16:	f7ec fad3 	bl	80013c0 <__aeabi_i2f>
 8014e1a:	1c01      	adds	r1, r0, #0
 8014e1c:	9008      	str	r0, [sp, #32]
 8014e1e:	1c05      	adds	r5, r0, #0
 8014e20:	1c38      	adds	r0, r7, #0
 8014e22:	f7ec f8e9 	bl	8000ff8 <__aeabi_fsub>
 8014e26:	2187      	movs	r1, #135	; 0x87
 8014e28:	05c9      	lsls	r1, r1, #23
 8014e2a:	f7eb ffbf 	bl	8000dac <__aeabi_fmul>
 8014e2e:	2100      	movs	r1, #0
 8014e30:	9009      	str	r0, [sp, #36]	; 0x24
 8014e32:	f7eb faf5 	bl	8000420 <__aeabi_fcmpeq>
 8014e36:	2303      	movs	r3, #3
 8014e38:	2800      	cmp	r0, #0
 8014e3a:	d006      	beq.n	8014e4a <__ieee754_rem_pio2f+0x256>
 8014e3c:	2100      	movs	r1, #0
 8014e3e:	1c28      	adds	r0, r5, #0
 8014e40:	f7eb faee 	bl	8000420 <__aeabi_fcmpeq>
 8014e44:	4243      	negs	r3, r0
 8014e46:	4143      	adcs	r3, r0
 8014e48:	3301      	adds	r3, #1
 8014e4a:	4a17      	ldr	r2, [pc, #92]	; (8014ea8 <__ieee754_rem_pio2f+0x2b4>)
 8014e4c:	0021      	movs	r1, r4
 8014e4e:	9201      	str	r2, [sp, #4]
 8014e50:	2202      	movs	r2, #2
 8014e52:	a807      	add	r0, sp, #28
 8014e54:	9200      	str	r2, [sp, #0]
 8014e56:	0032      	movs	r2, r6
 8014e58:	f000 f900 	bl	801505c <__kernel_rem_pio2f>
 8014e5c:	9b05      	ldr	r3, [sp, #20]
 8014e5e:	0007      	movs	r7, r0
 8014e60:	2b00      	cmp	r3, #0
 8014e62:	db00      	blt.n	8014e66 <__ieee754_rem_pio2f+0x272>
 8014e64:	e6ef      	b.n	8014c46 <__ieee754_rem_pio2f+0x52>
 8014e66:	2280      	movs	r2, #128	; 0x80
 8014e68:	6823      	ldr	r3, [r4, #0]
 8014e6a:	0612      	lsls	r2, r2, #24
 8014e6c:	189b      	adds	r3, r3, r2
 8014e6e:	6023      	str	r3, [r4, #0]
 8014e70:	6863      	ldr	r3, [r4, #4]
 8014e72:	189b      	adds	r3, r3, r2
 8014e74:	6063      	str	r3, [r4, #4]
 8014e76:	e709      	b.n	8014c8c <__ieee754_rem_pio2f+0x98>
 8014e78:	3f490fd8 	.word	0x3f490fd8
 8014e7c:	4016cbe3 	.word	0x4016cbe3
 8014e80:	3fc90fd0 	.word	0x3fc90fd0
 8014e84:	3fc90f80 	.word	0x3fc90f80
 8014e88:	37354443 	.word	0x37354443
 8014e8c:	37354400 	.word	0x37354400
 8014e90:	2e85a308 	.word	0x2e85a308
 8014e94:	43490f80 	.word	0x43490f80
 8014e98:	3f22f984 	.word	0x3f22f984
 8014e9c:	080163a4 	.word	0x080163a4
 8014ea0:	2e85a300 	.word	0x2e85a300
 8014ea4:	248d3132 	.word	0x248d3132
 8014ea8:	08016424 	.word	0x08016424

08014eac <__ieee754_sqrtf>:
 8014eac:	0042      	lsls	r2, r0, #1
 8014eae:	0003      	movs	r3, r0
 8014eb0:	b570      	push	{r4, r5, r6, lr}
 8014eb2:	1c04      	adds	r4, r0, #0
 8014eb4:	20ff      	movs	r0, #255	; 0xff
 8014eb6:	0852      	lsrs	r2, r2, #1
 8014eb8:	05c0      	lsls	r0, r0, #23
 8014eba:	4282      	cmp	r2, r0
 8014ebc:	d30a      	bcc.n	8014ed4 <__ieee754_sqrtf+0x28>
 8014ebe:	1c21      	adds	r1, r4, #0
 8014ec0:	1c20      	adds	r0, r4, #0
 8014ec2:	f7eb ff73 	bl	8000dac <__aeabi_fmul>
 8014ec6:	1c01      	adds	r1, r0, #0
 8014ec8:	1c20      	adds	r0, r4, #0
 8014eca:	f7eb fc09 	bl	80006e0 <__aeabi_fadd>
 8014ece:	1c04      	adds	r4, r0, #0
 8014ed0:	1c20      	adds	r0, r4, #0
 8014ed2:	bd70      	pop	{r4, r5, r6, pc}
 8014ed4:	2a00      	cmp	r2, #0
 8014ed6:	d0fb      	beq.n	8014ed0 <__ieee754_sqrtf+0x24>
 8014ed8:	2c00      	cmp	r4, #0
 8014eda:	da07      	bge.n	8014eec <__ieee754_sqrtf+0x40>
 8014edc:	1c21      	adds	r1, r4, #0
 8014ede:	1c20      	adds	r0, r4, #0
 8014ee0:	f7ec f88a 	bl	8000ff8 <__aeabi_fsub>
 8014ee4:	1c01      	adds	r1, r0, #0
 8014ee6:	f7eb fd99 	bl	8000a1c <__aeabi_fdiv>
 8014eea:	e7f0      	b.n	8014ece <__ieee754_sqrtf+0x22>
 8014eec:	0022      	movs	r2, r4
 8014eee:	15e1      	asrs	r1, r4, #23
 8014ef0:	4002      	ands	r2, r0
 8014ef2:	4204      	tst	r4, r0
 8014ef4:	d02e      	beq.n	8014f54 <__ieee754_sqrtf+0xa8>
 8014ef6:	2280      	movs	r2, #128	; 0x80
 8014ef8:	000c      	movs	r4, r1
 8014efa:	025b      	lsls	r3, r3, #9
 8014efc:	0a5b      	lsrs	r3, r3, #9
 8014efe:	0412      	lsls	r2, r2, #16
 8014f00:	3c7f      	subs	r4, #127	; 0x7f
 8014f02:	4313      	orrs	r3, r2
 8014f04:	07ca      	lsls	r2, r1, #31
 8014f06:	d400      	bmi.n	8014f0a <__ieee754_sqrtf+0x5e>
 8014f08:	005b      	lsls	r3, r3, #1
 8014f0a:	2200      	movs	r2, #0
 8014f0c:	2180      	movs	r1, #128	; 0x80
 8014f0e:	2019      	movs	r0, #25
 8014f10:	0016      	movs	r6, r2
 8014f12:	1064      	asrs	r4, r4, #1
 8014f14:	005b      	lsls	r3, r3, #1
 8014f16:	0449      	lsls	r1, r1, #17
 8014f18:	1875      	adds	r5, r6, r1
 8014f1a:	429d      	cmp	r5, r3
 8014f1c:	dc02      	bgt.n	8014f24 <__ieee754_sqrtf+0x78>
 8014f1e:	186e      	adds	r6, r5, r1
 8014f20:	1b5b      	subs	r3, r3, r5
 8014f22:	1852      	adds	r2, r2, r1
 8014f24:	3801      	subs	r0, #1
 8014f26:	005b      	lsls	r3, r3, #1
 8014f28:	0849      	lsrs	r1, r1, #1
 8014f2a:	2800      	cmp	r0, #0
 8014f2c:	d1f4      	bne.n	8014f18 <__ieee754_sqrtf+0x6c>
 8014f2e:	2b00      	cmp	r3, #0
 8014f30:	d002      	beq.n	8014f38 <__ieee754_sqrtf+0x8c>
 8014f32:	2301      	movs	r3, #1
 8014f34:	3201      	adds	r2, #1
 8014f36:	439a      	bics	r2, r3
 8014f38:	23fc      	movs	r3, #252	; 0xfc
 8014f3a:	1052      	asrs	r2, r2, #1
 8014f3c:	059b      	lsls	r3, r3, #22
 8014f3e:	18d2      	adds	r2, r2, r3
 8014f40:	05e4      	lsls	r4, r4, #23
 8014f42:	18a4      	adds	r4, r4, r2
 8014f44:	e7c4      	b.n	8014ed0 <__ieee754_sqrtf+0x24>
 8014f46:	005b      	lsls	r3, r3, #1
 8014f48:	3201      	adds	r2, #1
 8014f4a:	4203      	tst	r3, r0
 8014f4c:	d0fb      	beq.n	8014f46 <__ieee754_sqrtf+0x9a>
 8014f4e:	3a01      	subs	r2, #1
 8014f50:	1a89      	subs	r1, r1, r2
 8014f52:	e7d0      	b.n	8014ef6 <__ieee754_sqrtf+0x4a>
 8014f54:	2080      	movs	r0, #128	; 0x80
 8014f56:	0400      	lsls	r0, r0, #16
 8014f58:	e7f7      	b.n	8014f4a <__ieee754_sqrtf+0x9e>
	...

08014f5c <__kernel_cosf>:
 8014f5c:	23c8      	movs	r3, #200	; 0xc8
 8014f5e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8014f60:	0044      	lsls	r4, r0, #1
 8014f62:	1c06      	adds	r6, r0, #0
 8014f64:	9101      	str	r1, [sp, #4]
 8014f66:	0864      	lsrs	r4, r4, #1
 8014f68:	059b      	lsls	r3, r3, #22
 8014f6a:	429c      	cmp	r4, r3
 8014f6c:	da03      	bge.n	8014f76 <__kernel_cosf+0x1a>
 8014f6e:	f7ec fa07 	bl	8001380 <__aeabi_f2iz>
 8014f72:	2800      	cmp	r0, #0
 8014f74:	d05d      	beq.n	8015032 <__kernel_cosf+0xd6>
 8014f76:	1c31      	adds	r1, r6, #0
 8014f78:	1c30      	adds	r0, r6, #0
 8014f7a:	f7eb ff17 	bl	8000dac <__aeabi_fmul>
 8014f7e:	21fc      	movs	r1, #252	; 0xfc
 8014f80:	0589      	lsls	r1, r1, #22
 8014f82:	1c05      	adds	r5, r0, #0
 8014f84:	f7eb ff12 	bl	8000dac <__aeabi_fmul>
 8014f88:	492b      	ldr	r1, [pc, #172]	; (8015038 <__kernel_cosf+0xdc>)
 8014f8a:	1c07      	adds	r7, r0, #0
 8014f8c:	1c28      	adds	r0, r5, #0
 8014f8e:	f7eb ff0d 	bl	8000dac <__aeabi_fmul>
 8014f92:	492a      	ldr	r1, [pc, #168]	; (801503c <__kernel_cosf+0xe0>)
 8014f94:	f7eb fba4 	bl	80006e0 <__aeabi_fadd>
 8014f98:	1c29      	adds	r1, r5, #0
 8014f9a:	f7eb ff07 	bl	8000dac <__aeabi_fmul>
 8014f9e:	4928      	ldr	r1, [pc, #160]	; (8015040 <__kernel_cosf+0xe4>)
 8014fa0:	f7ec f82a 	bl	8000ff8 <__aeabi_fsub>
 8014fa4:	1c29      	adds	r1, r5, #0
 8014fa6:	f7eb ff01 	bl	8000dac <__aeabi_fmul>
 8014faa:	4926      	ldr	r1, [pc, #152]	; (8015044 <__kernel_cosf+0xe8>)
 8014fac:	f7eb fb98 	bl	80006e0 <__aeabi_fadd>
 8014fb0:	1c29      	adds	r1, r5, #0
 8014fb2:	f7eb fefb 	bl	8000dac <__aeabi_fmul>
 8014fb6:	4924      	ldr	r1, [pc, #144]	; (8015048 <__kernel_cosf+0xec>)
 8014fb8:	f7ec f81e 	bl	8000ff8 <__aeabi_fsub>
 8014fbc:	1c29      	adds	r1, r5, #0
 8014fbe:	f7eb fef5 	bl	8000dac <__aeabi_fmul>
 8014fc2:	4922      	ldr	r1, [pc, #136]	; (801504c <__kernel_cosf+0xf0>)
 8014fc4:	f7eb fb8c 	bl	80006e0 <__aeabi_fadd>
 8014fc8:	1c29      	adds	r1, r5, #0
 8014fca:	f7eb feef 	bl	8000dac <__aeabi_fmul>
 8014fce:	1c29      	adds	r1, r5, #0
 8014fd0:	f7eb feec 	bl	8000dac <__aeabi_fmul>
 8014fd4:	9901      	ldr	r1, [sp, #4]
 8014fd6:	1c05      	adds	r5, r0, #0
 8014fd8:	1c30      	adds	r0, r6, #0
 8014fda:	f7eb fee7 	bl	8000dac <__aeabi_fmul>
 8014fde:	1c01      	adds	r1, r0, #0
 8014fe0:	1c28      	adds	r0, r5, #0
 8014fe2:	f7ec f809 	bl	8000ff8 <__aeabi_fsub>
 8014fe6:	4b1a      	ldr	r3, [pc, #104]	; (8015050 <__kernel_cosf+0xf4>)
 8014fe8:	1c05      	adds	r5, r0, #0
 8014fea:	429c      	cmp	r4, r3
 8014fec:	dc09      	bgt.n	8015002 <__kernel_cosf+0xa6>
 8014fee:	1c01      	adds	r1, r0, #0
 8014ff0:	1c38      	adds	r0, r7, #0
 8014ff2:	f7ec f801 	bl	8000ff8 <__aeabi_fsub>
 8014ff6:	1c01      	adds	r1, r0, #0
 8014ff8:	20fe      	movs	r0, #254	; 0xfe
 8014ffa:	0580      	lsls	r0, r0, #22
 8014ffc:	f7eb fffc 	bl	8000ff8 <__aeabi_fsub>
 8015000:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8015002:	4b14      	ldr	r3, [pc, #80]	; (8015054 <__kernel_cosf+0xf8>)
 8015004:	429c      	cmp	r4, r3
 8015006:	dc12      	bgt.n	801502e <__kernel_cosf+0xd2>
 8015008:	23ff      	movs	r3, #255	; 0xff
 801500a:	061b      	lsls	r3, r3, #24
 801500c:	18e4      	adds	r4, r4, r3
 801500e:	20fe      	movs	r0, #254	; 0xfe
 8015010:	1c21      	adds	r1, r4, #0
 8015012:	0580      	lsls	r0, r0, #22
 8015014:	f7eb fff0 	bl	8000ff8 <__aeabi_fsub>
 8015018:	1c21      	adds	r1, r4, #0
 801501a:	1c06      	adds	r6, r0, #0
 801501c:	1c38      	adds	r0, r7, #0
 801501e:	f7eb ffeb 	bl	8000ff8 <__aeabi_fsub>
 8015022:	1c29      	adds	r1, r5, #0
 8015024:	f7eb ffe8 	bl	8000ff8 <__aeabi_fsub>
 8015028:	1c01      	adds	r1, r0, #0
 801502a:	1c30      	adds	r0, r6, #0
 801502c:	e7e6      	b.n	8014ffc <__kernel_cosf+0xa0>
 801502e:	4c0a      	ldr	r4, [pc, #40]	; (8015058 <__kernel_cosf+0xfc>)
 8015030:	e7ed      	b.n	801500e <__kernel_cosf+0xb2>
 8015032:	20fe      	movs	r0, #254	; 0xfe
 8015034:	0580      	lsls	r0, r0, #22
 8015036:	e7e3      	b.n	8015000 <__kernel_cosf+0xa4>
 8015038:	ad47d74e 	.word	0xad47d74e
 801503c:	310f74f6 	.word	0x310f74f6
 8015040:	3493f27c 	.word	0x3493f27c
 8015044:	37d00d01 	.word	0x37d00d01
 8015048:	3ab60b61 	.word	0x3ab60b61
 801504c:	3d2aaaab 	.word	0x3d2aaaab
 8015050:	3e999999 	.word	0x3e999999
 8015054:	3f480000 	.word	0x3f480000
 8015058:	3e900000 	.word	0x3e900000

0801505c <__kernel_rem_pio2f>:
 801505c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801505e:	b0df      	sub	sp, #380	; 0x17c
 8015060:	9308      	str	r3, [sp, #32]
 8015062:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8015064:	9207      	str	r2, [sp, #28]
 8015066:	009a      	lsls	r2, r3, #2
 8015068:	4bc8      	ldr	r3, [pc, #800]	; (801538c <__kernel_rem_pio2f+0x330>)
 801506a:	900a      	str	r0, [sp, #40]	; 0x28
 801506c:	58d3      	ldr	r3, [r2, r3]
 801506e:	9103      	str	r1, [sp, #12]
 8015070:	9305      	str	r3, [sp, #20]
 8015072:	9b08      	ldr	r3, [sp, #32]
 8015074:	3b01      	subs	r3, #1
 8015076:	9306      	str	r3, [sp, #24]
 8015078:	2300      	movs	r3, #0
 801507a:	9302      	str	r3, [sp, #8]
 801507c:	9b07      	ldr	r3, [sp, #28]
 801507e:	3304      	adds	r3, #4
 8015080:	db07      	blt.n	8015092 <__kernel_rem_pio2f+0x36>
 8015082:	2107      	movs	r1, #7
 8015084:	9b07      	ldr	r3, [sp, #28]
 8015086:	1eda      	subs	r2, r3, #3
 8015088:	17d3      	asrs	r3, r2, #31
 801508a:	400b      	ands	r3, r1
 801508c:	189b      	adds	r3, r3, r2
 801508e:	10db      	asrs	r3, r3, #3
 8015090:	9302      	str	r3, [sp, #8]
 8015092:	9b02      	ldr	r3, [sp, #8]
 8015094:	ae22      	add	r6, sp, #136	; 0x88
 8015096:	1c59      	adds	r1, r3, #1
 8015098:	00cb      	lsls	r3, r1, #3
 801509a:	9309      	str	r3, [sp, #36]	; 0x24
 801509c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801509e:	9b07      	ldr	r3, [sp, #28]
 80150a0:	1a9b      	subs	r3, r3, r2
 80150a2:	9301      	str	r3, [sp, #4]
 80150a4:	9a06      	ldr	r2, [sp, #24]
 80150a6:	9b02      	ldr	r3, [sp, #8]
 80150a8:	1a9d      	subs	r5, r3, r2
 80150aa:	002c      	movs	r4, r5
 80150ac:	9b05      	ldr	r3, [sp, #20]
 80150ae:	189f      	adds	r7, r3, r2
 80150b0:	1b63      	subs	r3, r4, r5
 80150b2:	429f      	cmp	r7, r3
 80150b4:	da0d      	bge.n	80150d2 <__kernel_rem_pio2f+0x76>
 80150b6:	9c08      	ldr	r4, [sp, #32]
 80150b8:	af4a      	add	r7, sp, #296	; 0x128
 80150ba:	9b08      	ldr	r3, [sp, #32]
 80150bc:	9a05      	ldr	r2, [sp, #20]
 80150be:	1ae3      	subs	r3, r4, r3
 80150c0:	429a      	cmp	r2, r3
 80150c2:	db25      	blt.n	8015110 <__kernel_rem_pio2f+0xb4>
 80150c4:	ab22      	add	r3, sp, #136	; 0x88
 80150c6:	00a5      	lsls	r5, r4, #2
 80150c8:	18ed      	adds	r5, r5, r3
 80150ca:	2300      	movs	r3, #0
 80150cc:	2600      	movs	r6, #0
 80150ce:	9304      	str	r3, [sp, #16]
 80150d0:	e016      	b.n	8015100 <__kernel_rem_pio2f+0xa4>
 80150d2:	2000      	movs	r0, #0
 80150d4:	2c00      	cmp	r4, #0
 80150d6:	db04      	blt.n	80150e2 <__kernel_rem_pio2f+0x86>
 80150d8:	9a65      	ldr	r2, [sp, #404]	; 0x194
 80150da:	00a3      	lsls	r3, r4, #2
 80150dc:	58d0      	ldr	r0, [r2, r3]
 80150de:	f7ec f96f 	bl	80013c0 <__aeabi_i2f>
 80150e2:	c601      	stmia	r6!, {r0}
 80150e4:	3401      	adds	r4, #1
 80150e6:	e7e3      	b.n	80150b0 <__kernel_rem_pio2f+0x54>
 80150e8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80150ea:	00b3      	lsls	r3, r6, #2
 80150ec:	6829      	ldr	r1, [r5, #0]
 80150ee:	58d0      	ldr	r0, [r2, r3]
 80150f0:	f7eb fe5c 	bl	8000dac <__aeabi_fmul>
 80150f4:	1c01      	adds	r1, r0, #0
 80150f6:	9804      	ldr	r0, [sp, #16]
 80150f8:	f7eb faf2 	bl	80006e0 <__aeabi_fadd>
 80150fc:	3601      	adds	r6, #1
 80150fe:	9004      	str	r0, [sp, #16]
 8015100:	9b06      	ldr	r3, [sp, #24]
 8015102:	3d04      	subs	r5, #4
 8015104:	429e      	cmp	r6, r3
 8015106:	ddef      	ble.n	80150e8 <__kernel_rem_pio2f+0x8c>
 8015108:	9b04      	ldr	r3, [sp, #16]
 801510a:	3401      	adds	r4, #1
 801510c:	c708      	stmia	r7!, {r3}
 801510e:	e7d4      	b.n	80150ba <__kernel_rem_pio2f+0x5e>
 8015110:	9b05      	ldr	r3, [sp, #20]
 8015112:	aa0e      	add	r2, sp, #56	; 0x38
 8015114:	009b      	lsls	r3, r3, #2
 8015116:	189b      	adds	r3, r3, r2
 8015118:	930c      	str	r3, [sp, #48]	; 0x30
 801511a:	9b02      	ldr	r3, [sp, #8]
 801511c:	9a65      	ldr	r2, [sp, #404]	; 0x194
 801511e:	009b      	lsls	r3, r3, #2
 8015120:	18d3      	adds	r3, r2, r3
 8015122:	9e05      	ldr	r6, [sp, #20]
 8015124:	930b      	str	r3, [sp, #44]	; 0x2c
 8015126:	0035      	movs	r5, r6
 8015128:	aa4a      	add	r2, sp, #296	; 0x128
 801512a:	00b3      	lsls	r3, r6, #2
 801512c:	af0e      	add	r7, sp, #56	; 0x38
 801512e:	589c      	ldr	r4, [r3, r2]
 8015130:	9702      	str	r7, [sp, #8]
 8015132:	920d      	str	r2, [sp, #52]	; 0x34
 8015134:	2d00      	cmp	r5, #0
 8015136:	dc64      	bgt.n	8015202 <__kernel_rem_pio2f+0x1a6>
 8015138:	9901      	ldr	r1, [sp, #4]
 801513a:	1c20      	adds	r0, r4, #0
 801513c:	f000 fc00 	bl	8015940 <scalbnf>
 8015140:	21f8      	movs	r1, #248	; 0xf8
 8015142:	0589      	lsls	r1, r1, #22
 8015144:	1c04      	adds	r4, r0, #0
 8015146:	f7eb fe31 	bl	8000dac <__aeabi_fmul>
 801514a:	f000 fbb7 	bl	80158bc <floorf>
 801514e:	2182      	movs	r1, #130	; 0x82
 8015150:	05c9      	lsls	r1, r1, #23
 8015152:	f7eb fe2b 	bl	8000dac <__aeabi_fmul>
 8015156:	1c01      	adds	r1, r0, #0
 8015158:	1c20      	adds	r0, r4, #0
 801515a:	f7eb ff4d 	bl	8000ff8 <__aeabi_fsub>
 801515e:	1c04      	adds	r4, r0, #0
 8015160:	f7ec f90e 	bl	8001380 <__aeabi_f2iz>
 8015164:	9004      	str	r0, [sp, #16]
 8015166:	f7ec f92b 	bl	80013c0 <__aeabi_i2f>
 801516a:	1c01      	adds	r1, r0, #0
 801516c:	1c20      	adds	r0, r4, #0
 801516e:	f7eb ff43 	bl	8000ff8 <__aeabi_fsub>
 8015172:	9b01      	ldr	r3, [sp, #4]
 8015174:	1c04      	adds	r4, r0, #0
 8015176:	2b00      	cmp	r3, #0
 8015178:	dd63      	ble.n	8015242 <__kernel_rem_pio2f+0x1e6>
 801517a:	2108      	movs	r1, #8
 801517c:	1e73      	subs	r3, r6, #1
 801517e:	009b      	lsls	r3, r3, #2
 8015180:	aa0e      	add	r2, sp, #56	; 0x38
 8015182:	589a      	ldr	r2, [r3, r2]
 8015184:	9801      	ldr	r0, [sp, #4]
 8015186:	9d04      	ldr	r5, [sp, #16]
 8015188:	1a09      	subs	r1, r1, r0
 801518a:	0010      	movs	r0, r2
 801518c:	4108      	asrs	r0, r1
 801518e:	182d      	adds	r5, r5, r0
 8015190:	4088      	lsls	r0, r1
 8015192:	a90e      	add	r1, sp, #56	; 0x38
 8015194:	1a12      	subs	r2, r2, r0
 8015196:	505a      	str	r2, [r3, r1]
 8015198:	2307      	movs	r3, #7
 801519a:	9901      	ldr	r1, [sp, #4]
 801519c:	9504      	str	r5, [sp, #16]
 801519e:	1a5b      	subs	r3, r3, r1
 80151a0:	411a      	asrs	r2, r3
 80151a2:	9202      	str	r2, [sp, #8]
 80151a4:	9b02      	ldr	r3, [sp, #8]
 80151a6:	2b00      	cmp	r3, #0
 80151a8:	dd5c      	ble.n	8015264 <__kernel_rem_pio2f+0x208>
 80151aa:	9b04      	ldr	r3, [sp, #16]
 80151ac:	2200      	movs	r2, #0
 80151ae:	3301      	adds	r3, #1
 80151b0:	9304      	str	r3, [sp, #16]
 80151b2:	2301      	movs	r3, #1
 80151b4:	2080      	movs	r0, #128	; 0x80
 80151b6:	0015      	movs	r5, r2
 80151b8:	21ff      	movs	r1, #255	; 0xff
 80151ba:	469c      	mov	ip, r3
 80151bc:	0040      	lsls	r0, r0, #1
 80151be:	4296      	cmp	r6, r2
 80151c0:	dd00      	ble.n	80151c4 <__kernel_rem_pio2f+0x168>
 80151c2:	e080      	b.n	80152c6 <__kernel_rem_pio2f+0x26a>
 80151c4:	9b01      	ldr	r3, [sp, #4]
 80151c6:	2b00      	cmp	r3, #0
 80151c8:	dd05      	ble.n	80151d6 <__kernel_rem_pio2f+0x17a>
 80151ca:	2b01      	cmp	r3, #1
 80151cc:	d100      	bne.n	80151d0 <__kernel_rem_pio2f+0x174>
 80151ce:	e08a      	b.n	80152e6 <__kernel_rem_pio2f+0x28a>
 80151d0:	2b02      	cmp	r3, #2
 80151d2:	d100      	bne.n	80151d6 <__kernel_rem_pio2f+0x17a>
 80151d4:	e092      	b.n	80152fc <__kernel_rem_pio2f+0x2a0>
 80151d6:	9b02      	ldr	r3, [sp, #8]
 80151d8:	2b02      	cmp	r3, #2
 80151da:	d143      	bne.n	8015264 <__kernel_rem_pio2f+0x208>
 80151dc:	20fe      	movs	r0, #254	; 0xfe
 80151de:	1c21      	adds	r1, r4, #0
 80151e0:	0580      	lsls	r0, r0, #22
 80151e2:	f7eb ff09 	bl	8000ff8 <__aeabi_fsub>
 80151e6:	1c04      	adds	r4, r0, #0
 80151e8:	2d00      	cmp	r5, #0
 80151ea:	d03b      	beq.n	8015264 <__kernel_rem_pio2f+0x208>
 80151ec:	20fe      	movs	r0, #254	; 0xfe
 80151ee:	9901      	ldr	r1, [sp, #4]
 80151f0:	0580      	lsls	r0, r0, #22
 80151f2:	f000 fba5 	bl	8015940 <scalbnf>
 80151f6:	1c01      	adds	r1, r0, #0
 80151f8:	1c20      	adds	r0, r4, #0
 80151fa:	f7eb fefd 	bl	8000ff8 <__aeabi_fsub>
 80151fe:	1c04      	adds	r4, r0, #0
 8015200:	e030      	b.n	8015264 <__kernel_rem_pio2f+0x208>
 8015202:	21ee      	movs	r1, #238	; 0xee
 8015204:	1c20      	adds	r0, r4, #0
 8015206:	0589      	lsls	r1, r1, #22
 8015208:	f7eb fdd0 	bl	8000dac <__aeabi_fmul>
 801520c:	f7ec f8b8 	bl	8001380 <__aeabi_f2iz>
 8015210:	f7ec f8d6 	bl	80013c0 <__aeabi_i2f>
 8015214:	2187      	movs	r1, #135	; 0x87
 8015216:	05c9      	lsls	r1, r1, #23
 8015218:	9004      	str	r0, [sp, #16]
 801521a:	f7eb fdc7 	bl	8000dac <__aeabi_fmul>
 801521e:	1c01      	adds	r1, r0, #0
 8015220:	1c20      	adds	r0, r4, #0
 8015222:	f7eb fee9 	bl	8000ff8 <__aeabi_fsub>
 8015226:	f7ec f8ab 	bl	8001380 <__aeabi_f2iz>
 801522a:	9b02      	ldr	r3, [sp, #8]
 801522c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801522e:	c301      	stmia	r3!, {r0}
 8015230:	3d01      	subs	r5, #1
 8015232:	9302      	str	r3, [sp, #8]
 8015234:	00ab      	lsls	r3, r5, #2
 8015236:	5899      	ldr	r1, [r3, r2]
 8015238:	9804      	ldr	r0, [sp, #16]
 801523a:	f7eb fa51 	bl	80006e0 <__aeabi_fadd>
 801523e:	1c04      	adds	r4, r0, #0
 8015240:	e778      	b.n	8015134 <__kernel_rem_pio2f+0xd8>
 8015242:	9b01      	ldr	r3, [sp, #4]
 8015244:	2b00      	cmp	r3, #0
 8015246:	d106      	bne.n	8015256 <__kernel_rem_pio2f+0x1fa>
 8015248:	1e73      	subs	r3, r6, #1
 801524a:	009b      	lsls	r3, r3, #2
 801524c:	aa0e      	add	r2, sp, #56	; 0x38
 801524e:	5898      	ldr	r0, [r3, r2]
 8015250:	11c3      	asrs	r3, r0, #7
 8015252:	9302      	str	r3, [sp, #8]
 8015254:	e7a6      	b.n	80151a4 <__kernel_rem_pio2f+0x148>
 8015256:	21fc      	movs	r1, #252	; 0xfc
 8015258:	0589      	lsls	r1, r1, #22
 801525a:	f7eb f905 	bl	8000468 <__aeabi_fcmpge>
 801525e:	2800      	cmp	r0, #0
 8015260:	d12e      	bne.n	80152c0 <__kernel_rem_pio2f+0x264>
 8015262:	9002      	str	r0, [sp, #8]
 8015264:	2100      	movs	r1, #0
 8015266:	1c20      	adds	r0, r4, #0
 8015268:	f7eb f8da 	bl	8000420 <__aeabi_fcmpeq>
 801526c:	2800      	cmp	r0, #0
 801526e:	d100      	bne.n	8015272 <__kernel_rem_pio2f+0x216>
 8015270:	e08e      	b.n	8015390 <__kernel_rem_pio2f+0x334>
 8015272:	1e77      	subs	r7, r6, #1
 8015274:	003b      	movs	r3, r7
 8015276:	2200      	movs	r2, #0
 8015278:	9905      	ldr	r1, [sp, #20]
 801527a:	428b      	cmp	r3, r1
 801527c:	da45      	bge.n	801530a <__kernel_rem_pio2f+0x2ae>
 801527e:	2a00      	cmp	r2, #0
 8015280:	d05d      	beq.n	801533e <__kernel_rem_pio2f+0x2e2>
 8015282:	9b01      	ldr	r3, [sp, #4]
 8015284:	aa0e      	add	r2, sp, #56	; 0x38
 8015286:	3b08      	subs	r3, #8
 8015288:	9301      	str	r3, [sp, #4]
 801528a:	00bb      	lsls	r3, r7, #2
 801528c:	589b      	ldr	r3, [r3, r2]
 801528e:	2b00      	cmp	r3, #0
 8015290:	d07a      	beq.n	8015388 <__kernel_rem_pio2f+0x32c>
 8015292:	20fe      	movs	r0, #254	; 0xfe
 8015294:	9901      	ldr	r1, [sp, #4]
 8015296:	0580      	lsls	r0, r0, #22
 8015298:	f000 fb52 	bl	8015940 <scalbnf>
 801529c:	003d      	movs	r5, r7
 801529e:	1c04      	adds	r4, r0, #0
 80152a0:	2d00      	cmp	r5, #0
 80152a2:	db00      	blt.n	80152a6 <__kernel_rem_pio2f+0x24a>
 80152a4:	e0ab      	b.n	80153fe <__kernel_rem_pio2f+0x3a2>
 80152a6:	003c      	movs	r4, r7
 80152a8:	2c00      	cmp	r4, #0
 80152aa:	da00      	bge.n	80152ae <__kernel_rem_pio2f+0x252>
 80152ac:	e0d6      	b.n	801545c <__kernel_rem_pio2f+0x400>
 80152ae:	00a3      	lsls	r3, r4, #2
 80152b0:	aa4a      	add	r2, sp, #296	; 0x128
 80152b2:	189b      	adds	r3, r3, r2
 80152b4:	9306      	str	r3, [sp, #24]
 80152b6:	1b3b      	subs	r3, r7, r4
 80152b8:	2600      	movs	r6, #0
 80152ba:	2500      	movs	r5, #0
 80152bc:	9301      	str	r3, [sp, #4]
 80152be:	e0bf      	b.n	8015440 <__kernel_rem_pio2f+0x3e4>
 80152c0:	2302      	movs	r3, #2
 80152c2:	9302      	str	r3, [sp, #8]
 80152c4:	e771      	b.n	80151aa <__kernel_rem_pio2f+0x14e>
 80152c6:	683b      	ldr	r3, [r7, #0]
 80152c8:	2d00      	cmp	r5, #0
 80152ca:	d108      	bne.n	80152de <__kernel_rem_pio2f+0x282>
 80152cc:	2b00      	cmp	r3, #0
 80152ce:	d002      	beq.n	80152d6 <__kernel_rem_pio2f+0x27a>
 80152d0:	1ac3      	subs	r3, r0, r3
 80152d2:	603b      	str	r3, [r7, #0]
 80152d4:	4663      	mov	r3, ip
 80152d6:	001d      	movs	r5, r3
 80152d8:	3201      	adds	r2, #1
 80152da:	3704      	adds	r7, #4
 80152dc:	e76f      	b.n	80151be <__kernel_rem_pio2f+0x162>
 80152de:	1acb      	subs	r3, r1, r3
 80152e0:	603b      	str	r3, [r7, #0]
 80152e2:	002b      	movs	r3, r5
 80152e4:	e7f7      	b.n	80152d6 <__kernel_rem_pio2f+0x27a>
 80152e6:	1e73      	subs	r3, r6, #1
 80152e8:	009b      	lsls	r3, r3, #2
 80152ea:	aa0e      	add	r2, sp, #56	; 0x38
 80152ec:	589a      	ldr	r2, [r3, r2]
 80152ee:	920d      	str	r2, [sp, #52]	; 0x34
 80152f0:	227f      	movs	r2, #127	; 0x7f
 80152f2:	990d      	ldr	r1, [sp, #52]	; 0x34
 80152f4:	400a      	ands	r2, r1
 80152f6:	a90e      	add	r1, sp, #56	; 0x38
 80152f8:	505a      	str	r2, [r3, r1]
 80152fa:	e76c      	b.n	80151d6 <__kernel_rem_pio2f+0x17a>
 80152fc:	1e73      	subs	r3, r6, #1
 80152fe:	009b      	lsls	r3, r3, #2
 8015300:	aa0e      	add	r2, sp, #56	; 0x38
 8015302:	589a      	ldr	r2, [r3, r2]
 8015304:	920d      	str	r2, [sp, #52]	; 0x34
 8015306:	223f      	movs	r2, #63	; 0x3f
 8015308:	e7f3      	b.n	80152f2 <__kernel_rem_pio2f+0x296>
 801530a:	0099      	lsls	r1, r3, #2
 801530c:	a80e      	add	r0, sp, #56	; 0x38
 801530e:	5809      	ldr	r1, [r1, r0]
 8015310:	3b01      	subs	r3, #1
 8015312:	430a      	orrs	r2, r1
 8015314:	e7b0      	b.n	8015278 <__kernel_rem_pio2f+0x21c>
 8015316:	3301      	adds	r3, #1
 8015318:	990c      	ldr	r1, [sp, #48]	; 0x30
 801531a:	009a      	lsls	r2, r3, #2
 801531c:	4252      	negs	r2, r2
 801531e:	588a      	ldr	r2, [r1, r2]
 8015320:	2a00      	cmp	r2, #0
 8015322:	d0f8      	beq.n	8015316 <__kernel_rem_pio2f+0x2ba>
 8015324:	9a08      	ldr	r2, [sp, #32]
 8015326:	18f3      	adds	r3, r6, r3
 8015328:	18b4      	adds	r4, r6, r2
 801532a:	00a4      	lsls	r4, r4, #2
 801532c:	aa22      	add	r2, sp, #136	; 0x88
 801532e:	1c75      	adds	r5, r6, #1
 8015330:	1914      	adds	r4, r2, r4
 8015332:	9302      	str	r3, [sp, #8]
 8015334:	9b02      	ldr	r3, [sp, #8]
 8015336:	42ab      	cmp	r3, r5
 8015338:	da03      	bge.n	8015342 <__kernel_rem_pio2f+0x2e6>
 801533a:	001e      	movs	r6, r3
 801533c:	e6f3      	b.n	8015126 <__kernel_rem_pio2f+0xca>
 801533e:	2301      	movs	r3, #1
 8015340:	e7ea      	b.n	8015318 <__kernel_rem_pio2f+0x2bc>
 8015342:	00ab      	lsls	r3, r5, #2
 8015344:	9304      	str	r3, [sp, #16]
 8015346:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015348:	00aa      	lsls	r2, r5, #2
 801534a:	5898      	ldr	r0, [r3, r2]
 801534c:	f7ec f838 	bl	80013c0 <__aeabi_i2f>
 8015350:	2700      	movs	r7, #0
 8015352:	2600      	movs	r6, #0
 8015354:	6020      	str	r0, [r4, #0]
 8015356:	9b06      	ldr	r3, [sp, #24]
 8015358:	429f      	cmp	r7, r3
 801535a:	dd07      	ble.n	801536c <__kernel_rem_pio2f+0x310>
 801535c:	21f0      	movs	r1, #240	; 0xf0
 801535e:	9a04      	ldr	r2, [sp, #16]
 8015360:	ab0e      	add	r3, sp, #56	; 0x38
 8015362:	185b      	adds	r3, r3, r1
 8015364:	509e      	str	r6, [r3, r2]
 8015366:	3501      	adds	r5, #1
 8015368:	3404      	adds	r4, #4
 801536a:	e7e3      	b.n	8015334 <__kernel_rem_pio2f+0x2d8>
 801536c:	00bb      	lsls	r3, r7, #2
 801536e:	425a      	negs	r2, r3
 8015370:	58a1      	ldr	r1, [r4, r2]
 8015372:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015374:	3701      	adds	r7, #1
 8015376:	58d0      	ldr	r0, [r2, r3]
 8015378:	f7eb fd18 	bl	8000dac <__aeabi_fmul>
 801537c:	1c01      	adds	r1, r0, #0
 801537e:	1c30      	adds	r0, r6, #0
 8015380:	f7eb f9ae 	bl	80006e0 <__aeabi_fadd>
 8015384:	1c06      	adds	r6, r0, #0
 8015386:	e7e6      	b.n	8015356 <__kernel_rem_pio2f+0x2fa>
 8015388:	3f01      	subs	r7, #1
 801538a:	e77a      	b.n	8015282 <__kernel_rem_pio2f+0x226>
 801538c:	08016768 	.word	0x08016768
 8015390:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015392:	9a07      	ldr	r2, [sp, #28]
 8015394:	1c20      	adds	r0, r4, #0
 8015396:	1a99      	subs	r1, r3, r2
 8015398:	f000 fad2 	bl	8015940 <scalbnf>
 801539c:	2187      	movs	r1, #135	; 0x87
 801539e:	05c9      	lsls	r1, r1, #23
 80153a0:	1c04      	adds	r4, r0, #0
 80153a2:	f7eb f861 	bl	8000468 <__aeabi_fcmpge>
 80153a6:	2800      	cmp	r0, #0
 80153a8:	d021      	beq.n	80153ee <__kernel_rem_pio2f+0x392>
 80153aa:	21ee      	movs	r1, #238	; 0xee
 80153ac:	1c20      	adds	r0, r4, #0
 80153ae:	0589      	lsls	r1, r1, #22
 80153b0:	f7eb fcfc 	bl	8000dac <__aeabi_fmul>
 80153b4:	f7eb ffe4 	bl	8001380 <__aeabi_f2iz>
 80153b8:	f7ec f802 	bl	80013c0 <__aeabi_i2f>
 80153bc:	2187      	movs	r1, #135	; 0x87
 80153be:	05c9      	lsls	r1, r1, #23
 80153c0:	1c05      	adds	r5, r0, #0
 80153c2:	f7eb fcf3 	bl	8000dac <__aeabi_fmul>
 80153c6:	1c01      	adds	r1, r0, #0
 80153c8:	1c20      	adds	r0, r4, #0
 80153ca:	f7eb fe15 	bl	8000ff8 <__aeabi_fsub>
 80153ce:	f7eb ffd7 	bl	8001380 <__aeabi_f2iz>
 80153d2:	00b7      	lsls	r7, r6, #2
 80153d4:	ab0e      	add	r3, sp, #56	; 0x38
 80153d6:	51d8      	str	r0, [r3, r7]
 80153d8:	9b01      	ldr	r3, [sp, #4]
 80153da:	1c28      	adds	r0, r5, #0
 80153dc:	3308      	adds	r3, #8
 80153de:	9301      	str	r3, [sp, #4]
 80153e0:	f7eb ffce 	bl	8001380 <__aeabi_f2iz>
 80153e4:	1c77      	adds	r7, r6, #1
 80153e6:	00bc      	lsls	r4, r7, #2
 80153e8:	ab0e      	add	r3, sp, #56	; 0x38
 80153ea:	5118      	str	r0, [r3, r4]
 80153ec:	e751      	b.n	8015292 <__kernel_rem_pio2f+0x236>
 80153ee:	1c20      	adds	r0, r4, #0
 80153f0:	f7eb ffc6 	bl	8001380 <__aeabi_f2iz>
 80153f4:	00b5      	lsls	r5, r6, #2
 80153f6:	ab0e      	add	r3, sp, #56	; 0x38
 80153f8:	0037      	movs	r7, r6
 80153fa:	5158      	str	r0, [r3, r5]
 80153fc:	e749      	b.n	8015292 <__kernel_rem_pio2f+0x236>
 80153fe:	ab0e      	add	r3, sp, #56	; 0x38
 8015400:	00ae      	lsls	r6, r5, #2
 8015402:	58f0      	ldr	r0, [r6, r3]
 8015404:	f7eb ffdc 	bl	80013c0 <__aeabi_i2f>
 8015408:	1c21      	adds	r1, r4, #0
 801540a:	f7eb fccf 	bl	8000dac <__aeabi_fmul>
 801540e:	22f0      	movs	r2, #240	; 0xf0
 8015410:	21ee      	movs	r1, #238	; 0xee
 8015412:	ab0e      	add	r3, sp, #56	; 0x38
 8015414:	189b      	adds	r3, r3, r2
 8015416:	5198      	str	r0, [r3, r6]
 8015418:	0589      	lsls	r1, r1, #22
 801541a:	1c20      	adds	r0, r4, #0
 801541c:	f7eb fcc6 	bl	8000dac <__aeabi_fmul>
 8015420:	3d01      	subs	r5, #1
 8015422:	1c04      	adds	r4, r0, #0
 8015424:	e73c      	b.n	80152a0 <__kernel_rem_pio2f+0x244>
 8015426:	9a06      	ldr	r2, [sp, #24]
 8015428:	00ab      	lsls	r3, r5, #2
 801542a:	58d1      	ldr	r1, [r2, r3]
 801542c:	4a5e      	ldr	r2, [pc, #376]	; (80155a8 <__kernel_rem_pio2f+0x54c>)
 801542e:	3501      	adds	r5, #1
 8015430:	5898      	ldr	r0, [r3, r2]
 8015432:	f7eb fcbb 	bl	8000dac <__aeabi_fmul>
 8015436:	1c01      	adds	r1, r0, #0
 8015438:	1c30      	adds	r0, r6, #0
 801543a:	f7eb f951 	bl	80006e0 <__aeabi_fadd>
 801543e:	1c06      	adds	r6, r0, #0
 8015440:	9b05      	ldr	r3, [sp, #20]
 8015442:	429d      	cmp	r5, r3
 8015444:	dc02      	bgt.n	801544c <__kernel_rem_pio2f+0x3f0>
 8015446:	9b01      	ldr	r3, [sp, #4]
 8015448:	429d      	cmp	r5, r3
 801544a:	ddec      	ble.n	8015426 <__kernel_rem_pio2f+0x3ca>
 801544c:	21a0      	movs	r1, #160	; 0xa0
 801544e:	9b01      	ldr	r3, [sp, #4]
 8015450:	aa0e      	add	r2, sp, #56	; 0x38
 8015452:	009b      	lsls	r3, r3, #2
 8015454:	1852      	adds	r2, r2, r1
 8015456:	50d6      	str	r6, [r2, r3]
 8015458:	3c01      	subs	r4, #1
 801545a:	e725      	b.n	80152a8 <__kernel_rem_pio2f+0x24c>
 801545c:	9b64      	ldr	r3, [sp, #400]	; 0x190
 801545e:	2b02      	cmp	r3, #2
 8015460:	dc08      	bgt.n	8015474 <__kernel_rem_pio2f+0x418>
 8015462:	2b00      	cmp	r3, #0
 8015464:	dc5a      	bgt.n	801551c <__kernel_rem_pio2f+0x4c0>
 8015466:	d035      	beq.n	80154d4 <__kernel_rem_pio2f+0x478>
 8015468:	2007      	movs	r0, #7
 801546a:	9b04      	ldr	r3, [sp, #16]
 801546c:	4003      	ands	r3, r0
 801546e:	0018      	movs	r0, r3
 8015470:	b05f      	add	sp, #380	; 0x17c
 8015472:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015474:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8015476:	2b03      	cmp	r3, #3
 8015478:	d1f6      	bne.n	8015468 <__kernel_rem_pio2f+0x40c>
 801547a:	00bb      	lsls	r3, r7, #2
 801547c:	aa36      	add	r2, sp, #216	; 0xd8
 801547e:	18d5      	adds	r5, r2, r3
 8015480:	002c      	movs	r4, r5
 8015482:	9701      	str	r7, [sp, #4]
 8015484:	9b01      	ldr	r3, [sp, #4]
 8015486:	3c04      	subs	r4, #4
 8015488:	2b00      	cmp	r3, #0
 801548a:	dc51      	bgt.n	8015530 <__kernel_rem_pio2f+0x4d4>
 801548c:	9701      	str	r7, [sp, #4]
 801548e:	9b01      	ldr	r3, [sp, #4]
 8015490:	3d04      	subs	r5, #4
 8015492:	2b01      	cmp	r3, #1
 8015494:	dc62      	bgt.n	801555c <__kernel_rem_pio2f+0x500>
 8015496:	2000      	movs	r0, #0
 8015498:	ac36      	add	r4, sp, #216	; 0xd8
 801549a:	2f01      	cmp	r7, #1
 801549c:	dc73      	bgt.n	8015586 <__kernel_rem_pio2f+0x52a>
 801549e:	9902      	ldr	r1, [sp, #8]
 80154a0:	9a36      	ldr	r2, [sp, #216]	; 0xd8
 80154a2:	6863      	ldr	r3, [r4, #4]
 80154a4:	2900      	cmp	r1, #0
 80154a6:	d174      	bne.n	8015592 <__kernel_rem_pio2f+0x536>
 80154a8:	9903      	ldr	r1, [sp, #12]
 80154aa:	604b      	str	r3, [r1, #4]
 80154ac:	000b      	movs	r3, r1
 80154ae:	600a      	str	r2, [r1, #0]
 80154b0:	6098      	str	r0, [r3, #8]
 80154b2:	e7d9      	b.n	8015468 <__kernel_rem_pio2f+0x40c>
 80154b4:	00bb      	lsls	r3, r7, #2
 80154b6:	5919      	ldr	r1, [r3, r4]
 80154b8:	f7eb f912 	bl	80006e0 <__aeabi_fadd>
 80154bc:	3f01      	subs	r7, #1
 80154be:	2f00      	cmp	r7, #0
 80154c0:	daf8      	bge.n	80154b4 <__kernel_rem_pio2f+0x458>
 80154c2:	9b02      	ldr	r3, [sp, #8]
 80154c4:	2b00      	cmp	r3, #0
 80154c6:	d002      	beq.n	80154ce <__kernel_rem_pio2f+0x472>
 80154c8:	2380      	movs	r3, #128	; 0x80
 80154ca:	061b      	lsls	r3, r3, #24
 80154cc:	18c0      	adds	r0, r0, r3
 80154ce:	9b03      	ldr	r3, [sp, #12]
 80154d0:	6018      	str	r0, [r3, #0]
 80154d2:	e7c9      	b.n	8015468 <__kernel_rem_pio2f+0x40c>
 80154d4:	2000      	movs	r0, #0
 80154d6:	ac36      	add	r4, sp, #216	; 0xd8
 80154d8:	e7f1      	b.n	80154be <__kernel_rem_pio2f+0x462>
 80154da:	00a3      	lsls	r3, r4, #2
 80154dc:	5959      	ldr	r1, [r3, r5]
 80154de:	f7eb f8ff 	bl	80006e0 <__aeabi_fadd>
 80154e2:	3c01      	subs	r4, #1
 80154e4:	2c00      	cmp	r4, #0
 80154e6:	daf8      	bge.n	80154da <__kernel_rem_pio2f+0x47e>
 80154e8:	9a02      	ldr	r2, [sp, #8]
 80154ea:	1c03      	adds	r3, r0, #0
 80154ec:	2a00      	cmp	r2, #0
 80154ee:	d002      	beq.n	80154f6 <__kernel_rem_pio2f+0x49a>
 80154f0:	2380      	movs	r3, #128	; 0x80
 80154f2:	061b      	lsls	r3, r3, #24
 80154f4:	18c3      	adds	r3, r0, r3
 80154f6:	9a03      	ldr	r2, [sp, #12]
 80154f8:	1c01      	adds	r1, r0, #0
 80154fa:	6013      	str	r3, [r2, #0]
 80154fc:	9836      	ldr	r0, [sp, #216]	; 0xd8
 80154fe:	f7eb fd7b 	bl	8000ff8 <__aeabi_fsub>
 8015502:	2401      	movs	r4, #1
 8015504:	ad36      	add	r5, sp, #216	; 0xd8
 8015506:	42a7      	cmp	r7, r4
 8015508:	da0c      	bge.n	8015524 <__kernel_rem_pio2f+0x4c8>
 801550a:	9b02      	ldr	r3, [sp, #8]
 801550c:	2b00      	cmp	r3, #0
 801550e:	d002      	beq.n	8015516 <__kernel_rem_pio2f+0x4ba>
 8015510:	2380      	movs	r3, #128	; 0x80
 8015512:	061b      	lsls	r3, r3, #24
 8015514:	18c0      	adds	r0, r0, r3
 8015516:	9b03      	ldr	r3, [sp, #12]
 8015518:	6058      	str	r0, [r3, #4]
 801551a:	e7a5      	b.n	8015468 <__kernel_rem_pio2f+0x40c>
 801551c:	003c      	movs	r4, r7
 801551e:	2000      	movs	r0, #0
 8015520:	ad36      	add	r5, sp, #216	; 0xd8
 8015522:	e7df      	b.n	80154e4 <__kernel_rem_pio2f+0x488>
 8015524:	00a3      	lsls	r3, r4, #2
 8015526:	5959      	ldr	r1, [r3, r5]
 8015528:	f7eb f8da 	bl	80006e0 <__aeabi_fadd>
 801552c:	3401      	adds	r4, #1
 801552e:	e7ea      	b.n	8015506 <__kernel_rem_pio2f+0x4aa>
 8015530:	9b01      	ldr	r3, [sp, #4]
 8015532:	6826      	ldr	r6, [r4, #0]
 8015534:	3b01      	subs	r3, #1
 8015536:	9301      	str	r3, [sp, #4]
 8015538:	6863      	ldr	r3, [r4, #4]
 801553a:	1c30      	adds	r0, r6, #0
 801553c:	1c19      	adds	r1, r3, #0
 801553e:	9305      	str	r3, [sp, #20]
 8015540:	f7eb f8ce 	bl	80006e0 <__aeabi_fadd>
 8015544:	1c01      	adds	r1, r0, #0
 8015546:	9006      	str	r0, [sp, #24]
 8015548:	1c30      	adds	r0, r6, #0
 801554a:	f7eb fd55 	bl	8000ff8 <__aeabi_fsub>
 801554e:	9905      	ldr	r1, [sp, #20]
 8015550:	f7eb f8c6 	bl	80006e0 <__aeabi_fadd>
 8015554:	9b06      	ldr	r3, [sp, #24]
 8015556:	6060      	str	r0, [r4, #4]
 8015558:	6023      	str	r3, [r4, #0]
 801555a:	e793      	b.n	8015484 <__kernel_rem_pio2f+0x428>
 801555c:	682c      	ldr	r4, [r5, #0]
 801555e:	686e      	ldr	r6, [r5, #4]
 8015560:	9b01      	ldr	r3, [sp, #4]
 8015562:	1c31      	adds	r1, r6, #0
 8015564:	3b01      	subs	r3, #1
 8015566:	1c20      	adds	r0, r4, #0
 8015568:	9301      	str	r3, [sp, #4]
 801556a:	f7eb f8b9 	bl	80006e0 <__aeabi_fadd>
 801556e:	1c01      	adds	r1, r0, #0
 8015570:	9005      	str	r0, [sp, #20]
 8015572:	1c20      	adds	r0, r4, #0
 8015574:	f7eb fd40 	bl	8000ff8 <__aeabi_fsub>
 8015578:	1c31      	adds	r1, r6, #0
 801557a:	f7eb f8b1 	bl	80006e0 <__aeabi_fadd>
 801557e:	9b05      	ldr	r3, [sp, #20]
 8015580:	6068      	str	r0, [r5, #4]
 8015582:	602b      	str	r3, [r5, #0]
 8015584:	e783      	b.n	801548e <__kernel_rem_pio2f+0x432>
 8015586:	00bb      	lsls	r3, r7, #2
 8015588:	58e1      	ldr	r1, [r4, r3]
 801558a:	f7eb f8a9 	bl	80006e0 <__aeabi_fadd>
 801558e:	3f01      	subs	r7, #1
 8015590:	e783      	b.n	801549a <__kernel_rem_pio2f+0x43e>
 8015592:	2180      	movs	r1, #128	; 0x80
 8015594:	9c03      	ldr	r4, [sp, #12]
 8015596:	0609      	lsls	r1, r1, #24
 8015598:	185b      	adds	r3, r3, r1
 801559a:	1852      	adds	r2, r2, r1
 801559c:	6063      	str	r3, [r4, #4]
 801559e:	6022      	str	r2, [r4, #0]
 80155a0:	0023      	movs	r3, r4
 80155a2:	1840      	adds	r0, r0, r1
 80155a4:	e784      	b.n	80154b0 <__kernel_rem_pio2f+0x454>
 80155a6:	46c0      	nop			; (mov r8, r8)
 80155a8:	0801673c 	.word	0x0801673c

080155ac <__kernel_sinf>:
 80155ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80155ae:	9201      	str	r2, [sp, #4]
 80155b0:	22c8      	movs	r2, #200	; 0xc8
 80155b2:	0043      	lsls	r3, r0, #1
 80155b4:	1c04      	adds	r4, r0, #0
 80155b6:	9100      	str	r1, [sp, #0]
 80155b8:	085b      	lsrs	r3, r3, #1
 80155ba:	0592      	lsls	r2, r2, #22
 80155bc:	4293      	cmp	r3, r2
 80155be:	da03      	bge.n	80155c8 <__kernel_sinf+0x1c>
 80155c0:	f7eb fede 	bl	8001380 <__aeabi_f2iz>
 80155c4:	2800      	cmp	r0, #0
 80155c6:	d035      	beq.n	8015634 <__kernel_sinf+0x88>
 80155c8:	1c21      	adds	r1, r4, #0
 80155ca:	1c20      	adds	r0, r4, #0
 80155cc:	f7eb fbee 	bl	8000dac <__aeabi_fmul>
 80155d0:	1c05      	adds	r5, r0, #0
 80155d2:	1c01      	adds	r1, r0, #0
 80155d4:	1c20      	adds	r0, r4, #0
 80155d6:	f7eb fbe9 	bl	8000dac <__aeabi_fmul>
 80155da:	4928      	ldr	r1, [pc, #160]	; (801567c <__kernel_sinf+0xd0>)
 80155dc:	1c06      	adds	r6, r0, #0
 80155de:	1c28      	adds	r0, r5, #0
 80155e0:	f7eb fbe4 	bl	8000dac <__aeabi_fmul>
 80155e4:	4926      	ldr	r1, [pc, #152]	; (8015680 <__kernel_sinf+0xd4>)
 80155e6:	f7eb fd07 	bl	8000ff8 <__aeabi_fsub>
 80155ea:	1c29      	adds	r1, r5, #0
 80155ec:	f7eb fbde 	bl	8000dac <__aeabi_fmul>
 80155f0:	4924      	ldr	r1, [pc, #144]	; (8015684 <__kernel_sinf+0xd8>)
 80155f2:	f7eb f875 	bl	80006e0 <__aeabi_fadd>
 80155f6:	1c29      	adds	r1, r5, #0
 80155f8:	f7eb fbd8 	bl	8000dac <__aeabi_fmul>
 80155fc:	4922      	ldr	r1, [pc, #136]	; (8015688 <__kernel_sinf+0xdc>)
 80155fe:	f7eb fcfb 	bl	8000ff8 <__aeabi_fsub>
 8015602:	1c29      	adds	r1, r5, #0
 8015604:	f7eb fbd2 	bl	8000dac <__aeabi_fmul>
 8015608:	4920      	ldr	r1, [pc, #128]	; (801568c <__kernel_sinf+0xe0>)
 801560a:	f7eb f869 	bl	80006e0 <__aeabi_fadd>
 801560e:	9b01      	ldr	r3, [sp, #4]
 8015610:	1c07      	adds	r7, r0, #0
 8015612:	2b00      	cmp	r3, #0
 8015614:	d110      	bne.n	8015638 <__kernel_sinf+0x8c>
 8015616:	1c01      	adds	r1, r0, #0
 8015618:	1c28      	adds	r0, r5, #0
 801561a:	f7eb fbc7 	bl	8000dac <__aeabi_fmul>
 801561e:	491c      	ldr	r1, [pc, #112]	; (8015690 <__kernel_sinf+0xe4>)
 8015620:	f7eb fcea 	bl	8000ff8 <__aeabi_fsub>
 8015624:	1c31      	adds	r1, r6, #0
 8015626:	f7eb fbc1 	bl	8000dac <__aeabi_fmul>
 801562a:	1c01      	adds	r1, r0, #0
 801562c:	1c20      	adds	r0, r4, #0
 801562e:	f7eb f857 	bl	80006e0 <__aeabi_fadd>
 8015632:	1c04      	adds	r4, r0, #0
 8015634:	1c20      	adds	r0, r4, #0
 8015636:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8015638:	21fc      	movs	r1, #252	; 0xfc
 801563a:	9800      	ldr	r0, [sp, #0]
 801563c:	0589      	lsls	r1, r1, #22
 801563e:	f7eb fbb5 	bl	8000dac <__aeabi_fmul>
 8015642:	1c39      	adds	r1, r7, #0
 8015644:	9001      	str	r0, [sp, #4]
 8015646:	1c30      	adds	r0, r6, #0
 8015648:	f7eb fbb0 	bl	8000dac <__aeabi_fmul>
 801564c:	1c01      	adds	r1, r0, #0
 801564e:	9801      	ldr	r0, [sp, #4]
 8015650:	f7eb fcd2 	bl	8000ff8 <__aeabi_fsub>
 8015654:	1c29      	adds	r1, r5, #0
 8015656:	f7eb fba9 	bl	8000dac <__aeabi_fmul>
 801565a:	9900      	ldr	r1, [sp, #0]
 801565c:	f7eb fccc 	bl	8000ff8 <__aeabi_fsub>
 8015660:	490b      	ldr	r1, [pc, #44]	; (8015690 <__kernel_sinf+0xe4>)
 8015662:	1c05      	adds	r5, r0, #0
 8015664:	1c30      	adds	r0, r6, #0
 8015666:	f7eb fba1 	bl	8000dac <__aeabi_fmul>
 801566a:	1c01      	adds	r1, r0, #0
 801566c:	1c28      	adds	r0, r5, #0
 801566e:	f7eb f837 	bl	80006e0 <__aeabi_fadd>
 8015672:	1c01      	adds	r1, r0, #0
 8015674:	1c20      	adds	r0, r4, #0
 8015676:	f7eb fcbf 	bl	8000ff8 <__aeabi_fsub>
 801567a:	e7da      	b.n	8015632 <__kernel_sinf+0x86>
 801567c:	2f2ec9d3 	.word	0x2f2ec9d3
 8015680:	32d72f34 	.word	0x32d72f34
 8015684:	3638ef1b 	.word	0x3638ef1b
 8015688:	39500d01 	.word	0x39500d01
 801568c:	3c088889 	.word	0x3c088889
 8015690:	3e2aaaab 	.word	0x3e2aaaab

08015694 <atanf>:
 8015694:	23a1      	movs	r3, #161	; 0xa1
 8015696:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8015698:	0045      	lsls	r5, r0, #1
 801569a:	1c04      	adds	r4, r0, #0
 801569c:	9001      	str	r0, [sp, #4]
 801569e:	086d      	lsrs	r5, r5, #1
 80156a0:	05db      	lsls	r3, r3, #23
 80156a2:	429d      	cmp	r5, r3
 80156a4:	db0f      	blt.n	80156c6 <atanf+0x32>
 80156a6:	23ff      	movs	r3, #255	; 0xff
 80156a8:	05db      	lsls	r3, r3, #23
 80156aa:	429d      	cmp	r5, r3
 80156ac:	dd04      	ble.n	80156b8 <atanf+0x24>
 80156ae:	1c01      	adds	r1, r0, #0
 80156b0:	f7eb f816 	bl	80006e0 <__aeabi_fadd>
 80156b4:	1c04      	adds	r4, r0, #0
 80156b6:	e004      	b.n	80156c2 <atanf+0x2e>
 80156b8:	9b01      	ldr	r3, [sp, #4]
 80156ba:	2b00      	cmp	r3, #0
 80156bc:	dd00      	ble.n	80156c0 <atanf+0x2c>
 80156be:	e0cc      	b.n	801585a <atanf+0x1c6>
 80156c0:	4c67      	ldr	r4, [pc, #412]	; (8015860 <atanf+0x1cc>)
 80156c2:	1c20      	adds	r0, r4, #0
 80156c4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80156c6:	4b67      	ldr	r3, [pc, #412]	; (8015864 <atanf+0x1d0>)
 80156c8:	429d      	cmp	r5, r3
 80156ca:	dc0f      	bgt.n	80156ec <atanf+0x58>
 80156cc:	23c4      	movs	r3, #196	; 0xc4
 80156ce:	059b      	lsls	r3, r3, #22
 80156d0:	429d      	cmp	r5, r3
 80156d2:	da08      	bge.n	80156e6 <atanf+0x52>
 80156d4:	4964      	ldr	r1, [pc, #400]	; (8015868 <atanf+0x1d4>)
 80156d6:	f7eb f803 	bl	80006e0 <__aeabi_fadd>
 80156da:	21fe      	movs	r1, #254	; 0xfe
 80156dc:	0589      	lsls	r1, r1, #22
 80156de:	f7ea feb9 	bl	8000454 <__aeabi_fcmpgt>
 80156e2:	2800      	cmp	r0, #0
 80156e4:	d1ed      	bne.n	80156c2 <atanf+0x2e>
 80156e6:	2601      	movs	r6, #1
 80156e8:	4276      	negs	r6, r6
 80156ea:	e01b      	b.n	8015724 <atanf+0x90>
 80156ec:	f000 f8e2 	bl	80158b4 <fabsf>
 80156f0:	4b5e      	ldr	r3, [pc, #376]	; (801586c <atanf+0x1d8>)
 80156f2:	1c04      	adds	r4, r0, #0
 80156f4:	429d      	cmp	r5, r3
 80156f6:	dc7b      	bgt.n	80157f0 <atanf+0x15c>
 80156f8:	4b5d      	ldr	r3, [pc, #372]	; (8015870 <atanf+0x1dc>)
 80156fa:	429d      	cmp	r5, r3
 80156fc:	dc67      	bgt.n	80157ce <atanf+0x13a>
 80156fe:	1c01      	adds	r1, r0, #0
 8015700:	f7ea ffee 	bl	80006e0 <__aeabi_fadd>
 8015704:	21fe      	movs	r1, #254	; 0xfe
 8015706:	0589      	lsls	r1, r1, #22
 8015708:	f7eb fc76 	bl	8000ff8 <__aeabi_fsub>
 801570c:	2180      	movs	r1, #128	; 0x80
 801570e:	1c05      	adds	r5, r0, #0
 8015710:	05c9      	lsls	r1, r1, #23
 8015712:	1c20      	adds	r0, r4, #0
 8015714:	f7ea ffe4 	bl	80006e0 <__aeabi_fadd>
 8015718:	1c01      	adds	r1, r0, #0
 801571a:	1c28      	adds	r0, r5, #0
 801571c:	f7eb f97e 	bl	8000a1c <__aeabi_fdiv>
 8015720:	2600      	movs	r6, #0
 8015722:	1c04      	adds	r4, r0, #0
 8015724:	1c21      	adds	r1, r4, #0
 8015726:	1c20      	adds	r0, r4, #0
 8015728:	f7eb fb40 	bl	8000dac <__aeabi_fmul>
 801572c:	1c01      	adds	r1, r0, #0
 801572e:	1c07      	adds	r7, r0, #0
 8015730:	f7eb fb3c 	bl	8000dac <__aeabi_fmul>
 8015734:	494f      	ldr	r1, [pc, #316]	; (8015874 <atanf+0x1e0>)
 8015736:	1c05      	adds	r5, r0, #0
 8015738:	f7eb fb38 	bl	8000dac <__aeabi_fmul>
 801573c:	494e      	ldr	r1, [pc, #312]	; (8015878 <atanf+0x1e4>)
 801573e:	f7ea ffcf 	bl	80006e0 <__aeabi_fadd>
 8015742:	1c29      	adds	r1, r5, #0
 8015744:	f7eb fb32 	bl	8000dac <__aeabi_fmul>
 8015748:	494c      	ldr	r1, [pc, #304]	; (801587c <atanf+0x1e8>)
 801574a:	f7ea ffc9 	bl	80006e0 <__aeabi_fadd>
 801574e:	1c29      	adds	r1, r5, #0
 8015750:	f7eb fb2c 	bl	8000dac <__aeabi_fmul>
 8015754:	494a      	ldr	r1, [pc, #296]	; (8015880 <atanf+0x1ec>)
 8015756:	f7ea ffc3 	bl	80006e0 <__aeabi_fadd>
 801575a:	1c29      	adds	r1, r5, #0
 801575c:	f7eb fb26 	bl	8000dac <__aeabi_fmul>
 8015760:	4948      	ldr	r1, [pc, #288]	; (8015884 <atanf+0x1f0>)
 8015762:	f7ea ffbd 	bl	80006e0 <__aeabi_fadd>
 8015766:	1c29      	adds	r1, r5, #0
 8015768:	f7eb fb20 	bl	8000dac <__aeabi_fmul>
 801576c:	4946      	ldr	r1, [pc, #280]	; (8015888 <atanf+0x1f4>)
 801576e:	f7ea ffb7 	bl	80006e0 <__aeabi_fadd>
 8015772:	1c39      	adds	r1, r7, #0
 8015774:	f7eb fb1a 	bl	8000dac <__aeabi_fmul>
 8015778:	4944      	ldr	r1, [pc, #272]	; (801588c <atanf+0x1f8>)
 801577a:	1c07      	adds	r7, r0, #0
 801577c:	1c28      	adds	r0, r5, #0
 801577e:	f7eb fb15 	bl	8000dac <__aeabi_fmul>
 8015782:	4943      	ldr	r1, [pc, #268]	; (8015890 <atanf+0x1fc>)
 8015784:	f7eb fc38 	bl	8000ff8 <__aeabi_fsub>
 8015788:	1c29      	adds	r1, r5, #0
 801578a:	f7eb fb0f 	bl	8000dac <__aeabi_fmul>
 801578e:	4941      	ldr	r1, [pc, #260]	; (8015894 <atanf+0x200>)
 8015790:	f7eb fc32 	bl	8000ff8 <__aeabi_fsub>
 8015794:	1c29      	adds	r1, r5, #0
 8015796:	f7eb fb09 	bl	8000dac <__aeabi_fmul>
 801579a:	493f      	ldr	r1, [pc, #252]	; (8015898 <atanf+0x204>)
 801579c:	f7eb fc2c 	bl	8000ff8 <__aeabi_fsub>
 80157a0:	1c29      	adds	r1, r5, #0
 80157a2:	f7eb fb03 	bl	8000dac <__aeabi_fmul>
 80157a6:	493d      	ldr	r1, [pc, #244]	; (801589c <atanf+0x208>)
 80157a8:	f7eb fc26 	bl	8000ff8 <__aeabi_fsub>
 80157ac:	1c29      	adds	r1, r5, #0
 80157ae:	f7eb fafd 	bl	8000dac <__aeabi_fmul>
 80157b2:	1c01      	adds	r1, r0, #0
 80157b4:	1c38      	adds	r0, r7, #0
 80157b6:	f7ea ff93 	bl	80006e0 <__aeabi_fadd>
 80157ba:	1c21      	adds	r1, r4, #0
 80157bc:	f7eb faf6 	bl	8000dac <__aeabi_fmul>
 80157c0:	1c73      	adds	r3, r6, #1
 80157c2:	d134      	bne.n	801582e <atanf+0x19a>
 80157c4:	1c01      	adds	r1, r0, #0
 80157c6:	1c20      	adds	r0, r4, #0
 80157c8:	f7eb fc16 	bl	8000ff8 <__aeabi_fsub>
 80157cc:	e772      	b.n	80156b4 <atanf+0x20>
 80157ce:	21fe      	movs	r1, #254	; 0xfe
 80157d0:	0589      	lsls	r1, r1, #22
 80157d2:	f7eb fc11 	bl	8000ff8 <__aeabi_fsub>
 80157d6:	21fe      	movs	r1, #254	; 0xfe
 80157d8:	1c05      	adds	r5, r0, #0
 80157da:	0589      	lsls	r1, r1, #22
 80157dc:	1c20      	adds	r0, r4, #0
 80157de:	f7ea ff7f 	bl	80006e0 <__aeabi_fadd>
 80157e2:	1c01      	adds	r1, r0, #0
 80157e4:	1c28      	adds	r0, r5, #0
 80157e6:	f7eb f919 	bl	8000a1c <__aeabi_fdiv>
 80157ea:	2601      	movs	r6, #1
 80157ec:	1c04      	adds	r4, r0, #0
 80157ee:	e799      	b.n	8015724 <atanf+0x90>
 80157f0:	4b2b      	ldr	r3, [pc, #172]	; (80158a0 <atanf+0x20c>)
 80157f2:	429d      	cmp	r5, r3
 80157f4:	dc14      	bgt.n	8015820 <atanf+0x18c>
 80157f6:	21ff      	movs	r1, #255	; 0xff
 80157f8:	0589      	lsls	r1, r1, #22
 80157fa:	f7eb fbfd 	bl	8000ff8 <__aeabi_fsub>
 80157fe:	21ff      	movs	r1, #255	; 0xff
 8015800:	1c05      	adds	r5, r0, #0
 8015802:	0589      	lsls	r1, r1, #22
 8015804:	1c20      	adds	r0, r4, #0
 8015806:	f7eb fad1 	bl	8000dac <__aeabi_fmul>
 801580a:	21fe      	movs	r1, #254	; 0xfe
 801580c:	0589      	lsls	r1, r1, #22
 801580e:	f7ea ff67 	bl	80006e0 <__aeabi_fadd>
 8015812:	1c01      	adds	r1, r0, #0
 8015814:	1c28      	adds	r0, r5, #0
 8015816:	f7eb f901 	bl	8000a1c <__aeabi_fdiv>
 801581a:	2602      	movs	r6, #2
 801581c:	1c04      	adds	r4, r0, #0
 801581e:	e781      	b.n	8015724 <atanf+0x90>
 8015820:	1c01      	adds	r1, r0, #0
 8015822:	4820      	ldr	r0, [pc, #128]	; (80158a4 <atanf+0x210>)
 8015824:	f7eb f8fa 	bl	8000a1c <__aeabi_fdiv>
 8015828:	2603      	movs	r6, #3
 801582a:	1c04      	adds	r4, r0, #0
 801582c:	e77a      	b.n	8015724 <atanf+0x90>
 801582e:	4b1e      	ldr	r3, [pc, #120]	; (80158a8 <atanf+0x214>)
 8015830:	00b6      	lsls	r6, r6, #2
 8015832:	58f1      	ldr	r1, [r6, r3]
 8015834:	f7eb fbe0 	bl	8000ff8 <__aeabi_fsub>
 8015838:	1c21      	adds	r1, r4, #0
 801583a:	f7eb fbdd 	bl	8000ff8 <__aeabi_fsub>
 801583e:	4b1b      	ldr	r3, [pc, #108]	; (80158ac <atanf+0x218>)
 8015840:	1c01      	adds	r1, r0, #0
 8015842:	58f0      	ldr	r0, [r6, r3]
 8015844:	f7eb fbd8 	bl	8000ff8 <__aeabi_fsub>
 8015848:	9b01      	ldr	r3, [sp, #4]
 801584a:	1c04      	adds	r4, r0, #0
 801584c:	2b00      	cmp	r3, #0
 801584e:	db00      	blt.n	8015852 <atanf+0x1be>
 8015850:	e737      	b.n	80156c2 <atanf+0x2e>
 8015852:	2380      	movs	r3, #128	; 0x80
 8015854:	061b      	lsls	r3, r3, #24
 8015856:	18c4      	adds	r4, r0, r3
 8015858:	e733      	b.n	80156c2 <atanf+0x2e>
 801585a:	4c15      	ldr	r4, [pc, #84]	; (80158b0 <atanf+0x21c>)
 801585c:	e731      	b.n	80156c2 <atanf+0x2e>
 801585e:	46c0      	nop			; (mov r8, r8)
 8015860:	bfc90fdb 	.word	0xbfc90fdb
 8015864:	3edfffff 	.word	0x3edfffff
 8015868:	7149f2ca 	.word	0x7149f2ca
 801586c:	3f97ffff 	.word	0x3f97ffff
 8015870:	3f2fffff 	.word	0x3f2fffff
 8015874:	3c8569d7 	.word	0x3c8569d7
 8015878:	3d4bda59 	.word	0x3d4bda59
 801587c:	3d886b35 	.word	0x3d886b35
 8015880:	3dba2e6e 	.word	0x3dba2e6e
 8015884:	3e124925 	.word	0x3e124925
 8015888:	3eaaaaab 	.word	0x3eaaaaab
 801588c:	bd15a221 	.word	0xbd15a221
 8015890:	3d6ef16b 	.word	0x3d6ef16b
 8015894:	3d9d8795 	.word	0x3d9d8795
 8015898:	3de38e38 	.word	0x3de38e38
 801589c:	3e4ccccd 	.word	0x3e4ccccd
 80158a0:	401bffff 	.word	0x401bffff
 80158a4:	bf800000 	.word	0xbf800000
 80158a8:	08016784 	.word	0x08016784
 80158ac:	08016774 	.word	0x08016774
 80158b0:	3fc90fdb 	.word	0x3fc90fdb

080158b4 <fabsf>:
 80158b4:	0040      	lsls	r0, r0, #1
 80158b6:	0840      	lsrs	r0, r0, #1
 80158b8:	4770      	bx	lr
	...

080158bc <floorf>:
 80158bc:	b570      	push	{r4, r5, r6, lr}
 80158be:	0045      	lsls	r5, r0, #1
 80158c0:	086e      	lsrs	r6, r5, #1
 80158c2:	0e2d      	lsrs	r5, r5, #24
 80158c4:	3d7f      	subs	r5, #127	; 0x7f
 80158c6:	0004      	movs	r4, r0
 80158c8:	2d16      	cmp	r5, #22
 80158ca:	dc24      	bgt.n	8015916 <floorf+0x5a>
 80158cc:	2d00      	cmp	r5, #0
 80158ce:	da0e      	bge.n	80158ee <floorf+0x32>
 80158d0:	4916      	ldr	r1, [pc, #88]	; (801592c <floorf+0x70>)
 80158d2:	f7ea ff05 	bl	80006e0 <__aeabi_fadd>
 80158d6:	2100      	movs	r1, #0
 80158d8:	f7ea fdbc 	bl	8000454 <__aeabi_fcmpgt>
 80158dc:	2800      	cmp	r0, #0
 80158de:	d004      	beq.n	80158ea <floorf+0x2e>
 80158e0:	2c00      	cmp	r4, #0
 80158e2:	da20      	bge.n	8015926 <floorf+0x6a>
 80158e4:	2e00      	cmp	r6, #0
 80158e6:	d000      	beq.n	80158ea <floorf+0x2e>
 80158e8:	4c11      	ldr	r4, [pc, #68]	; (8015930 <floorf+0x74>)
 80158ea:	1c20      	adds	r0, r4, #0
 80158ec:	e01a      	b.n	8015924 <floorf+0x68>
 80158ee:	4e11      	ldr	r6, [pc, #68]	; (8015934 <floorf+0x78>)
 80158f0:	412e      	asrs	r6, r5
 80158f2:	4206      	tst	r6, r0
 80158f4:	d016      	beq.n	8015924 <floorf+0x68>
 80158f6:	490d      	ldr	r1, [pc, #52]	; (801592c <floorf+0x70>)
 80158f8:	f7ea fef2 	bl	80006e0 <__aeabi_fadd>
 80158fc:	2100      	movs	r1, #0
 80158fe:	f7ea fda9 	bl	8000454 <__aeabi_fcmpgt>
 8015902:	2800      	cmp	r0, #0
 8015904:	d0f1      	beq.n	80158ea <floorf+0x2e>
 8015906:	2c00      	cmp	r4, #0
 8015908:	da03      	bge.n	8015912 <floorf+0x56>
 801590a:	2380      	movs	r3, #128	; 0x80
 801590c:	041b      	lsls	r3, r3, #16
 801590e:	412b      	asrs	r3, r5
 8015910:	18e4      	adds	r4, r4, r3
 8015912:	43b4      	bics	r4, r6
 8015914:	e7e9      	b.n	80158ea <floorf+0x2e>
 8015916:	23ff      	movs	r3, #255	; 0xff
 8015918:	05db      	lsls	r3, r3, #23
 801591a:	429e      	cmp	r6, r3
 801591c:	d302      	bcc.n	8015924 <floorf+0x68>
 801591e:	1c01      	adds	r1, r0, #0
 8015920:	f7ea fede 	bl	80006e0 <__aeabi_fadd>
 8015924:	bd70      	pop	{r4, r5, r6, pc}
 8015926:	2400      	movs	r4, #0
 8015928:	e7df      	b.n	80158ea <floorf+0x2e>
 801592a:	46c0      	nop			; (mov r8, r8)
 801592c:	7149f2ca 	.word	0x7149f2ca
 8015930:	bf800000 	.word	0xbf800000
 8015934:	007fffff 	.word	0x007fffff

08015938 <nanf>:
 8015938:	4800      	ldr	r0, [pc, #0]	; (801593c <nanf+0x4>)
 801593a:	4770      	bx	lr
 801593c:	7fc00000 	.word	0x7fc00000

08015940 <scalbnf>:
 8015940:	0043      	lsls	r3, r0, #1
 8015942:	b570      	push	{r4, r5, r6, lr}
 8015944:	0002      	movs	r2, r0
 8015946:	000c      	movs	r4, r1
 8015948:	085d      	lsrs	r5, r3, #1
 801594a:	2b00      	cmp	r3, #0
 801594c:	d006      	beq.n	801595c <scalbnf+0x1c>
 801594e:	21ff      	movs	r1, #255	; 0xff
 8015950:	05c9      	lsls	r1, r1, #23
 8015952:	428d      	cmp	r5, r1
 8015954:	d303      	bcc.n	801595e <scalbnf+0x1e>
 8015956:	1c01      	adds	r1, r0, #0
 8015958:	f7ea fec2 	bl	80006e0 <__aeabi_fadd>
 801595c:	bd70      	pop	{r4, r5, r6, pc}
 801595e:	4208      	tst	r0, r1
 8015960:	d116      	bne.n	8015990 <scalbnf+0x50>
 8015962:	2198      	movs	r1, #152	; 0x98
 8015964:	05c9      	lsls	r1, r1, #23
 8015966:	f7eb fa21 	bl	8000dac <__aeabi_fmul>
 801596a:	4b1b      	ldr	r3, [pc, #108]	; (80159d8 <scalbnf+0x98>)
 801596c:	429c      	cmp	r4, r3
 801596e:	db29      	blt.n	80159c4 <scalbnf+0x84>
 8015970:	0002      	movs	r2, r0
 8015972:	15c3      	asrs	r3, r0, #23
 8015974:	b2db      	uxtb	r3, r3
 8015976:	3b19      	subs	r3, #25
 8015978:	191b      	adds	r3, r3, r4
 801597a:	2bfe      	cmp	r3, #254	; 0xfe
 801597c:	dd0a      	ble.n	8015994 <scalbnf+0x54>
 801597e:	4b17      	ldr	r3, [pc, #92]	; (80159dc <scalbnf+0x9c>)
 8015980:	2800      	cmp	r0, #0
 8015982:	da00      	bge.n	8015986 <scalbnf+0x46>
 8015984:	4b16      	ldr	r3, [pc, #88]	; (80159e0 <scalbnf+0xa0>)
 8015986:	4915      	ldr	r1, [pc, #84]	; (80159dc <scalbnf+0x9c>)
 8015988:	1c18      	adds	r0, r3, #0
 801598a:	f7eb fa0f 	bl	8000dac <__aeabi_fmul>
 801598e:	e7e5      	b.n	801595c <scalbnf+0x1c>
 8015990:	0e1b      	lsrs	r3, r3, #24
 8015992:	e7f1      	b.n	8015978 <scalbnf+0x38>
 8015994:	2b00      	cmp	r3, #0
 8015996:	dd04      	ble.n	80159a2 <scalbnf+0x62>
 8015998:	4812      	ldr	r0, [pc, #72]	; (80159e4 <scalbnf+0xa4>)
 801599a:	4002      	ands	r2, r0
 801599c:	05d8      	lsls	r0, r3, #23
 801599e:	4310      	orrs	r0, r2
 80159a0:	e7dc      	b.n	801595c <scalbnf+0x1c>
 80159a2:	0019      	movs	r1, r3
 80159a4:	3116      	adds	r1, #22
 80159a6:	da0f      	bge.n	80159c8 <scalbnf+0x88>
 80159a8:	4a0f      	ldr	r2, [pc, #60]	; (80159e8 <scalbnf+0xa8>)
 80159aa:	0fc3      	lsrs	r3, r0, #31
 80159ac:	4294      	cmp	r4, r2
 80159ae:	dd05      	ble.n	80159bc <scalbnf+0x7c>
 80159b0:	480a      	ldr	r0, [pc, #40]	; (80159dc <scalbnf+0x9c>)
 80159b2:	2b00      	cmp	r3, #0
 80159b4:	d000      	beq.n	80159b8 <scalbnf+0x78>
 80159b6:	480a      	ldr	r0, [pc, #40]	; (80159e0 <scalbnf+0xa0>)
 80159b8:	4908      	ldr	r1, [pc, #32]	; (80159dc <scalbnf+0x9c>)
 80159ba:	e7e6      	b.n	801598a <scalbnf+0x4a>
 80159bc:	480b      	ldr	r0, [pc, #44]	; (80159ec <scalbnf+0xac>)
 80159be:	2b00      	cmp	r3, #0
 80159c0:	d000      	beq.n	80159c4 <scalbnf+0x84>
 80159c2:	480b      	ldr	r0, [pc, #44]	; (80159f0 <scalbnf+0xb0>)
 80159c4:	4909      	ldr	r1, [pc, #36]	; (80159ec <scalbnf+0xac>)
 80159c6:	e7e0      	b.n	801598a <scalbnf+0x4a>
 80159c8:	21cc      	movs	r1, #204	; 0xcc
 80159ca:	3319      	adds	r3, #25
 80159cc:	05d8      	lsls	r0, r3, #23
 80159ce:	4b05      	ldr	r3, [pc, #20]	; (80159e4 <scalbnf+0xa4>)
 80159d0:	0589      	lsls	r1, r1, #22
 80159d2:	401a      	ands	r2, r3
 80159d4:	4310      	orrs	r0, r2
 80159d6:	e7d8      	b.n	801598a <scalbnf+0x4a>
 80159d8:	ffff3cb0 	.word	0xffff3cb0
 80159dc:	7149f2ca 	.word	0x7149f2ca
 80159e0:	f149f2ca 	.word	0xf149f2ca
 80159e4:	807fffff 	.word	0x807fffff
 80159e8:	0000c350 	.word	0x0000c350
 80159ec:	0da24260 	.word	0x0da24260
 80159f0:	8da24260 	.word	0x8da24260

080159f4 <_init>:
 80159f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80159f6:	46c0      	nop			; (mov r8, r8)
 80159f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80159fa:	bc08      	pop	{r3}
 80159fc:	469e      	mov	lr, r3
 80159fe:	4770      	bx	lr

08015a00 <_fini>:
 8015a00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015a02:	46c0      	nop			; (mov r8, r8)
 8015a04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015a06:	bc08      	pop	{r3}
 8015a08:	469e      	mov	lr, r3
 8015a0a:	4770      	bx	lr
